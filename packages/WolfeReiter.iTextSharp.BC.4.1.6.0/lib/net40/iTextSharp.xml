<?xml version="1.0"?>
<doc>
    <assembly>
        <name>itextsharp</name>
    </assembly>
    <members>
        <member name="T:iTextSharp.text.xml.simpleparser.ISimpleXMLDocHandler">
            The handler for the events fired by <CODE>SimpleXMLParser</CODE>.
            @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="M:iTextSharp.text.xml.simpleparser.ISimpleXMLDocHandler.StartElement(System.String,System.Collections.Hashtable)">
            Called when a start tag is found.
            @param tag the tag name
            @param h the tag's attributes
        </member>
        <member name="M:iTextSharp.text.xml.simpleparser.ISimpleXMLDocHandler.EndElement(System.String)">
            Called when an end tag is found.
            @param tag the tag name
        </member>
        <member name="M:iTextSharp.text.xml.simpleparser.ISimpleXMLDocHandler.StartDocument">
            Called when the document starts to be parsed.
        </member>
        <member name="M:iTextSharp.text.xml.simpleparser.ISimpleXMLDocHandler.EndDocument">
            Called after the document is parsed.
        </member>
        <member name="M:iTextSharp.text.xml.simpleparser.ISimpleXMLDocHandler.Text(System.String)">
            Called when a text element is found.
            @param str the text element, probably a fragment.
        </member>
        <member name="T:iTextSharp.text.xml.ITextmyHandler">
            <summary>
            The <CODE>iTextmyHandler</CODE>-class maps several XHTML-tags to iText-objects.
            </summary>
        </member>
        <member name="T:iTextSharp.text.xml.ITextHandler">
            <summary>
            The <CODE>iTextHandler</CODE>-class maps several XHTML-tags to iText-objects.
            </summary>
        </member>
        <member name="T:iTextSharp.text.xml.ParserBase">
            <summary>
            The <CODE>ParserBase</CODE>-class provides XML document parsing.
            </summary>
        </member>
        <member name="M:iTextSharp.text.xml.ParserBase.Parse(System.String)">
            <summary>
            Begins the process of processing an XML document
            </summary>
            <param name="url">the XML document to parse</param>
        </member>
        <member name="M:iTextSharp.text.xml.ParserBase.StartElement(System.String,System.String,System.String,System.Collections.Hashtable)">
            <summary>
            This method gets called when a start tag is encountered.
            </summary>
            <param name="uri"></param>
            <param name="lname"></param>
            <param name="name">the name of the tag that is encountered</param>
            <param name="attrs">the list of attributes</param>
        </member>
        <member name="M:iTextSharp.text.xml.ParserBase.EndElement(System.String,System.String,System.String)">
            <summary>
            This method gets called when an end tag is encountered.
            </summary>
            <param name="uri"></param>
            <param name="lname"></param>
            <param name="name">the name of the tag that ends</param>
        </member>
        <member name="M:iTextSharp.text.xml.ParserBase.Characters(System.String,System.Int32,System.Int32)">
            <summary>
            This method gets called when characters are encountered.
            </summary>
            <param name="content">an array of characters</param>
            <param name="start">the start position in the array</param>
            <param name="length">the number of characters to read from the array</param>
        </member>
        <member name="F:iTextSharp.text.xml.ITextHandler.document">
            <summary> This is the resulting document. </summary>
        </member>
        <member name="F:iTextSharp.text.xml.ITextHandler.stack">
            <summary> This is a <CODE>Stack</CODE> of objects, waiting to be added to the document. </summary>
        </member>
        <member name="F:iTextSharp.text.xml.ITextHandler.chapters">
            <summary> Counts the number of chapters in this document. </summary>
        </member>
        <member name="F:iTextSharp.text.xml.ITextHandler.currentChunk">
            <summary> This is the current chunk to which characters can be added. </summary>
        </member>
        <member name="F:iTextSharp.text.xml.ITextHandler.ignore">
            <summary> This is the current chunk to which characters can be added. </summary>
        </member>
        <member name="F:iTextSharp.text.xml.ITextHandler.controlOpenClose">
            <summary> This is a flag that can be set, if you want to open and close the Document-object yourself. </summary>
        </member>
        <member name="F:iTextSharp.text.xml.ITextHandler.topMargin">
            current margin of a page. 
        </member>
        <member name="F:iTextSharp.text.xml.ITextHandler.rightMargin">
            current margin of a page. 
        </member>
        <member name="F:iTextSharp.text.xml.ITextHandler.leftMargin">
            current margin of a page. 
        </member>
        <member name="F:iTextSharp.text.xml.ITextHandler.bottomMargin">
            current margin of a page. 
        </member>
        <member name="M:iTextSharp.text.xml.ITextHandler.#ctor(iTextSharp.text.IDocListener)">
            <summary>
            Constructs a new iTextHandler that will translate all the events
            triggered by the parser to actions on the <CODE>Document</CODE>-object.
            </summary>
            <param name="document">this is the document on which events must be triggered</param>
        </member>
        <member name="M:iTextSharp.text.xml.ITextHandler.#ctor(iTextSharp.text.IDocListener,iTextSharp.text.html.HtmlTagMap)">
            @param document
            @param myTags
            @throws DocumentException
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.xml.ITextHandler.#ctor(iTextSharp.text.IDocListener,iTextSharp.text.html.HtmlTagMap,iTextSharp.text.pdf.BaseFont)">
            @param document
            @param myTags
            @param bf
            @throws DocumentException
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.xml.ITextHandler.#ctor(iTextSharp.text.IDocListener,System.Collections.Hashtable)">
            @param document
            @param myTags
            @throws DocumentException
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.xml.ITextHandler.SetControlOpenClose(System.Boolean)">
            <summary>
            Sets the parameter that allows you to enable/disable the control over the Document.Open() and Document.Close() method.
            </summary>
            <remarks>
            If you set this parameter to true (= default), the parser will open the Document object when the start-root-tag is encountered
            and close it when the end-root-tag is met. If you set it to false, you have to open and close the Document object
            yourself.
            </remarks>
            <param name="controlOpenClose">set this to false if you plan to open/close the Document yourself</param>
        </member>
        <member name="M:iTextSharp.text.xml.ITextHandler.StartElement(System.String,System.String,System.String,System.Collections.Hashtable)">
            <summary>
            This method gets called when a start tag is encountered.
            </summary>
            <param name="uri"></param>
            <param name="lname"></param>
            <param name="name">the name of the tag that is encountered</param>
            <param name="attrs">the list of attributes</param>
        </member>
        <member name="M:iTextSharp.text.xml.ITextHandler.HandleStartingTags(System.String,System.util.Properties)">
            <summary>
            This method deals with the starting tags.
            </summary>
            <param name="name">the name of the tag</param>
            <param name="attributes">the list of attributes</param>
        </member>
        <member name="M:iTextSharp.text.xml.ITextHandler.IgnorableWhitespace(System.Char[],System.Int32,System.Int32)">
            <summary>
            This method gets called when ignorable white space encountered.
            </summary>
            <param name="ch">an array of characters</param>
            <param name="start">the start position in the array</param>
            <param name="length">the number of characters to read from the array</param>
        </member>
        <member name="M:iTextSharp.text.xml.ITextHandler.Characters(System.String,System.Int32,System.Int32)">
            <summary>
            This method gets called when characters are encountered.
            </summary>
            <param name="content">an array of characters</param>
            <param name="start">the start position in the array</param>
            <param name="length">the number of characters to read from the array</param>
        </member>
        <member name="M:iTextSharp.text.xml.ITextHandler.EndElement(System.String,System.String,System.String)">
            <summary>
            This method gets called when an end tag is encountered.
            </summary>
            <param name="uri"></param>
            <param name="lname"></param>
            <param name="name">the name of the tag that ends</param>
        </member>
        <member name="M:iTextSharp.text.xml.ITextHandler.HandleEndingTags(System.String)">
            <summary>
            This method deals with the starting tags.
            </summary>
            <param name="name">the name of the tag</param>
        </member>
        <member name="M:iTextSharp.text.xml.ITextHandler.IsNewpage(System.String)">
            <summary>
            Checks if a certain tag corresponds with the newpage-tag.
            </summary>
            <param name="tag">a presumed tagname</param>
            <returns><CODE>true</CODE> or <CODE>false</CODE></returns>
        </member>
        <member name="M:iTextSharp.text.xml.ITextHandler.IsNewline(System.String)">
            <summary>
            Checks if a certain tag corresponds with the newpage-tag.
            </summary>
            <param name="tag">a presumed tagname</param>
            <returns><CODE>true</CODE> or <CODE>false</CODE></returns>
        </member>
        <member name="M:iTextSharp.text.xml.ITextHandler.IsDocumentRoot(System.String)">
            <summary>
            Checks if a certain tag corresponds with the roottag.
            </summary>
            <param name="tag">a presumed tagname</param>
            <returns><CODE>true</CODE> if <VAR>tag</VAR> equals <CODE>itext</CODE>, <CODE>false</CODE> otherwise.</returns>
        </member>
        <member name="M:iTextSharp.text.xml.ITextmyHandler.#ctor(iTextSharp.text.IDocListener,System.Collections.Hashtable)">
            <summary>
            Constructs a new iTextHandler that will translate all the events
            triggered by the parser to actions on the <CODE>Document</CODE>-object.
            </summary>
            <param name="document">this is the document on which events must be triggered</param>
            <param name="myTags">a map of tags</param>
        </member>
        <member name="M:iTextSharp.text.xml.ITextmyHandler.StartElement(System.String,System.String,System.String,System.Collections.Hashtable)">
            <summary>
            This method gets called when a start tag is encountered.
            </summary>
            <param name="uri"></param>
            <param name="lname"></param>
            <param name="name">the name of the tag that is encountered</param>
            <param name="attrs">the list of attributes</param>
        </member>
        <member name="M:iTextSharp.text.xml.ITextmyHandler.EndElement(System.String,System.String,System.String)">
            <summary>
            This method gets called when an end tag is encountered.
            </summary>
            <param name="uri"></param>
            <param name="lname"></param>
            <param name="name">the name of the tag that ends</param>
        </member>
        <member name="T:iTextSharp.text.rtf.text.RtfTab">
            The RtfTab encapsulates a tab position and tab type in a paragraph.
            To add tabs to a paragraph construct new RtfTab objects with the desired
            tab position and alignment and then add them to the paragraph. In the actual
            text the tabs are then defined as standard \t characters.<br /><br />
            
            <code>RtfTab tab = new RtfTab(300, RtfTab.TAB_LEFT_ALIGN);<br />
            Paragraph para = new Paragraph();<br />
            para.Add(tab);<br />
            para.Add("This paragraph has a\ttab defined.");</code>
            
            @version $Revision: 1.5 $
            @author Mark Hall (Mark.Hall@mail.room3b.eu)
        </member>
        <member name="T:iTextSharp.text.rtf.RtfAddableElement">
            The RtfAddableElement is the superclass for all rtf specific elements
            that need to be added to an iText document. It is an extension of Chunk
            and it also implements RtfBasicElement. It is an abstract class thus it
            cannot be instantiated itself and has to be subclassed to be used.
            
            @version $Revision: 1.6 $
            @author Mark Hall (Mark.Hall@mail.room3b.eu)
        </member>
        <member name="T:iTextSharp.text.Chunk">
            <summary>
            This is the smallest significant part of text that can be added to a document.
            </summary>
            <remarks>
            Most elements can be divided in one or more Chunks.
            A chunk is a string with a certain Font.
            all other layoutparameters should be defined in the object to which
            this chunk of text is added.
            </remarks>
            <example>
            <code>
            <strong>Chunk chunk = new Chunk("Hello world", FontFactory.GetFont(FontFactory.COURIER, 20, Font.ITALIC, new Color(255, 0, 0)));</strong>
            document.Add(chunk);
            </code>
            </example>
        </member>
        <member name="T:iTextSharp.text.IElement">
            <summary>
            Interface for a text element.
            </summary>
            <seealso cref="T:iTextSharp.text.Anchor"/>
            <seealso cref="T:iTextSharp.text.Cell"/>
            <seealso cref="T:iTextSharp.text.Chapter"/>
            <seealso cref="T:iTextSharp.text.Chunk"/>
            <seealso cref="T:iTextSharp.text.Gif"/>
            <seealso cref="T:iTextSharp.text.Graphic"/>
            <seealso cref="T:iTextSharp.text.Header"/>
            <seealso cref="T:iTextSharp.text.Image"/>
            <seealso cref="T:iTextSharp.text.Jpeg"/>
            <seealso cref="T:iTextSharp.text.List"/>
            <seealso cref="T:iTextSharp.text.ListItem"/>
            <seealso cref="T:iTextSharp.text.Meta"/>
            <seealso cref="T:iTextSharp.text.Paragraph"/>
            <seealso cref="T:iTextSharp.text.Phrase"/>
            <seealso cref="T:iTextSharp.text.Rectangle"/>
            <seealso cref="T:iTextSharp.text.Row"/>
            <seealso cref="T:iTextSharp.text.Section"/>
            <seealso cref="T:iTextSharp.text.Table"/>
        </member>
        <member name="M:iTextSharp.text.IElement.Process(iTextSharp.text.IElementListener)">
            <summary>
            Processes the element by adding it (or the different parts) to an
            IElementListener.
            </summary>
            <param name="listener">an IElementListener</param>
            <returns>true if the element was processed successfully</returns>
        </member>
        <member name="M:iTextSharp.text.IElement.IsContent">
            Checks if this element is a content object.
            If not, it's a metadata object.
            @since    iText 2.0.8
            @return   true if this is a 'content' element; false if this is a 'medadata' element
        </member>
        <member name="M:iTextSharp.text.IElement.IsNestable">
            Checks if this element is nestable.
            @since    iText 2.0.8
            @return   true if this element can be nested inside other elements.
        </member>
        <member name="M:iTextSharp.text.IElement.ToString">
            <summary>
            Gets the content of the text element.
            </summary>
            <returns>the content of the text element</returns>
        </member>
        <member name="P:iTextSharp.text.IElement.Type">
            <summary>
            Gets the type of the text element.
            </summary>
            <value>a type</value>
        </member>
        <member name="P:iTextSharp.text.IElement.Chunks">
            <summary>
            Gets all the chunks in this element.
            </summary>
            <value>an ArrayList</value>
        </member>
        <member name="F:iTextSharp.text.Chunk.OBJECT_REPLACEMENT_CHARACTER">
            The character stand in for an image or a separator. 
        </member>
        <member name="F:iTextSharp.text.Chunk.SEPARATOR">
            Key for drawInterface of the Separator.
            @since   2.1.2
        </member>
        <member name="F:iTextSharp.text.Chunk.TAB">
            Key for drawInterface of the tab.
            @since   2.1.2
        </member>
        <member name="F:iTextSharp.text.Chunk.HSCALE">
            Key for text horizontal scaling. 
        </member>
        <member name="F:iTextSharp.text.Chunk.UNDERLINE">
            <summary> Key for underline. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.SUBSUPSCRIPT">
            <summary> Key for sub/basescript. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.SKEW">
            <summary> Key for text skewing. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.BACKGROUND">
            <summary> Key for background. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.TEXTRENDERMODE">
            <summary> Key for text rendering mode.</summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.SPLITCHARACTER">
            <summary> Key for split character. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.HYPHENATION">
            <summary> Key for hyphenation. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.REMOTEGOTO">
            <summary> Key for remote goto. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.LOCALGOTO">
            <summary> Key for local goto. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.LOCALDESTINATION">
            <summary> Key for local destination. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.GENERICTAG">
            <summary> Key for generic tag. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.IMAGE">
            <summary> Key for image. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.ACTION">
            <summary> Key for Action. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.NEWPAGE">
            <summary> Key for newpage. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.PDFANNOTATION">
            <summary> Key for annotation. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.COLOR">
            <summary> Key for color. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.ENCODING">
            <summary> Key for encoding. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.NEWLINE">
            <summary> This is a Chunk containing a newline. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.NEXTPAGE">
            This is a Chunk containing a newpage. 
        </member>
        <member name="F:iTextSharp.text.Chunk.content">
            <summary> This is the content of this chunk of text. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.font">
            <summary> This is the Font of this chunk of text. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.attributes">
            <summary> Contains some of the attributes for this Chunk. </summary>
        </member>
        <member name="M:iTextSharp.text.Chunk.#ctor">
            <summary>
            Empty constructor.
            </summary>
            <overloads>
            Has six overloads.
            </overloads>
        </member>
        <member name="M:iTextSharp.text.Chunk.#ctor(iTextSharp.text.Chunk)">
            A <CODE>Chunk</CODE> copy constructor.
            @param ck the <CODE>Chunk</CODE> to be copied
        </member>
        <member name="M:iTextSharp.text.Chunk.#ctor(System.String,iTextSharp.text.Font)">
            <summary>
            Constructs a chunk of text with a certain content and a certain Font.
            </summary>
            <param name="content">the content</param>
            <param name="font">the font</param>
        </member>
        <member name="M:iTextSharp.text.Chunk.#ctor(System.String)">
            <summary>
            Constructs a chunk of text with a certain content, without specifying a Font.
            </summary>
            <param name="content">the content</param>
        </member>
        <member name="M:iTextSharp.text.Chunk.#ctor(System.Char,iTextSharp.text.Font)">
             Constructs a chunk of text with a char and a certain <CODE>Font</CODE>.
            
             @param    c        the content
             @param    font        the font
        </member>
        <member name="M:iTextSharp.text.Chunk.#ctor(System.Char)">
             Constructs a chunk of text with a char, without specifying a <CODE>Font</CODE>.
            
             @param    c        the content
        </member>
        <member name="M:iTextSharp.text.Chunk.#ctor(iTextSharp.text.Image,System.Single,System.Single)">
            <summary>
            Constructs a chunk containing an Image.
            </summary>
            <param name="image">the image</param>
            <param name="offsetX">the image offset in the x direction</param>
            <param name="offsetY">the image offset in the y direction</param>
        </member>
        <member name="M:iTextSharp.text.Chunk.#ctor(iTextSharp.text.pdf.draw.IDrawInterface)">
            Creates a separator Chunk.
            Note that separator chunks can't be used in combination with tab chunks!
            @param   separator   the drawInterface to use to draw the separator.
            @since   2.1.2
        </member>
        <member name="M:iTextSharp.text.Chunk.#ctor(iTextSharp.text.pdf.draw.IDrawInterface,System.Boolean)">
            Creates a separator Chunk.
            Note that separator chunks can't be used in combination with tab chunks!
            @param   separator   the drawInterface to use to draw the separator.
            @param   vertical    true if this is a vertical separator
            @since   2.1.2
        </member>
        <member name="M:iTextSharp.text.Chunk.#ctor(iTextSharp.text.pdf.draw.IDrawInterface,System.Single)">
            Creates a tab Chunk.
            Note that separator chunks can't be used in combination with tab chunks!
            @param   separator   the drawInterface to use to draw the tab.
            @param   tabPosition an X coordinate that will be used as start position for the next Chunk.
            @since   2.1.2
        </member>
        <member name="M:iTextSharp.text.Chunk.#ctor(iTextSharp.text.pdf.draw.IDrawInterface,System.Single,System.Boolean)">
            Creates a tab Chunk.
            Note that separator chunks can't be used in combination with tab chunks!
            @param   separator   the drawInterface to use to draw the tab.
            @param   tabPosition an X coordinate that will be used as start position for the next Chunk.
            @param   newline     if true, a newline will be added if the tabPosition has already been reached.
            @since   2.1.2
        </member>
        <member name="M:iTextSharp.text.Chunk.#ctor(iTextSharp.text.Image,System.Single,System.Single,System.Boolean)">
            <summary>
            Constructs a chunk containing an Image.
            </summary>
            <param name="image">the image</param>
            <param name="offsetX">the image offset in the x direction</param>
            <param name="offsetY">the image offset in the y direction</param>
            <param name="changeLeading">true if the leading has to be adapted to the image</param>
        </member>
        <member name="M:iTextSharp.text.Chunk.Process(iTextSharp.text.IElementListener)">
            <summary>
            Processes the element by adding it (or the different parts) to an
            IElementListener.
            </summary>
            <param name="listener">an IElementListener</param>
            <returns>true if the element was processed successfully</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.Append(System.String)">
            <summary>
            appends some text to this Chunk.
            </summary>
            <param name="str">a string</param>
            <returns>a StringBuilder</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.IsEmpty">
            <summary>
            Checks is this Chunk is empty.
            </summary>
            <returns>false if the Chunk contains other characters than space.</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.GetWidthPoint">
            Gets the width of the Chunk in points.
            @return a width in points
        </member>
        <member name="M:iTextSharp.text.Chunk.HasAttributes">
            <summary>
            Checks the attributes of this Chunk.
            </summary>
            <returns>false if there aren't any.</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetAttribute(System.String,System.Object)">
            <summary>
            Sets an arbitrary attribute.
            </summary>
            <param name="name">the key for the attribute</param>
            <param name="obj">the value of the attribute</param>
            <returns>this Chunk</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetHorizontalScaling(System.Single)">
            Sets the text horizontal scaling. A value of 1 is normal and a value of 0.5f
            shrinks the text to half it's width.
            @param scale the horizontal scaling factor
            @return this <CODE>Chunk</CODE>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetUnderline(System.Single,System.Single)">
            Sets an horizontal line that can be an underline or a strikethrough.
            Actually, the line can be anywhere vertically and has always the
            <CODE>Chunk</CODE> width. Multiple call to this method will
            produce multiple lines.
            @param thickness the absolute thickness of the line
            @param yPosition the absolute y position relative to the baseline
            @return this <CODE>Chunk</CODE>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetUnderline(iTextSharp.text.Color,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            Sets an horizontal line that can be an underline or a strikethrough.
            Actually, the line can be anywhere vertically and has always the
            <CODE>Chunk</CODE> width. Multiple call to this method will
            produce multiple lines.
            @param color the color of the line or <CODE>null</CODE> to follow
            the text color
            @param thickness the absolute thickness of the line
            @param thicknessMul the thickness multiplication factor with the font size
            @param yPosition the absolute y position relative to the baseline
            @param yPositionMul the position multiplication factor with the font size
            @param cap the end line cap. Allowed values are
            PdfContentByte.LINE_CAP_BUTT, PdfContentByte.LINE_CAP_ROUND and
            PdfContentByte.LINE_CAP_PROJECTING_SQUARE
            @return this <CODE>Chunk</CODE>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetTextRise(System.Single)">
            <summary>
            Sets the text displacement relative to the baseline. Positive values rise the text,
            negative values lower the text.
            </summary>
            <remarks>
            It can be used to implement sub/basescript.
            </remarks>
            <param name="rise">the displacement in points</param>
            <returns>this Chunk</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetSkew(System.Single,System.Single)">
            Skews the text to simulate italic and other effects.
            Try <CODE>alpha=0</CODE> and <CODE>beta=12</CODE>.
            @param alpha the first angle in degrees
            @param beta the second angle in degrees
            @return this <CODE>Chunk</CODE>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetBackground(iTextSharp.text.Color)">
            <summary>
            Sets the color of the background Chunk.
            </summary>
            <param name="color">the color of the background</param>
            <returns>this Chunk</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetBackground(iTextSharp.text.Color,System.Single,System.Single,System.Single,System.Single)">
            Sets the color and the size of the background <CODE>Chunk</CODE>.
            @param color the color of the background
            @param extraLeft increase the size of the rectangle in the left
            @param extraBottom increase the size of the rectangle in the bottom
            @param extraRight increase the size of the rectangle in the right
            @param extraTop increase the size of the rectangle in the top
            @return this <CODE>Chunk</CODE>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetTextRenderMode(System.Int32,System.Single,iTextSharp.text.Color)">
            Sets the text rendering mode. It can outline text, simulate bold and make
            text invisible.
            @param mode the text rendering mode. It can be <CODE>PdfContentByte.TEXT_RENDER_MODE_FILL</CODE>,
            <CODE>PdfContentByte.TEXT_RENDER_MODE_STROKE</CODE>, <CODE>PdfContentByte.TEXT_RENDER_MODE_FILL_STROKE</CODE>
            and <CODE>PdfContentByte.TEXT_RENDER_MODE_INVISIBLE</CODE>.
            @param strokeWidth the stroke line width for the modes <CODE>PdfContentByte.TEXT_RENDER_MODE_STROKE</CODE> and
            <CODE>PdfContentByte.TEXT_RENDER_MODE_FILL_STROKE</CODE>.
            @param strokeColor the stroke color or <CODE>null</CODE> to follow the text color
            @return this <CODE>Chunk</CODE>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetSplitCharacter(iTextSharp.text.ISplitCharacter)">
            <summary>
            Sets the split characters.
            </summary>
            <param name="splitCharacter">the SplitCharacter interface</param>
            <returns>this Chunk</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetHyphenation(iTextSharp.text.pdf.IHyphenationEvent)">
            <summary>
            sets the hyphenation engine to this Chunk.
            </summary>
            <param name="hyphenation">the hyphenation engine</param>
            <returns>this Chunk</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetRemoteGoto(System.String,System.String)">
            <summary>
            Sets a goto for a remote destination for this Chunk.
            </summary>
            <param name="filename">the file name of the destination document</param>
            <param name="name">the name of the destination to go to</param>
            <returns>this Chunk</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetRemoteGoto(System.String,System.Int32)">
            <summary>
            Sets a goto for a remote destination for this Chunk.
            </summary>
            <param name="filename">the file name of the destination document</param>
            <param name="page">the page of the destination to go to. First page is 1</param>
            <returns>this Chunk</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetLocalGoto(System.String)">
            <summary>
            Sets a local goto for this Chunk.
            </summary>
            <remarks>
            There must be a local destination matching the name.
            </remarks>
            <param name="name">the name of the destination to go to</param>
            <returns>this Chunk</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetLocalDestination(System.String)">
            <summary>
            Sets a local destination for this Chunk.
            </summary>
            <param name="name">the name for this destination</param>
            <returns>this Chunk</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetGenericTag(System.String)">
            <summary>
            Sets the generic tag Chunk.
            </summary>
            <remarks>
            The text for this tag can be retrieved with PdfPageEvent.
            </remarks>
            <param name="text">the text for the tag</param>
            <returns>this Chunk</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.GetImage">
            <summary>
            Returns the image.
            </summary>
            <value>an Image</value>
        </member>
        <member name="M:iTextSharp.text.Chunk.IsTag(System.String)">
            <summary>
            Checks if a given tag corresponds with this object.
            </summary>
            <param name="tag">the given tag</param>
            <returns>true if the tag corresponds</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetAction(iTextSharp.text.pdf.PdfAction)">
            <summary>
            Sets an action for this Chunk.
            </summary>
            <param name="action">the action</param>
            <returns>this Chunk</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetAnchor(System.Uri)">
            <summary>
            Sets an anchor for this Chunk.
            </summary>
            <param name="url">the Uri to link to</param>
            <returns>this Chunk</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetAnchor(System.String)">
            <summary>
            Sets an anchor for this Chunk.
            </summary>
            <param name="url">the url to link to</param>
            <returns>this Chunk</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetNewPage">
            <summary>
            Sets a new page tag.
            </summary>
            <returns>this Chunk</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetAnnotation(iTextSharp.text.pdf.PdfAnnotation)">
            <summary>
            Sets a generic annotation to this Chunk.
            </summary>
            <param name="annotation">the annotation</param>
            <returns>this Chunk</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.IsContent">
            @see com.lowagie.text.Element#isContent()
            @since   iText 2.0.8
        </member>
        <member name="M:iTextSharp.text.Chunk.IsNestable">
            @see com.lowagie.text.Element#isNestable()
            @since   iText 2.0.8
        </member>
        <member name="M:iTextSharp.text.Chunk.GetHyphenation">
            Returns the hyphenation (if present).
            @param    hyphenation a HyphenationEvent instance
            @since    2.1.2
        </member>
        <member name="P:iTextSharp.text.Chunk.Type">
            <summary>
            Gets the type of the text element.
            </summary>
            <value>a type</value>
        </member>
        <member name="P:iTextSharp.text.Chunk.Chunks">
            <summary>
            Gets all the chunks in this element.
            </summary>
            <value>an ArrayList</value>
        </member>
        <member name="P:iTextSharp.text.Chunk.Font">
            <summary>
            Get/set the font of this Chunk.
            </summary>
            <value>a Font</value>
        </member>
        <member name="P:iTextSharp.text.Chunk.Content">
            <summary>
            Returns the content of this Chunk.
            </summary>
            <value>a string</value>
        </member>
        <member name="P:iTextSharp.text.Chunk.Attributes">
            <summary>
            Gets the attributes for this Chunk.
            </summary>
            <remarks>
            It may be null.
            </remarks>
            <value>a Hashtable</value>
        </member>
        <member name="P:iTextSharp.text.Chunk.HorizontalScaling">
            Gets the horizontal scaling.
            @return a percentage in float
        </member>
        <member name="T:iTextSharp.text.IRtfElementInterface">
            The RTF jar depends on the iText jar, but the iText jar may not
            depend on the RTF jar. This interface offers a temporary solution
            until we find a more elegant way to solve this.
        </member>
        <member name="M:iTextSharp.text.rtf.IRtfBasicElement.WriteContent(System.IO.Stream)">
            Writes the element content to the given output stream.
            
            @param out The <code>OutputStream</code> to write the content to
        </member>
        <member name="M:iTextSharp.text.rtf.IRtfBasicElement.SetRtfDocument(iTextSharp.text.rtf.document.RtfDocument)">
            Sets the RtfDocument this RtfElement belongs to
            
            @param doc The @link{com.lowagie.text.rtf.document.RtfDocument} this <code>RtfElement</code> belongs to
        </member>
        <member name="M:iTextSharp.text.rtf.IRtfBasicElement.SetInTable(System.Boolean)">
            Sets whether this IRtfBasicElement is in a table
            
            @param inTable Whether this IRtfBasicElement is in a table
        </member>
        <member name="M:iTextSharp.text.rtf.IRtfBasicElement.SetInHeader(System.Boolean)">
            Sets whether this IRtfBasicElement is in a header
            
            @param inHeader Whether this IRtfBasicElement is in a header
        </member>
        <member name="F:iTextSharp.text.rtf.RtfAddableElement.doc">
            The RtfDocument this RtfAddableElement belongs to.
        </member>
        <member name="F:iTextSharp.text.rtf.RtfAddableElement.inTable">
            Whether this RtfAddableElement is contained in a table.
        </member>
        <member name="F:iTextSharp.text.rtf.RtfAddableElement.inHeader">
            Whether this RtfAddableElement is contained in a header.
        </member>
        <member name="M:iTextSharp.text.rtf.RtfAddableElement.#ctor">
            Constructs a new RtfAddableElement. The Chunk content is
            set to an empty string and the font to the default Font().
        </member>
        <member name="M:iTextSharp.text.rtf.RtfAddableElement.WriteContent(System.IO.Stream)">
            Writes the element content to the given output stream.
        </member>
        <member name="M:iTextSharp.text.rtf.RtfAddableElement.SetRtfDocument(iTextSharp.text.rtf.document.RtfDocument)">
            Sets the RtfDocument this RtfAddableElement belongs to.
        </member>
        <member name="M:iTextSharp.text.rtf.RtfAddableElement.SetInTable(System.Boolean)">
            Sets whether this RtfAddableElement is contained in a table.
        </member>
        <member name="M:iTextSharp.text.rtf.RtfAddableElement.SetInHeader(System.Boolean)">
            Sets whether this RtfAddableElement is contained in a header/footer.
        </member>
        <member name="M:iTextSharp.text.rtf.RtfAddableElement.IntToByteArray(System.Int32)">
             Transforms an integer into its String representation and then returns the bytes
             of that string.
            
             @param i The integer to convert
             @return A byte array representing the integer
        </member>
        <member name="M:iTextSharp.text.rtf.RtfAddableElement.IsEmpty">
            RtfAddableElement subclasses are never assumed to be empty.
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfTab.TAB_LEFT_ALIGN">
            A tab where the text is left aligned.
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfTab.TAB_CENTER_ALIGN">
            A tab where the text is centre aligned.
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfTab.TAB_RIGHT_ALIGN">
            A tab where the text is right aligned.
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfTab.TAB_DECIMAL_ALIGN">
            A tab where the text is aligned on the decimal character. Which
            character that is depends on the language settings of the viewer.
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfTab.position">
            The tab position in twips.
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfTab.type">
            The tab alignment.
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfTab.#ctor(System.Single,System.Int32)">
            Constructs a new RtfTab with the given position and type. The position
            is in standard iText points. The type is one of the tab alignment
            constants defined in the RtfTab.
            
            @param position The position of the tab in points.
            @param type The tab type constant.
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfTab.WriteContent(System.IO.Stream)">
            Writes the tab settings.
        </member>
        <member name="T:iTextSharp.text.rtf.text.RtfChapter">
            The RtfChapter wraps a Chapter element.
            INTERNAL CLASS
            
            @version $Version:$
            @author Mark Hall (Mark.Hall@mail.room3b.eu)
        </member>
        <member name="T:iTextSharp.text.rtf.text.RtfSection">
            The RtfSection wraps a Section element.
            INTERNAL CLASS
            
            @version $Version:$
            @author Mark Hall (Mark.Hall@mail.room3b.eu)
        </member>
        <member name="T:iTextSharp.text.rtf.RtfElement">
             RtfElement is the base class for all RTF Element classes
            
             Version: $Id: RtfElement.cs,v 1.5 2008/05/16 19:30:14 psoares33 Exp $
             @author Mark Hall (Mark.Hall@mail.room3b.eu)
        </member>
        <member name="F:iTextSharp.text.rtf.RtfElement.TWIPS_FACTOR">
            The factor to use for translating from iText to rtf measurments
        </member>
        <member name="F:iTextSharp.text.rtf.RtfElement.OPEN_GROUP">
            Constant for the beginning of a rtf group
        </member>
        <member name="F:iTextSharp.text.rtf.RtfElement.CLOSE_GROUP">
            Constant for the end of an rtf group
        </member>
        <member name="F:iTextSharp.text.rtf.RtfElement.DELIMITER">
            Constant for a delimiter in rtf
        </member>
        <member name="F:iTextSharp.text.rtf.RtfElement.COMMA_DELIMITER">
            Constant for a comma delimiter in rtf
        </member>
        <member name="F:iTextSharp.text.rtf.RtfElement.document">
            The RtfDocument this RtfElement belongs to
        </member>
        <member name="F:iTextSharp.text.rtf.RtfElement.inTable">
            Whether this RtfElement is in a table
        </member>
        <member name="F:iTextSharp.text.rtf.RtfElement.inHeader">
            Whether this RtfElement is in a header
        </member>
        <member name="M:iTextSharp.text.rtf.RtfElement.#ctor(iTextSharp.text.rtf.document.RtfDocument)">
            Constructs a RtfElement belonging to the specified RtfDocument.
            
            @param doc The RtfDocument this RtfElement belongs to
        </member>
        <member name="M:iTextSharp.text.rtf.RtfElement.IntToByteArray(System.Int32)">
             Transforms an integer into its String representation and then returns the bytes
             of that string.
            
             @param i The integer to convert
             @return A byte array representing the integer
        </member>
        <member name="M:iTextSharp.text.rtf.RtfElement.WriteContent(System.IO.Stream)">
            Writes the element content to the given output stream.
        </member>
        <member name="M:iTextSharp.text.rtf.RtfElement.SetRtfDocument(iTextSharp.text.rtf.document.RtfDocument)">
            Sets the RtfDocument this RtfElement belongs to
            
            @param doc The RtfDocument to use
        </member>
        <member name="M:iTextSharp.text.rtf.RtfElement.IsInTable">
            Gets whether this RtfElement is in a table
            
            @return Whether this RtfElement is in a table
        </member>
        <member name="M:iTextSharp.text.rtf.RtfElement.SetInTable(System.Boolean)">
            Sets whether this RtfElement is in a table
            
            @param inTable <code>True</code> if this RtfElement is in a table, <code>false</code> otherwise
        </member>
        <member name="M:iTextSharp.text.rtf.RtfElement.SetInHeader(System.Boolean)">
            Sets whether this RtfElement is in a header
            
            @param inHeader <code>True</code> if this RtfElement is in a header, <code>false</code> otherwise
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfSection.title">
            The title paragraph of this RtfSection
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfSection.items">
            The sub-items of this RtfSection
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfSection.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.Section)">
            Constructs a RtfSection for a given Section. If the autogenerateTOCEntries
            property of the RtfDocument is set and the title is not empty then a TOC entry
            is generated for the title.
             
            @param doc The RtfDocument this RtfSection belongs to
            @param section The Section this RtfSection is based on
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfSection.WriteContent(System.IO.Stream)">
            Write this RtfSection and its contents
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfSection.SetInTable(System.Boolean)">
            Sets whether this RtfSection is in a table. Sets the correct inTable setting for all
            child elements.
            
            @param inTable <code>True</code> if this RtfSection is in a table, <code>false</code> otherwise
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfSection.SetInHeader(System.Boolean)">
            Sets whether this RtfSection is in a header. Sets the correct inTable setting for all
            child elements.
            
            @param inHeader <code>True</code> if this RtfSection is in a header, <code>false</code> otherwise
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfSection.UpdateIndentation(System.Single,System.Single,System.Single)">
            Updates the left, right and content indentation of all RtfParagraph and RtfSection
            elements that this RtfSection contains.
            
            @param indentLeft The left indentation to add.
            @param indentRight The right indentation to add.
            @param indentContent The content indentation to add.
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfChapter.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.Chapter)">
            Constructs a RtfChapter for a given Chapter
            
            @param doc The RtfDocument this RtfChapter belongs to
            @param chapter The Chapter this RtfChapter is based on
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfChapter.WriteContent(System.IO.Stream)">
            Writes the RtfChapter and its contents
        </member>
        <member name="T:iTextSharp.text.rtf.style.RtfParagraphStyle">
            The RtfParagraphStyle stores all style/formatting attributes of a RtfParagraph.
            Additionally it also supports the style name system available in RTF. The RtfParagraphStyle
            is a Font and can thus be used as such. To use the stylesheet functionality
            it needs to be set as the font of a Paragraph. Otherwise it will work like a
            RtfFont. It also supports inheritance of styles.
            
            @version $Revision: 1.8 $
            @author Mark Hall (Mark.Hall@mail.room3b.eu)
        </member>
        <member name="T:iTextSharp.text.rtf.style.RtfFont">
             The RtfFont class stores one font for an rtf document. It extends Font,
             so can be set as a font, to allow adding of fonts with arbitrary names.
             BaseFont fontname handling contributed by Craig Fleming. Various fixes
             Renaud Michel, Werner Daehn.
            
             Version: $Id: RtfFont.cs,v 1.13 2008/05/16 19:31:11 psoares33 Exp $
             @author Mark Hall (Mark.Hall@mail.room3b.eu)
             @author Craig Fleming (rythos@rhana.dhs.org)
             @author Renaud Michel (r.michel@immedia.be)
             @author Werner Daehn (Werner.Daehn@BusinessObjects.com)
             @author Lidong Liu (tmslld@gmail.com)
        </member>
        <member name="T:iTextSharp.text.Font">
            <summary>
            Contains all the specifications of a font: fontfamily, size, style and color.
            </summary>
            <example>
            <code>
            Paragraph p = new Paragraph("This is a paragraph",
                          <strong>new Font(Font.HELVETICA, 18, Font.BOLDITALIC, new Color(0, 0, 255))</strong>);
            </code>
            </example>
        </member>
        <member name="F:iTextSharp.text.Font.COURIER">
            <summary> a possible value of a font family. </summary>
        </member>
        <member name="F:iTextSharp.text.Font.HELVETICA">
            <summary> a possible value of a font family. </summary>
        </member>
        <member name="F:iTextSharp.text.Font.TIMES_ROMAN">
            <summary> a possible value of a font family. </summary>
        </member>
        <member name="F:iTextSharp.text.Font.SYMBOL">
            <summary> a possible value of a font family. </summary>
        </member>
        <member name="F:iTextSharp.text.Font.ZAPFDINGBATS">
            <summary> a possible value of a font family. </summary>
        </member>
        <member name="F:iTextSharp.text.Font.NORMAL">
            <summary> this is a possible style. </summary>
        </member>
        <member name="F:iTextSharp.text.Font.BOLD">
            <summary> this is a possible style. </summary>
        </member>
        <member name="F:iTextSharp.text.Font.ITALIC">
            <summary> this is a possible style. </summary>
        </member>
        <member name="F:iTextSharp.text.Font.UNDERLINE">
            <summary> this is a possible style. </summary>
        </member>
        <member name="F:iTextSharp.text.Font.STRIKETHRU">
            <summary> this is a possible style. </summary>
        </member>
        <member name="F:iTextSharp.text.Font.BOLDITALIC">
            <summary> this is a possible style. </summary>
        </member>
        <member name="F:iTextSharp.text.Font.UNDEFINED">
            <summary> the value of an undefined attribute. </summary>
        </member>
        <member name="F:iTextSharp.text.Font.DEFAULTSIZE">
            <summary> the value of the default size. </summary>
        </member>
        <member name="F:iTextSharp.text.Font.family">
            <summary> the value of the fontfamily. </summary>
        </member>
        <member name="F:iTextSharp.text.Font.size">
            <summary> the value of the fontsize. </summary>
        </member>
        <member name="F:iTextSharp.text.Font.style">
            <summary> the value of the style. </summary>
        </member>
        <member name="F:iTextSharp.text.Font.color">
            <summary> the value of the color. </summary>
        </member>
        <member name="F:iTextSharp.text.Font.baseFont">
            <summary> the external font </summary>
        </member>
        <member name="M:iTextSharp.text.Font.#ctor(iTextSharp.text.Font)">
            Copy constructor of a Font
            @param other the font that has to be copied
        </member>
        <member name="M:iTextSharp.text.Font.#ctor(System.Int32,System.Single,System.Int32,iTextSharp.text.Color)">
            <summary>
            Constructs a Font.
            </summary>
            <param name="family">the family to which this font belongs</param>
            <param name="size">the size of this font</param>
            <param name="style">the style of this font</param>
            <param name="color">the Color of this font.</param>
        </member>
        <member name="M:iTextSharp.text.Font.#ctor(iTextSharp.text.pdf.BaseFont,System.Single,System.Int32,iTextSharp.text.Color)">
            <summary>
            Constructs a Font.
            </summary>
            <param name="bf">the external font</param>
            <param name="size">the size of this font</param>
            <param name="style">the style of this font</param>
            <param name="color">the Color of this font.</param>
        </member>
        <member name="M:iTextSharp.text.Font.#ctor(iTextSharp.text.pdf.BaseFont,System.Single,System.Int32)">
            <summary>
            Constructs a Font.
            </summary>
            <param name="bf">the external font</param>
            <param name="size">the size of this font</param>
            <param name="style">the style of this font</param>
        </member>
        <member name="M:iTextSharp.text.Font.#ctor(iTextSharp.text.pdf.BaseFont,System.Single)">
            <summary>
            Constructs a Font.
            </summary>
            <param name="bf">the external font</param>
            <param name="size">the size of this font</param>
        </member>
        <member name="M:iTextSharp.text.Font.#ctor(iTextSharp.text.pdf.BaseFont)">
            <summary>
            Constructs a Font.
            </summary>
            <param name="bf">the external font</param>
        </member>
        <member name="M:iTextSharp.text.Font.#ctor(System.Int32,System.Single,System.Int32)">
            <summary>
            Constructs a Font.
            </summary>
            <param name="family">the family to which this font belongs</param>
            <param name="size">the size of this font</param>
            <param name="style">the style of this font</param>
        </member>
        <member name="M:iTextSharp.text.Font.#ctor(System.Int32,System.Single)">
            <summary>
            Constructs a Font.
            </summary>
            <param name="family">the family to which this font belongs</param>
            <param name="size">the size of this font</param>
        </member>
        <member name="M:iTextSharp.text.Font.#ctor(System.Int32)">
            <summary>
            Constructs a Font.
            </summary>
            <param name="family">the family to which this font belongs</param>
        </member>
        <member name="M:iTextSharp.text.Font.#ctor">
            <summary>
            Constructs a Font.
            </summary>
            <overloads>
            Has nine overloads.
            </overloads>
        </member>
        <member name="M:iTextSharp.text.Font.CompareTo(System.Object)">
            <summary>
            Compares this Font with another
            </summary>
            <param name="obj">the other Font</param>
            <returns>a value</returns>
        </member>
        <member name="M:iTextSharp.text.Font.SetFamily(System.String)">
            <summary>
            Sets the family using a String ("Courier",
            "Helvetica", "Times New Roman", "Symbol" or "ZapfDingbats").
            </summary>
            <param name="family">A String representing a certain font-family.</param>
        </member>
        <member name="M:iTextSharp.text.Font.GetFamilyIndex(System.String)">
            <summary>
            Translates a string-value of a certain family
            into the index that is used for this family in this class.
            </summary>
            <param name="family">A string representing a certain font-family</param>
            <returns>the corresponding index</returns>
        </member>
        <member name="M:iTextSharp.text.Font.GetCalculatedLeading(System.Single)">
            Gets the leading that can be used with this font.
            
            @param linespacing
                       a certain linespacing
            @return the height of a line
        </member>
        <member name="M:iTextSharp.text.Font.IsBold">
            <summary>
            checks if this font is Bold.
            </summary>
            <returns>a boolean</returns>
        </member>
        <member name="M:iTextSharp.text.Font.IsItalic">
            <summary>
            checks if this font is Bold.
            </summary>
            <returns>a boolean</returns>
        </member>
        <member name="M:iTextSharp.text.Font.IsUnderlined">
            <summary>
            checks if this font is underlined.
            </summary>
            <returns>a boolean</returns>
        </member>
        <member name="M:iTextSharp.text.Font.IsStrikethru">
            <summary>
            checks if the style of this font is STRIKETHRU.
            </summary>
            <returns>a boolean</returns>
        </member>
        <member name="M:iTextSharp.text.Font.SetStyle(System.String)">
            <summary>
            Sets the style using a String containing one of
            more of the following values: normal, bold, italic, underline, strike.
            </summary>
            <param name="style">A String representing a certain style.</param>
        </member>
        <member name="M:iTextSharp.text.Font.SetStyle(System.Int32)">
            Sets the style.
            @param    style    the style.
        </member>
        <member name="M:iTextSharp.text.Font.GetStyleValue(System.String)">
            <summary>
            Translates a string-value of a certain style
            into the index value is used for this style in this class.
            </summary>
            <param name="style">a string</param>
            <returns>the corresponding value</returns>
        </member>
        <member name="M:iTextSharp.text.Font.SetColor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the color.
            </summary>
            <param name="red">the red-value of the new color</param>
            <param name="green">the green-value of the new color</param>
            <param name="blue">the blue-value of the new color</param>
        </member>
        <member name="M:iTextSharp.text.Font.GetCalculatedBaseFont(System.Boolean)">
            Gets the <CODE>BaseFont</CODE> this class represents.
            For the built-in fonts a <CODE>BaseFont</CODE> is calculated.
            @param specialEncoding <CODE>true</CODE> to use the special encoding for Symbol and ZapfDingbats,
            <CODE>false</CODE> to always use <CODE>Cp1252</CODE>
            @return the <CODE>BaseFont</CODE> this class represents
        </member>
        <member name="M:iTextSharp.text.Font.IsStandardFont">
            <summary>
            Checks if the properties of this font are undefined or null.
            <p/>
            If so, the standard should be used.
            </summary>
            <returns>a boolean</returns>
        </member>
        <member name="M:iTextSharp.text.Font.Difference(iTextSharp.text.Font)">
            <summary>
            Replaces the attributes that are equal to null with
            the attributes of a given font.
            </summary>
            <param name="font">the font of a bigger element class</param>
            <returns>a Font</returns>
        </member>
        <member name="P:iTextSharp.text.Font.Family">
            <summary>
            Gets the family of this font.
            </summary>
            <value>the value of the family</value>
        </member>
        <member name="P:iTextSharp.text.Font.Familyname">
            <summary>
            Gets the familyname as a string.
            </summary>
            <value>the familyname</value>
        </member>
        <member name="P:iTextSharp.text.Font.Size">
            <summary>
            Get/set the size of this font.
            </summary>
            <value>the size of this font</value>
        </member>
        <member name="P:iTextSharp.text.Font.CalculatedSize">
            Gets the size that can be used with the calculated <CODE>BaseFont</CODE>.
            @return the size that can be used with the calculated <CODE>BaseFont</CODE>
        </member>
        <member name="P:iTextSharp.text.Font.Style">
            <summary>
            Gets the style of this font.
            </summary>
            <value>the style of this font</value>
        </member>
        <member name="P:iTextSharp.text.Font.CalculatedStyle">
            Gets the style that can be used with the calculated <CODE>BaseFont</CODE>.
            @return the style that can be used with the calculated <CODE>BaseFont</CODE>
        </member>
        <member name="P:iTextSharp.text.Font.Color">
            <summary>
            Get/set the color of this font.
            </summary>
            <value>the color of this font</value>
        </member>
        <member name="P:iTextSharp.text.Font.BaseFont">
            <summary>
            Gets the BaseFont inside this object.
            </summary>
            <value>the BaseFont</value>
        </member>
        <member name="T:iTextSharp.text.rtf.IRtfExtendedElement">
            The RtfExtendedElement interface is to be used for elements that also
            write data into the definition part of the rtf document
            Version: $Id: IRtfExtendedElement.cs,v 1.5 2008/05/16 19:30:12 psoares33 Exp $
            @author Mark Hall (Mark.Hall@mail.room3b.eu)
        </member>
        <member name="M:iTextSharp.text.rtf.IRtfExtendedElement.WriteDefinition(System.IO.Stream)">
            Write the definition part of the element
            
            @param doc The <code>OutputStream</code> to write the element definition to
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.STYLE_NONE">
            Constant for a plain font
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.STYLE_BOLD">
            Constant for a bold font
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.STYLE_ITALIC">
            Constant for an italic font
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.STYLE_UNDERLINE">
            Constant for an underlined font
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.STYLE_STRIKETHROUGH">
            Constant for a strikethrough font
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.STYLE_DOUBLE_STRIKETHROUGH">
            Constant for a double strikethrough font
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.STYLE_SHADOW">
            Constant for a shadowed font
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.STYLE_OUTLINE">
            Constant for an outlined font
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.STYLE_EMBOSSED">
            Constant for an embossed font
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.STYLE_ENGRAVED">
            Constant for an engraved font
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.STYLE_HIDDEN">
            Constant for a font that hides the actual text.
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.FONT_FAMILY">
            Constant for the font family to use ("froman")
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.FONT_CHARSET">
            Constant for the charset
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.FONT_SIZE">
            Constant for the font size
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.FONT_BOLD">
            Constant for the bold flag
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.FONT_ITALIC">
            Constant for the italic flag
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.FONT_UNDERLINE">
            Constant for the underline flag
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.FONT_STRIKETHROUGH">
            Constant for the strikethrough flag
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.FONT_DOUBLE_STRIKETHROUGH">
            Constant for the double strikethrough flag
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.FONT_SHADOW">
            Constant for the shadow flag
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.FONT_OUTLINE">
            Constant for the outline flag
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.FONT_EMBOSSED">
            Constant for the embossed flag
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.FONT_ENGRAVED">
            Constant for the engraved flag
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.FONT_HIDDEN">
            Constant for hidden text flag
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.fontName">
            The font name. Defaults to "Times New Roman"
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.fontSize">
            The font size. Defaults to 10
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.fontStyle">
            The font style. Defaults to STYLE_NONE
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.fontNumber">
            The number of this font
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.color">
            The colour of this font
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.charset">
            The character set to use for this font
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.document">
            The RtfDocument this RtfFont belongs to.
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.#ctor(System.String)">
            Constructs a RtfFont with the given font name and all other properties
            at their default values.
            
            @param fontName The font name to use
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.#ctor(System.String,System.Single)">
            Constructs a RtfFont with the given font name and font size and all other
            properties at their default values.
            
            @param fontName The font name to use
            @param size The font size to use
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.#ctor(System.String,System.Single,System.Int32)">
            Constructs a RtfFont with the given font name, font size and font style and the
            default color.
            
            @param fontName The font name to use
            @param size The font size to use
            @param style The font style to use
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.#ctor(System.String,System.Single,System.Int32,iTextSharp.text.Color)">
            Constructs a RtfFont with the given font name, font size, font style and
            color.
            
            @param fontName The font name to use
            @param size the font size to use
            @param style The font style to use
            @param color The font color to use
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.#ctor(System.String,System.Single,System.Int32,iTextSharp.text.Color,System.Int32)">
            Constructs a RtfFont with the given font name, font size, font style, colour
            and charset. This can be used when generating non latin-1 text.
            
            @param fontName The font name to use
            @param size the font size to use
            @param style The font style to use
            @param color The font color to use
            @param charset The charset of the font content
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.#ctor(iTextSharp.text.rtf.document.RtfDocument,System.Int32)">
             Special constructor for the default font
            
             @param doc The RtfDocument this font appears in
             @param fontNumber The id of this font
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.Font)">
            Constructs a RtfFont from a com.lowagie.text.Font
            @param doc The RtfDocument this font appears in
            @param font The Font to use as a base
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.WriteDefinition(System.IO.Stream)">
            Writes the font definition
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.WriteBegin(System.IO.Stream)">
             Writes the font beginning
            
             @return A byte array with the font start data
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.WriteEnd(System.IO.Stream)">
             Write the font end
            
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.WriteContent(System.IO.Stream)">
            unused
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.Equals(System.Object)">
            Tests for equality of RtfFonts. RtfFonts are equal if their fontName,
            fontSize, fontStyle and fontSuperSubscript are equal
            
            @param obj The RtfFont to compare with this RtfFont
            @return <code>True</code> if the RtfFonts are equal, <code>false</code> otherwise
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.GetHashCode">
            Returns the hash code of this RtfFont. The hash code is the hash code of the
            string containing the font name + font size + "-" + the font style + "-" + the
            font super/supscript value.
            
            @return The hash code of this RtfFont
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.GetFontName">
            Gets the font name of this RtfFont
            
            @return The font name
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.SetFontName(System.String)">
            Sets the font name of this RtfFont.
            
            @param fontName The font name to use 
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.SetFamily(System.String)">
            @see com.lowagie.text.Font#setFamily(String)
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.SetToDefaultFamily(System.String)">
            Sets the correct font name from the family name.
            
            @param familyname The family name to set the name to.
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.GetFontSize">
            Gets the font size of this RtfFont
            
            @return The font size
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.GetFontStyle">
            Gets the font style of this RtfFont
            
            @return The font style
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.SetStyle(System.Int32)">
            @see com.lowagie.text.Font#setStyle(int)
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.SetStyle(System.String)">
            @see com.lowagie.text.Font#setStyle(String)
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.GetCharset">
            Gets the charset used for constructing this RtfFont.
            
            @return The charset of this RtfFont.
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.SetCharset(System.Int32)">
            Sets the charset used for constructing this RtfFont.
            
            @param charset The charset to use.
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.GetFontNumber">
            Gets the font number of this RtfFont
            
            @return The font number
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.SetRtfDocument(iTextSharp.text.rtf.document.RtfDocument)">
            Sets the RtfDocument this RtfFont belongs to
            
            @param doc The RtfDocument to use
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.SetInTable(System.Boolean)">
            Unused
            @param inTable
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.SetInHeader(System.Boolean)">
            Unused
            @param inHeader
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.SetColor(System.Int32,System.Int32,System.Int32)">
            @see com.lowagie.text.Font#setColor(int, int, int)
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.IntToByteArray(System.Int32)">
             Transforms an integer into its String representation and then returns the bytes
             of that string.
            
             @param i The integer to convert
             @return A byte array representing the integer
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.Difference(iTextSharp.text.Font)">
             Replaces the attributes that are equal to <VAR>null</VAR> with
             the attributes of a given font.
            
             @param font The surrounding font
             @return A RtfFont
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.IsStandardFont">
            The <code>RtfFont</code> is never a standard font.
            
            @since 2.1.0
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.CompareTo(System.Object)">
            Compares this <code>RtfFont</code> to either a {@link com.lowagie.text.Font} or
            an <code>RtfFont</code>.
            
            @since 2.1.0
        </member>
        <member name="P:iTextSharp.text.rtf.style.RtfFont.Familyname">
            @see com.lowagie.text.Font#getFamilyname()
        </member>
        <member name="P:iTextSharp.text.rtf.style.RtfFont.Size">
            @see com.lowagie.text.Font#setSize(float)
        </member>
        <member name="P:iTextSharp.text.rtf.style.RtfFont.Color">
            @see com.lowagie.text.Font#setColor(Color)
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.MODIFIED_NONE">
            No modification has taken place when compared to the RtfParagraphStyle this RtfParagraphStyle
            is based on. These modification markers are used to determine what needs to be
            inherited and what not from the parent RtfParagraphStyle.
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.MODIFIED_ALIGNMENT">
            The alignment has been modified.
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.MODIFIED_INDENT_LEFT">
            The left indentation has been modified.
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.MODIFIED_INDENT_RIGHT">
            The right indentation has been modified.
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.MODIFIED_SPACING_BEFORE">
            The spacing before a paragraph has been modified.
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.MODIFIED_SPACING_AFTER">
            The spacing after a paragraph has been modified.
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.MODIFIED_FONT_NAME">
            The font name has been modified.
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.MODIFIED_FONT_SIZE">
            The font style has been modified.
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.MODIFIED_FONT_STYLE">
            The font size has been modified.
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.MODIFIED_FONT_COLOR">
            The font colour has been modified.
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.MODIFIED_LINE_LEADING">
            The line leading has been modified. 
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.MODIFIED_KEEP_TOGETHER">
            The paragraph keep together setting has been modified.
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.MODIFIED_KEEP_TOGETHER_WITH_NEXT">
            The paragraph keep together with next setting has been modified.
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.ALIGN_LEFT">
            Constant for left alignment
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.ALIGN_RIGHT">
            Constant for right alignment
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.ALIGN_CENTER">
            Constant for center alignment
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.ALIGN_JUSTIFY">
            Constant for justified alignment
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.FIRST_LINE_INDENT">
            Constant for the first line indentation
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.INDENT_LEFT">
            Constant for left indentation
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.INDENT_RIGHT">
            Constant for right indentation
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.KEEP_TOGETHER">
            Constant for keeping the paragraph together on one page
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.KEEP_TOGETHER_WITH_NEXT">
            Constant for keeping the paragraph toghether with the next one on one page
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.SPACING_AFTER">
            Constant for the space after the paragraph.
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.SPACING_BEFORE">
            Constant for the space before the paragraph.
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.STYLE_NORMAL">
            The NORMAL/STANDARD style.
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.STYLE_HEADING_1">
            The style for level 1 headings.
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.STYLE_HEADING_2">
            The style for level 2 headings.
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.STYLE_HEADING_3">
            The style for level 3 headings.
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.#cctor">
            Initialises the properties of the styles.
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.alignment">
            The alignment of the paragraph.
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.firstLineIndent">
            The indentation for the first line
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.indentLeft">
            The left indentation of the paragraph.
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.indentRight">
            The right indentation of the paragraph.
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.spacingBefore">
            The spacing before a paragraph.
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.spacingAfter">
            The spacing after a paragraph.
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.lineLeading">
            The line leading of the paragraph.
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.keepTogether">
            Whether this RtfParagraph must stay on one page.
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.keepTogetherWithNext">
            Whether this RtfParagraph must stay on the same page as the next paragraph.
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.styleName">
            The name of this RtfParagraphStyle.
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.basedOnName">
            The name of the RtfParagraphStyle this RtfParagraphStyle is based on.
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.baseStyle">
            The RtfParagraphStyle this RtfParagraphStyle is based on.
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.modified">
            Which properties have been modified when compared to the base style.
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfParagraphStyle.styleNumber">
            The number of this RtfParagraphStyle in the stylesheet list.
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.#ctor(System.String,System.String,System.Int32,System.Int32,iTextSharp.text.Color)">
            Constructs a new RtfParagraphStyle with the given attributes.
            
            @param styleName The name of this RtfParagraphStyle.
            @param fontName The name of the font to use for this RtfParagraphStyle.
            @param fontSize The size of the font to use for this RtfParagraphStyle.
            @param fontStyle The style of the font to use for this RtfParagraphStyle.
            @param fontColor The colour of the font to use for this RtfParagraphStyle.
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.#ctor(System.String,System.String)">
            Constructs a new RtfParagraphStyle that is based on an existing RtfParagraphStyle.
            
            @param styleName The name of this RtfParagraphStyle.
            @param basedOnName The name of the RtfParagraphStyle this RtfParagraphStyle is based on.
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.rtf.style.RtfParagraphStyle)">
            Constructs a RtfParagraphStyle from another RtfParagraphStyle.
            
            INTERNAL USE ONLY
            
            @param doc The RtfDocument this RtfParagraphStyle belongs to.
            @param style The RtfParagraphStyle to copy settings from.
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.GetStyleName">
            Gets the name of this RtfParagraphStyle.
            
            @return The name of this RtfParagraphStyle.
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.GetBasedOnName">
            Gets the name of the RtfParagraphStyle this RtfParagraphStyle is based on.
            
            @return The name of the base RtfParagraphStyle.
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.GetAlignment">
            Gets the alignment of this RtfParagraphStyle.
            
            @return The alignment of this RtfParagraphStyle.
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.SetAlignment(System.Int32)">
            Sets the alignment of this RtfParagraphStyle.
            
            @param alignment The alignment to use.
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.GetFirstLineIndent">
            Gets the first line indentation of this RtfParagraphStyle.
            
            @return The first line indentation of this RtfParagraphStyle.
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.SetFirstLineIndent(System.Int32)">
            Sets the first line indententation of this RtfParagraphStyle. It
            is relative to the left indentation.
            
            @param firstLineIndent The first line indentation to use.
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.GetIndentLeft">
            Gets the left indentation of this RtfParagraphStyle.
            
            @return The left indentation of this RtfParagraphStyle.
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.SetIndentLeft(System.Int32)">
            Sets the left indentation of this RtfParagraphStyle.
            
            @param indentLeft The left indentation to use.
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.GetIndentRight">
            Gets the right indentation of this RtfParagraphStyle.
            
            @return The right indentation of this RtfParagraphStyle.
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.SetIndentRight(System.Int32)">
            Sets the right indentation of this RtfParagraphStyle.
            
            @param indentRight The right indentation to use.
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.GetSpacingBefore">
            Gets the space before the paragraph of this RtfParagraphStyle..
            
            @return The space before the paragraph.
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.SetSpacingBefore(System.Int32)">
            Sets the space before the paragraph of this RtfParagraphStyle.
            
            @param spacingBefore The space before to use.
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.GetSpacingAfter">
            Gets the space after the paragraph of this RtfParagraphStyle.
            
            @return The space after the paragraph.
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.SetSpacingAfter(System.Int32)">
            Sets the space after the paragraph of this RtfParagraphStyle.
            
            @param spacingAfter The space after to use.
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.SetFontName(System.String)">
            Sets the font name of this RtfParagraphStyle.
            
            @param fontName The font name to use 
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.SetStyle(System.Int32)">
            Sets the font style of this RtfParagraphStyle.
            
            @param fontStyle The font style to use.
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.SetColor(iTextSharp.text.Color)">
            Sets the colour of this RtfParagraphStyle.
            
            @param color The Color to use.
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.GetLineLeading">
            Gets the line leading of this RtfParagraphStyle.
            
            @return The line leading of this RtfParagraphStyle.
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.SetLineLeading(System.Int32)">
            Sets the line leading of this RtfParagraphStyle.
            
            @param lineLeading The line leading to use.
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.GetKeepTogether">
            Gets whether the lines in the paragraph should be kept together in
            this RtfParagraphStyle.
            
            @return Whether the lines in the paragraph should be kept together.
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.SetKeepTogether(System.Boolean)">
            Sets whether the lines in the paragraph should be kept together in
            this RtfParagraphStyle.
            
            @param keepTogether Whether the lines in the paragraph should be kept together.
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.GetKeepTogetherWithNext">
            Gets whether the paragraph should be kept toggether with the next in
            this RtfParagraphStyle.
            
            @return Whether the paragraph should be kept together with the next.
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.SetKeepTogetherWithNext(System.Boolean)">
            Sets whether the paragraph should be kept together with the next in
            this RtfParagraphStyle.
            
            @param keepTogetherWithNext Whether the paragraph should be kept together with the next.
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.HandleInheritance">
            Handles the inheritance of paragraph style settings. All settings that
            have not been modified will be inherited from the base RtfParagraphStyle.
            If this RtfParagraphStyle is not based on another one, then nothing happens.
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.WriteParagraphSettings(System.IO.Stream)">
            Writes the settings of this RtfParagraphStyle.
            
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.WriteDefinition(System.IO.Stream)">
            Writes the definition of this RtfParagraphStyle for the stylesheet list.
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.WriteBegin(System.IO.Stream)">
             Writes the start information of this RtfParagraphStyle.
            
             @param result The <code>OutputStream</code> to write to.
             @throws IOException On i/o errors.
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.WriteEnd(System.IO.Stream)">
            Unused
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.WriteContent(System.IO.Stream)">
            unused
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.Equals(System.Object)">
            Tests whether two RtfParagraphStyles are equal. Equality
            is determined via the name.
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.GetHashCode">
            Gets the hash code of this RtfParagraphStyle.
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.GetStyleNumber">
            Gets the number of this RtfParagraphStyle in the stylesheet list.
            
            @return The number of this RtfParagraphStyle in the stylesheet list.
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfParagraphStyle.SetStyleNumber(System.Int32)">
            Sets the number of this RtfParagraphStyle in the stylesheet list.
            
            @param styleNumber The number to use.
        </member>
        <member name="P:iTextSharp.text.rtf.style.RtfParagraphStyle.Size">
            Sets the font size of this RtfParagraphStyle.
            
            @param fontSize The font size to use.
        </member>
        <member name="T:iTextSharp.text.rtf.parser.ctrlwords.IRtfCtrlWordListener">
            <code>RtfCtrlWordListener</code> interface for handling events.
            
            @author Howard Shank (hgshank@yahoo.com)
            
             @since 2.0.8
        </member>
        <member name="M:iTextSharp.text.rtf.parser.ctrlwords.IRtfCtrlWordListener.BeforeCtrlWord(iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordData)">
            
            @return null or modified copy of the ctrlWordData object
        </member>
        <member name="M:iTextSharp.text.rtf.parser.ctrlwords.IRtfCtrlWordListener.OnCtrlWord(iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordData)">
            
            @return null or modified copy of the ctrlWordData object
        </member>
        <member name="M:iTextSharp.text.rtf.parser.ctrlwords.IRtfCtrlWordListener.AfterCtrlWord(iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordData)">
            
            @return null or modified copy of the ctrlWordData object
        </member>
        <member name="T:iTextSharp.text.rtf.field.RtfTOCEntry">
            The RtfTOCEntry is used together with the RtfTableOfContents to generate a table of
            contents. Add the RtfTOCEntry in those locations in the document where table of
            contents entries should link to 
            
            @version $Version:$
            @author Mark Hall (Mark.Hall@mail.room3b.eu)
            @author <a href="mailto:Steffen.Stundzig@smb-tec.com">Steffen.Stundzig@smb-tec.com</a> 
        </member>
        <member name="T:iTextSharp.text.rtf.field.RtfField">
            The RtfField class is an abstract base class for all rtf field functionality.
            Subclasses only need to implement the two abstract methods writeFieldInstContent
            and writeFieldResultContent. All other field functionality is handled by the
            RtfField class.
            
            @version $Version:$
            @author Mark Hall (Mark.Hall@mail.room3b.eu)
            @author <a href="mailto:Dirk.Weigenand@smb-tec.com">Dirk Weigenand</a>
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField.TWIPS_FACTOR">
            The factor to use for translating from iText to rtf measurments
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField.OPEN_GROUP">
            Constant for the beginning of a rtf group
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField.CLOSE_GROUP">
            Constant for the end of an rtf group
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField.DELIMITER">
            Constant for a delimiter in rtf
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField.COMMA_DELIMITER">
            Constant for a comma delimiter in rtf
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField.FIELD">
            Constant for a rtf field
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField.FIELD_DIRTY">
            Constant for a dirty field
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField.FIELD_PRIVATE">
            Constant for a private field
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField.FIELD_LOCKED">
            Constant for a locked field
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField.FIELD_EDIT">
            Constant for a edited field
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField.FIELD_ALT">
            Constant for an alt field
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField.FIELD_INSTRUCTIONS">
            Constant for the field instructions
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField.FIELD_RESULT">
            Constant for the field result
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField.fieldDirty">
            Is the field dirty
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField.fieldEdit">
            Is the field edited
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField.fieldLocked">
            Is the field locked
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField.fieldPrivate">
            Is the field private
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField.fieldAlt">
            Is it an alt field
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField.inTable">
            Whether this RtfField is in a table
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField.inHeader">
            Whether this RtfElement is in a header
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField.document">
            The RtfDocument this RtfField belongs to 
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField.font">
            The RtfFont of this RtfField
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.#ctor(iTextSharp.text.rtf.document.RtfDocument)">
            Constructs a RtfField for a RtfDocument. This is not very usefull,
            since the RtfField by itself does not do anything. Use one of the
            subclasses instead.
            
            @param doc The RtfDocument this RtfField belongs to.
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.Font)">
            Constructs a RtfField for a RtfDocument. This is not very usefull,
            since the RtfField by itself does not do anything. Use one of the
            subclasses instead.
            
            @param doc The RtfDocument this RtfField belongs to.
            @param font The Font this RtfField should use
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.SetRtfDocument(iTextSharp.text.rtf.document.RtfDocument)">
            Sets the RtfDocument this RtfElement belongs to
            
            @param doc The RtfDocument to use
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.WriteFieldBegin(System.IO.Stream)">
            Writes the field beginning. Also writes field properties.
            
            @return A byte array with the field beginning.
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.WriteFieldInstBegin(System.IO.Stream)">
            Writes the beginning of the field instruction area.
            
            @return The beginning of the field instruction area
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.WriteFieldInstContent(System.IO.Stream)">
            Writes the content of the field instruction area. Override this
            method in your subclasses.
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.WriteFieldInstEnd(System.IO.Stream)">
            Writes the end of the field instruction area.
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.WriteFieldResultBegin(System.IO.Stream)">
            Writes the beginning of the field result area
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.WriteFieldResultContent(System.IO.Stream)">
            Writes the content of the pre-calculated field result. Override this
            method in your subclasses.
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.WriteFieldResultEnd(System.IO.Stream)">
            Writes the end of the field result area
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.WriteFieldEnd(System.IO.Stream)">
            Writes the end of the field
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.WriteContent(System.IO.Stream)">
            Writes the field to the <code>OutputStream</code>.
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.IsFieldAlt">
            Get whether this field is an alt field
            
            @return Returns whether this field is an alt field
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.SetFieldAlt(System.Boolean)">
            Set whether this field is an alt field
            
            @param fieldAlt The value to use
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.IsFieldDirty">
            Get whether this field is dirty
            
            @return Returns whether this field is dirty
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.SetFieldDirty(System.Boolean)">
            Set whether this field is dirty
            
            @param fieldDirty The value to use
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.IsFieldEdit">
            Get whether this field is edited
            
            @return Returns whether this field is edited
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.SetFieldEdit(System.Boolean)">
            Set whether this field is edited.
            
            @param fieldEdit The value to use
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.IsFieldLocked">
            Get whether this field is locked
            
            @return Returns the fieldLocked.
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.SetFieldLocked(System.Boolean)">
            Set whether this field is locked
            @param fieldLocked The value to use
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.IsFieldPrivate">
            Get whether this field is private
            
            @return Returns the fieldPrivate.
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.SetFieldPrivate(System.Boolean)">
            Set whether this field is private
            
            @param fieldPrivate The value to use
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.SetInTable(System.Boolean)">
            Sets whether this RtfField is in a table
            
            @param inTable <code>True</code> if this RtfField is in a table, <code>false</code> otherwise
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.IsInTable">
            Gets whether this <code>RtfField</code> is in a table.
            
            @return <code>True</code> if this <code>RtfField</code> is in a table, <code>false</code> otherwise
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.SetInHeader(System.Boolean)">
            Sets whether this RtfField is in a header
            
            @param inHeader <code>True</code> if this RtfField is in a header, <code>false</code> otherwise
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.IsInHeader">
            Gets whether this <code>RtfField</code> is in a header.
            
            @return <code>True</code> if this <code>RtfField</code> is in a header, <code>false</code> otherwise
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.IsEmpty">
            An RtfField is never empty.
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfTOCEntry.TEXT_HIDDEN_ON">
            Constant for the beginning of hidden text
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfTOCEntry.TEXT_HIDDEN_OFF">
            Constant for the end of hidden text
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfTOCEntry.TOC_ENTRY_PAGE_NUMBER">
            Constant for a TOC entry with page numbers
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfTOCEntry.TOC_ENTRY_NO_PAGE_NUMBER">
            Constant for a TOC entry without page numbers
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfTOCEntry.entry">
            The entry text of this RtfTOCEntry
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfTOCEntry.showPageNumber">
            Whether to show page numbers in the table of contents
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfTOCEntry.#ctor(System.String)">
            Constructs a RtfTOCEntry with a certain entry text.
            
            @param entry The entry text to display
            @param font The Font to use
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfTOCEntry.WriteContent(System.IO.Stream)">
            Writes the content of the RtfTOCEntry
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfTOCEntry.SetShowPageNumber(System.Boolean)">
            Sets whether to display a page number in the table of contents, or not
            
            @param showPageNumber Whether to display a page number or not
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfTOCEntry.WriteFieldInstContent(System.IO.Stream)">
            unused
        </member>
        <member name="T:iTextSharp.text.rtf.document.RtfPageSetting">
            The RtfPageSetting stores the page size / page margins for a RtfDocument.
            INTERNAL CLASS - NOT TO BE USED DIRECTLY
             
            @version $Id: RtfPageSetting.cs,v 1.5 2008/05/16 19:30:51 psoares33 Exp $
            @author Mark Hall (Mark.Hall@mail.room3b.eu)
            @author Thomas Bickel (tmb99@inode.at)
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting.PAGE_WIDTH">
            Constant for the page height
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting.PAGE_HEIGHT">
            Constant for the page width
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting.MARGIN_LEFT">
            Constant for the left margin
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting.MARGIN_RIGHT">
            Constant for the right margin
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting.MARGIN_TOP">
            Constant for the top margin
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting.MARGIN_BOTTOM">
            Constant for the bottom margin
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting.LANDSCAPE">
            Constant for landscape
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting.SECTION_PAGE_WIDTH">
            Constant for the section page width
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting.SECTION_PAGE_HEIGHT">
            Constant for the section page height
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting.SECTION_MARGIN_LEFT">
            Constant for the section left margin
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting.SECTION_MARGIN_RIGHT">
            Constant for the section right margin
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting.SECTION_MARGIN_TOP">
            Constant for the section top margin
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting.SECTION_MARGIN_BOTTOM">
            Constant for the section bottom margin
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting.pageWidth">
            The page width to use
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting.pageHeight">
            The page height to use
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting.marginLeft">
            The left margin to use
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting.marginRight">
            The right margin to use
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting.marginTop">
            The top margin to use
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting.marginBottom">
            The bottom margin to use
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting.landscape">
            Whether the page is portrait or landscape
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfPageSetting.#ctor(iTextSharp.text.rtf.document.RtfDocument)">
            Constructs a new RtfPageSetting object belonging to a RtfDocument.
            
            @param doc The RtfDocument this RtfPageSetting belongs to 
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfPageSetting.WriteContent(System.IO.Stream)">
            unused
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfPageSetting.WriteDefinition(System.IO.Stream)">
            Writes the page size / page margin definition
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfPageSetting.WriteSectionDefinition(System.IO.Stream)">
            Writes the definition part for a new section
            
            @return A byte array containing the definition for a new section
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfPageSetting.GetMarginBottom">
            Gets the bottom margin
             
            @return Returns the bottom margin
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfPageSetting.SetMarginBottom(System.Int32)">
            Sets the bottom margin
            
            @param marginBottom The bottom margin to use
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfPageSetting.GetMarginLeft">
            Gets the left margin
            
            @return Returns the left margin
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfPageSetting.SetMarginLeft(System.Int32)">
            Sets the left margin to use
            
            @param marginLeft The left margin to use
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfPageSetting.GetMarginRight">
            Gets the right margin
            
            @return Returns the right margin
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfPageSetting.SetMarginRight(System.Int32)">
            Sets the right margin to use
            
            @param marginRight The right margin to use
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfPageSetting.GetMarginTop">
            Gets the top margin
            
            @return Returns the top margin
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfPageSetting.SetMarginTop(System.Int32)">
            Sets the top margin to use
            
            @param marginTop The top margin to use
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfPageSetting.GetPageHeight">
            Gets the page height
            
            @return Returns the page height
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfPageSetting.SetPageHeight(System.Int32)">
            Sets the page height to use
            
            @param pageHeight The page height to use
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfPageSetting.GetPageWidth">
            Gets the page width
            
            @return Returns the page width
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfPageSetting.SetPageWidth(System.Int32)">
            Sets the page width to use
            
            @param pageWidth The page width to use
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfPageSetting.SetPageSize(iTextSharp.text.Rectangle)">
            Set the page size to use. This method will use guessFormat to try to guess the correct
            page format. If no format could be guessed, the sizes from the pageSize are used and
            the landscape setting is determined by comparing width and height;
            
            @param pageSize The pageSize to use
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.rtf.document.RtfPageSetting.GuessFormat(iTextSharp.text.Rectangle,System.Boolean)" -->
        <member name="M:iTextSharp.text.rtf.document.RtfPageSetting.RectEquals(iTextSharp.text.Rectangle,iTextSharp.text.Rectangle)">
            This method compares to Rectangles. They are considered equal if width and height are the same
            
            @param rect1 The first Rectangle to compare
            @param rect2 The second Rectangle to compare
            @return <code>True</code> if the Rectangles equal, <code>false</code> otherwise
        </member>
        <member name="T:iTextSharp.text.rtf.document.output.RtfNilOutputStream">
            The RtfNilOutputStream is a dummy output stream that sends all
            bytes to the big byte bucket in the sky. It is used to improve
            speed in those situations where processing is required, but
            the results are not needed.
            
            @version $Id: RtfNilOutputStream.cs,v 1.2 2008/05/16 19:30:53 psoares33 Exp $
            @author Thomas Bickel (tmb99@inode.at)
            @author Mark Hall (Mark.Hall@mail.room3b.eu)
        </member>
        <member name="M:iTextSharp.text.rtf.document.output.RtfNilOutputStream.GetSize">
            Returns the number of bytes that have been written to this buffer so far.
            
            @return number of bytes written to this buffer
        </member>
        <member name="T:iTextSharp.text.rtf.document.output.RtfDiskCache">
            The RtfFileCache is a RtfDataCache that uses a temporary file
            to store the rtf document data. Not so fast, but doesn't use any
            memory (just disk space).
            
            @version $Revision: 1.3 $
            @author Mark Hall (Mark.Hall@mail.room3b.eu)
        </member>
        <member name="T:iTextSharp.text.rtf.document.output.IRtfDataCache">
            The RtfDataCache interface must be implemented by classes wishing to
            act as caches for the rtf document data.
            
            @version $Revision: 1.4 $
            @author Mark Hall (Mark.Hall@mail.room3b.eu)
        </member>
        <member name="M:iTextSharp.text.rtf.document.output.IRtfDataCache.GetOutputStream">
            Get the OutputStream that the RtfDocument can write to.
            
            @return The OutputStream the RtfDocument can use.
        </member>
        <member name="M:iTextSharp.text.rtf.document.output.IRtfDataCache.WriteTo(System.IO.Stream)">
            Write the content of the cache into the OutputStream.
            
            @param target The OutputStream to write the content into.
            @throws IOException If an error occurs reading/writing.
        </member>
        <member name="F:iTextSharp.text.rtf.document.output.RtfDiskCache.data">
            The BufferedOutputStream that stores the cache data.
        </member>
        <member name="F:iTextSharp.text.rtf.document.output.RtfDiskCache.tempFile">
            The temporary file to store the data in.
        </member>
        <member name="M:iTextSharp.text.rtf.document.output.RtfDiskCache.#ctor">
            Constructs a RtfFileCache. Creates the temp file.
            
            @throws IOException If the temporary file could not be created.
        </member>
        <member name="M:iTextSharp.text.rtf.document.output.RtfDiskCache.GetOutputStream">
            Gets the BufferedOutputStream to write to.
        </member>
        <member name="M:iTextSharp.text.rtf.document.output.RtfDiskCache.WriteTo(System.IO.Stream)">
            Writes the content of the temporary file into the Stream.
        </member>
        <member name="T:iTextSharp.text.pdf.VerticalText">
            Writes text vertically. Note that the naming is done according
            to horizontal text although it referrs to vertical text.
            A line with the alignment Element.LEFT_ALIGN will actually
            be top aligned.
        </member>
        <member name="F:iTextSharp.text.pdf.VerticalText.NO_MORE_TEXT">
            Signals that there are no more text available. 
        </member>
        <member name="F:iTextSharp.text.pdf.VerticalText.NO_MORE_COLUMN">
            Signals that there is no more column. 
        </member>
        <member name="F:iTextSharp.text.pdf.VerticalText.chunks">
            The chunks that form the text. 
        </member>
        <member name="F:iTextSharp.text.pdf.VerticalText.text">
            The <CODE>PdfContent</CODE> where the text will be written to. 
        </member>
        <member name="F:iTextSharp.text.pdf.VerticalText.alignment">
            The column Element. Default is left Element. 
        </member>
        <member name="F:iTextSharp.text.pdf.VerticalText.currentChunkMarker">
            Marks the chunks to be eliminated when the line is written. 
        </member>
        <member name="F:iTextSharp.text.pdf.VerticalText.currentStandbyChunk">
            The chunk created by the splitting. 
        </member>
        <member name="F:iTextSharp.text.pdf.VerticalText.splittedChunkText">
            The chunk created by the splitting. 
        </member>
        <member name="F:iTextSharp.text.pdf.VerticalText.leading">
            The leading
        </member>
        <member name="F:iTextSharp.text.pdf.VerticalText.startX">
            The X coordinate.
        </member>
        <member name="F:iTextSharp.text.pdf.VerticalText.startY">
            The Y coordinate.
        </member>
        <member name="F:iTextSharp.text.pdf.VerticalText.maxLines">
            The maximum number of vertical lines.
        </member>
        <member name="F:iTextSharp.text.pdf.VerticalText.height">
            The height of the text.
        </member>
        <member name="M:iTextSharp.text.pdf.VerticalText.#ctor(iTextSharp.text.pdf.PdfContentByte)">
            Creates new VerticalText
            @param text the place where the text will be written to. Can
            be a template.
        </member>
        <member name="M:iTextSharp.text.pdf.VerticalText.AddText(iTextSharp.text.Phrase)">
            Adds a <CODE>Phrase</CODE> to the current text array.
            @param phrase the text
        </member>
        <member name="M:iTextSharp.text.pdf.VerticalText.AddText(iTextSharp.text.Chunk)">
            Adds a <CODE>Chunk</CODE> to the current text array.
            @param chunk the text
        </member>
        <member name="M:iTextSharp.text.pdf.VerticalText.SetVerticalLayout(System.Single,System.Single,System.Single,System.Int32,System.Single)">
            Sets the layout.
            @param startX the top right X line position
            @param startY the top right Y line position
            @param height the height of the lines
            @param maxLines the maximum number of lines
            @param leading the separation between the lines
        </member>
        <member name="M:iTextSharp.text.pdf.VerticalText.CreateLine(System.Single)">
            Creates a line from the chunk array.
            @param width the width of the line
            @return the line or null if no more chunks
        </member>
        <member name="M:iTextSharp.text.pdf.VerticalText.ShortenChunkArray">
            Normalizes the list of chunks when the line is accepted.
        </member>
        <member name="M:iTextSharp.text.pdf.VerticalText.Go">
            Outputs the lines to the document. It is equivalent to <CODE>go(false)</CODE>.
            @return returns the result of the operation. It can be <CODE>NO_MORE_TEXT</CODE>
            and/or <CODE>NO_MORE_COLUMN</CODE>
            @throws DocumentException on error
        </member>
        <member name="M:iTextSharp.text.pdf.VerticalText.Go(System.Boolean)">
            Outputs the lines to the document. The output can be simulated.
            @param simulate <CODE>true</CODE> to simulate the writting to the document
            @return returns the result of the operation. It can be <CODE>NO_MORE_TEXT</CODE>
            and/or <CODE>NO_MORE_COLUMN</CODE>
            @throws DocumentException on error
        </member>
        <member name="M:iTextSharp.text.pdf.VerticalText.SetOrigin(System.Single,System.Single)">
            Sets the new text origin.
            @param startX the X coordinate
            @param startY the Y coordinate
        </member>
        <member name="P:iTextSharp.text.pdf.VerticalText.Leading">
            Gets the separation between the vertical lines.
            @return the vertical line separation
        </member>
        <member name="P:iTextSharp.text.pdf.VerticalText.OriginX">
            Gets the X coordinate where the next line will be writen. This value will change
            after each call to <code>go()</code>.
            @return  the X coordinate
        </member>
        <member name="P:iTextSharp.text.pdf.VerticalText.OriginY">
            Gets the Y coordinate where the next line will be writen.
            @return  the Y coordinate
        </member>
        <member name="P:iTextSharp.text.pdf.VerticalText.MaxLines">
            Gets the maximum number of available lines. This value will change
            after each call to <code>go()</code>.
            @return Value of property maxLines.
        </member>
        <member name="P:iTextSharp.text.pdf.VerticalText.Height">
            Gets the height of the line
            @return the height
        </member>
        <member name="P:iTextSharp.text.pdf.VerticalText.Alignment">
            Gets the Element.
            @return the alignment
        </member>
        <member name="T:iTextSharp.text.pdf.PdfWriter">
            A <CODE>DocWriter</CODE> class for PDF.
            <P>
            When this <CODE>PdfWriter</CODE> is added
            to a certain <CODE>PdfDocument</CODE>, the PDF representation of every Element
            added to this Document will be written to the outputstream.</P>
        </member>
        <member name="T:iTextSharp.text.DocWriter">
            <summary>
            An abstract Writer class for documents.
            </summary>
            <remarks>
            DocWriter is the abstract class of several writers such
            as PdfWriter and HtmlWriter.
            A DocWriter can be added as a DocListener
            to a certain Document by getting an instance (see method
            GetInstance() in the specific writer-classes).
            Every Element added to the original Document
            will be written to the stream of the listening
            DocWriter.
            </remarks>
            <seealso cref="T:iTextSharp.text.Document"/>
            <seealso cref="T:iTextSharp.text.IDocListener"/>
        </member>
        <member name="T:iTextSharp.text.IDocListener">
            <summary>
            A class that implements DocListener will perform some
            actions when some actions are performed on a Document.
            </summary>
            <seealso cref="T:iTextSharp.text.IElementListener"/>
            <seealso cref="T:iTextSharp.text.Document"/>
            <seealso cref="T:iTextSharp.text.DocWriter"/>
        </member>
        <member name="T:iTextSharp.text.IElementListener">
            <summary>
            A class that implements ElementListener will perform some
            actions when an Element is added.
            </summary>
        </member>
        <member name="M:iTextSharp.text.IElementListener.Add(iTextSharp.text.IElement)">
            <summary>
            Signals that an Element was added to the Document.
            </summary>
            <param name="element">Element added</param>
            <returns>true if the element was added, false if not.</returns>
        </member>
        <member name="M:iTextSharp.text.IDocListener.Open">
            <summary>
            Signals that the Document has been opened and that
            Elements can be added.
            </summary>
        </member>
        <member name="M:iTextSharp.text.IDocListener.Close">
            <summary>
            Signals that the Document was closed and that no other
            Elements will be added.
            </summary>
            <remarks>
            The output stream of every writer implementing IDocListener will be closed.
            </remarks>
        </member>
        <member name="M:iTextSharp.text.IDocListener.NewPage">
            <summary>
            Signals that an new page has to be started.
            </summary>
            <returns>true if the page was added, false if not.</returns>
        </member>
        <member name="M:iTextSharp.text.IDocListener.SetPageSize(iTextSharp.text.Rectangle)">
            <summary>
            Sets the pagesize.
            </summary>
            <param name="pageSize">the new pagesize</param>
            <returns>a boolean</returns>
        </member>
        <member name="M:iTextSharp.text.IDocListener.SetMargins(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the margins.
            </summary>
            <param name="marginLeft">the margin on the left</param>
            <param name="marginRight">the margin on the right</param>
            <param name="marginTop">the margin on the top</param>
            <param name="marginBottom">the margin on the bottom</param>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.IDocListener.SetMarginMirroring(System.Boolean)">
            Parameter that allows you to do margin mirroring (odd/even pages)
            @param marginMirroring
            @return true if succesfull
        </member>
        <member name="M:iTextSharp.text.IDocListener.SetMarginMirroringTopBottom(System.Boolean)">
            Parameter that allows you to do top/bottom margin mirroring (odd/even pages)
            @param marginMirroringTopBottom
            @return true if successful
            @since	2.1.6
        </member>
        <member name="M:iTextSharp.text.IDocListener.ResetPageCount">
            <summary>
            Sets the page number to 0.
            </summary>
        </member>
        <member name="M:iTextSharp.text.IDocListener.ResetHeader">
            <summary>
            Resets the header of this document.
            </summary>
        </member>
        <member name="M:iTextSharp.text.IDocListener.ResetFooter">
            <summary>
            Resets the footer of this document.
            </summary>
        </member>
        <member name="P:iTextSharp.text.IDocListener.PageCount">
            <summary>
            Sets the page number.
            </summary>
            <value>the new page number</value>
        </member>
        <member name="P:iTextSharp.text.IDocListener.Header">
            <summary>
            Changes the header of this document.
            </summary>
            <value>a Header</value>
        </member>
        <member name="P:iTextSharp.text.IDocListener.Footer">
            <summary>
            Changes the footer of this document.
            </summary>
            <value>a Footer</value>
        </member>
        <member name="F:iTextSharp.text.DocWriter.NEWLINE">
            <summary> This is some byte that is often used. </summary>
        </member>
        <member name="F:iTextSharp.text.DocWriter.TAB">
            <summary> This is some byte that is often used. </summary>
        </member>
        <member name="F:iTextSharp.text.DocWriter.LT">
            <summary> This is some byte that is often used. </summary>
        </member>
        <member name="F:iTextSharp.text.DocWriter.SPACE">
            <summary> This is some byte that is often used. </summary>
        </member>
        <member name="F:iTextSharp.text.DocWriter.EQUALS">
            <summary> This is some byte that is often used. </summary>
        </member>
        <member name="F:iTextSharp.text.DocWriter.QUOTE">
            <summary> This is some byte that is often used. </summary>
        </member>
        <member name="F:iTextSharp.text.DocWriter.GT">
            <summary> This is some byte that is often used. </summary>
        </member>
        <member name="F:iTextSharp.text.DocWriter.FORWARD">
            <summary> This is some byte that is often used. </summary>
        </member>
        <member name="F:iTextSharp.text.DocWriter.pageSize">
            <summary> The pageSize. </summary>
        </member>
        <member name="F:iTextSharp.text.DocWriter.document">
            <summary> This is the document that has to be written. </summary>
        </member>
        <member name="F:iTextSharp.text.DocWriter.os">
            <summary> The stream of this writer. </summary>
        </member>
        <member name="F:iTextSharp.text.DocWriter.open">
            <summary> Is the writer open for writing? </summary>
        </member>
        <member name="F:iTextSharp.text.DocWriter.pause">
            <summary> Do we have to pause all writing actions? </summary>
        </member>
        <member name="F:iTextSharp.text.DocWriter.closeStream">
            Closes the stream on document close 
        </member>
        <member name="M:iTextSharp.text.DocWriter.#ctor(iTextSharp.text.Document,System.IO.Stream)">
            <summary>
            Constructs a DocWriter.
            </summary>
            <param name="document">The Document that has to be written</param>
            <param name="os">The Stream the writer has to write to.</param>
        </member>
        <member name="M:iTextSharp.text.DocWriter.Add(iTextSharp.text.IElement)">
            <summary>
            Signals that an Element was added to the Document.
            </summary>
            <remarks>
            This method should be overriden in the specific DocWriter classes
            derived from this abstract class.
            </remarks>
            <param name="element"></param>
            <returns>false</returns>
        </member>
        <member name="M:iTextSharp.text.DocWriter.Open">
            <summary>
            Signals that the Document was opened.
            </summary>
        </member>
        <member name="M:iTextSharp.text.DocWriter.SetPageSize(iTextSharp.text.Rectangle)">
            <summary>
            Sets the pagesize.
            </summary>
            <param name="pageSize">the new pagesize</param>
            <returns>a boolean</returns>
        </member>
        <member name="M:iTextSharp.text.DocWriter.SetMargins(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the margins.
            </summary>
            <remarks>
            This does nothing. Has to be overridden if needed.
            </remarks>
            <param name="marginLeft">the margin on the left</param>
            <param name="marginRight">the margin on the right</param>
            <param name="marginTop">the margin on the top</param>
            <param name="marginBottom">the margin on the bottom</param>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.DocWriter.NewPage">
            <summary>
            Signals that an new page has to be started.
            </summary>
            <remarks>
            This does nothing. Has to be overridden if needed.
            </remarks>
            <returns>true if the page was added, false if not.</returns>
        </member>
        <member name="M:iTextSharp.text.DocWriter.ResetHeader">
            <summary>
            Resets the header of this document.
            </summary>
            <remarks>
            This method should be overriden in the specific DocWriter classes
            derived from this abstract class if they actually support the use of
            headers.
            </remarks>
        </member>
        <member name="M:iTextSharp.text.DocWriter.ResetFooter">
            <summary>
            Resets the footer of this document.
            </summary>
            <remarks>
            This method should be overriden in the specific DocWriter classes
            derived from this abstract class if they actually support the use of
            footers.
            </remarks>
        </member>
        <member name="M:iTextSharp.text.DocWriter.ResetPageCount">
            <summary>
            Sets the page number to 0.
            </summary>
            <remarks>
            This method should be overriden in the specific DocWriter classes
            derived from this abstract class if they actually support the use of
            pagenumbers.
            </remarks>
        </member>
        <member name="M:iTextSharp.text.DocWriter.Close">
            <summary>
            Signals that the Document was closed and that no other
            Elements will be added.
            </summary>
        </member>
        <member name="M:iTextSharp.text.DocWriter.GetISOBytes(System.String)">
            <summary>
            Converts a string into a Byte array
            according to the ISO-8859-1 codepage.
            </summary>
            <param name="text">the text to be converted</param>
            <returns>the conversion result</returns>
        </member>
        <member name="M:iTextSharp.text.DocWriter.Pause">
            <summary>
            Let the writer know that all writing has to be paused.
            </summary>
        </member>
        <member name="M:iTextSharp.text.DocWriter.IsPaused">
             Checks if writing is paused.
            
             @return       <CODE>true</CODE> if writing temporarely has to be paused, <CODE>false</CODE> otherwise.
        </member>
        <member name="M:iTextSharp.text.DocWriter.Resume">
            <summary>
            Let the writer know that writing may be resumed.
            </summary>
        </member>
        <member name="M:iTextSharp.text.DocWriter.Flush">
            <summary>
            Flushes the Stream.
            </summary>
        </member>
        <member name="M:iTextSharp.text.DocWriter.Write(System.String)">
            <summary>
            Writes a string to the stream.
            </summary>
            <param name="str">the string to write</param>
        </member>
        <member name="M:iTextSharp.text.DocWriter.AddTabs(System.Int32)">
            <summary>
            Writes a number of tabs.
            </summary>
            <param name="indent">the number of tabs to add</param>
        </member>
        <member name="M:iTextSharp.text.DocWriter.Write(System.String,System.String)">
            <summary>
            Writes a key-value pair to the stream.
            </summary>
            <param name="key">the name of an attribute</param>
            <param name="value">the value of an attribute</param>
        </member>
        <member name="M:iTextSharp.text.DocWriter.WriteStart(System.String)">
            <summary>
            Writes a starttag to the stream.
            </summary>
            <param name="tag">the name of the tag</param>
        </member>
        <member name="M:iTextSharp.text.DocWriter.WriteEnd(System.String)">
            <summary>
            Writes an endtag to the stream.
            </summary>
            <param name="tag">the name of the tag</param>
        </member>
        <member name="M:iTextSharp.text.DocWriter.WriteEnd">
            <summary>
            Writes an endtag to the stream.
            </summary>
        </member>
        <member name="M:iTextSharp.text.DocWriter.WriteMarkupAttributes(System.util.Properties)">
            <summary>
            Writes the markup attributes of the specified MarkupAttributes
            object to the stream.
            </summary>
            <param name="mAtt">the MarkupAttributes to write.</param>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.DocWriter.SetMarginMirroringTopBottom(System.Boolean)">
            @see com.lowagie.text.DocListener#setMarginMirroring(boolean)
            @since	2.1.6
        </member>
        <member name="P:iTextSharp.text.DocWriter.Header">
            <summary>
            Changes the header of this document.
            </summary>
            <remarks>
            This method should be overriden in the specific DocWriter classes
            derived from this abstract class if they actually support the use of
            headers.
            </remarks>
            <value>the new header</value>
        </member>
        <member name="P:iTextSharp.text.DocWriter.Footer">
            <summary>
            Changes the footer of this document.
            </summary>
            <remarks>
            This method should be overriden in the specific DocWriter classes
            derived from this abstract class if they actually support the use of
            footers.
            </remarks>
            <value>the new footer</value>
        </member>
        <member name="P:iTextSharp.text.DocWriter.PageCount">
            <summary>
            Sets the page number.
            </summary>
            <remarks>
            This method should be overriden in the specific DocWriter classes
            derived from this abstract class if they actually support the use of
            pagenumbers.
            </remarks>
        </member>
        <member name="T:iTextSharp.text.pdf.interfaces.IPdfViewerPreferences">
            Viewer preferences are described in section 3.6.1 and 8.1 of the
            PDF Reference 1.7 (Table 3.25 on p139-142 and Table 8.1 on p579-581).
            They are explained in section 13.1 of the book 'iText in Action'.
            The values of the different preferences were originally stored
            in class PdfWriter, but they have been moved to this separate interface
            for reasons of convenience.
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.interfaces.IPdfViewerPreferences.AddViewerPreference(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfObject)" -->
        <!-- Badly formed XML comment ignored for member "P:iTextSharp.text.pdf.interfaces.IPdfViewerPreferences.ViewerPreferences" -->
        <member name="T:iTextSharp.text.pdf.interfaces.IPdfEncryptionSettings">
            Encryption settings are described in section 3.5 (more specifically
            section 3.5.2) of the PDF Reference 1.7.
            They are explained in section 3.3.3 of the book 'iText in Action'.
            The values of the different  preferences were originally stored
            in class PdfWriter, but they have been moved to this separate interface
            for reasons of convenience.
        </member>
        <member name="M:iTextSharp.text.pdf.interfaces.IPdfEncryptionSettings.SetEncryption(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            Sets the encryption options for this document. The userPassword and the
            ownerPassword can be null or have zero length. In this case the ownerPassword
            is replaced by a random string. The open permissions for the document can be
            AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
            AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
            The permissions can be combined by ORing them.
            @param userPassword the user password. Can be null or empty
            @param ownerPassword the owner password. Can be null or empty
            @param permissions the user permissions
            @param encryptionType the type of encryption. It can be one of STANDARD_ENCRYPTION_40, STANDARD_ENCRYPTION_128 or ENCRYPTION_AES128.
            Optionally DO_NOT_ENCRYPT_METADATA can be ored to output the metadata in cleartext
            @throws DocumentException if the document is already open
        </member>
        <member name="M:iTextSharp.text.pdf.interfaces.IPdfEncryptionSettings.SetEncryption(Org.BouncyCastle.X509.X509Certificate[],System.Int32[],System.Int32)">
            Sets the certificate encryption options for this document. An array of one or more public certificates
            must be provided together with an array of the same size for the permissions for each certificate.
             The open permissions for the document can be
             AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
             AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
             The permissions can be combined by ORing them.
            Optionally DO_NOT_ENCRYPT_METADATA can be ored to output the metadata in cleartext
            @param certs the public certificates to be used for the encryption
            @param permissions the user permissions for each of the certicates
            @param encryptionType the type of encryption. It can be one of STANDARD_ENCRYPTION_40, STANDARD_ENCRYPTION_128 or ENCRYPTION_AES128.
            @throws DocumentException if the document is already open
        </member>
        <member name="T:iTextSharp.text.pdf.interfaces.IPdfVersion">
            The PDF version is described in the PDF Reference 1.7 p92
            (about the PDF Header) and page 139 (the version entry in
            the Catalog). You'll also find info about setting the version
            in the book 'iText in Action' sections 2.1.3 (PDF Header)
            and 3.3 (Version history).
        </member>
        <member name="M:iTextSharp.text.pdf.interfaces.IPdfVersion.SetAtLeastPdfVersion(System.Char)">
            If the PDF Header hasn't been written yet,
            this changes the version as it will appear in the PDF Header,
            but only if param refers to a higher version.
            If the PDF header was already written to the Stream,
            this changes the version as it will appear in the Catalog.
            @param version   a character representing the PDF version
        </member>
        <member name="M:iTextSharp.text.pdf.interfaces.IPdfVersion.SetPdfVersion(iTextSharp.text.pdf.PdfName)">
            Sets the PDF version as it will appear in the Catalog.
            Note that this only has effect if you use a later version
            than the one that appears in the header; this method
            ignores the parameter if you try to set a lower version.
            @param version   the PDF name that will be used for the Version key in the catalog
        </member>
        <member name="M:iTextSharp.text.pdf.interfaces.IPdfVersion.AddDeveloperExtension(iTextSharp.text.pdf.PdfDeveloperExtension)">
            Adds a developer extension to the Extensions dictionary
            in the Catalog.
            @param de an object that contains the extensions prefix and dictionary
            @since    2.1.6
        </member>
        <member name="P:iTextSharp.text.pdf.interfaces.IPdfVersion.PdfVersion">
            If the PDF Header hasn't been written yet,
            this changes the version as it will appear in the PDF Header.
            If the PDF header was already written to the Stream,
            this changes the version as it will appear in the Catalog.
            @param version   a character representing the PDF version
        </member>
        <member name="T:iTextSharp.text.pdf.interfaces.IPdfDocumentActions">
            A PDF document can have an open action and other additional actions.
        </member>
        <member name="M:iTextSharp.text.pdf.interfaces.IPdfDocumentActions.SetOpenAction(System.String)">
            When the document opens it will jump to the destination with
            this name.
            @param name the name of the destination to jump to
        </member>
        <member name="M:iTextSharp.text.pdf.interfaces.IPdfDocumentActions.SetOpenAction(iTextSharp.text.pdf.PdfAction)">
            When the document opens this <CODE>action</CODE> will be
            invoked.
            @param action the action to be invoked
        </member>
        <member name="M:iTextSharp.text.pdf.interfaces.IPdfDocumentActions.SetAdditionalAction(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfAction)">
             Additional-actions defining the actions to be taken in
             response to various trigger events affecting the document
             as a whole. The actions types allowed are: <CODE>DOCUMENT_CLOSE</CODE>,
             <CODE>WILL_SAVE</CODE>, <CODE>DID_SAVE</CODE>, <CODE>WILL_PRINT</CODE>
             and <CODE>DID_PRINT</CODE>.
            
             @param actionType the action type
             @param action the action to execute in response to the trigger
             @throws DocumentException on invalid action type
        </member>
        <member name="T:iTextSharp.text.pdf.interfaces.IPdfPageActions">
            A PDF page can have an open and/or close action.
        </member>
        <member name="M:iTextSharp.text.pdf.interfaces.IPdfPageActions.SetPageAction(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfAction)">
            Sets the open and close page additional action.
            @param actionType the action type. It can be <CODE>PdfWriter.PAGE_OPEN</CODE>
            or <CODE>PdfWriter.PAGE_CLOSE</CODE>
            @param action the action to perform
            @throws DocumentException if the action type is invalid
        </member>
        <member name="P:iTextSharp.text.pdf.interfaces.IPdfPageActions.Duration">
            Sets the display duration for the page (for presentations)
            @param seconds   the number of seconds to display the page
        </member>
        <member name="P:iTextSharp.text.pdf.interfaces.IPdfPageActions.Transition">
            Sets the transition for the page
            @param transition   the Transition object
        </member>
        <member name="M:iTextSharp.text.pdf.interfaces.IPdfXConformance.IsPdfX">
            Checks if the PDF/X Conformance is necessary.
            @return true if the PDF has to be in conformance with any of the PDF/X specifications
        </member>
        <member name="P:iTextSharp.text.pdf.interfaces.IPdfXConformance.PDFXConformance">
            Sets the PDF/X conformance level.
            Allowed values are PDFX1A2001, PDFX32002, PDFA1A and PDFA1B.
            It must be called before opening the document.
            @param pdfxConformance the conformance level
        </member>
        <member name="P:iTextSharp.text.pdf.interfaces.IPdfRunDirection.RunDirection">
            Sets the run direction. This is only used as a placeholder
            as it does not affect anything.
            @param runDirection the run direction
        </member>
        <member name="M:iTextSharp.text.pdf.interfaces.IPdfAnnotations.AddAnnotation(iTextSharp.text.pdf.PdfAnnotation)">
            Use this methods to add a <CODE>PdfAnnotation</CODE> or a <CODE>PdfFormField</CODE>
            to the document. Only the top parent of a <CODE>PdfFormField</CODE>
            needs to be added.
            @param annot the <CODE>PdfAnnotation</CODE> or the <CODE>PdfFormField</CODE> to add
        </member>
        <member name="M:iTextSharp.text.pdf.interfaces.IPdfAnnotations.AddCalculationOrder(iTextSharp.text.pdf.PdfFormField)">
            Use this method to adds the <CODE>PdfAnnotation</CODE>
            to the calculation order array.
            @param annot the <CODE>PdfAnnotation</CODE> to be added
        </member>
        <member name="P:iTextSharp.text.pdf.interfaces.IPdfAnnotations.AcroForm">
            Use this methods to get the AcroForm object.
            Use this method only if you know what you're doing
            @return the PdfAcroform object of the PdfDocument
        </member>
        <member name="P:iTextSharp.text.pdf.interfaces.IPdfAnnotations.SigFlags">
            Use this method to set the signature flags.
            @param f the flags. This flags are ORed with current ones
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.GENERATION_MAX">
            The highest generation number possible.
            @since   iText 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.VERSION_1_2">
            possible PDF version (header) 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.VERSION_1_3">
            possible PDF version (header) 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.VERSION_1_4">
            possible PDF version (header) 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.VERSION_1_5">
            possible PDF version (header) 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.VERSION_1_6">
            possible PDF version (header) 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.VERSION_1_7">
            possible PDF version (header) 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PageLayoutSinglePage">
            A viewer preference 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PageLayoutOneColumn">
            A viewer preference 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PageLayoutTwoColumnLeft">
            A viewer preference 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PageLayoutTwoColumnRight">
            A viewer preference 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PageLayoutTwoPageLeft">
            A viewer preference 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PageLayoutTwoPageRight">
            A viewer preference 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PageModeUseNone">
            A viewer preference 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PageModeUseOutlines">
            A viewer preference 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PageModeUseThumbs">
            A viewer preference 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PageModeFullScreen">
            A viewer preference 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PageModeUseOC">
            A viewer preference 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PageModeUseAttachments">
            A viewer preference 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.HideToolbar">
            A viewer preference 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.HideMenubar">
            A viewer preference 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.HideWindowUI">
            A viewer preference 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.FitWindow">
            A viewer preference 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.CenterWindow">
            A viewer preference 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.DisplayDocTitle">
            A viewer preference 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.NonFullScreenPageModeUseNone">
            A viewer preference 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.NonFullScreenPageModeUseOutlines">
            A viewer preference 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.NonFullScreenPageModeUseThumbs">
            A viewer preference 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.NonFullScreenPageModeUseOC">
            A viewer preference 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.DirectionL2R">
            A viewer preference 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.DirectionR2L">
            A viewer preference 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PrintScalingNone">
            A viewer preference 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.SIGNATURE_EXISTS">
            signature value 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.SIGNATURE_APPEND_ONLY">
            signature value 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PDFXNONE">
            PDF/X level 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PDFX1A2001">
            PDF/X level 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PDFX32002">
            PDF/X level 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PDFA1A">
            PDFA-1A level. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PDFA1B">
            PDFA-1B level. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.STANDARD_ENCRYPTION_40">
            Type of encryption 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.STANDARD_ENCRYPTION_128">
            Type of encryption 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.ENCRYPTION_AES_128">
            Type of encryption 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.ENCRYPTION_MASK">
            Mask to separate the encryption type from the encryption mode. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.DO_NOT_ENCRYPT_METADATA">
            Add this to the mode to keep the metadata in clear text 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.EMBEDDED_FILES_ONLY">
            Add this to the mode to keep encrypt only the embedded files.
            @since 2.1.3
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.ALLOW_PRINTING">
            The operation permitted when the document is opened with the user password
            
             @since 2.0.7
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.ALLOW_MODIFY_CONTENTS">
            The operation permitted when the document is opened with the user password
            
             @since 2.0.7
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.ALLOW_COPY">
            The operation permitted when the document is opened with the user password
            
             @since 2.0.7
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.ALLOW_MODIFY_ANNOTATIONS">
            The operation permitted when the document is opened with the user password
            
             @since 2.0.7
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.ALLOW_FILL_IN">
            The operation permitted when the document is opened with the user password
            
             @since 2.0.7
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.ALLOW_SCREENREADERS">
            The operation permitted when the document is opened with the user password
            
             @since 2.0.7
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.ALLOW_ASSEMBLY">
            The operation permitted when the document is opened with the user password
            
             @since 2.0.7
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.ALLOW_DEGRADED_PRINTING">
            The operation permitted when the document is opened with the user password
            
             @since 2.0.7
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.AllowPrinting">
            @deprecated As of iText 2.0.7, use {@link #ALLOW_PRINTING} instead. Scheduled for removal at or after 2.2.0 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.AllowModifyContents">
            @deprecated As of iText 2.0.7, use {@link #ALLOW_MODIFY_CONTENTS} instead. Scheduled for removal at or after 2.2.0 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.AllowCopy">
            @deprecated As of iText 2.0.7, use {@link #ALLOW_COPY} instead. Scheduled for removal at or after 2.2.0 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.AllowModifyAnnotations">
            @deprecated As of iText 2.0.7, use {@link #ALLOW_MODIFY_ANNOTATIONS} instead. Scheduled for removal at or after 2.2.0 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.AllowFillIn">
            @deprecated As of iText 2.0.7, use {@link #ALLOW_FILL_IN} instead. Scheduled for removal at or after 2.2.0 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.AllowScreenReaders">
            @deprecated As of iText 2.0.7, use {@link #ALLOW_SCREENREADERS} instead. Scheduled for removal at or after 2.2.0 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.AllowAssembly">
            @deprecated As of iText 2.0.7, use {@link #ALLOW_ASSEMBLY} instead. Scheduled for removal at or after 2.2.0 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.AllowDegradedPrinting">
            @deprecated As of iText 2.0.7, use {@link #ALLOW_DEGRADED_PRINTING} instead. Scheduled for removal at or after 2.2.0 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.STRENGTH40BITS">
            @deprecated As of iText 2.0.7, use {@link #STANDARD_ENCRYPTION_40} instead. Scheduled for removal at or after 2.2.0 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.STRENGTH128BITS">
            @deprecated As of iText 2.0.7, use {@link #STANDARD_ENCRYPTION_128} instead. Scheduled for removal at or after 2.2.0 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.SPACE_CHAR_RATIO_DEFAULT">
            The default space-char ratio. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.NO_SPACE_CHAR_RATIO">
            Disable the inter-character spacing. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.RUN_DIRECTION_DEFAULT">
            Use the default run direction. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.RUN_DIRECTION_NO_BIDI">
            Do not use bidirectional reordering. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.RUN_DIRECTION_LTR">
            Use bidirectional reordering with left-to-right
            preferential run direction.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.RUN_DIRECTION_RTL">
            Use bidirectional reordering with right-to-left
            preferential run direction.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.#ctor">
            Constructs a <CODE>PdfWriter</CODE>.
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfWriter.#ctor(iTextSharp.text.pdf.PdfDocument,System.IO.Stream)" -->
        <member name="M:iTextSharp.text.pdf.PdfWriter.GetInstance(iTextSharp.text.Document,System.IO.Stream)">
             Use this method to get an instance of the <CODE>PdfWriter</CODE>.
            
             @param    document    The <CODE>Document</CODE> that has to be written
             @param    os  The <CODE>Stream</CODE> the writer has to write to.
             @return   a new <CODE>PdfWriter</CODE>
            
             @throws   DocumentException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.GetInstance(iTextSharp.text.Document,System.IO.Stream,iTextSharp.text.IDocListener)">
             Use this method to get an instance of the <CODE>PdfWriter</CODE>.
            
             @return a new <CODE>PdfWriter</CODE>
             @param document The <CODE>Document</CODE> that has to be written
             @param os The <CODE>Stream</CODE> the writer has to write to.
             @param listener A <CODE>DocListener</CODE> to pass to the PdfDocument.
             @throws DocumentException on error
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.pdf">
            the pdfdocument object. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.GetVerticalPosition(System.Boolean)">
            Use this method to get the current vertical page position.
            @param ensureNewLine Tells whether a new line shall be enforced. This may cause side effects 
              for elements that do not terminate the lines they've started because those lines will get
              terminated. 
            @return The current vertical page position.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.directContent">
            The direct content in this document. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.directContentUnder">
            The direct content under in this document. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.ResetContent">
            Resets all the direct contents to empty.
            This happens when a new page is started.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.body">
            body of the PDF document 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddLocalDestinations(System.util.collections.OrderedTree)">
            Adds the local destinations to the body of the document.
            @param dest the <CODE>Hashtable</CODE> containing the destinations
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddToBody(iTextSharp.text.pdf.PdfObject)">
            Adds an object to the PDF body.
            @param object
            @return a PdfIndirectObject
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddToBody(iTextSharp.text.pdf.PdfObject,System.Boolean)">
            Adds an object to the PDF body.
            @param object
            @param inObjStm
            @return a PdfIndirectObject
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddToBody(iTextSharp.text.pdf.PdfObject,iTextSharp.text.pdf.PdfIndirectReference)">
            Adds an object to the PDF body.
            @param object
            @param ref
            @return a PdfIndirectObject
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddToBody(iTextSharp.text.pdf.PdfObject,iTextSharp.text.pdf.PdfIndirectReference,System.Boolean)">
            Adds an object to the PDF body.
            @param object
            @param ref
            @param inObjStm
            @return a PdfIndirectObject
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddToBody(iTextSharp.text.pdf.PdfObject,System.Int32)">
            Adds an object to the PDF body.
            @param object
            @param refNumber
            @return a PdfIndirectObject
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddToBody(iTextSharp.text.pdf.PdfObject,System.Int32,System.Boolean)">
            Adds an object to the PDF body.
            @param object
            @param refNumber
            @param inObjStm
            @return a PdfIndirectObject
            @throws IOException
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.extraCatalog">
            Holds value of property extraCatalog. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.root">
            The root of the page tree. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.pageReferences">
            The PdfIndirectReference to the pages. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.currentPageNumber">
            The current page number. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.tabs">
            The value of the Tabs entry in the page dictionary.
            @since   2.1.5
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.SetLinearPageMode">
            Use this method to make sure the page tree has a lineair structure
            (every leave is attached directly to the root).
            Use this method to allow page reordering with method reorderPages.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.ReorderPages(System.Int32[])">
            Use this method to reorder the pages in the document.
            A <CODE>null</CODE> argument value only returns the number of pages to process.
            It is advisable to issue a <CODE>Document.newPage()</CODE> before using this method.
            @return the total number of pages
            @param order an array with the new page sequence. It must have the
            same size as the number of pages.
            @throws DocumentException if all the pages are not present in the array
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.GetPageReference(System.Int32)">
            Use this method to get a reference to a page existing or not.
            If the page does not exist yet the reference will be created
            in advance. If on closing the document, a page number greater
            than the total number of pages was requested, an exception
            is thrown.
            @param page the page number. The first page is 1
            @return the reference to the page
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfWriter.Add(iTextSharp.text.pdf.PdfPage,iTextSharp.text.pdf.PdfContents)" -->
        <member name="F:iTextSharp.text.pdf.PdfWriter.pageEvent">
            The <CODE>PdfPageEvent</CODE> for this document. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.prevxref">
            A number refering to the previous Cross-Reference Table. 
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfWriter.Open" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfWriter.Close" -->
        <member name="F:iTextSharp.text.pdf.PdfWriter.PDF_VERSION_1_2">
            possible PDF version (catalog) 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PDF_VERSION_1_3">
            possible PDF version (catalog) 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PDF_VERSION_1_4">
            possible PDF version (catalog) 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PDF_VERSION_1_5">
            possible PDF version (catalog) 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PDF_VERSION_1_6">
            possible PDF version (catalog) 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PDF_VERSION_1_7">
            possible PDF version (catalog) 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.pdf_version">
            Stores the version information for the header and the catalog. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.SetAtLeastPdfVersion(System.Char)">
            @see com.lowagie.text.pdf.interfaces.PdfVersion#setAtLeastPdfVersion(char)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.SetPdfVersion(iTextSharp.text.pdf.PdfName)">
            @see com.lowagie.text.pdf.interfaces.PdfVersion#setPdfVersion(com.lowagie.text.pdf.PdfName)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddDeveloperExtension(iTextSharp.text.pdf.PdfDeveloperExtension)">
            @see com.lowagie.text.pdf.interfaces.PdfVersion#addDeveloperExtension(com.lowagie.text.pdf.PdfDeveloperExtension)
            @since   2.1.6
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.GetPdfVersion">
            Returns the version information.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddViewerPreference(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfObject)">
            Adds a viewer preference
            @param preferences the viewer preferences
            @see PdfViewerPreferences#addViewerPreference
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddJavaScript(iTextSharp.text.pdf.PdfAction)">
            Use this method to add a JavaScript action at the document level.
            When the document opens, all this JavaScript runs.
            @param js The JavaScript action
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddJavaScript(System.String,System.Boolean)">
            Adds a JavaScript action at the document level. When the document
            opens all this JavaScript runs.
            @param code the JavaScript code
            @param unicode select JavaScript unicode. Note that the internal
            Acrobat JavaScript engine does not support unicode,
            so this may or may not work for you
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddJavaScript(System.String)">
            Adds a JavaScript action at the document level. When the document
            opens all this JavaScript runs.
            @param code the JavaScript code
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddJavaScript(System.String,iTextSharp.text.pdf.PdfAction)">
            Use this method to add a JavaScript action at the document level.
            When the document opens, all this JavaScript runs.
            @param name The name of the JS Action in the name tree
            @param js The JavaScript action
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddJavaScript(System.String,System.String,System.Boolean)">
            Use this method to add a JavaScript action at the document level.
            When the document opens, all this JavaScript runs.
            @param name The name of the JS Action in the name tree
            @param code the JavaScript code
            @param unicode select JavaScript unicode. Note that the internal
            Acrobat JavaScript engine does not support unicode,
            so this may or may not work for you
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddJavaScript(System.String,System.String)">
            Use this method to adds a JavaScript action at the document level.
            When the document opens, all this JavaScript runs.
            @param name The name of the JS Action in the name tree
            @param code the JavaScript code
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddFileAttachment(System.String,System.Byte[],System.String,System.String)">
            Adds a file attachment at the document level.
            @param description the file description
            @param fileStore an array with the file. If it's <CODE>null</CODE>
            the file will be read from the disk
            @param file the path to the file. It will only be used if
            <CODE>fileStore</CODE> is not <CODE>null</CODE>
            @param fileDisplay the actual file name stored in the pdf
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddFileAttachment(System.String,iTextSharp.text.pdf.PdfFileSpecification)">
            Adds a file attachment at the document level.
            @param description the file description
            @param fs the file specification
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddFileAttachment(iTextSharp.text.pdf.PdfFileSpecification)">
            Adds a file attachment at the document level.
            @param fs the file specification
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.DOCUMENT_CLOSE">
            action value 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.WILL_SAVE">
            action value 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.DID_SAVE">
            action value 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.WILL_PRINT">
            action value 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.DID_PRINT">
            action value 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.SetOpenAction(System.String)">
            When the document opens it will jump to the destination with
            this name.
            @param name the name of the destination to jump to
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.SetOpenAction(iTextSharp.text.pdf.PdfAction)">
            When the document opens this <CODE>action</CODE> will be
            invoked.
            @param action the action to be invoked
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.SetAdditionalAction(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfAction)">
            Additional-actions defining the actions to be taken in
             response to various trigger events affecting the document
             as a whole. The actions types allowed are: <CODE>DOCUMENT_CLOSE</CODE>,
             <CODE>WILL_SAVE</CODE>, <CODE>DID_SAVE</CODE>, <CODE>WILL_PRINT</CODE>
             and <CODE>DID_PRINT</CODE>.
            
             @param actionType the action type
             @param action the action to execute in response to the trigger
             @throws PdfException on invalid action type
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddAnnotation(iTextSharp.text.pdf.PdfAnnotation)">
            Adds a <CODE>PdfAnnotation</CODE> or a <CODE>PdfFormField</CODE>
            to the document. Only the top parent of a <CODE>PdfFormField</CODE>
            needs to be added.
            @param annot the <CODE>PdfAnnotation</CODE> or the <CODE>PdfFormField</CODE> to add
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddCalculationOrder(iTextSharp.text.pdf.PdfFormField)">
            Adds the <CODE>PdfAnnotation</CODE> to the calculation order
            array.
            @param annot the <CODE>PdfAnnotation</CODE> to be added
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.xmpMetadata">
            XMP Metadata for the document. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.CreateXmpMetadata">
            Creates XMP Metadata based on the metadata in the PdfDocument.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.CreateXmpMetadataBytes">
            @return an XmpMetadata byte array
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.pdfxConformance">
            Stores the PDF/X level. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.IsPdfX">
            @see com.lowagie.text.pdf.interfaces.PdfXConformance#isPdfX() 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.SetOutputIntents(System.String,System.String,System.String,System.String,iTextSharp.text.pdf.ICC_Profile)">
            Sets the values of the output intent dictionary. Null values are allowed to
            suppress any key.
            @param outputConditionIdentifier a value
            @param outputCondition a value
            @param registryName a value
            @param info a value
            @param destOutputProfile a value
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.SetOutputIntents(System.String,System.String,System.String,System.String,System.Byte[])">
             Sets the values of the output intent dictionary. Null values are allowed to
             suppress any key.
            
             Prefer the <CODE>ICC_Profile</CODE>-based version of this method.
             @param outputConditionIdentifier a value
             @param outputCondition           a value, "PDFA/A" to force GTS_PDFA1, otherwise cued by pdfxConformance.
             @param registryName              a value
             @param info                      a value
             @param destOutputProfile         a value
             @since 1.x
            
             @throws IOException
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.SetOutputIntents(iTextSharp.text.pdf.PdfReader,System.Boolean)">
            Copies the output intent dictionary from other document to this one.
            @param reader the other document
            @param checkExistence <CODE>true</CODE> to just check for the existence of a valid output intent
            dictionary, <CODE>false</CODE> to insert the dictionary if it exists
            @throws IOException on error
            @return <CODE>true</CODE> if the output intent dictionary exists, <CODE>false</CODE>
            otherwise
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.crypto">
            Contains the business logic for cryptography. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.SetEncryption(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            Sets the encryption options for this document. The userPassword and the
             ownerPassword can be null or have zero length. In this case the ownerPassword
             is replaced by a random string. The open permissions for the document can be
             AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
             AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
             The permissions can be combined by ORing them.
            @param userPassword the user password. Can be null or empty
            @param ownerPassword the owner password. Can be null or empty
            @param permissions the user permissions
            @param encryptionType the type of encryption. It can be one of STANDARD_ENCRYPTION_40, STANDARD_ENCRYPTION_128 or ENCRYPTION_AES128.
            Optionally DO_NOT_ENCRYPT_METADATA can be ored to output the metadata in cleartext
            @throws DocumentException if the document is already open
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.SetEncryption(Org.BouncyCastle.X509.X509Certificate[],System.Int32[],System.Int32)">
            Sets the certificate encryption options for this document. An array of one or more public certificates
            must be provided together with an array of the same size for the permissions for each certificate.
             The open permissions for the document can be
             AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
             AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
             The permissions can be combined by ORing them.
            Optionally DO_NOT_ENCRYPT_METADATA can be ored to output the metadata in cleartext
            @param certs the public certificates to be used for the encryption
            @param permissions the user permissions for each of the certicates
            @param encryptionType the type of encryption. It can be one of STANDARD_ENCRYPTION_40, STANDARD_ENCRYPTION_128 or ENCRYPTION_AES128.
            @throws DocumentException if the document is already open
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.SetEncryption(System.Byte[],System.Byte[],System.Int32,System.Boolean)">
            Sets the encryption options for this document. The userPassword and the
             ownerPassword can be null or have zero length. In this case the ownerPassword
             is replaced by a random string. The open permissions for the document can be
             AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
             AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
             The permissions can be combined by ORing them.
            @param userPassword the user password. Can be null or empty
            @param ownerPassword the owner password. Can be null or empty
            @param permissions the user permissions
            @param strength128Bits <code>true</code> for 128 bit key length, <code>false</code> for 40 bit key length
            @throws DocumentException if the document is already open
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.SetEncryption(System.Boolean,System.String,System.String,System.Int32)">
            Sets the encryption options for this document. The userPassword and the
             ownerPassword can be null or have zero length. In this case the ownerPassword
             is replaced by a random string. The open permissions for the document can be
             AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
             AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
             The permissions can be combined by ORing them.
            @param strength <code>true</code> for 128 bit key length, <code>false</code> for 40 bit key length
            @param userPassword the user password. Can be null or empty
            @param ownerPassword the owner password. Can be null or empty
            @param permissions the user permissions
            @throws DocumentException if the document is already open
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.SetEncryption(System.Int32,System.String,System.String,System.Int32)">
            Sets the encryption options for this document. The userPassword and the
             ownerPassword can be null or have zero length. In this case the ownerPassword
             is replaced by a random string. The open permissions for the document can be
             AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
             AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
             The permissions can be combined by ORing them.
            @param encryptionType the type of encryption. It can be one of STANDARD_ENCRYPTION_40, STANDARD_ENCRYPTION_128 or ENCRYPTION_AES128.
            Optionally DO_NOT_ENCRYPT_METADATA can be ored to output the metadata in cleartext
            @param userPassword the user password. Can be null or empty
            @param ownerPassword the owner password. Can be null or empty
            @param permissions the user permissions
            @throws DocumentException if the document is already open
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.fullCompression">
            Holds value of property fullCompression.
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfWriter.SetFullCompression" -->
        <member name="F:iTextSharp.text.pdf.PdfWriter.compressionLevel">
            The compression level of the content streams.
            @since   2.1.3
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.documentFonts">
            The fonts of this document 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.fontNumber">
            The font number counter for the fonts in the document. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddSimple(iTextSharp.text.pdf.BaseFont)">
            Adds a <CODE>BaseFont</CODE> to the document but not to the page resources.
            It is used for templates.
            @param bf the <CODE>BaseFont</CODE> to add
            @return an <CODE>Object[]</CODE> where position 0 is a <CODE>PdfName</CODE>
            and position 1 is an <CODE>PdfIndirectReference</CODE>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.formXObjects">
            The form XObjects in this document. The key is the xref and the value
                        is Object[]{PdfName, template}.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.formXObjectsCounter">
            The name counter for the form XObjects name. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddDirectTemplateSimple(iTextSharp.text.pdf.PdfTemplate,iTextSharp.text.pdf.PdfName)">
            Adds a template to the document but not to the page resources.
            @param template the template to add
            @param forcedName the template name, rather than a generated one. Can be null
            @return the <CODE>PdfName</CODE> for this template
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.ReleaseTemplate(iTextSharp.text.pdf.PdfTemplate)">
            Releases the memory used by a template by writing it to the output. The template
            can still be added to any content but changes to the template itself won't have
            any effect.
            @param tp the template to release
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.GetImportedPage(iTextSharp.text.pdf.PdfReader,System.Int32)">
            Gets a page from other PDF document. The page can be used as
            any other PdfTemplate. Note that calling this method more than
            once with the same parameters will retrieve the same object.
            @param reader the PDF document where the page is
            @param pageNumber the page number. The first page is 1
            @return the template representing the imported page
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.FreeReader(iTextSharp.text.pdf.PdfReader)">
            Writes the reader to the document and frees the memory used by it.
            The main use is when concatenating multiple documents to keep the
            memory usage restricted to the current appending document.
            @param reader the <CODE>PdfReader</CODE> to free
            @throws IOException on error
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.documentColors">
            The colors of this document 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.colorNumber">
            The color number counter for the colors in the document. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddSimple(iTextSharp.text.pdf.PdfSpotColor)">
            Adds a <CODE>SpotColor</CODE> to the document but not to the page resources.
            @param spc the <CODE>SpotColor</CODE> to add
            @return an <CODE>Object[]</CODE> where position 0 is a <CODE>PdfName</CODE>
            and position 1 is an <CODE>PdfIndirectReference</CODE>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.documentPatterns">
            The patterns of this document 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.patternNumber">
            The patten number counter for the colors in the document. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.SetTagged">
            Mark this document for tagging. It must be called before open.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.IsTagged">
            Check if the document is marked for tagging.
            @return <CODE>true</CODE> if the document is marked for tagging
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddOCGRadioGroup(System.Collections.ArrayList)">
            Sets a collection of optional content groups whose states are intended to follow
            a "radio button" paradigm. That is, the state of at most one optional
            content group in the array should be ON at a time: if one group is turned
            ON, all others must be turned OFF.
            @param group the radio group
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.LockLayer(iTextSharp.text.pdf.PdfLayer)">
            Use this method to lock an optional content group.
            The state of a locked group cannot be changed through the user interface
            of a viewer application. Producers can use this entry to prevent the visibility
            of content that depends on these groups from being changed by users.
            @param layer the layer that needs to be added to the array of locked OCGs
            @since   2.1.2
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.SetBoxSize(System.String,iTextSharp.text.Rectangle)">
            Sets the page box sizes. Allowed names are: "crop", "trim", "art" and "bleed".
            @param boxName the box size
            @param size the size
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.GetBoxSize(System.String)">
            Gives the size of a trim, art, crop or bleed box, or null if not defined.
            @param boxName crop, trim, art or bleed
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PAGE_OPEN">
            action value 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PAGE_CLOSE">
            action value 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.SetPageAction(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfAction)">
            Sets the open and close page additional action.
            @param actionType the action type. It can be <CODE>PdfWriter.PAGE_OPEN</CODE>
            or <CODE>PdfWriter.PAGE_CLOSE</CODE>
            @param action the action to perform
            @throws PdfException if the action type is invalid
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.group">
            A group attributes dictionary specifying the attributes
            of the page’s page group for use in the transparent
            imaging model
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.spaceCharRatio">
            The ratio between the extra word spacing and the extra character spacing.
            Extra word spacing will grow <CODE>ratio</CODE> times more than extra character spacing.
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfWriter.SetDefaultColorspace(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfObject)" -->
        <member name="M:iTextSharp.text.pdf.PdfWriter.ClearTextWrap">
            Clears text wrapping around images (if applicable).
            Method suggested by Pelikan Stephan
            @throws DocumentException
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.imageDictionary">
            Dictionary, containing all the images of the PDF document 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.images">
            This is the list with all the images in the document. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddDirectImageSimple(iTextSharp.text.Image)">
            Adds an image to the document but not to the page resources. It is used with
            templates and <CODE>Document.Add(Image)</CODE>.
            @param image the <CODE>Image</CODE> to add
            @return the name of the image added
            @throws PdfException on error
            @throws DocumentException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddDirectImageSimple(iTextSharp.text.Image,iTextSharp.text.pdf.PdfIndirectReference)">
            Adds an image to the document but not to the page resources. It is used with
            templates and <CODE>Document.Add(Image)</CODE>.
            @param image the <CODE>Image</CODE> to add
            @param fixedRef the reference to used. It may be <CODE>null</CODE>,
            a <CODE>PdfIndirectReference</CODE> or a <CODE>PRIndirectReference</CODE>.
            @return the name of the image added
            @throws PdfException on error
            @throws DocumentException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.Add(iTextSharp.text.pdf.PdfImage,iTextSharp.text.pdf.PdfIndirectReference)">
             Writes a <CODE>PdfImage</CODE> to the outputstream.
            
             @param pdfImage the image to be added
             @return a <CODE>PdfIndirectReference</CODE> to the encapsulated image
             @throws PdfException when a document isn't open yet, or has been closed
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.GetImageReference(iTextSharp.text.pdf.PdfName)">
             return the <CODE>PdfIndirectReference</CODE> to the image with a given name.
            
             @param name the name of the image
             @return a <CODE>PdfIndirectReference</CODE>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.JBIG2Globals">
            A Hashtable with Stream objects containing JBIG2 Globals
            @since 2.1.5
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.GetReferenceJBIG2Globals(System.Byte[])">
            Gets an indirect reference to a JBIG2 Globals stream.
            Adds the stream if it hasn't already been added to the writer.
            @param   content a byte array that may already been added to the writer inside a stream object.
            @since  2.1.5
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.FitsPage(iTextSharp.text.Table,System.Single)">
             Checks if a <CODE>Table</CODE> fits the current page of the <CODE>PdfDocument</CODE>.
            
             @param    table   the table that has to be checked
             @param    margin  a certain margin
             @return   <CODE>true</CODE> if the <CODE>Table</CODE> fits the page, <CODE>false</CODE> otherwise.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.FitsPage(iTextSharp.text.Table)">
             Checks if a <CODE>Table</CODE> fits the current page of the <CODE>PdfDocument</CODE>.
            
             @param    table   the table that has to be checked
             @return   <CODE>true</CODE> if the <CODE>Table</CODE> fits the page, <CODE>false</CODE> otherwise.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.userProperties">
            A flag indicating the presence of structure elements that contain user properties attributes.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.rgbTransparencyBlending">
            Holds value of property RGBTranparency.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.PdfDocument">
            Gets the <CODE>PdfDocument</CODE> associated with this writer.
            @return the <CODE>PdfDocument</CODE>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.Info">
            Use this method to get the info dictionary if you want to
            change it directly (add keys and values to the info dictionary).
            @return the info dictionary
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.DirectContent">
            Use this method to get the direct content for this document.
            There is only one direct content, multiple calls to this method
            will allways retrieve the same object.
            @return the direct content
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.DirectContentUnder">
            Use this method to get the direct content under for this document.
            There is only one direct content, multiple calls to this method
            will allways retrieve the same object.
            @return the direct content
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.PdfIndirectReference">
            Gets a <CODE>PdfIndirectReference</CODE> for an object that
            will be created in the future.
            @return the <CODE>PdfIndirectReference</CODE>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.Os">
            Returns the outputStreamCounter.
            @return the outputStreamCounter
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.ExtraCatalog">
            Sets extra keys to the catalog.
            @return the catalog to change
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.PageNumber">
            Gets the pagenumber of this document.
            This number can be different from the real pagenumber,
            if you have (re)set the page number previously.
            @return a page number
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.Tabs">
            Sets the value for the Tabs entry in the page tree.
            @param	tabs	Can be PdfName.R, PdfName.C or PdfName.S.
            Since the Adobe Extensions Level 3, it can also be PdfName.A
            or PdfName.W
            @since	2.1.5
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.PageEvent">
            Gets the <CODE>PdfPageEvent</CODE> for this document or <CODE>null</CODE>
            if none is set.
            @return the <CODE>PdfPageEvent</CODE> for this document or <CODE>null</CODE>
            if none is set
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.RootOutline">
            Use this method to get the root outline
            and construct bookmarks.
            @return the root outline
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.Outlines">
            Sets the bookmarks. The list structure is defined in
            {@link SimpleBookmark}.
            @param outlines the bookmarks or <CODE>null</CODE> to remove any
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.PdfVersion">
            @see com.lowagie.text.pdf.interfaces.PdfVersion#setPdfVersion(char)
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.ViewerPreferences">
            Sets the viewer preferences as the sum of several constants.
            @param preferences the viewer preferences
            @see PdfViewerPreferences#setViewerPreferences
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.PageLabels">
            Use this method to add page labels
            @param pageLabels the page labels
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.Collection">
            Sets the Collection dictionary.
            @param collection a dictionary of type PdfCollection
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.AcroForm">
            Gets the AcroForm object.
            @return the <CODE>PdfAcroForm</CODE>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.SigFlags">
            Set the signature flags.
            @param f the flags. This flags are ORed with current ones
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.XmpMetadata">
            Sets XMP Metadata.
            @param xmpMetadata The xmpMetadata to set.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.PageXmpMetadata">
            Use this method to set the XMP Metadata for each page.
            @param xmpMetadata The xmpMetadata to set.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.PDFXConformance">
            Sets the PDFX conformance level. Allowed values are PDFX1A2001 and PDFX32002. It
            must be called before opening the document.
            @param pdfxConformance the conformance level
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.FullCompression">
            Gets the 1.5 compression status.
            @return <code>true</code> if the 1.5 compression is on
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.CompressionLevel">
            Sets the compression level to be used for streams written by this writer.
            @param compressionLevel a value between 0 (best speed) and 9 (best compression)
            @since   2.1.3
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.CurrentDocumentSize">
            Gets the current document size. This size only includes
            the data already writen to the output stream, it does not
            include templates or fonts. It is usefull if used with
            <CODE>freeReader()</CODE> when concatenating many documents
            and an idea of the current size is needed.
            @return the approximate size without fonts or templates
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.StructureTreeRoot">
            Gets the structure tree root. If the document is not marked for tagging it will return <CODE>null</CODE>.
            @return the structure tree root
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.OCProperties">
            Gets the <B>Optional Content Properties Dictionary</B>. Each call fills the dictionary with the current layer
            state. It's advisable to only call this method right before close and do any modifications
            at that time.
            @return the Optional Content Properties Dictionary
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.PageSize">
            Gives the size of the media box.
            @return a Rectangle
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.CropBoxSize">
            Sets the crop box. The crop box should not be rotated even if the
            page is rotated. This change only takes effect in the next
            page.
            @param crop the crop box
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.PageEmpty">
            If you use SetPageEmpty(false), invoking NewPage() after a blank page will add a newPage.
            @param pageEmpty the state
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.Duration">
            Sets the display duration for the page (for presentations)
            @param seconds   the number of seconds to display the page
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.Transition">
            Sets the transition for the page
            @param transition   the Transition object
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.Thumbnail">
            Sets the the thumbnail image for the current page.
            @param image the image
            @throws PdfException on error
            @throws DocumentException or error
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.SpaceCharRatio">
            Sets the ratio between the extra word spacing and the extra character spacing
            when the text is fully justified.
            Extra word spacing will grow <CODE>spaceCharRatio</CODE> times more than extra character spacing.
            If the ratio is <CODE>PdfWriter.NO_SPACE_CHAR_RATIO</CODE> then the extra character spacing
            will be zero.
            @param spaceCharRatio the ratio between the extra word spacing and the extra character spacing
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.RunDirection">
            Sets the run direction. This is only used as a placeholder
            as it does not affect anything.
            @param runDirection the run direction
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.Userunit">
            A UserUnit is a value that defines the default user space unit.
            The minimum UserUnit is 1 (1 unit = 1/72 inch).
            The maximum UserUnit is 75,000.
            Remark that this userunit only works starting with PDF1.6!
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.DefaultColorspace">
            Gets the default colorspaces.
            @return the default colorspaces
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.StrictImageSequence">
            Sets the image sequence to follow the text in strict order.
             @param strictImageSequence new value of property strictImageSequence
            
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.UserProperties">
            Sets the flag indicating the presence of structure elements that contain user properties attributes.
            @param userProperties the user properties flag
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.RgbTransparencyBlending">
            Sets the transparency blending colorspace to RGB. The default blending colorspace is
            CMYK and will result in faded colors in the screen and in printing. Calling this method
            will return the RGB colors to what is expected. The RGB blending will be applied to all subsequent pages
            until other value is set.
            Note that this is a generic solution that may not work in all cases.
            @param rgbTransparencyBlending <code>true</code> to set the transparency blending colorspace to RGB, <code>false</code>
            to use the default blending colorspace
        </member>
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.pdf.PdfWriter.PdfBody" -->
        <member name="F:iTextSharp.text.pdf.PdfWriter.PdfBody.xrefs">
            array containing the cross-reference table of the normal objects. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PdfBody.position">
            the current byteposition in the body. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.PdfBody.#ctor(iTextSharp.text.pdf.PdfWriter)">
            Constructs a new <CODE>PdfBody</CODE>.
            @param writer
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfWriter.PdfBody.Add(iTextSharp.text.pdf.PdfObject)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfWriter.PdfBody.Add(iTextSharp.text.pdf.PdfObject,iTextSharp.text.pdf.PdfIndirectReference)" -->
        <member name="M:iTextSharp.text.pdf.PdfWriter.PdfBody.WriteCrossReferenceTable(System.IO.Stream,iTextSharp.text.pdf.PdfIndirectReference,iTextSharp.text.pdf.PdfIndirectReference,iTextSharp.text.pdf.PdfIndirectReference,iTextSharp.text.pdf.PdfObject,System.Int32)">
            Returns the CrossReferenceTable of the <CODE>Body</CODE>.
            @param os
            @param root
            @param info
            @param encryption
            @param fileID
            @param prevxref
            @throws IOException
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.PdfBody.PdfIndirectReference">
            Gets a PdfIndirectReference for an object that will be created in the future.
            @return a PdfIndirectReference
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.PdfBody.Offset">
             Returns the offset of the Cross-Reference table.
            
             @return       an offset
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.PdfBody.Size">
             Returns the total number of objects contained in the CrossReferenceTable of this <CODE>Body</CODE>.
            
             @return   a number of objects
        </member>
        <member name="T:iTextSharp.text.pdf.PdfWriter.PdfBody.PdfCrossReference">
            <CODE>PdfCrossReference</CODE> is an entry in the PDF Cross-Reference table.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PdfBody.PdfCrossReference.offset">
            Byte offset in the PDF file. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PdfBody.PdfCrossReference.generation">
            generation of the object. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.PdfBody.PdfCrossReference.#ctor(System.Int32,System.Int32,System.Int32)">
            Constructs a cross-reference element for a PdfIndirectObject.
            @param refnum
            @param    offset      byte offset of the object
            @param    generation  generationnumber of the object
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.PdfBody.PdfCrossReference.#ctor(System.Int32,System.Int32)">
            Constructs a cross-reference element for a PdfIndirectObject.
            @param refnum
            @param    offset      byte offset of the object
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.PdfBody.PdfCrossReference.ToPdf(System.IO.Stream)">
            Returns the PDF representation of this <CODE>PdfObject</CODE>.
            @param os
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.PdfBody.PdfCrossReference.ToPdf(System.Int32,System.IO.Stream)">
            Writes PDF syntax to the Stream
            @param midSize
            @param os
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.PdfBody.PdfCrossReference.CompareTo(System.Object)">
            @see java.lang.Comparable#compareTo(java.lang.Object)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.PdfBody.PdfCrossReference.Equals(System.Object)">
            @see java.lang.Object#equals(java.lang.Object)
        </member>
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.pdf.PdfWriter.PdfTrailer" -->
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.pdf.PdfDictionary" -->
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.pdf.PdfObject" -->
        <member name="F:iTextSharp.text.pdf.PdfObject.BOOLEAN">
            a possible type of <CODE>PdfObject</CODE> 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfObject.NUMBER">
            a possible type of <CODE>PdfObject</CODE> 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfObject.STRING">
            a possible type of <CODE>PdfObject</CODE> 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfObject.NAME">
            a possible type of <CODE>PdfObject</CODE> 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfObject.ARRAY">
            a possible type of <CODE>PdfObject</CODE> 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfObject.DICTIONARY">
            a possible type of <CODE>PdfObject</CODE> 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfObject.STREAM">
            a possible type of <CODE>PdfObject</CODE> 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfObject.NULL">
            a possible type of <CODE>PdfObject</CODE> 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfObject.INDIRECT">
            a possible type of <CODE>PdfObject</CODE> 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfObject.NOTHING">
            This is an empty string used for the <CODE>PdfNull</CODE>-object and for an empty <CODE>PdfString</CODE>-object. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfObject.TEXT_PDFDOCENCODING">
            This is the default encoding to be used for converting strings into bytes and vice versa.
            The default encoding is PdfDocEcoding.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfObject.TEXT_UNICODE">
            This is the encoding to be used to output text in Unicode. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfObject.bytes">
            the content of this <CODE>PdfObject</CODE> 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfObject.type">
            the type of this <CODE>PdfObject</CODE> 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfObject.indRef">
            Holds value of property indRef.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfObject.#ctor(System.Int32)">
             Constructs a <CODE>PdfObject</CODE> of a certain <VAR>type</VAR> without any <VAR>content</VAR>.
            
             @param        type            type of the new <CODE>PdfObject</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfObject.#ctor(System.Int32,System.String)">
             Constructs a <CODE>PdfObject</CODE> of a certain <VAR>type</VAR> with a certain <VAR>content</VAR>.
            
             @param        type            type of the new <CODE>PdfObject</CODE>
             @param        content            content of the new <CODE>PdfObject</CODE> as a <CODE>String</CODE>.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfObject.#ctor(System.Int32,System.Byte[])">
             Constructs a <CODE>PdfObject</CODE> of a certain <VAR>type</VAR> with a certain <VAR>content</VAR>.
            
             @param        type            type of the new <CODE>PdfObject</CODE>
             @param        bytes            content of the new <CODE>PdfObject</CODE> as an array of <CODE>byte</CODE>.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfObject.ToPdf(iTextSharp.text.pdf.PdfWriter,System.IO.Stream)">
            Writes the PDF representation of this <CODE>PdfObject</CODE> as an array of <CODE>byte</CODE>s to the writer.
            @param writer for backwards compatibility
            @param os the outputstream to write the bytes to.
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.pdf.PdfObject.GetBytes">
            Gets the presentation of this object in a byte array
            @return a byte array
        </member>
        <member name="M:iTextSharp.text.pdf.PdfObject.CanBeInObjStm">
            Can this object be in an object stream?
            @return true if this object can be in an object stream.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfObject.ToString">
             Returns the <CODE>String</CODE>-representation of this <CODE>PdfObject</CODE>.
            
             @return        a <CODE>String</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfObject.IsNull">
             Checks if this <CODE>PdfObject</CODE> is of the type <CODE>PdfNull</CODE>.
            
             @return        <CODE>true</CODE> or <CODE>false</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfObject.IsBoolean">
             Checks if this <CODE>PdfObject</CODE> is of the type <CODE>PdfBoolean</CODE>.
            
             @return        <CODE>true</CODE> or <CODE>false</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfObject.IsNumber">
             Checks if this <CODE>PdfObject</CODE> is of the type <CODE>PdfNumber</CODE>.
            
             @return        <CODE>true</CODE> or <CODE>false</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfObject.IsString">
             Checks if this <CODE>PdfObject</CODE> is of the type <CODE>PdfString</CODE>.
            
             @return        <CODE>true</CODE> or <CODE>false</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfObject.IsName">
             Checks if this <CODE>PdfObject</CODE> is of the type <CODE>PdfName</CODE>.
            
             @return        <CODE>true</CODE> or <CODE>false</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfObject.IsArray">
             Checks if this <CODE>PdfObject</CODE> is of the type <CODE>PdfArray</CODE>.
            
             @return        <CODE>true</CODE> or <CODE>false</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfObject.IsDictionary">
             Checks if this <CODE>PdfObject</CODE> is of the type <CODE>PdfDictionary</CODE>.
            
             @return        <CODE>true</CODE> or <CODE>false</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfObject.IsStream">
             Checks if this <CODE>PdfObject</CODE> is of the type <CODE>PdfStream</CODE>.
            
             @return        <CODE>true</CODE> or <CODE>false</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfObject.IsIndirect">
            Checks if this is an indirect object.
            @return true if this is an indirect object
        </member>
        <member name="P:iTextSharp.text.pdf.PdfObject.Length">
             Returns the length of the actual content of the <CODE>PdfObject</CODE>.
             <P>
             In some cases, namely for <CODE>PdfString</CODE> and <CODE>PdfStream</CODE>,
             this method differs from the method <CODE>pdfLength</CODE> because <CODE>pdfLength</CODE>
             returns the length of the PDF representation of the object, not of the actual content
             as does the method <CODE>length</CODE>.</P>
             <P>
             Remark: the actual content of an object is in some cases identical to its representation.
             The following statement is always true: Length() &gt;= PdfLength().</P>
            
             @return        a length
        </member>
        <member name="P:iTextSharp.text.pdf.PdfObject.Content">
             Changes the content of this <CODE>PdfObject</CODE>.
            
             @param        content            the new content of this <CODE>PdfObject</CODE>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfObject.Type">
             Returns the type of this <CODE>PdfObject</CODE>.
            
             @return        a type
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDictionary.FONT">
            This is a possible type of dictionary 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDictionary.OUTLINES">
            This is a possible type of dictionary 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDictionary.PAGE">
            This is a possible type of dictionary 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDictionary.PAGES">
            This is a possible type of dictionary 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDictionary.CATALOG">
            This is a possible type of dictionary 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDictionary.dictionaryType">
            This is the type of this dictionary 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDictionary.hashMap">
            This is the hashmap that contains all the values and keys of the dictionary 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDictionary.#ctor">
            Constructs an empty <CODE>PdfDictionary</CODE>-object.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDictionary.#ctor(iTextSharp.text.pdf.PdfName)">
             Constructs a <CODE>PdfDictionary</CODE>-object of a certain type.
            
             @param        type    a <CODE>PdfName</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDictionary.ToPdf(iTextSharp.text.pdf.PdfWriter,System.IO.Stream)">
             Returns the PDF representation of this <CODE>PdfDictionary</CODE>.
            
             @return        an array of <CODE>byte</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDictionary.Put(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfObject)">
             Adds a <CODE>PdfObject</CODE> and its key to the <CODE>PdfDictionary</CODE>.
             If the value is <CODE>null</CODE> or <CODE>PdfNull</CODE> the key is deleted.
            
             @param        key        key of the entry (a <CODE>PdfName</CODE>)
             @param        value    value of the entry (a <CODE>PdfObject</CODE>)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDictionary.PutEx(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfObject)">
             Adds a <CODE>PdfObject</CODE> and its key to the <CODE>PdfDictionary</CODE>.
             If the value is null it does nothing.
            
             @param        key        key of the entry (a <CODE>PdfName</CODE>)
             @param        value    value of the entry (a <CODE>PdfObject</CODE>)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDictionary.Remove(iTextSharp.text.pdf.PdfName)">
             Removes a <CODE>PdfObject</CODE> and its key from the <CODE>PdfDictionary</CODE>.
            
             @param        key        key of the entry (a <CODE>PdfName</CODE>)
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfDictionary.Get(iTextSharp.text.pdf.PdfName)" -->
        <member name="M:iTextSharp.text.pdf.PdfDictionary.IsFont">
              Checks if a <CODE>Dictionary</CODE> is of the type FONT.
            
             @return        <CODE>true</CODE> if it is, <CODE>false</CODE> if it isn't.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDictionary.IsPage">
              Checks if a <CODE>Dictionary</CODE> is of the type PAGE.
            
             @return        <CODE>true</CODE> if it is, <CODE>false</CODE> if it isn't.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDictionary.IsPages">
              Checks if a <CODE>Dictionary</CODE> is of the type PAGES.
            
             @return        <CODE>true</CODE> if it is, <CODE>false</CODE> if it isn't.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDictionary.IsCatalog">
              Checks if a <CODE>Dictionary</CODE> is of the type CATALOG.
            
             @return        <CODE>true</CODE> if it is, <CODE>false</CODE> if it isn't.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDictionary.IsOutlineTree">
              Checks if a <CODE>Dictionary</CODE> is of the type OUTLINES.
            
             @return        <CODE>true</CODE> if it is, <CODE>false</CODE> if it isn't.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDictionary.GetDirectObject(iTextSharp.text.pdf.PdfName)">
            This function behaves the same as 'get', but will never return an indirect reference,
            it will always look such references up and return the actual object.
            @param key 
            @return null, or a non-indirect object
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDictionary.GetAsDict(iTextSharp.text.pdf.PdfName)">
            All the getAs functions will return either null, or the specified object type
            This function will automatically look up indirect references. There's one obvious
            exception, the one that will only return an indirect reference.  All direct objects
            come back as a null.
            Mark A Storer (2/17/06)
            @param key
            @return the appropriate object in its final type, or null
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.PdfTrailer.#ctor(System.Int32,System.Int32,iTextSharp.text.pdf.PdfIndirectReference,iTextSharp.text.pdf.PdfIndirectReference,iTextSharp.text.pdf.PdfIndirectReference,iTextSharp.text.pdf.PdfObject,System.Int32)">
             Constructs a PDF-Trailer.
            
             @param        size        the number of entries in the <CODE>PdfCrossReferenceTable</CODE>
             @param        offset      offset of the <CODE>PdfCrossReferenceTable</CODE>
             @param        root        an indirect reference to the root of the PDF document
             @param        info        an indirect reference to the info object of the PDF document
             @param encryption
             @param fileID
             @param prevxref
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.PdfTrailer.ToPdf(iTextSharp.text.pdf.PdfWriter,System.IO.Stream)">
            Returns the PDF representation of this <CODE>PdfObject</CODE>.
            @param writer
            @param os
            @throws IOException
        </member>
        <member name="F:iTextSharp.text.pdf.PdfStamperImp.pagesToContent">
            Integer(page number) -> PageStamp 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfStamperImp.rotateContents">
            Holds value of property rotateContents. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamperImp.#ctor(iTextSharp.text.pdf.PdfReader,System.IO.Stream,System.Char,System.Boolean)">
            Creates new PdfStamperImp.
            @param reader the read PDF
            @param os the output destination
            @param pdfVersion the new pdf version or '\0' to keep the same version as the original
            document
            @param append
            @throws DocumentException on error
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamperImp.RegisterReader(iTextSharp.text.pdf.PdfReader,System.Boolean)">
            @param reader
            @param openFile
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamperImp.UnRegisterReader(iTextSharp.text.pdf.PdfReader)">
            @param reader
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamperImp.AddComments(iTextSharp.text.pdf.FdfReader)">
            @param fdf
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamperImp.GetPageReference(System.Int32)">
            @see com.lowagie.text.pdf.PdfWriter#getPageReference(int)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamperImp.AddAnnotation(iTextSharp.text.pdf.PdfAnnotation)">
            @see com.lowagie.text.pdf.PdfWriter#addAnnotation(com.lowagie.text.pdf.PdfAnnotation)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamperImp.MakePackage(iTextSharp.text.pdf.collection.PdfCollection)">
            Adds or replaces the Collection Dictionary in the Catalog.
            @param   collection  the new collection dictionary.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamperImp.AddViewerPreference(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfObject)">
            Adds a viewer preference
            @param preferences the viewer preferences
            @see PdfViewerPreferences#addViewerPreference
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamperImp.SetPageAction(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfAction)">
            Always throws an <code>UnsupportedOperationException</code>.
            @param actionType ignore
            @param action ignore
            @throws PdfException ignore
            @see PdfStamper#setPageAction(PdfName, PdfAction, int)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamperImp.SetPageAction(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfAction,System.Int32)">
            Sets the open and close page additional action.
            @param actionType the action type. It can be <CODE>PdfWriter.PAGE_OPEN</CODE>
            or <CODE>PdfWriter.PAGE_CLOSE</CODE>
            @param action the action to perform
            @param page the page where the action will be applied. The first page is 1
            @throws PdfException if the action type is invalid
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamperImp.SetDuration(System.Int32,System.Int32)">
            Sets the display duration for the page (for presentations)
            @param seconds   the number of seconds to display the page. A negative value removes the entry
            @param page the page where the duration will be applied. The first page is 1
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamperImp.SetTransition(iTextSharp.text.pdf.PdfTransition,System.Int32)">
            Sets the transition for the page
            @param transition   the transition object. A <code>null</code> removes the transition
            @param page the page where the transition will be applied. The first page is 1
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamperImp.IsAppend">
            Getter for property append.
            @return Value of property append.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamperImp.SetAdditionalAction(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfAction)">
            Additional-actions defining the actions to be taken in
             response to various trigger events affecting the document
             as a whole. The actions types allowed are: <CODE>DOCUMENT_CLOSE</CODE>,
             <CODE>WILL_SAVE</CODE>, <CODE>DID_SAVE</CODE>, <CODE>WILL_PRINT</CODE>
             and <CODE>DID_PRINT</CODE>.
            
             @param actionType the action type
             @param action the action to execute in response to the trigger
             @throws PdfException on invalid action type
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamperImp.SetOpenAction(iTextSharp.text.pdf.PdfAction)">
            @see com.lowagie.text.pdf.PdfWriter#setOpenAction(com.lowagie.text.pdf.PdfAction)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamperImp.SetOpenAction(System.String)">
            @see com.lowagie.text.pdf.PdfWriter#setOpenAction(java.lang.String)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamperImp.ReadOCProperties">
            Reads the OCProperties dictionary from the catalog of the existing document
            and fills the documentOCG, documentOCGorder and OCGRadioGroup variables in PdfWriter.
            Note that the original OCProperties of the existing document can contain more information.
            @since    2.1.2
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamperImp.AddOrder(iTextSharp.text.pdf.PdfLayer,iTextSharp.text.pdf.PdfArray,System.Collections.Hashtable)">
            Recursive method to reconstruct the documentOCGorder variable in the writer.
            @param    parent  a parent PdfLayer (can be null)
            @param    arr     an array possibly containing children for the parent PdfLayer
            @param    ocgmap  a Hashtable with indirect reference Strings as keys and PdfLayer objects as values.
            @since    2.1.2
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamperImp.GetPdfLayers">
            Gets the PdfLayer objects in an existing document as a Map
            with the names/titles of the layers as keys.
            @return   a Map with all the PdfLayers in the document (and the name/title of the layer as key)
            @since    2.1.2
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStamperImp.ViewerPreferences">
            Sets the viewer preferences.
            @param preferences the viewer preferences
            @see PdfWriter#setViewerPreferences(int)
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStamperImp.SigFlags">
            Set the signature flags.
            @param f the flags. This flags are ORed with current ones
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStamperImp.Duration">
            Always throws an <code>UnsupportedOperationException</code>.
            @param seconds ignore
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStamperImp.Transition">
            Always throws an <code>UnsupportedOperationException</code>.
            @param transition ignore
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStamperImp.Thumbnail">
            @see com.lowagie.text.pdf.PdfWriter#setThumbnail(com.lowagie.text.Image)
        </member>
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.pdf.PdfPKCS7" -->
        <member name="F:iTextSharp.text.pdf.PdfPKCS7.reason">
            Holds value of property reason.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPKCS7.location">
            Holds value of property location.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPKCS7.signDate">
            Holds value of property signDate.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPKCS7.signName">
            Holds value of property signName.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPKCS7.GetDigest(System.String)">
            Gets the digest name for a certain id
            @param oid    an id (for instance "1.2.840.113549.2.5")
            @return   a digest name (for instance "MD5")
            @since    2.1.6
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPKCS7.GetAlgorithm(System.String)">
            Gets the algorithm name for a certain id.
            @param oid    an id (for instance "1.2.840.113549.1.1.1")
            @return   an algorithm name (for instance "RSA")
            @since    2.1.6
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPKCS7.#ctor(System.Byte[],System.Byte[])">
            Verifies a signature using the sub-filter adbe.x509.rsa_sha1.
            @param contentsKey the /Contents key
            @param certsKey the /Cert key
            @param provider the provider or <code>null</code> for the default provider
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPKCS7.#ctor(System.Byte[])">
            Verifies a signature using the sub-filter adbe.pkcs7.detached or
            adbe.pkcs7.sha1.
            @param contentsKey the /Contents key
            @param provider the provider or <code>null</code> for the default provider
            @throws SecurityException on error
            @throws CRLException on error
            @throws InvalidKeyException on error
            @throws CertificateException on error
            @throws NoSuchProviderException on error
            @throws NoSuchAlgorithmException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPKCS7.#ctor(Org.BouncyCastle.Crypto.ICipherParameters,Org.BouncyCastle.X509.X509Certificate[],System.Object[],System.String,System.Boolean)">
            Generates a signature.
            @param privKey the private key
            @param certChain the certificate chain
            @param crlList the certificate revocation list
            @param hashAlgorithm the hash algorithm
            @param provider the provider or <code>null</code> for the default provider
            @param hasRSAdata <CODE>true</CODE> if the sub-filter is adbe.pkcs7.sha1
            @throws SecurityException on error
            @throws InvalidKeyException on error
            @throws NoSuchProviderException on error
            @throws NoSuchAlgorithmException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPKCS7.Update(System.Byte[],System.Int32,System.Int32)">
            Update the digest with the specified bytes. This method is used both for signing and verifying
            @param buf the data buffer
            @param off the offset in the data buffer
            @param len the data length
            @throws SignatureException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPKCS7.Verify">
            Verify the digest.
            @throws SignatureException on error
            @return <CODE>true</CODE> if the signature checks out, <CODE>false</CODE> otherwise
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPKCS7.VerifyTimestampImprint">
            Checks if the timestamp refers to this document.
            @throws java.security.NoSuchAlgorithmException on error
            @return true if it checks false otherwise
            @since    2.1.6
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPKCS7.GetDigestAlgorithm">
            Get the algorithm used to calculate the message digest
            @return the algorithm used to calculate the message digest
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPKCS7.GetHashAlgorithm">
            Returns the algorithm.
            @return the digest algorithm
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPKCS7.VerifyCertificate(Org.BouncyCastle.X509.X509Certificate,System.Object[],System.DateTime)">
            Verifies a single certificate.
            @param cert the certificate to verify
            @param crls the certificate revocation list or <CODE>null</CODE>
            @param calendar the date or <CODE>null</CODE> for the current date
            @return a <CODE>String</CODE> with the error description or <CODE>null</CODE>
            if no error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPKCS7.VerifyCertificates(Org.BouncyCastle.X509.X509Certificate[],System.Collections.ArrayList,System.Object[],System.DateTime)">
            Verifies a certificate chain against a KeyStore.
            @param certs the certificate chain
            @param keystore the <CODE>KeyStore</CODE>
            @param crls the certificate revocation list or <CODE>null</CODE>
            @param calendar the date or <CODE>null</CODE> for the current date
            @return <CODE>null</CODE> if the certificate chain could be validade or a
            <CODE>Object[]{cert,error}</CODE> where <CODE>cert</CODE> is the
            failed certificate and <CODE>error</CODE> is the error message
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPKCS7.VerifyOcspCertificates(Org.BouncyCastle.Ocsp.BasicOcspResp,System.Collections.ArrayList)">
            Verifies an OCSP response against a KeyStore.
            @param ocsp the OCSP response
            @param keystore the <CODE>KeyStore</CODE>
            @param provider the provider or <CODE>null</CODE> to use the BouncyCastle provider
            @return <CODE>true</CODE> is a certificate was found
            @since    2.1.6
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPKCS7.VerifyTimestampCertificates(Org.BouncyCastle.Tsp.TimeStampToken,System.Collections.ArrayList)">
            Verifies a timestamp against a KeyStore.
            @param ts the timestamp
            @param keystore the <CODE>KeyStore</CODE>
            @param provider the provider or <CODE>null</CODE> to use the BouncyCastle provider
            @return <CODE>true</CODE> is a certificate was found
            @since    2.1.6
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPKCS7.GetOCSPURL(Org.BouncyCastle.X509.X509Certificate)">
            Retrieves the OCSP URL from the given certificate.
            @param certificate the certificate
            @return the URL or null
            @throws CertificateParsingException on error
            @since    2.1.6
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPKCS7.IsRevocationValid">
            Checks if OCSP revocation refers to the document signing certificate.
            @return true if it checks false otherwise
            @since    2.1.6
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPKCS7.GetIssuer(System.Byte[])">
            Get the "issuer" from the TBSCertificate bytes that are passed in
            @param enc a TBSCertificate in a byte array
            @return a DERObject
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPKCS7.GetSubject(System.Byte[])">
            Get the "subject" from the TBSCertificate bytes that are passed in
            @param enc A TBSCertificate in a byte array
            @return a DERObject
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPKCS7.GetIssuerFields(Org.BouncyCastle.X509.X509Certificate)">
            Get the issuer fields from an X509 Certificate
            @param cert an X509Certificate
            @return an X509Name
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPKCS7.GetSubjectFields(Org.BouncyCastle.X509.X509Certificate)">
            Get the subject fields from an X509 Certificate
            @param cert an X509Certificate
            @return an X509Name
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPKCS7.GetEncodedPKCS1">
            Gets the bytes for the PKCS#1 object.
            @return a byte array
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPKCS7.SetExternalDigest(System.Byte[],System.Byte[],System.String)">
            Sets the digest/signature to an external calculated value.
            @param digest the digest. This is the actual signature
            @param RSAdata the extra data that goes into the data tag in PKCS#7
            @param digestEncryptionAlgorithm the encryption algorithm. It may must be <CODE>null</CODE> if the <CODE>digest</CODE>
            is also <CODE>null</CODE>. If the <CODE>digest</CODE> is not <CODE>null</CODE>
            then it may be "RSA" or "DSA"
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPKCS7.GetEncodedPKCS7">
            Gets the bytes for the PKCS7SignedData object.
            @return the bytes for the PKCS7SignedData object
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPKCS7.GetEncodedPKCS7(System.Byte[],System.DateTime)">
            Gets the bytes for the PKCS7SignedData object. Optionally the authenticatedAttributes
            in the signerInfo can also be set. If either of the parameters is <CODE>null</CODE>, none will be used.
            @param secondDigest the digest in the authenticatedAttributes
            @param signingTime the signing time in the authenticatedAttributes
            @return the bytes for the PKCS7SignedData object
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPKCS7.GetEncodedPKCS7(System.Byte[],System.DateTime,iTextSharp.text.pdf.ITSAClient,System.Byte[])">
            Gets the bytes for the PKCS7SignedData object. Optionally the authenticatedAttributes
            in the signerInfo can also be set, OR a time-stamp-authority client
            may be provided.
            @param secondDigest the digest in the authenticatedAttributes
            @param signingTime the signing time in the authenticatedAttributes
            @param tsaClient TSAClient - null or an optional time stamp authority client
            @return byte[] the bytes for the PKCS7SignedData object
            @since   2.1.6
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPKCS7.BuildUnauthenticatedAttributes(System.Byte[])">
            Added by Aiken Sam, 2006-11-15, modifed by Martin Brunecky 07/12/2007
            to start with the timeStampToken (signedData 1.2.840.113549.1.7.2).
            Token is the TSA response without response status, which is usually
            handled by the (vendor supplied) TSA request/response interface).
            @param timeStampToken byte[] - time stamp token, DER encoded signedData
            @return ASN1EncodableVector
            @throws IOException
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfPKCS7.GetAuthenticatedAttributeBytes(System.Byte[],System.DateTime,System.Byte[])" -->
        <member name="P:iTextSharp.text.pdf.PdfPKCS7.TimeStampToken">
            Gets the timestamp token if there is one.
            @return the timestamp token or null
            @since    2.1.6
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPKCS7.TimeStampDate">
            Gets the timestamp date
            @return   a date
            @since    2.1.6
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPKCS7.Ocsp">
            Gets the OCSP basic response if there is one.
            @return the OCSP basic response or null
            @since    2.1.6
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPKCS7.Certificates">
            Get all the X.509 certificates associated with this PKCS#7 object in no particular order.
            Other certificates, from OCSP for example, will also be included.
            @return the X.509 certificates associated with this PKCS#7 object
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPKCS7.SignCertificateChain">
            Get the X.509 sign certificate chain associated with this PKCS#7 object.
            Only the certificates used for the main signature will be returned, with
            the signing certificate first.
            @return the X.509 certificates associated with this PKCS#7 object
            @since    2.1.6
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPKCS7.CRLs">
            Get the X.509 certificate revocation lists associated with this PKCS#7 object
            @return the X.509 certificate revocation lists associated with this PKCS#7 object
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPKCS7.SigningCertificate">
            Get the X.509 certificate actually used to sign the digest.
            @return the X.509 certificate actually used to sign the digest
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPKCS7.Version">
            Get the version of the PKCS#7 object. Always 1
            @return the version of the PKCS#7 object. Always 1
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPKCS7.SigningInfoVersion">
            Get the version of the PKCS#7 "SignerInfo" object. Always 1
            @return the version of the PKCS#7 "SignerInfo" object. Always 1
        </member>
        <member name="T:iTextSharp.text.pdf.PdfPKCS7.X509Name">
            a class that holds an X509 name
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPKCS7.X509Name.C">
            country code - StringType(SIZE(2))
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPKCS7.X509Name.O">
            organization - StringType(SIZE(1..64))
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPKCS7.X509Name.OU">
            organizational unit name - StringType(SIZE(1..64))
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPKCS7.X509Name.T">
            Title
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPKCS7.X509Name.CN">
            common name - StringType(SIZE(1..64))
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPKCS7.X509Name.SN">
            device serial number name - StringType(SIZE(1..64))
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPKCS7.X509Name.L">
            locality name - StringType(SIZE(1..64))
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPKCS7.X509Name.ST">
            state, or province name - StringType(SIZE(1..64))
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPKCS7.X509Name.SURNAME">
            Naming attribute of type X520name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPKCS7.X509Name.GIVENNAME">
            Naming attribute of type X520name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPKCS7.X509Name.INITIALS">
            Naming attribute of type X520name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPKCS7.X509Name.GENERATION">
            Naming attribute of type X520name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPKCS7.X509Name.UNIQUE_IDENTIFIER">
            Naming attribute of type X520name 
        </member>
        <!-- Badly formed XML comment ignored for member "F:iTextSharp.text.pdf.PdfPKCS7.X509Name.EmailAddress" -->
        <member name="F:iTextSharp.text.pdf.PdfPKCS7.X509Name.E">
            email address in Verisign certificates
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPKCS7.X509Name.DC">
            object identifier 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPKCS7.X509Name.UID">
            LDAP User id. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPKCS7.X509Name.DefaultSymbols">
            A Hashtable with default symbols 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPKCS7.X509Name.values">
            A Hashtable with values 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPKCS7.X509Name.#ctor(Org.BouncyCastle.Asn1.Asn1Sequence)">
            Constructs an X509 name
            @param seq an Asn1 Sequence
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPKCS7.X509Name.#ctor(System.String)">
            Constructs an X509 name
            @param dirName a directory name
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPKCS7.X509Name.GetFieldArray(System.String)">
            gets a field array from the values Hashmap
            @param name
            @return an ArrayList
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPKCS7.X509Name.GetFields">
            getter for values
            @return a Hashtable with the fields of the X509 name
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPKCS7.X509Name.ToString">
            @see java.lang.Object#toString()
        </member>
        <member name="T:iTextSharp.text.pdf.PdfPKCS7.X509NameTokenizer">
            class for breaking up an X500 Name into it's component tokens, ala
            java.util.StringTokenizer. We need this class as some of the
            lightweight Java environment don't support classes like
            StringTokenizer.
        </member>
        <member name="T:iTextSharp.text.pdf.PdfPCell">
            A cell in a PdfPTable.
        </member>
        <member name="T:iTextSharp.text.Rectangle">
            <summary>
            A Rectangle is the representation of a geometric figure.
            </summary>
            <seealso cref="T:iTextSharp.text.Element"/>
            <seealso cref="T:iTextSharp.text.Table"/>
            <seealso cref="T:iTextSharp.text.Cell"/>
            <seealso cref="T:iTextSharp.text.HeaderFooter"/>
        </member>
        <member name="T:iTextSharp.text.Element">
            <summary>
            Interface for a text element.
            </summary>
            <seealso cref="T:iTextSharp.text.Anchor"/>
            <seealso cref="T:iTextSharp.text.Cell"/>
            <seealso cref="T:iTextSharp.text.Chapter"/>
            <seealso cref="T:iTextSharp.text.Chunk"/>
            <seealso cref="T:iTextSharp.text.Gif"/>
            <seealso cref="T:iTextSharp.text.Graphic"/>
            <seealso cref="T:iTextSharp.text.Header"/>
            <seealso cref="T:iTextSharp.text.Image"/>
            <seealso cref="T:iTextSharp.text.Jpeg"/>
            <seealso cref="T:iTextSharp.text.List"/>
            <seealso cref="T:iTextSharp.text.ListItem"/>
            <seealso cref="T:iTextSharp.text.Meta"/>
            <seealso cref="T:iTextSharp.text.Paragraph"/>
            <seealso cref="T:iTextSharp.text.Phrase"/>
            <seealso cref="T:iTextSharp.text.Rectangle"/>
            <seealso cref="T:iTextSharp.text.Row"/>
            <seealso cref="T:iTextSharp.text.Section"/>
            <seealso cref="T:iTextSharp.text.Table"/>
        </member>
        <member name="F:iTextSharp.text.Element.HEADER">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.TITLE">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.SUBJECT">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.KEYWORDS">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.AUTHOR">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.PRODUCER">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.CREATIONDATE">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.CREATOR">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.CHUNK">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.PHRASE">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.PARAGRAPH">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.SECTION">
            <summary> This is a possible type of Element </summary>
        </member>
        <member name="F:iTextSharp.text.Element.LIST">
            <summary> This is a possible type of Element </summary>
        </member>
        <member name="F:iTextSharp.text.Element.LISTITEM">
            <summary> This is a possible type of Element </summary>
        </member>
        <member name="F:iTextSharp.text.Element.CHAPTER">
            <summary> This is a possible type of Element </summary>
        </member>
        <member name="F:iTextSharp.text.Element.ANCHOR">
            <summary> This is a possible type of Element </summary>
        </member>
        <member name="F:iTextSharp.text.Element.CELL">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.ROW">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.TABLE">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.PTABLE">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.ANNOTATION">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.RECTANGLE">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.JPEG">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.JPEG2000">
            This is a possible type of <CODE>Element</CODE>. 
        </member>
        <member name="F:iTextSharp.text.Element.IMGRAW">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.IMGTEMPLATE">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.JBIG2">
            This is a possible type of <CODE>Element</CODE>.
            @since	2.1.5
        </member>
        <member name="F:iTextSharp.text.Element.MULTI_COLUMN_TEXT">
            <summary> This is a possible type of <CODE>Element</CODE>. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.MARKED">
            This is a possible type of <CODE>Element</CODE>. 
        </member>
        <member name="F:iTextSharp.text.Element.YMARK">
            This is a possible type of <CODE>Element</CODE>.
            @since 2.1.2
        </member>
        <member name="F:iTextSharp.text.Element.ALIGN_UNDEFINED">
            <summary>
            A possible value for paragraph Element.  This
            specifies that the text is aligned to the left
            indent and extra whitespace should be placed on
            the right.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Element.ALIGN_LEFT">
            <summary>
            A possible value for paragraph Element.  This
            specifies that the text is aligned to the left
            indent and extra whitespace should be placed on
            the right.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Element.ALIGN_CENTER">
            <summary>
            A possible value for paragraph Element.  This
            specifies that the text is aligned to the center
            and extra whitespace should be placed equally on
            the left and right.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Element.ALIGN_RIGHT">
            <summary>
            A possible value for paragraph Element.  This
            specifies that the text is aligned to the right
            indent and extra whitespace should be placed on
            the left.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Element.ALIGN_JUSTIFIED">
            <summary>
            A possible value for paragraph Element.  This
            specifies that extra whitespace should be spread
            out through the rows of the paragraph with the
            text lined up with the left and right indent
            except on the last line which should be aligned
            to the left.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Element.ALIGN_TOP">
            <summary>
            A possible value for vertical Element.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Element.ALIGN_MIDDLE">
            <summary>
            A possible value for vertical Element.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Element.ALIGN_BOTTOM">
            <summary>
            A possible value for vertical Element.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Element.ALIGN_BASELINE">
            <summary>
            A possible value for vertical Element.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Element.ALIGN_JUSTIFIED_ALL">
            <summary>
            Does the same as ALIGN_JUSTIFIED but the last line is also spread out.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Element.CCITTG4">
            <summary>
            Pure two-dimensional encoding (Group 4)
            </summary>
        </member>
        <member name="F:iTextSharp.text.Element.CCITTG3_1D">
            <summary>
            Pure one-dimensional encoding (Group 3, 1-D)
            </summary>
        </member>
        <member name="F:iTextSharp.text.Element.CCITTG3_2D">
            <summary>
            Mixed one- and two-dimensional encoding (Group 3, 2-D)
            </summary>
        </member>
        <member name="F:iTextSharp.text.Element.CCITT_BLACKIS1">
            <summary>
            A flag indicating whether 1-bits are to be interpreted as black pixels
            and 0-bits as white pixels,
            </summary>
        </member>
        <member name="F:iTextSharp.text.Element.CCITT_ENCODEDBYTEALIGN">
            <summary>
            A flag indicating whether the filter expects extra 0-bits before each
            encoded line so that the line begins on a byte boundary.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Element.CCITT_ENDOFLINE">
            <summary>
            A flag indicating whether end-of-line bit patterns are required to be
             present in the encoding.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Element.CCITT_ENDOFBLOCK">
            <summary>
            A flag indicating whether the filter expects the encoded data to be
            terminated by an end-of-block pattern, overriding the Rows
            parameter. The use of this flag will set the key /EndOfBlock to false.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.UNDEFINED">
            <summary> This is the value that will be used as <VAR>undefined</VAR>. </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.TOP_BORDER">
            <summary> This represents one side of the border of the Rectangle. </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.BOTTOM_BORDER">
            <summary> This represents one side of the border of the Rectangle. </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.LEFT_BORDER">
            <summary> This represents one side of the border of the Rectangle. </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.RIGHT_BORDER">
            <summary> This represents one side of the border of the Rectangle. </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.NO_BORDER">
            <summary> This represents a rectangle without borders. </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.BOX">
            <summary> This represents a type of border. </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.llx">
            <summary> the lower left x-coordinate. </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.lly">
            <summary> the lower left y-coordinate. </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.urx">
            <summary> the upper right x-coordinate. </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.ury">
            <summary> the upper right y-coordinate. </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.border">
            <summary> This represents the status of the 4 sides of the rectangle. </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.borderWidth">
            <summary> This is the width of the border around this rectangle. </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.borderColor">
            <summary> This is the color of the border of this rectangle. </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.borderColorLeft">
            The color of the left border of this rectangle. 
        </member>
        <member name="F:iTextSharp.text.Rectangle.borderColorRight">
            The color of the right border of this rectangle. 
        </member>
        <member name="F:iTextSharp.text.Rectangle.borderColorTop">
            The color of the top border of this rectangle. 
        </member>
        <member name="F:iTextSharp.text.Rectangle.borderColorBottom">
            The color of the bottom border of this rectangle. 
        </member>
        <member name="F:iTextSharp.text.Rectangle.borderWidthLeft">
            The width of the left border of this rectangle. 
        </member>
        <member name="F:iTextSharp.text.Rectangle.borderWidthRight">
            The width of the right border of this rectangle. 
        </member>
        <member name="F:iTextSharp.text.Rectangle.borderWidthTop">
            The width of the top border of this rectangle. 
        </member>
        <member name="F:iTextSharp.text.Rectangle.borderWidthBottom">
            The width of the bottom border of this rectangle. 
        </member>
        <member name="F:iTextSharp.text.Rectangle.useVariableBorders">
            Whether variable width borders are used. 
        </member>
        <member name="F:iTextSharp.text.Rectangle.backgroundColor">
            <summary> This is the color of the background of this rectangle. </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.rotation">
            <summary> This is the rotation value of this rectangle. </summary>
        </member>
        <member name="M:iTextSharp.text.Rectangle.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a Rectangle-object.
            </summary>
            <param name="llx">lower left x</param>
            <param name="lly">lower left y</param>
            <param name="urx">upper right x</param>
            <param name="ury">upper right y</param>
        </member>
        <member name="M:iTextSharp.text.Rectangle.#ctor(System.Single,System.Single)">
            <summary>
            Constructs a Rectangle-object starting from the origin (0, 0).
            </summary>
            <param name="urx">upper right x</param>
            <param name="ury">upper right y</param>
        </member>
        <member name="M:iTextSharp.text.Rectangle.#ctor(iTextSharp.text.Rectangle)">
            <summary>
            Constructs a Rectangle-object.
            </summary>
            <param name="rect">another Rectangle</param>
        </member>
        <member name="M:iTextSharp.text.Rectangle.CloneNonPositionParameters(iTextSharp.text.Rectangle)">
            Copies all of the parameters from a <CODE>Rectangle</CODE> object
            except the position.
            
            @param rect
                       <CODE>Rectangle</CODE> to copy from
        </member>
        <member name="M:iTextSharp.text.Rectangle.SoftCloneNonPositionParameters(iTextSharp.text.Rectangle)">
            Copies all of the parameters from a <CODE>Rectangle</CODE> object
            except the position.
            
            @param rect
                       <CODE>Rectangle</CODE> to copy from
        </member>
        <member name="M:iTextSharp.text.Rectangle.Process(iTextSharp.text.IElementListener)">
            <summary>
            Processes the element by adding it (or the different parts) to an
            IElementListener.
            </summary>
            <param name="listener">an IElementListener</param>
            <returns>true if the element was processed successfully</returns>
        </member>
        <member name="M:iTextSharp.text.Rectangle.IsContent">
            @see com.lowagie.text.Element#isContent()
            @since   iText 2.0.8
        </member>
        <member name="M:iTextSharp.text.Rectangle.IsNestable">
            @see com.lowagie.text.Element#isNestable()
            @since   iText 2.0.8
        </member>
        <member name="M:iTextSharp.text.Rectangle.Normalize">
            Switches lowerleft with upperright
        </member>
        <member name="M:iTextSharp.text.Rectangle.GetRectangle(System.Single,System.Single)">
            <summary>
            Gets a Rectangle that is altered to fit on the page.
            </summary>
            <param name="top">the top position</param>
            <param name="bottom">the bottom position</param>
            <returns>a Rectangle</returns>
        </member>
        <member name="M:iTextSharp.text.Rectangle.Rotate">
            <summary>
            Swaps the values of urx and ury and of lly and llx in order to rotate the rectangle.
            </summary>
            <returns>a Rectangle</returns>
        </member>
        <member name="M:iTextSharp.text.Rectangle.EnableBorderSide(System.Int32)">
            Enables the border on the specified side.
            
            @param side
                       the side to enable. One of <CODE>LEFT, RIGHT, TOP, BOTTOM
                       </CODE>
        </member>
        <member name="M:iTextSharp.text.Rectangle.DisableBorderSide(System.Int32)">
            Disables the border on the specified side.
            
            @param side
                       the side to disable. One of <CODE>LEFT, RIGHT, TOP, BOTTOM
                       </CODE>
        </member>
        <member name="M:iTextSharp.text.Rectangle.GetLeft(System.Single)">
            <summary>
            Returns the lower left x-coordinate, considering a given margin.
            </summary>
            <param name="margin">a margin</param>
            <returns>the lower left x-coordinate</returns>
        </member>
        <member name="M:iTextSharp.text.Rectangle.GetRight(System.Single)">
            <summary>
            Returns the upper right x-coordinate, considering a given margin.
            </summary>
            <param name="margin">a margin</param>
            <returns>the upper right x-coordinate</returns>
        </member>
        <member name="M:iTextSharp.text.Rectangle.GetTop(System.Single)">
            <summary>
            Returns the upper right y-coordinate, considering a given margin.
            </summary>
            <param name="margin">a margin</param>
            <returns>the upper right y-coordinate</returns>
        </member>
        <member name="M:iTextSharp.text.Rectangle.GetBottom(System.Single)">
            <summary>
            Returns the lower left y-coordinate, considering a given margin.
            </summary>
            <param name="margin">a margin</param>
            <returns>the lower left y-coordinate</returns>
        </member>
        <member name="M:iTextSharp.text.Rectangle.HasBorders">
            <summary>
            Indicates if the table has borders.
            </summary>
            <returns>a bool</returns>
        </member>
        <member name="M:iTextSharp.text.Rectangle.HasBorder(System.Int32)">
            <summary>
            Indicates if the table has a some type of border.
            </summary>
            <param name="type">the type of border</param>
            <returns>a bool</returns>
        </member>
        <member name="M:iTextSharp.text.Rectangle.UpdateBorderBasedOnWidth(System.Single,System.Int32)">
            Updates the border flag for a side based on the specified width. A width
            of 0 will disable the border on that side. Any other width enables it.
            
            @param width
                       width of border
            @param side
                       border side constant
        </member>
        <member name="P:iTextSharp.text.Rectangle.Type">
            <summary>
            Gets the type of the text element.
            </summary>
            <value>a type</value>
        </member>
        <member name="P:iTextSharp.text.Rectangle.Chunks">
            <summary>
            Gets all the chunks in this element.
            </summary>
            <value>an ArrayList</value>
        </member>
        <member name="P:iTextSharp.text.Rectangle.Top">
            <summary>
            Get/set the upper right y-coordinate. 
            </summary>
            <value>a float</value>
        </member>
        <member name="P:iTextSharp.text.Rectangle.Border">
            <summary>
            Get/set the border
            </summary>
            <value>a int</value>
        </member>
        <member name="P:iTextSharp.text.Rectangle.GrayFill">
            <summary>
            Get/set the grayscale of the rectangle.
            </summary>
            <value>a float</value>
        </member>
        <member name="P:iTextSharp.text.Rectangle.Left">
            <summary>
            Get/set the lower left x-coordinate.
            </summary>
            <value>a float</value>
        </member>
        <member name="P:iTextSharp.text.Rectangle.Right">
            <summary>
            Get/set the upper right x-coordinate.
            </summary>
            <value>a float</value>
        </member>
        <member name="P:iTextSharp.text.Rectangle.Bottom">
            <summary>
            Get/set the lower left y-coordinate.
            </summary>
            <value>a float</value>
        </member>
        <member name="P:iTextSharp.text.Rectangle.Width">
            <summary>
            Returns the width of the rectangle.
            </summary>
            <value>a width</value>
        </member>
        <member name="P:iTextSharp.text.Rectangle.Height">
            <summary>
            Returns the height of the rectangle.
            </summary>
            <value>a height</value>
        </member>
        <member name="P:iTextSharp.text.Rectangle.BorderWidth">
            <summary>
            Get/set the borderwidth.
            </summary>
            <value>a float</value>
        </member>
        <member name="P:iTextSharp.text.Rectangle.BorderColor">
             Gets the color of the border.
            
             @return    a value
            <summary>
            Get/set the color of the border.
            </summary>
            <value>a Color</value>
        </member>
        <member name="P:iTextSharp.text.Rectangle.BackgroundColor">
             Gets the backgroundcolor.
            
             @return    a value
            <summary>
            Get/set the backgroundcolor.
            </summary>
            <value>a Color</value>
        </member>
        <member name="P:iTextSharp.text.Rectangle.Rotation">
            <summary>
            Returns the rotation
            </summary>
            <value>a int</value>    
        </member>
        <member name="P:iTextSharp.text.Rectangle.UseVariableBorders">
            Sets a parameter indicating if the rectangle has variable borders
            
            @param useVariableBorders
                       indication if the rectangle has variable borders
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPCell.verticalAlignment">
            Holds value of property verticalAlignment. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPCell.paddingLeft">
            Holds value of property paddingLeft. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPCell.paddingRight">
            Holds value of property paddingLeft. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPCell.paddingTop">
            Holds value of property paddingTop. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPCell.paddingBottom">
            Holds value of property paddingBottom. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPCell.fixedHeight">
            Holds value of property fixedHeight. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPCell.noWrap">
            Holds value of property noWrap. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPCell.table">
            Holds value of property table. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPCell.minimumHeight">
            Holds value of property minimumHeight. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPCell.colspan">
            Holds value of property colspan. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPCell.rowspan">
            Holds value of property rowspan.
            @since    2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPCell.image">
            Holds value of property image. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPCell.cellEvent">
            Holds value of property cellEvent. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPCell.useDescender">
            Holds value of property useDescender. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPCell.useBorderPadding">
            Increases padding to include border if true 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPCell.phrase">
            The text in the cell. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPCell.rotation">
            The rotation of the cell. Possible values are
            0, 90, 180 and 270.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPCell.#ctor">
            Constructs an empty <CODE>PdfPCell</CODE>.
            The default padding is 2.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPCell.#ctor(iTextSharp.text.Phrase)">
            Constructs a <CODE>PdfPCell</CODE> with a <CODE>Phrase</CODE>.
            The default padding is 2.
            @param phrase the text
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPCell.#ctor(iTextSharp.text.Image)">
            Constructs a <CODE>PdfPCell</CODE> with an <CODE>Image</CODE>.
            The default padding is 0.
            @param image the <CODE>Image</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPCell.#ctor(iTextSharp.text.Image,System.Boolean)">
            Constructs a <CODE>PdfPCell</CODE> with an <CODE>Image</CODE>.
            The default padding is 0.25 for a border width of 0.5.
            @param image the <CODE>Image</CODE>
            @param fit <CODE>true</CODE> to fit the image to the cell
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPCell.#ctor(iTextSharp.text.pdf.PdfPTable)">
            Constructs a <CODE>PdfPCell</CODE> with a <CODE>PdfPtable</CODE>.
            This constructor allows nested tables.
            The default padding is 0.
            @param table The <CODE>PdfPTable</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPCell.#ctor(iTextSharp.text.pdf.PdfPTable,iTextSharp.text.pdf.PdfPCell)">
            Constructs a <CODE>PdfPCell</CODE> with a <CODE>PdfPtable</CODE>.
            This constructor allows nested tables.
            
            @param table The <CODE>PdfPTable</CODE>
            @param style  The style to apply to the cell (you could use getDefaultCell())
            @since 2.1.0
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPCell.#ctor(iTextSharp.text.pdf.PdfPCell)">
            Constructs a deep copy of a <CODE>PdfPCell</CODE>.
            @param cell the <CODE>PdfPCell</CODE> to duplicate
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPCell.AddElement(iTextSharp.text.IElement)">
            Adds an iText element to the cell.
            @param element
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPCell.SetLeading(System.Single,System.Single)">
            Sets the leading fixed and variable. The resultant leading will be
            fixedLeading+multipliedLeading*maxFontSize where maxFontSize is the
            size of the bigest font in the line.
            @param fixedLeading the fixed leading
            @param multipliedLeading the variable leading
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPCell.HasFixedHeight">
            Tells you whether the cell has a fixed height.
            
            @return   true is a fixed height was set.
            @since 2.1.5
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPCell.HasMinimumHeight">
            Tells you whether the cell has a minimum height.
            
            @return   true if a minimum height was set.
            @since 2.1.5
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPCell.ConsumeHeight(System.Single)">
            Consumes part of the content of the cell.
            @param   height  the hight of the part that has to be consumed
            @since   2.1.6
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPCell.GetMaxHeight">
            Returns the height of the cell.
            @return  the height of the cell
            @since   3.0.0
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.Phrase">
            Gets the <CODE>Phrase</CODE> from this cell.
            @return the <CODE>Phrase</CODE>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.HorizontalAlignment">
            Gets the horizontal alignment for the cell.
            @return the horizontal alignment for the cell
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.VerticalAlignment">
            Gets the vertical alignment for the cell.
            @return the vertical alignment for the cell
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.EffectivePaddingLeft">
            Gets the effective left padding.  This will include
             the left border width if {@link #UseBorderPadding} is true.
            @return effective value of property paddingLeft.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.PaddingLeft">
            @return Value of property paddingLeft.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.EffectivePaddingRight">
            Gets the effective right padding.  This will include
             the right border width if {@link #UseBorderPadding} is true.
            @return effective value of property paddingRight.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.PaddingRight">
            Getter for property paddingRight.
            @return Value of property paddingRight.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.EffectivePaddingTop">
            Gets the effective top padding.  This will include
             the top border width if {@link #isUseBorderPadding()} is true.
            @return effective value of property paddingTop.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.PaddingTop">
            Getter for property paddingTop.
            @return Value of property paddingTop.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.EffectivePaddingBottom">
                    /** Gets the effective bottom padding.  This will include
                    *  the bottom border width if {@link #UseBorderPadding} is true.
                    * @return effective value of property paddingBottom.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.PaddingBottom">
            Getter for property paddingBottom.
            @return Value of property paddingBottom.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.Padding">
            Sets the padding of the contents in the cell (space between content and border).
            @param padding
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.UseBorderPadding">
            Adjusts effective padding to include border widths.
            @param use adjust effective padding if true
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.Leading">
            Gets the fixed leading
            @return the leading
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.MultipliedLeading">
            Gets the variable leading
            @return the leading
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.Indent">
            Gets the first paragraph line indent.
            @return the indent
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.ExtraParagraphSpace">
            Gets the extra space between paragraphs.
            @return the extra space between paragraphs
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.FixedHeight">
            Getter for property fixedHeight.
            @return Value of property fixedHeight.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.NoWrap">
            Setter for property noWrap.
            @param noWrap New value of property noWrap.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.Table">
            Getter for property table.
            @return Value of property table.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.MinimumHeight">
            Getter for property minimumHeight.
            @return Value of property minimumHeight.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.Colspan">
            Getter for property colspan.
            @return Value of property colspan.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.Rowspan">
            Getter for property rowspan.
            @return Value of property rowspan.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.FollowingIndent">
            Gets the following paragraph lines indent.
            @return the indent
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.RightIndent">
            Gets the right paragraph lines indent.
            @return the indent
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.SpaceCharRatio">
            Gets the space/character extra spacing ratio for
            fully justified text.
            @return the space/character extra spacing ratio
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.RunDirection">
            Gets the run direction of the text content in the cell
            @return One of the following values: PdfWriter.RUN_DIRECTION_DEFAULT, PdfWriter.RUN_DIRECTION_NO_BIDI, PdfWriter.RUN_DIRECTION_LTR or PdfWriter.RUN_DIRECTION_RTL.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.Image">
            Getter for property image.
             @return Value of property image.
            
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.CellEvent">
            Gets the cell event for this cell.
             @return the cell event
            
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.ArabicOptions">
            Gets the arabic shaping options.
            @return the arabic shaping options
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.UseAscender">
            Gets state of first line height based on max ascender
            @return true if an ascender is to be used.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.UseDescender">
            Getter for property useDescender.
             @return Value of property useDescender.
            
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.Column">
            Gets the ColumnText with the content of the cell.
            @return a columntext object
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.CompositeElements">
            Returns the list of composite elements of the column.
            @return   a List object.
            @since    2.1.1
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.Rotation">
            Sets the rotation of the cell. Possible values are
            0, 90, 180 and 270.
            @param rotation the rotation of the cell
        </member>
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.pdf.PdfPages" -->
        <member name="M:iTextSharp.text.pdf.PdfPages.#ctor(iTextSharp.text.pdf.PdfWriter)">
            Constructs a <CODE>PdfPages</CODE>-object.
        </member>
        <member name="T:iTextSharp.text.pdf.PdfLine">
            <CODE>PdfLine</CODE> defines an array with <CODE>PdfChunk</CODE>-objects
            that fit into 1 line.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfLine.line">
            The arraylist containing the chunks. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfLine.left">
            The left indentation of the line. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfLine.width">
            The width of the line. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfLine.alignment">
            The alignment of the line. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfLine.height">
            The heigth of the line. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfLine.listSymbol">
            The listsymbol (if necessary). 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfLine.symbolIndent">
            The listsymbol (if necessary). 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfLine.newlineSplit">
            <CODE>true</CODE> if the chunk splitting was caused by a newline. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfLine.originalWidth">
            The original width. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfLine.#ctor(System.Single,System.Single,System.Int32,System.Single)">
             Constructs a new <CODE>PdfLine</CODE>-object.
            
             @param    left        the limit of the line at the left
             @param    right        the limit of the line at the right
             @param    alignment    the alignment of the line
             @param    height        the height of the line
        </member>
        <member name="M:iTextSharp.text.pdf.PdfLine.#ctor(System.Single,System.Single,System.Single,System.Int32,System.Boolean,System.Collections.ArrayList,System.Boolean)">
            Creates a PdfLine object.
            @param left              the left offset
            @param originalWidth     the original width of the line
            @param remainingWidth    bigger than 0 if the line isn't completely filled
            @param alignment         the alignment of the line
            @param newlineSplit      was the line splitted (or does the paragraph end with this line)
            @param line              an array of PdfChunk objects
            @param isRTL             do you have to read the line from Right to Left?
        </member>
        <member name="M:iTextSharp.text.pdf.PdfLine.Add(iTextSharp.text.pdf.PdfChunk)">
             Adds a <CODE>PdfChunk</CODE> to the <CODE>PdfLine</CODE>.
            
             @param        chunk        the <CODE>PdfChunk</CODE> to add
             @return        <CODE>null</CODE> if the chunk could be added completely; if not
                            a <CODE>PdfChunk</CODE> containing the part of the chunk that could
                            not be added is returned
        </member>
        <member name="M:iTextSharp.text.pdf.PdfLine.GetEnumerator">
             Returns an iterator of <CODE>PdfChunk</CODE>s.
            
             @return    an <CODE>Iterator</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfLine.HasToBeJustified">
             Checks if this line has to be justified.
            
             @return    <CODE>true</CODE> if the alignment equals <VAR>ALIGN_JUSTIFIED</VAR> and there is some width left.
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfLine.ResetAlignment" -->
        <member name="M:iTextSharp.text.pdf.PdfLine.SetExtraIndent(System.Single)">
            Adds extra indentation to the left (for Paragraph.setFirstLineIndent). 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfLine.ToString">
             Get the string representation of what is in this line.
            
             @return    a <CODE>string</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfLine.GetChunk(System.Int32)">
            Gets a <CODE>PdfChunk</CODE> by index.
            @param idx the index
            @return the <CODE>PdfChunk</CODE> or null if beyond the array
        </member>
        <member name="M:iTextSharp.text.pdf.PdfLine.GetMaxSize">
            Gets the difference between the "normal" leading and the maximum
            size (for instance when there are images in the chunk).
            @return   an extra leading for images
            @since    2.1.5
        </member>
        <member name="M:iTextSharp.text.pdf.PdfLine.GetSeparatorCount">
            Gets the number of separators in the line.
            @return  the number of separators in the line
            @since   2.1.2
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLine.Size">
             Returns the number of chunks in the line.
            
             @return    a value
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLine.Height">
             Returns the height of the line.
            
             @return    a value
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLine.IndentLeft">
             Returns the left indentation of the line taking the alignment of the line into account.
            
             @return    a value
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLine.WidthLeft">
             Returns the width that is left, after a maximum of characters is added to the line.
            
             @return    a value
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLine.NumberOfSpaces">
             Returns the number of space-characters in this line.
            
             @return    a value
        </member>
        <!-- Badly formed XML comment ignored for member "P:iTextSharp.text.pdf.PdfLine.ListItem" -->
        <member name="P:iTextSharp.text.pdf.PdfLine.ListSymbol">
             Returns the listsymbol of this line.
            
             @return    a <CODE>PdfChunk</CODE> if the line has a listsymbol; <CODE>null</CODE> otherwise
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLine.ListIndent">
             Return the indentation needed to show the listsymbol.
            
             @return    a value
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLine.NewlineSplit">
            Checks if a newline caused the line split.
            @return <CODE>true</CODE> if a newline caused the line split
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLine.LastStrokeChunk">
            Gets the index of the last <CODE>PdfChunk</CODE> with metric attributes
            @return the last <CODE>PdfChunk</CODE> with metric attributes
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLine.OriginalWidth">
            Gets the original width of the line.
            @return the original width of the line
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLine.Ascender">
            Gets the maximum size of the ascender for all the fonts used
            in this line.
            @return maximum size of all the ascenders used in this line
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLine.Descender">
            Gets the biggest descender for all the fonts used 
            in this line.  Note that this is a negative number.
            @return maximum size of all the ascenders used in this line
        </member>
        <member name="T:iTextSharp.text.pdf.PdfBorderArray">
             A <CODE>PdfBorderArray</CODE> defines the border of a <CODE>PdfAnnotation</CODE>.
            
             @see        PdfArray
        </member>
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.pdf.PdfArray" -->
        <member name="F:iTextSharp.text.pdf.PdfArray.arrayList">
            this is the actual array of PdfObjects 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfArray.#ctor">
            Constructs an empty <CODE>PdfArray</CODE>-object.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfArray.#ctor(iTextSharp.text.pdf.PdfObject)">
             Constructs an <CODE>PdfArray</CODE>-object, containing 1 <CODE>PdfObject</CODE>.
            
             @param    object        a <CODE>PdfObject</CODE> that has to be added to the array
        </member>
        <member name="M:iTextSharp.text.pdf.PdfArray.#ctor(System.Collections.ArrayList)">
            Constructs a PdfArray with the elements of an ArrayList.
            Throws a ClassCastException if the ArrayList contains something
            that isn't a PdfObject.
            @param   l   an ArrayList with PdfObjects
            @since 2.1.3
        </member>
        <member name="M:iTextSharp.text.pdf.PdfArray.#ctor(iTextSharp.text.pdf.PdfArray)">
             Constructs an <CODE>PdfArray</CODE>-object, containing all the <CODE>PdfObject</CODE>s in a given <CODE>PdfArray</CODE>.
            
             @param    array        a <CODE>PdfArray</CODE> that has to be added to the array
        </member>
        <member name="M:iTextSharp.text.pdf.PdfArray.ToPdf(iTextSharp.text.pdf.PdfWriter,System.IO.Stream)">
             Returns the PDF representation of this <CODE>PdfArray</CODE>.
            
             @return        an array of <CODE>byte</CODE>s
        </member>
        <member name="M:iTextSharp.text.pdf.PdfArray.Remove(System.Int32)">
            Remove the element at the specified position from the array.
            
            Shifts any subsequent elements to the left (subtracts one from their
            indices).
            
            @param idx The index of the element to be removed.
            @throws IndexOutOfBoundsException the specified position doesn't exist
            @since 2.1.5
        </member>
        <member name="M:iTextSharp.text.pdf.PdfArray.IsEmpty">
            Returns <CODE>true</CODE> if the array is empty.
            
            @return <CODE>true</CODE> if the array is empty
            @since 2.1.5
        </member>
        <member name="M:iTextSharp.text.pdf.PdfArray.Add(iTextSharp.text.pdf.PdfObject)">
             Adds a <CODE>PdfObject</CODE> to the <CODE>PdfArray</CODE>.
            
             @param        object            <CODE>PdfObject</CODE> to add
             @return        <CODE>true</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfArray.Add(System.Int32,iTextSharp.text.pdf.PdfObject)">
             Inserts the specified element at the specified position.
             
             Shifts the element currently at that position (if any) and
             any subsequent elements to the right (adds one to their indices).
            
             @param index The index at which the specified element is to be inserted
             @param element The element to be inserted
             @throws IndexOutOfBoundsException if the specified index is larger than the
               last position currently set, plus 1. 
             @since 2.1.5
        </member>
        <member name="M:iTextSharp.text.pdf.PdfArray.AddFirst(iTextSharp.text.pdf.PdfObject)">
             Inserts a <CODE>PdfObject</CODE> at the beginning of the
             <CODE>PdfArray</CODE>.
             
             The <CODE>PdfObject</CODE> will be the first element, any other elements
             will be shifted to the right (adds one to their indices).
            
             @param object The <CODE>PdfObject</CODE> to add
        </member>
        <member name="M:iTextSharp.text.pdf.PdfArray.Contains(iTextSharp.text.pdf.PdfObject)">
             Checks if the <CODE>PdfArray</CODE> allready contains a certain <CODE>PdfObject</CODE>.
            
             @param        object            <CODE>PdfObject</CODE> to check
             @return        <CODE>true</CODE>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfArray.Item(System.Int32)">
            Overwrites a specified location of the array.
            
            @param idx The index of the element to be overwritten
            @param obj new value for the specified index
            @throws IndexOutOfBoundsException if the specified position doesn't exist
            @return the previous value
            @since 2.1.5
        </member>
        <member name="P:iTextSharp.text.pdf.PdfArray.ArrayList">
             Returns an ArrayList containing <CODE>PdfObject</CODE>s.
            
             @return        an ArrayList
        </member>
        <member name="P:iTextSharp.text.pdf.PdfArray.Size">
             Returns the number of entries in the array.
            
             @return        the size of the ArrayList
        </member>
        <member name="M:iTextSharp.text.pdf.PdfBorderArray.#ctor(System.Single,System.Single,System.Single)">
            Constructs a new <CODE>PdfBorderArray</CODE>.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfBorderArray.#ctor(System.Single,System.Single,System.Single,iTextSharp.text.pdf.PdfDashPattern)">
            Constructs a new <CODE>PdfBorderArray</CODE>.
        </member>
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.pdf.hyphenation.HyphenationException" -->
        <member name="T:iTextSharp.text.pdf.codec.wmf.MetaDo">
            <summary>
            Summary description for MetaDo.
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.codec.TIFFLZWDecoder">
             A class for performing LZW decoding.
            
            
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFLZWDecoder.Decode(System.Byte[],System.Byte[],System.Int32)">
             Method to decode LZW compressed data.
            
             @param data            The compressed data.
             @param uncompData      Array to return the uncompressed data in.
             @param h               The number of rows the compressed data contains.
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFLZWDecoder.InitializeStringTable">
            Initialize the string table.
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFLZWDecoder.WriteString(System.Byte[])">
            Write out the string just uncompressed.
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFLZWDecoder.AddStringToTable(System.Byte[],System.Byte)">
            Add a new string to the string table.
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFLZWDecoder.AddStringToTable(System.Byte[])">
            Add a new string to the string table.
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFLZWDecoder.ComposeString(System.Byte[],System.Byte)">
            Append <code>newString</code> to the end of <code>oldString</code>.
        </member>
        <member name="T:iTextSharp.text.pdf.BarcodeInter25">
            Implements the code interleaved 2 of 5. The text can include
             non numeric characters that are printed but do not generate bars.
             The default parameters are:
             <pre>
            x = 0.8f;
            n = 2;
            font = BaseFont.CreateFont("Helvetica", "winansi", false);
            size = 8;
            baseline = size;
            barHeight = size * 3;
            textint= Element.ALIGN_CENTER;
            generateChecksum = false;
            checksumText = false;
             </pre>
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="T:iTextSharp.text.pdf.Barcode">
            Base class containing properties and methods commom to all
             barcode types.
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.EAN13">
            A type of barcode 
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.EAN8">
            A type of barcode 
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.UPCA">
            A type of barcode 
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.UPCE">
            A type of barcode 
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.SUPP2">
            A type of barcode 
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.SUPP5">
            A type of barcode 
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.POSTNET">
            A type of barcode 
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.PLANET">
            A type of barcode 
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.CODE128">
            A type of barcode 
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.CODE128_UCC">
            A type of barcode 
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.CODE128_RAW">
            A type of barcode 
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.CODABAR">
            A type of barcode 
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.x">
            The minimum bar width.
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.n">
            The bar multiplier for wide bars or the distance between
            bars for Postnet and Planet.
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.font">
            The text font. <CODE>null</CODE> if no text.
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.size">
            The size of the text or the height of the shorter bar
            in Postnet.
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.baseline">
            If positive, the text distance under the bars. If zero or negative,
            the text distance above the bars.
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.barHeight">
            The height of the bars.
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.textAlignment">
            The text Element. Can be <CODE>Element.ALIGN_LEFT</CODE>,
            <CODE>Element.ALIGN_CENTER</CODE> or <CODE>Element.ALIGN_RIGHT</CODE>.
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.generateChecksum">
            The optional checksum generation.
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.checksumText">
            Shows the generated checksum in the the text.
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.startStopText">
            Show the start and stop character '*' in the text for
            the barcode 39 or 'ABCD' for codabar.
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.extended">
            Generates extended barcode 39.
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.code">
            The code to generate.
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.guardBars">
            Show the guard bars for barcode EAN.
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.codeType">
            The code type.
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.inkSpreading">
            The ink spreading. 
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.Barcode.PlaceBarcode(iTextSharp.text.pdf.PdfContentByte,iTextSharp.text.Color,iTextSharp.text.Color)" -->
        <member name="M:iTextSharp.text.pdf.Barcode.CreateTemplateWithBarcode(iTextSharp.text.pdf.PdfContentByte,iTextSharp.text.Color,iTextSharp.text.Color)">
            Creates a template with the barcode.
            @param cb the <CODE>PdfContentByte</CODE> to create the template. It
            serves no other use
            @param barColor the color of the bars. It can be <CODE>null</CODE>
            @param textColor the color of the text. It can be <CODE>null</CODE>
            @return the template
            @see #placeBarcode(PdfContentByte cb, Color barColor, Color textColor)
        </member>
        <member name="M:iTextSharp.text.pdf.Barcode.CreateImageWithBarcode(iTextSharp.text.pdf.PdfContentByte,iTextSharp.text.Color,iTextSharp.text.Color)">
            Creates an <CODE>Image</CODE> with the barcode.
            @param cb the <CODE>PdfContentByte</CODE> to create the <CODE>Image</CODE>. It
            serves no other use
            @param barColor the color of the bars. It can be <CODE>null</CODE>
            @param textColor the color of the text. It can be <CODE>null</CODE>
            @return the <CODE>Image</CODE>
            @see #placeBarcode(PdfContentByte cb, Color barColor, Color textColor)
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.altText">
            The alternate text to be used, if present.
        </member>
        <member name="P:iTextSharp.text.pdf.Barcode.X">
            Gets the minimum bar width.
            @return the minimum bar width
        </member>
        <member name="P:iTextSharp.text.pdf.Barcode.N">
            Gets the bar multiplier for wide bars.
            @return the bar multiplier for wide bars
        </member>
        <member name="P:iTextSharp.text.pdf.Barcode.Font">
            Gets the text font. <CODE>null</CODE> if no text.
            @return the text font. <CODE>null</CODE> if no text
        </member>
        <member name="P:iTextSharp.text.pdf.Barcode.Size">
            Gets the size of the text.
            @return the size of the text
        </member>
        <member name="P:iTextSharp.text.pdf.Barcode.Baseline">
            Gets the text baseline.
            If positive, the text distance under the bars. If zero or negative,
            the text distance above the bars.
            @return the baseline.
        </member>
        <member name="P:iTextSharp.text.pdf.Barcode.BarHeight">
            Gets the height of the bars.
            @return the height of the bars
        </member>
        <member name="P:iTextSharp.text.pdf.Barcode.TextAlignment">
            Gets the text Element. Can be <CODE>Element.ALIGN_LEFT</CODE>,
            <CODE>Element.ALIGN_CENTER</CODE> or <CODE>Element.ALIGN_RIGHT</CODE>.
            @return the text alignment
        </member>
        <member name="P:iTextSharp.text.pdf.Barcode.GenerateChecksum">
            The property for the optional checksum generation.
        </member>
        <member name="P:iTextSharp.text.pdf.Barcode.ChecksumText">
            Sets the property to show the generated checksum in the the text.
            @param checksumText new value of property checksumText
        </member>
        <member name="P:iTextSharp.text.pdf.Barcode.StartStopText">
            Gets the property to show the start and stop character '*' in the text for
            the barcode 39.
            @param startStopText new value of property startStopText
        </member>
        <member name="P:iTextSharp.text.pdf.Barcode.Extended">
            Sets the property to generate extended barcode 39.
            @param extended new value of property extended
        </member>
        <member name="P:iTextSharp.text.pdf.Barcode.Code">
            Gets the code to generate.
            @return the code to generate
        </member>
        <member name="P:iTextSharp.text.pdf.Barcode.GuardBars">
            Sets the property to show the guard bars for barcode EAN.
            @param guardBars new value of property guardBars
        </member>
        <member name="P:iTextSharp.text.pdf.Barcode.CodeType">
            Gets the code type.
            @return the code type
        </member>
        <member name="P:iTextSharp.text.pdf.Barcode.BarcodeSize">
            Gets the maximum area that the barcode and the text, if
            any, will occupy. The lower left corner is always (0, 0).
            @return the size the barcode occupies.
        </member>
        <member name="P:iTextSharp.text.pdf.Barcode.AltText">
            Sets the alternate text. If present, this text will be used instead of the
            text derived from the supplied code.
            @param altText the alternate text
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeInter25.BARS">
            The bars to generate the code.
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeInter25.#ctor">
            Creates new BarcodeInter25 
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeInter25.KeepNumbers(System.String)">
            Deletes all the non numeric characters from <CODE>text</CODE>.
            @param text the text
            @return a <CODE>string</CODE> with only numeric characters
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeInter25.GetChecksum(System.String)">
            Calculates the checksum.
            @param text the numeric text
            @return the checksum
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeInter25.GetBarsInter25(System.String)">
            Creates the bars for the barcode.
            @param text the text. It can contain non numeric characters
            @return the barcode
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.BarcodeInter25.PlaceBarcode(iTextSharp.text.pdf.PdfContentByte,iTextSharp.text.Color,iTextSharp.text.Color)" -->
        <member name="P:iTextSharp.text.pdf.BarcodeInter25.BarcodeSize">
            Gets the maximum area that the barcode and the text, if
            any, will occupy. The lower left corner is always (0, 0).
            @return the size the barcode occupies.
        </member>
        <member name="T:iTextSharp.text.Meta">
            <summary>
            This is an Element that contains
            some meta information about the document.
            </summary>
            <remarks>
            An object of type Meta can not be constructed by the user.
            Userdefined meta information should be placed in a Header-object.
            Meta is reserved for: Subject, Keywords, Author, Title, Producer
            and Creationdate information.
            </remarks>
            <seealso cref="T:iTextSharp.text.Element"/>
            <seealso cref="T:iTextSharp.text.Header"/>
        </member>
        <member name="F:iTextSharp.text.Meta.type">
            <summary> This is the type of Meta-information this object contains. </summary>
        </member>
        <member name="F:iTextSharp.text.Meta.content">
            <summary> This is the content of the Meta-information. </summary>
        </member>
        <member name="M:iTextSharp.text.Meta.#ctor(System.Int32,System.String)">
            <summary>
            Constructs a Meta.
            </summary>
            <param name="type">the type of meta-information</param>
            <param name="content">the content</param>
        </member>
        <member name="M:iTextSharp.text.Meta.#ctor(System.String,System.String)">
            <summary>
            Constructs a Meta.
            </summary>
            <param name="tag">the tagname of the meta-information</param>
            <param name="content">the content</param>
        </member>
        <member name="M:iTextSharp.text.Meta.Process(iTextSharp.text.IElementListener)">
            <summary>
            Processes the element by adding it (or the different parts) to a
            IElementListener.
            </summary>
            <param name="listener">the IElementListener</param>
            <returns>true if the element was processed successfully</returns>
        </member>
        <member name="M:iTextSharp.text.Meta.IsContent">
            @see com.lowagie.text.Element#isContent()
            @since   iText 2.0.8
        </member>
        <member name="M:iTextSharp.text.Meta.IsNestable">
            @see com.lowagie.text.Element#isNestable()
            @since   iText 2.0.8
        </member>
        <member name="M:iTextSharp.text.Meta.Append(System.String)">
            <summary>
            appends some text to this Meta.
            </summary>
            <param name="str">a string</param>
            <returns>a StringBuilder</returns>
        </member>
        <member name="M:iTextSharp.text.Meta.GetType(System.String)">
            <summary>
            Returns the name of the meta information.
            </summary>
            <param name="tag">name to match</param>
            <returns>a string</returns>
        </member>
        <member name="P:iTextSharp.text.Meta.Type">
            <summary>
            Gets the type of the text element.
            </summary>
            <value>a type</value>
        </member>
        <member name="P:iTextSharp.text.Meta.Chunks">
            <summary>
            Gets all the chunks in this element.
            </summary>
            <value>an ArrayList</value>
        </member>
        <member name="P:iTextSharp.text.Meta.Content">
            <summary>
            Returns the content of the meta information.
            </summary>
            <value>a string</value>
        </member>
        <member name="P:iTextSharp.text.Meta.Name">
            <summary>
            Returns the name of the meta information.
            </summary>
            <value>a string</value>
        </member>
        <member name="T:iTextSharp.text.factories.RomanAlphabetFactory">
            This class can produce String combinations representing a number.
            "a" to "z" represent 1 to 26, "AA" represents 27, "AB" represents 28,
            and so on; "ZZ" is followed by "AAA".
        </member>
        <member name="M:iTextSharp.text.factories.RomanAlphabetFactory.GetString(System.Int32)">
            Translates a positive integer (not equal to zero)
            into a String using the letters 'a' to 'z';
            1 = a, 2 = b, ..., 26 = z, 27 = aa, 28 = ab,...
        </member>
        <member name="M:iTextSharp.text.factories.RomanAlphabetFactory.GetLowerCaseString(System.Int32)">
            Translates a positive integer (not equal to zero)
            into a String using the letters 'a' to 'z';
            1 = a, 2 = b, ..., 26 = z, 27 = aa, 28 = ab,...
        </member>
        <member name="M:iTextSharp.text.factories.RomanAlphabetFactory.GetUpperCaseString(System.Int32)">
            Translates a positive integer (not equal to zero)
            into a String using the letters 'A' to 'Z';
            1 = A, 2 = B, ..., 26 = Z, 27 = AA, 28 = AB,...
        </member>
        <member name="M:iTextSharp.text.factories.RomanAlphabetFactory.GetString(System.Int32,System.Boolean)">
            Translates a positive integer (not equal to zero)
            into a String using the letters 'a' to 'z'
            (a = 1, b = 2, ..., z = 26, aa = 27, ab = 28,...).
        </member>
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.rtf.table.RtfTable" -->
        <member name="F:iTextSharp.text.rtf.table.RtfTable.rows">
            The rows of this RtfTable
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfTable.tableWidthPercent">
            The percentage of the page width that this RtfTable covers
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfTable.proportionalWidths">
            An array with the proportional widths of the cells in each row
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfTable.cellPadding">
            The cell padding
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfTable.cellSpacing">
            The cell spacing
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfTable.borders">
            The border style of this RtfTable 
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfTable.alignment">
            The alignment of this RtfTable
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfTable.cellsFitToPage">
            Whether the cells in this RtfTable must fit in a page
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfTable.tableFitToPage">
            Whether the whole RtfTable must fit in a page
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfTable.headerRows">
            The number of header rows in this RtfTable
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfTable.offset">
            The offset from the previous text
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfTable.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.Table)">
            Constructs a RtfTable based on a Table for a RtfDocument.
            
            @param doc The RtfDocument this RtfTable belongs to
            @param table The Table that this RtfTable wraps
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfTable.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.pdf.PdfPTable)">
            Constructs a RtfTable based on a PdfTable for a RtfDocument.
            
            @param doc The RtfDocument this RtfTable belongs to
            @param table The PdfPTable that this RtfTable wraps
            @since 2.1.3
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfTable.ImportTable(iTextSharp.text.Table)">
            Imports the rows and settings from the Table into this
            RtfTable.
            
            @param table The source Table
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfTable.ImportTable(iTextSharp.text.pdf.PdfPTable)">
            Imports the rows and settings from the Table into this
            RtfTable.
            
            @param table The source PdfPTable
            @since 2.1.3
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfTable.WriteContent(System.IO.Stream)">
            Writes the content of this RtfTable
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfTable.GetAlignment">
            Gets the alignment of this RtfTable
            
            @return The alignment of this RtfTable.
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfTable.GetBorders">
            Gets the borders of this RtfTable
            
            @return The borders of this RtfTable.
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfTable.GetCellPadding">
            Gets the cell padding of this RtfTable
            
            @return The cell padding of this RtfTable.
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfTable.GetCellSpacing">
            Gets the cell spacing of this RtfTable
            
            @return The cell spacing of this RtfTable.
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfTable.GetProportionalWidths">
            Gets the proportional cell widths of this RtfTable
            
            @return The proportional widths of this RtfTable.
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfTable.GetTableWidthPercent">
            Gets the percentage of the page width this RtfTable covers 
            
            @return The percentage of the page width.
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfTable.GetRows">
            Gets the rows of this RtfTable
            
            @return The rows of this RtfTable
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfTable.GetCellsFitToPage">
            Gets the cellsFitToPage setting of this RtfTable.
            
            @return The cellsFitToPage setting of this RtfTable.
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfTable.GetTableFitToPage">
            Gets the tableFitToPage setting of this RtfTable.
            
            @return The tableFitToPage setting of this RtfTable.
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfTable.GetHeaderRows">
            Gets the number of header rows of this RtfTable
            
            @return The number of header rows
        </member>
        <member name="T:iTextSharp.text.rtf.parser.properties.IRtfPropertyListener">
            <code>RtfPropertyListener</code> interface for handling events.
            
            @author Howard Shank (hgshank@yahoo.com)
            
             @since 2.0.8
        </member>
        <member name="M:iTextSharp.text.rtf.parser.properties.IRtfPropertyListener.BeforePropertyChange(System.String)">
            
        </member>
        <member name="M:iTextSharp.text.rtf.parser.properties.IRtfPropertyListener.AfterPropertyChange(System.String)">
            
        </member>
        <member name="T:iTextSharp.text.rtf.parser.destinations.IRtfDestinationListener">
            <code>RtfDestinationListener</code> interface for handling events.
            
            @author Howard Shank (hgshank@yahoo.com)
            
             @since 2.0.8
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.IRtfDestinationListener.BeforeCtrlWord(iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordData)">
            
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.IRtfDestinationListener.OnCtrlWord(iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordData)">
            
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.IRtfDestinationListener.AfterCtrlWord(iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordData)">
            
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.IRtfDestinationListener.BeforeCharacter(System.Int32)">
            
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.IRtfDestinationListener.OnCharacter(System.Int32)">
            
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.IRtfDestinationListener.AfterCharacter(System.Int32)">
            
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.IRtfDestinationListener.OnOpenGroup">
            
            @return
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.IRtfDestinationListener.OnCloseGroup">
            
            @return
        </member>
        <member name="T:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordData">
            The control word and parameter information as parsed by the parser.
            Contains the control word,
            Flag indicating if there is a parameter. 
            The parameter value as a string.
            Flag indicating the parameter is positive or negative.
            
            @author Howard Shank (hgshank@yahoo.com)
            @since 2.0.8
        </member>
        <member name="F:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordData.ctrlWord">
            The control word found by the parser
        </member>
        <member name="F:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordData.hasParam">
            Flag indicating if this keyword has a parameter.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordData.param">
            The parameter for the control word.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordData.isNeg">
            Flag indicating if parameter is positive or negative.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordData.newGroup">
            Flag indicating a new group
        </member>
        <member name="F:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordData.modified">
            Flag indicating if this object has been modified.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordData.IntValue">
            Return the parameter value as an integer (int) value.
            
            @return
                 Returns the parameter value as an int vlaue.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordData.LongValue">
             Return the parameter value as a long value
             
            @return
                 Returns the parameter value as a long value
        </member>
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.pdf.PdfIndirectReference" -->
        <member name="F:iTextSharp.text.pdf.PdfIndirectReference.number">
            the object number 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfIndirectReference.generation">
            the generation number 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfIndirectReference.#ctor(System.Int32,System.Int32,System.Int32)">
             Constructs a <CODE>PdfIndirectReference</CODE>.
            
             @param        type            the type of the <CODE>PdfObject</CODE> that is referenced to
             @param        number            the object number.
             @param        generation        the generation number.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfIndirectReference.#ctor(System.Int32,System.Int32)">
             Constructs a <CODE>PdfIndirectReference</CODE>.
            
             @param        type            the type of the <CODE>PdfObject</CODE> that is referenced to
             @param        number            the object number.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfIndirectReference.Number">
             Returns the number of the object.
            
             @return        a number.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfIndirectReference.Generation">
             Returns the generation of the object.
            
             @return        a number.
        </member>
        <member name="M:iTextSharp.text.pdf.PRIndirectReference.#ctor(iTextSharp.text.pdf.PdfReader,System.Int32,System.Int32)">
             Constructs a <CODE>PdfIndirectReference</CODE>.
            
             @param        reader            a <CODE>PdfReader</CODE>
             @param        number            the object number.
             @param        generation        the generation number.
        </member>
        <member name="M:iTextSharp.text.pdf.PRIndirectReference.#ctor(iTextSharp.text.pdf.PdfReader,System.Int32)">
             Constructs a <CODE>PdfIndirectReference</CODE>.
            
             @param        reader            a <CODE>PdfReader</CODE>
             @param        number            the object number.
        </member>
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.pdf.PdfStream" -->
        <member name="F:iTextSharp.text.pdf.PdfStream.DEFAULT_COMPRESSION">
            A possible compression level.
            @since   2.1.3
        </member>
        <member name="F:iTextSharp.text.pdf.PdfStream.NO_COMPRESSION">
            A possible compression level.
            @since   2.1.3
        </member>
        <member name="F:iTextSharp.text.pdf.PdfStream.BEST_SPEED">
            A possible compression level.
            @since   2.1.3
        </member>
        <member name="F:iTextSharp.text.pdf.PdfStream.BEST_COMPRESSION">
            A possible compression level.
            @since   2.1.3
        </member>
        <member name="F:iTextSharp.text.pdf.PdfStream.compressed">
            is the stream compressed? 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfStream.compressionLevel">
            The level of compression.
            @since   2.1.3
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStream.#ctor(System.Byte[])">
             Constructs a <CODE>PdfStream</CODE>-object.
            
             @param        bytes            content of the new <CODE>PdfObject</CODE> as an array of <CODE>byte</CODE>.
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfStream.#ctor(System.IO.Stream,iTextSharp.text.pdf.PdfWriter)" -->
        <member name="M:iTextSharp.text.pdf.PdfStream.#ctor">
            Constructs a <CODE>PdfStream</CODE>-object.
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfStream.WriteLength" -->
        <member name="M:iTextSharp.text.pdf.PdfStream.FlateCompress">
            Compresses the stream.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStream.FlateCompress(System.Int32)">
            Compresses the stream.
            @param compressionLevel the compression level (0 = best speed, 9 = best compression, -1 is default)
            @since   2.1.3
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStream.WriteContent(System.IO.Stream)">
            Writes the data content to an <CODE>Stream</CODE>.
            @param os the destination to write to
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStream.ToString">
            @see com.lowagie.text.pdf.PdfObject#toString()
        </member>
        <member name="T:iTextSharp.text.pdf.PdfPageLabels">
            Page labels are used to identify each
            page visually on the screen or in print.
            @author  Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPageLabels.DECIMAL_ARABIC_NUMERALS">
            Logical pages will have the form 1,2,3,...
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPageLabels.UPPERCASE_ROMAN_NUMERALS">
            Logical pages will have the form I,II,III,IV,...
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPageLabels.LOWERCASE_ROMAN_NUMERALS">
            Logical pages will have the form i,ii,iii,iv,...
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPageLabels.UPPERCASE_LETTERS">
            Logical pages will have the form of uppercase letters
            (A to Z for the first 26 pages, AA to ZZ for the next 26, and so on)
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPageLabels.LOWERCASE_LETTERS">
            Logical pages will have the form of uppercase letters
            (a to z for the first 26 pages, aa to zz for the next 26, and so on)
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPageLabels.EMPTY">
            No logical page numbers are generated but fixed text may
            still exist
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPageLabels.numberingStyle">
            Dictionary values to set the logical page styles
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPageLabels.map">
            The sequence of logical pages. Will contain at least a value for page 1
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPageLabels.#ctor">
            Creates a new PdfPageLabel with a default logical page 1
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPageLabels.AddPageLabel(System.Int32,System.Int32,System.String,System.Int32)">
            Adds or replaces a page label.
            @param page the real page to start the numbering. First page is 1
            @param numberStyle the numbering style such as LOWERCASE_ROMAN_NUMERALS
            @param text the text to prefix the number. Can be <CODE>null</CODE> or empty
            @param firstPage the first logical page number
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPageLabels.AddPageLabel(System.Int32,System.Int32,System.String)">
            Adds or replaces a page label. The first logical page has the default
            of 1.
            @param page the real page to start the numbering. First page is 1
            @param numberStyle the numbering style such as LOWERCASE_ROMAN_NUMERALS
            @param text the text to prefix the number. Can be <CODE>null</CODE> or empty
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPageLabels.AddPageLabel(System.Int32,System.Int32)">
            Adds or replaces a page label. There is no text prefix and the first
            logical page has the default of 1.
            @param page the real page to start the numbering. First page is 1
            @param numberStyle the numbering style such as LOWERCASE_ROMAN_NUMERALS
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPageLabels.AddPageLabel(iTextSharp.text.pdf.PdfPageLabels.PdfPageLabelFormat)">
            Adds or replaces a page label.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPageLabels.RemovePageLabel(System.Int32)">
            Removes a page label. The first page lagel can not be removed, only changed.
            @param page the real page to remove
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPageLabels.GetDictionary(iTextSharp.text.pdf.PdfWriter)">
            Gets the page label dictionary to insert into the document.
            @return the page label dictionary
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPageLabels.GetPageLabels(iTextSharp.text.pdf.PdfReader)">
            Retrieves the page labels from a PDF as an array of String objects.
            @param reader a PdfReader object that has the page labels you want to retrieve
            @return  a String array or <code>null</code> if no page labels are present
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPageLabels.GetPageLabelFormats(iTextSharp.text.pdf.PdfReader)">
            Retrieves the page labels from a PDF as an array of {@link PdfPageLabelFormat} objects.
            @param reader a PdfReader object that has the page labels you want to retrieve
            @return  a PdfPageLabelEntry array, containing an entry for each format change
            or <code>null</code> if no page labels are present
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPageLabels.PdfPageLabelFormat.#ctor(System.Int32,System.Int32,System.String,System.Int32)">
            Creates a page label format.
            @param physicalPage the real page to start the numbering. First page is 1
            @param numberStyle the numbering style such as LOWERCASE_ROMAN_NUMERALS
            @param prefix the text to prefix the number. Can be <CODE>null</CODE> or empty
            @param logicalPage the first logical page number
        </member>
        <member name="T:iTextSharp.text.pdf.PdfGState">
            The graphic state dictionary.
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.PdfGState.BM_NORMAL">
            A possible blend mode 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfGState.BM_COMPATIBLE">
            A possible blend mode 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfGState.BM_MULTIPLY">
            A possible blend mode 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfGState.BM_SCREEN">
            A possible blend mode 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfGState.BM_OVERLAY">
            A possible blend mode 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfGState.BM_DARKEN">
            A possible blend mode 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfGState.BM_LIGHTEN">
            A possible blend mode 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfGState.BM_COLORDODGE">
            A possible blend mode 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfGState.BM_COLORBURN">
            A possible blend mode 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfGState.BM_HARDLIGHT">
            A possible blend mode 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfGState.BM_SOFTLIGHT">
            A possible blend mode 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfGState.BM_DIFFERENCE">
            A possible blend mode 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfGState.BM_EXCLUSION">
            A possible blend mode 
        </member>
        <member name="P:iTextSharp.text.pdf.PdfGState.OverPrintStroking">
            Sets the flag whether to apply overprint for stroking.
            @param ov
        </member>
        <member name="P:iTextSharp.text.pdf.PdfGState.OverPrintNonStroking">
            Sets the flag whether to apply overprint for non stroking painting operations.
            @param ov
        </member>
        <member name="P:iTextSharp.text.pdf.PdfGState.OverPrintMode">
            Sets the flag whether to toggle knockout behavior for overprinted objects.
            @param ov - accepts 0 or 1
        </member>
        <member name="P:iTextSharp.text.pdf.PdfGState.StrokeOpacity">
            Sets the current stroking alpha constant, specifying the constant shape or
            constant opacity value to be used for stroking operations in the transparent
            imaging model.
            @param n
        </member>
        <member name="P:iTextSharp.text.pdf.PdfGState.FillOpacity">
            Sets the current stroking alpha constant, specifying the constant shape or
            constant opacity value to be used for nonstroking operations in the transparent
            imaging model.
            @param n
        </member>
        <member name="P:iTextSharp.text.pdf.PdfGState.AlphaIsShape">
            The alpha source flag specifying whether the current soft mask
            and alpha constant are to be interpreted as shape values (true)
            or opacity values (false). 
            @param v
        </member>
        <member name="P:iTextSharp.text.pdf.PdfGState.TextKnockout">
            Determines the behaviour of overlapping glyphs within a text object
            in the transparent imaging model.
            @param v
        </member>
        <member name="P:iTextSharp.text.pdf.PdfGState.BlendMode">
            The current blend mode to be used in the transparent imaging model.
            @param bm
        </member>
        <member name="T:iTextSharp.text.pdf.PdfException">
             Signals that an unspecified problem while constructing a PDF document.
            
             @see        BadPdfFormatException
        </member>
        <member name="T:iTextSharp.text.DocumentException">
            <summary>
            Signals that an error has occurred in a Document.
            </summary>
            <seealso cref="T:iTextSharp.text.BadElementException"/>
            <seealso cref="T:iTextSharp.text.Document"/>
            <seealso cref="T:iTextSharp.text.DocWriter"/>
            <seealso cref="T:iTextSharp.text.IDocListener"/>
        </member>
        <member name="M:iTextSharp.text.DocumentException.#ctor">
            <summary>
            Constructs a new DocumentException
            </summary>
            <overloads>
            Has two overloads.
            </overloads>
        </member>
        <member name="M:iTextSharp.text.DocumentException.#ctor(System.String)">
            <summary>
            Construct a new DocumentException
            </summary>
            <param name="message">error message</param>
        </member>
        <member name="F:iTextSharp.text.pdf.intern.PdfXConformanceImp.PDFXKEY_COLOR">
            A key for an aspect that can be checked for PDF/X Conformance. 
        </member>
        <member name="F:iTextSharp.text.pdf.intern.PdfXConformanceImp.PDFXKEY_CMYK">
            A key for an aspect that can be checked for PDF/X Conformance. 
        </member>
        <member name="F:iTextSharp.text.pdf.intern.PdfXConformanceImp.PDFXKEY_RGB">
            A key for an aspect that can be checked for PDF/X Conformance. 
        </member>
        <member name="F:iTextSharp.text.pdf.intern.PdfXConformanceImp.PDFXKEY_FONT">
            A key for an aspect that can be checked for PDF/X Conformance. 
        </member>
        <member name="F:iTextSharp.text.pdf.intern.PdfXConformanceImp.PDFXKEY_IMAGE">
            A key for an aspect that can be checked for PDF/X Conformance. 
        </member>
        <member name="F:iTextSharp.text.pdf.intern.PdfXConformanceImp.PDFXKEY_GSTATE">
            A key for an aspect that can be checked for PDF/X Conformance. 
        </member>
        <member name="F:iTextSharp.text.pdf.intern.PdfXConformanceImp.PDFXKEY_LAYER">
            A key for an aspect that can be checked for PDF/X Conformance. 
        </member>
        <member name="F:iTextSharp.text.pdf.intern.PdfXConformanceImp.pdfxConformance">
            The value indicating if the PDF has to be in conformance with PDF/X.
        </member>
        <member name="M:iTextSharp.text.pdf.intern.PdfXConformanceImp.IsPdfX">
            Checks if the PDF/X Conformance is necessary.
            @return true if the PDF has to be in conformance with any of the PDF/X specifications
        </member>
        <member name="M:iTextSharp.text.pdf.intern.PdfXConformanceImp.IsPdfX1A2001">
            Checks if the PDF has to be in conformance with PDF/X-1a:2001
            @return true of the PDF has to be in conformance with PDF/X-1a:2001
        </member>
        <member name="M:iTextSharp.text.pdf.intern.PdfXConformanceImp.IsPdfX32002">
            Checks if the PDF has to be in conformance with PDF/X-3:2002
            @return true of the PDF has to be in conformance with PDF/X-3:2002
        </member>
        <member name="M:iTextSharp.text.pdf.intern.PdfXConformanceImp.IsPdfA1">
            Checks if the PDF has to be in conformance with PDFA1
            @return true of the PDF has to be in conformance with PDFA1
        </member>
        <member name="M:iTextSharp.text.pdf.intern.PdfXConformanceImp.IsPdfA1A">
            Checks if the PDF has to be in conformance with PDFA1A
            @return true of the PDF has to be in conformance with PDFA1A
        </member>
        <member name="M:iTextSharp.text.pdf.intern.PdfXConformanceImp.CheckPDFXConformance(iTextSharp.text.pdf.PdfWriter,System.Int32,System.Object)">
            Business logic that checks if a certain object is in conformance with PDF/X.
            @param writer    the writer that is supposed to write the PDF/X file
            @param key       the type of PDF/X conformance that has to be checked
            @param obj1      the object that is checked for conformance
        </member>
        <member name="P:iTextSharp.text.pdf.intern.PdfXConformanceImp.PDFXConformance">
            @see com.lowagie.text.pdf.interfaces.PdfXConformance#setPDFXConformance(int)
        </member>
        <member name="T:iTextSharp.text.pdf.IHyphenationEvent">
            Called by <code>Chunk</code> to hyphenate a word.
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="M:iTextSharp.text.pdf.IHyphenationEvent.GetHyphenatedWordPre(System.String,iTextSharp.text.pdf.BaseFont,System.Single,System.Single)">
            Hyphenates a word and returns the first part of it. To get
            the second part of the hyphenated word call <CODE>getHyphenatedWordPost()</CODE>.
            @param word the word to hyphenate
            @param font the font used by this word
            @param fontSize the font size used by this word
            @param remainingWidth the width available to fit this word in
            @return the first part of the hyphenated word including
            the hyphen symbol, if any
        </member>
        <member name="P:iTextSharp.text.pdf.IHyphenationEvent.HyphenSymbol">
            Gets the hyphen symbol.
            @return the hyphen symbol
        </member>
        <member name="P:iTextSharp.text.pdf.IHyphenationEvent.HyphenatedWordPost">
            Gets the second part of the hyphenated word. Must be called
            after <CODE>getHyphenatedWordPre()</CODE>.
            @return the second part of the hyphenated word
        </member>
        <member name="T:iTextSharp.text.pdf.draw.LineSeparator">
            Element that draws a solid line from left to right.
            Can be added directly to a document or column.
            Can also be used to create a separator chunk.
            @author   Paulo Soares
            @since    2.1.2
        </member>
        <member name="T:iTextSharp.text.pdf.draw.VerticalPositionMark">
            Helper class implementing the DrawInterface. Can be used to add
            horizontal or vertical separators. Won't draw anything unless
            you implement the draw method.
            @since   2.1.2
        </member>
        <member name="T:iTextSharp.text.pdf.draw.IDrawInterface">
            Interface for an Element that allows you to draw something at the current
            vertical position. Trivial implementations are LineSeparator and VerticalPositionMark.
            It is also used to define what has to be drawn by a separator chunk.
            @since 2.1.2
        </member>
        <member name="M:iTextSharp.text.pdf.draw.IDrawInterface.Draw(iTextSharp.text.pdf.PdfContentByte,System.Single,System.Single,System.Single,System.Single,System.Single)">
            Implement this method if you want to draw something at the current Y position
            (for instance a line).
            @param   canvas  the canvas on which you can draw
            @param   llx     the x coordinate of the left page margin
            @param   lly     the y coordinate of the bottom page margin
            @param   urx     the x coordinate of the right page margin
            @param   ury     the y coordinate of the top page margin
            @param   y       the current y position on the page
        </member>
        <member name="F:iTextSharp.text.pdf.draw.VerticalPositionMark.drawInterface">
            Another implementation of the DrawInterface; its draw method will overrule LineSeparator.Draw(). 
        </member>
        <member name="F:iTextSharp.text.pdf.draw.VerticalPositionMark.offset">
            The offset for the line. 
        </member>
        <member name="M:iTextSharp.text.pdf.draw.VerticalPositionMark.#ctor">
            Creates a vertical position mark that won't draw anything unless
            you define a DrawInterface.
        </member>
        <member name="M:iTextSharp.text.pdf.draw.VerticalPositionMark.#ctor(iTextSharp.text.pdf.draw.IDrawInterface,System.Single)">
            Creates a vertical position mark that won't draw anything unless
            you define a DrawInterface.
            @param   drawInterface   the drawInterface for this vertical position mark.
            @param   offset          the offset for this vertical position mark.
        </member>
        <member name="M:iTextSharp.text.pdf.draw.VerticalPositionMark.Draw(iTextSharp.text.pdf.PdfContentByte,System.Single,System.Single,System.Single,System.Single,System.Single)">
            @see com.lowagie.text.pdf.draw.DrawInterface#draw(com.lowagie.text.pdf.PdfContentByte, float, float, float, float, float)
        </member>
        <member name="M:iTextSharp.text.pdf.draw.VerticalPositionMark.Process(iTextSharp.text.IElementListener)">
            @see com.lowagie.text.Element#process(com.lowagie.text.ElementListener)
        </member>
        <member name="M:iTextSharp.text.pdf.draw.VerticalPositionMark.IsContent">
            @see com.lowagie.text.Element#isContent()
        </member>
        <member name="M:iTextSharp.text.pdf.draw.VerticalPositionMark.IsNestable">
            @see com.lowagie.text.Element#isNestable()
        </member>
        <member name="P:iTextSharp.text.pdf.draw.VerticalPositionMark.Type">
            @see com.lowagie.text.Element#type()
        </member>
        <member name="P:iTextSharp.text.pdf.draw.VerticalPositionMark.Chunks">
            @see com.lowagie.text.Element#getChunks()
        </member>
        <member name="P:iTextSharp.text.pdf.draw.VerticalPositionMark.DrawInterface">
            Setter for the interface with the overruling Draw() method.
            @param drawInterface a DrawInterface implementation
        </member>
        <member name="P:iTextSharp.text.pdf.draw.VerticalPositionMark.Offset">
            Setter for the offset. The offset is relative to the current
            Y position. If you want to underline something, you have to
            choose a negative offset.
            @param offset    an offset
        </member>
        <member name="F:iTextSharp.text.pdf.draw.LineSeparator.lineWidth">
            The thickness of the line. 
        </member>
        <member name="F:iTextSharp.text.pdf.draw.LineSeparator.percentage">
            The width of the line as a percentage of the available page width. 
        </member>
        <member name="F:iTextSharp.text.pdf.draw.LineSeparator.lineColor">
            The color of the line. 
        </member>
        <member name="F:iTextSharp.text.pdf.draw.LineSeparator.alignment">
            The alignment of the line. 
        </member>
        <member name="M:iTextSharp.text.pdf.draw.LineSeparator.#ctor(System.Single,System.Single,iTextSharp.text.Color,System.Int32,System.Single)">
            Creates a new instance of the LineSeparator class.
            @param lineWidth      the thickness of the line
            @param percentage the width of the line as a percentage of the available page width
            @param color          the color of the line
            @param align          the alignment
            @param offset     the offset of the line relative to the current baseline (negative = under the baseline)
        </member>
        <member name="M:iTextSharp.text.pdf.draw.LineSeparator.#ctor">
            Creates a new instance of the LineSeparator class with
            default values: lineWidth 1 user unit, width 100%, centered with offset 0.
        </member>
        <member name="M:iTextSharp.text.pdf.draw.LineSeparator.Draw(iTextSharp.text.pdf.PdfContentByte,System.Single,System.Single,System.Single,System.Single,System.Single)">
            @see com.lowagie.text.pdf.draw.DrawInterface#draw(com.lowagie.text.pdf.PdfContentByte, float, float, float, float, float)
        </member>
        <member name="M:iTextSharp.text.pdf.draw.LineSeparator.DrawLine(iTextSharp.text.pdf.PdfContentByte,System.Single,System.Single,System.Single)">
            Draws a horizontal line.
            @param canvas the canvas to draw on
            @param leftX      the left x coordinate
            @param rightX the right x coordindate
            @param y          the y coordinate
        </member>
        <member name="P:iTextSharp.text.pdf.draw.LineSeparator.LineWidth">
            Setter for the line width.
            @param lineWidth  the thickness of the line that will be drawn.
        </member>
        <member name="P:iTextSharp.text.pdf.draw.LineSeparator.Percentage">
            Setter for the width as a percentage of the available width.
            @return   a width percentage
        </member>
        <member name="P:iTextSharp.text.pdf.draw.LineSeparator.LineColor">
            Setter for the color of the line that will be drawn.
            @param color  a color
        </member>
        <member name="P:iTextSharp.text.pdf.draw.LineSeparator.Alignment">
            Setter for the alignment of the line.
            @param align  an alignment value
        </member>
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.pdf.ColumnText" -->
        <member name="F:iTextSharp.text.pdf.ColumnText.AR_COMPOSEDTASHKEEL">
            Compose the tashkeel in the ligatures. 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.AR_LIG">
            Do some extra double ligatures. 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.DIGITS_EN2AN">
            Digit shaping option: Replace European digits (U+0030...U+0039) by Arabic-Indic digits.
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.DIGITS_AN2EN">
            Digit shaping option: Replace Arabic-Indic digits by European digits (U+0030...U+0039).
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.DIGITS_EN2AN_INIT_LR">
            Digit shaping option:
            Replace European digits (U+0030...U+0039) by Arabic-Indic digits
            if the most recent strongly directional character
            is an Arabic letter (its Bidi direction value is RIGHT_TO_LEFT_ARABIC).
            The initial state at the start of the text is assumed to be not an Arabic,
            letter, so European digits at the start of the text will not change.
            Compare to DIGITS_ALEN2AN_INIT_AL.
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.DIGITS_EN2AN_INIT_AL">
            Digit shaping option:
            Replace European digits (U+0030...U+0039) by Arabic-Indic digits
            if the most recent strongly directional character
            is an Arabic letter (its Bidi direction value is RIGHT_TO_LEFT_ARABIC).
            The initial state at the start of the text is assumed to be an Arabic,
            letter, so European digits at the start of the text will change.
            Compare to DIGITS_ALEN2AN_INT_LR.
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.DIGIT_TYPE_AN">
            Digit type option: Use Arabic-Indic digits (U+0660...U+0669).
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.DIGIT_TYPE_AN_EXTENDED">
            Digit type option: Use Eastern (Extended) Arabic-Indic digits (U+06f0...U+06f9).
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.NO_MORE_TEXT">
            Signals that there is no more text available. 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.NO_MORE_COLUMN">
            Signals that there is no more column. 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.LINE_STATUS_OK">
            The column is valid. 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.LINE_STATUS_OFFLIMITS">
            The line is out the column limits. 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.LINE_STATUS_NOLINE">
            The line cannot fit this column position. 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.AR_NOVOWEL">
            Eliminate the arabic vowels 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.maxY">
            Upper bound of the column. 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.minY">
            Lower bound of the column. 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.alignment">
            The column Element. Default is left Element. 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.leftWall">
            The left column bound. 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.rightWall">
            The right column bound. 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.bidiLine">
            The chunks that form the text. 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.yLine">
            The current y line location. Text will be written at this line minus the leading. 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.currentLeading">
            The leading for the current line. 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.fixedLeading">
            The fixed text leading. 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.multipliedLeading">
            The text leading that is multiplied by the biggest font size in the line. 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.canvas">
            The <CODE>PdfContent</CODE> where the text will be written to. 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.lineStatus">
            The line status when trying to fit a line to a column. 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.indent">
            The first paragraph line indent. 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.followingIndent">
            The following paragraph lines indent. 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.rightIndent">
            The right paragraph lines indent. 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.extraParagraphSpace">
            The extra space between paragraphs. 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.rectangularWidth">
            The width of the line when the column is defined as a simple rectangle. 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.spaceCharRatio">
            Holds value of property spaceCharRatio. 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.linesWritten">
            Holds value of property linesWritten. 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.arabicOptions">
            Holds value of property arabicOptions. 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.useAscender">
            if true, first line height is adjusted so that the max ascender touches the top 
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.#ctor(iTextSharp.text.pdf.PdfContentByte)">
            Creates a <CODE>ColumnText</CODE>.
            @param text the place where the text will be written to. Can
            be a template.
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.Duplicate(iTextSharp.text.pdf.ColumnText)">
            Creates an independent duplicated of the instance <CODE>org</CODE>.
            @param org the original <CODE>ColumnText</CODE>
            @return the duplicated
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.SetACopy(iTextSharp.text.pdf.ColumnText)">
            Makes this instance an independent copy of <CODE>org</CODE>.
            @param org the original <CODE>ColumnText</CODE>
            @return itself
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.AddText(iTextSharp.text.Phrase)">
            Adds a <CODE>Phrase</CODE> to the current text array.
            @param phrase the text
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.SetText(iTextSharp.text.Phrase)">
            Replaces the current text array with this <CODE>Phrase</CODE>.
            Anything added previously with AddElement() is lost.
            @param phrase the text
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.AddText(iTextSharp.text.Chunk)">
            Adds a <CODE>Chunk</CODE> to the current text array.
            Will not have any effect if AddElement() was called before.
            @param chunk the text
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.ColumnText.AddElement(iTextSharp.text.IElement)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.ColumnText.ConvertColumn(System.Single[])" -->
        <member name="M:iTextSharp.text.pdf.ColumnText.FindLimitsPoint(System.Collections.ArrayList)">
            Finds the intersection between the <CODE>yLine</CODE> and the column. It will
            set the <CODE>lineStatus</CODE> apropriatly.
            @param wall the column to intersect
            @return the x coordinate of the intersection
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.FindLimitsOneLine">
            Finds the intersection between the <CODE>yLine</CODE> and the two
            column bounds. It will set the <CODE>lineStatus</CODE> apropriatly.
            @return a <CODE>float[2]</CODE>with the x coordinates of the intersection
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.FindLimitsTwoLines">
            Finds the intersection between the <CODE>yLine</CODE>,
            the <CODE>yLine-leading</CODE>and the two
            column bounds. It will set the <CODE>lineStatus</CODE> apropriatly.
            @return a <CODE>float[4]</CODE>with the x coordinates of the intersection
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.SetColumns(System.Single[],System.Single[])">
            Sets the columns bounds. Each column bound is described by a
            <CODE>float[]</CODE> with the line points [x1,y1,x2,y2,...].
            The array must have at least 4 elements.
            @param leftLine the left column bound
            @param rightLine the right column bound
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.SetSimpleColumn(iTextSharp.text.Phrase,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            Simplified method for rectangular columns.
            @param phrase a <CODE>Phrase</CODE>
            @param llx the lower left x corner
            @param lly the lower left y corner
            @param urx the upper right x corner
            @param ury the upper right y corner
            @param leading the leading
            @param alignment the column alignment
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.SetSimpleColumn(System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            Simplified method for rectangular columns.
            @param llx the lower left x corner
            @param lly the lower left y corner
            @param urx the upper right x corner
            @param ury the upper right y corner
            @param leading the leading
            @param alignment the column alignment
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.SetSimpleColumn(System.Single,System.Single,System.Single,System.Single)">
            Simplified method for rectangular columns.
            @param llx
            @param lly
            @param urx
            @param ury
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.SetLeading(System.Single,System.Single)">
            Sets the leading fixed and variable. The resultant leading will be
            fixedLeading+multipliedLeading*maxFontSize where maxFontSize is the
            size of the bigest font in the line.
            @param fixedLeading the fixed leading
            @param multipliedLeading the variable leading
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.Go">
            Outputs the lines to the document. It is equivalent to <CODE>go(false)</CODE>.
            @return returns the result of the operation. It can be <CODE>NO_MORE_TEXT</CODE>
            and/or <CODE>NO_MORE_COLUMN</CODE>
            @throws DocumentException on error
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.Go(System.Boolean)">
            Outputs the lines to the document. The output can be simulated.
            @param simulate <CODE>true</CODE> to simulate the writting to the document
            @return returns the result of the operation. It can be <CODE>NO_MORE_TEXT</CODE>
            and/or <CODE>NO_MORE_COLUMN</CODE>
            @throws DocumentException on error
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.ClearChunks">
            Clears the chunk array. A call to <CODE>go()</CODE> will always return
            NO_MORE_TEXT.
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.GetWidth(iTextSharp.text.Phrase,System.Int32,System.Int32)">
            Gets the width that the line will occupy after writing.
            Only the width of the first line is returned.
            @param phrase the <CODE>Phrase</CODE> containing the line
            @param runDirection the run direction
            @param arabicOptions the options for the arabic shaping
            @return the width of the line
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.GetWidth(iTextSharp.text.Phrase)">
            Gets the width that the line will occupy after writing.
            Only the width of the first line is returned.
            @param phrase the <CODE>Phrase</CODE> containing the line
            @return the width of the line
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.ShowTextAligned(iTextSharp.text.pdf.PdfContentByte,System.Int32,iTextSharp.text.Phrase,System.Single,System.Single,System.Single,System.Int32,System.Int32)">
            Shows a line of text. Only the first line is written.
            @param canvas where the text is to be written to
            @param alignment the alignment. It is not influenced by the run direction
            @param phrase the <CODE>Phrase</CODE> with the text
            @param x the x reference position
            @param y the y reference position
            @param rotation the rotation to be applied in degrees counterclockwise
            @param runDirection the run direction
            @param arabicOptions the options for the arabic shaping
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.ShowTextAligned(iTextSharp.text.pdf.PdfContentByte,System.Int32,iTextSharp.text.Phrase,System.Single,System.Single,System.Single)">
            Shows a line of text. Only the first line is written.
            @param canvas where the text is to be written to
            @param alignment the alignment
            @param phrase the <CODE>Phrase</CODE> with the text
            @param x the x reference position
            @param y the y reference position
            @param rotation the rotation to be applied in degrees counterclockwise
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.ZeroHeightElement">
            Checks if the element has a height of 0.
            @return true or false
            @since 2.1.2
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.HasMoreText(System.Int32)">
            Checks the status variable and looks if there's still some text.
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.filledWidth">
            Holds value of property filledWidth.
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.UpdateFilledWidth(System.Single)">
            Replaces the <CODE>filledWidth</CODE> if greater than the existing one.
            @param w the new <CODE>filledWidth</CODE> if greater than the existing one
        </member>
        <member name="P:iTextSharp.text.pdf.ColumnText.Leading">
            Gets the fixed leading
            @return the leading
        </member>
        <member name="P:iTextSharp.text.pdf.ColumnText.MultipliedLeading">
            Gets the variable leading
            @return the leading
        </member>
        <member name="P:iTextSharp.text.pdf.ColumnText.YLine">
            Gets the yLine.
            @return the yLine
        </member>
        <member name="P:iTextSharp.text.pdf.ColumnText.Alignment">
            Gets the Element.
            @return the alignment
        </member>
        <member name="P:iTextSharp.text.pdf.ColumnText.Indent">
            Gets the first paragraph line indent.
            @return the indent
        </member>
        <member name="P:iTextSharp.text.pdf.ColumnText.FollowingIndent">
            Gets the following paragraph lines indent.
            @return the indent
        </member>
        <member name="P:iTextSharp.text.pdf.ColumnText.RightIndent">
            Gets the right paragraph lines indent.
            @return the indent
        </member>
        <member name="P:iTextSharp.text.pdf.ColumnText.ExtraParagraphSpace">
            Sets the extra space between paragraphs.
            @return the extra space between paragraphs
        </member>
        <member name="P:iTextSharp.text.pdf.ColumnText.SpaceCharRatio">
            Gets the space/character extra spacing ratio for
            fully justified text.
            @return the space/character extra spacing ratio
        </member>
        <member name="P:iTextSharp.text.pdf.ColumnText.RunDirection">
            Gets the run direction.
            @return the run direction
        </member>
        <member name="P:iTextSharp.text.pdf.ColumnText.LinesWritten">
            Gets the number of lines written.
            @return the number of lines written
        </member>
        <member name="P:iTextSharp.text.pdf.ColumnText.ArabicOptions">
            Sets the arabic shaping options. The option can be AR_NOVOWEL,
            AR_COMPOSEDTASHKEEL and AR_LIG.
            @param arabicOptions the arabic shaping options
        </member>
        <member name="P:iTextSharp.text.pdf.ColumnText.Descender">
            Gets the biggest descender value of the last line written.
            @return the biggest descender value of the last line written
        </member>
        <member name="P:iTextSharp.text.pdf.ColumnText.Canvas">
            Sets the canvas.
            @param canvas
        </member>
        <member name="P:iTextSharp.text.pdf.ColumnText.Canvases">
            Sets the canvases.
            @param canvas
        </member>
        <member name="P:iTextSharp.text.pdf.ColumnText.UseAscender">
            Enables/Disables adjustment of first line height based on max ascender.
            @param use enable adjustment if true
        </member>
        <member name="P:iTextSharp.text.pdf.ColumnText.FilledWidth">
            Sets the real width used by the largest line. Only used to set it
            to zero to start another measurement.
            @param filledWidth the real width used by the largest line
        </member>
        <member name="P:iTextSharp.text.pdf.ColumnText.AdjustFirstLine">
            Sets the first line adjustment. Some objects have properties, like spacing before, that
            behave differently if the object is the first to be written after go() or not. The first line adjustment is 
            <CODE>true</CODE> by default but can be changed if several objects are to be placed one
            after the other in the same column calling go() several times.
            @param adjustFirstLine <CODE>true</CODE> to adjust the first line, <CODE>false</CODE> otherwise
        </member>
        <member name="T:iTextSharp.text.Paragraph">
            <summary>
            A Paragraph is a series of Chunks and/or Phrases.
            </summary>
            <remarks>
            A Paragraph has the same qualities of a Phrase, but also
            some additional layout-parameters:
            <UL>
            <LI/>the indentation
            <LI/>the alignment of the text
            </UL>
            </remarks>
            <example>
            <code>
            <strong>Paragraph p = new Paragraph("This is a paragraph",
                           FontFactory.GetFont(FontFactory.HELVETICA, 18, Font.BOLDITALIC, new Color(0, 0, 255)));</strong>
               </code>
            </example>
            <seealso cref="T:iTextSharp.text.Element"/>
            <seealso cref="T:iTextSharp.text.Phrase"/>
            <seealso cref="T:iTextSharp.text.ListItem"/>
        </member>
        <member name="T:iTextSharp.text.Phrase">
            <summary>
            A Phrase is a series of Chunks.
            </summary>
            <remarks>
            A Phrase has a main Font, but some chunks
            within the phrase can have a Font that differs from the
            main Font. All the Chunks in a Phrase
            have the same leading.
            </remarks>
            <example>
            <code>
            // When no parameters are passed, the default leading = 16
            <strong>Phrase phrase0 = new Phrase();
            Phrase phrase1 = new Phrase("this is a phrase");</strong>
            // In this example the leading is passed as a parameter
            <strong>Phrase phrase2 = new Phrase(16, "this is a phrase with leading 16");</strong>
            // When a Font is passed (explicitely or embedded in a chunk), the default leading = 1.5 * size of the font
            <strong>Phrase phrase3 = new Phrase("this is a phrase with a red, normal font Courier, size 12", FontFactory.GetFont(FontFactory.COURIER, 12, Font.NORMAL, new Color(255, 0, 0)));
            Phrase phrase4 = new Phrase(new Chunk("this is a phrase"));
            Phrase phrase5 = new Phrase(18, new Chunk("this is a phrase", FontFactory.GetFont(FontFactory.HELVETICA, 16, Font.BOLD, new Color(255, 0, 0)));</strong>
            </code>
            </example>
        </member>
        <member name="T:iTextSharp.text.ITextElementArray">
            <summary>
            Interface for a text element to which other objects can be added.
            </summary>
            <seealso cref="T:iTextSharp.text.Phrase"/>
            <seealso cref="T:iTextSharp.text.Paragraph"/>
            <seealso cref="T:iTextSharp.text.Section"/>
            <seealso cref="T:iTextSharp.text.ListItem"/>
            <seealso cref="T:iTextSharp.text.Chapter"/>
            <seealso cref="T:iTextSharp.text.Anchor"/>
            <seealso cref="T:iTextSharp.text.Cell"/>
        </member>
        <member name="M:iTextSharp.text.ITextElementArray.Add(System.Object)">
            <summary>
            Adds an object to the TextElementArray.
            </summary>
            <param name="o">an object that has to be added</param>
            <returns>true if the addition succeeded; false otherwise</returns>
        </member>
        <member name="F:iTextSharp.text.Phrase.leading">
            <summary>This is the leading of this phrase.</summary>
        </member>
        <member name="F:iTextSharp.text.Phrase.font">
            <summary> This is the font of this phrase. </summary>
        </member>
        <member name="F:iTextSharp.text.Phrase.hyphenation">
            Null, unless the Phrase has to be hyphenated.
            @since   2.1.2
        </member>
        <member name="M:iTextSharp.text.Phrase.#ctor">
            <summary>
            Constructs a Phrase without specifying a leading.
            </summary>
            <overloads>
            Has nine overloads.
            </overloads>
        </member>
        <member name="M:iTextSharp.text.Phrase.#ctor(iTextSharp.text.Phrase)">
            Copy constructor for <CODE>Phrase</CODE>.
        </member>
        <member name="M:iTextSharp.text.Phrase.#ctor(System.Single)">
            <summary>
            Constructs a Phrase with a certain leading.
            </summary>
            <param name="leading">the leading</param>
        </member>
        <member name="M:iTextSharp.text.Phrase.#ctor(iTextSharp.text.Chunk)">
            <summary>
            Constructs a Phrase with a certain Chunk.
            </summary>
            <param name="chunk">a Chunk</param>
        </member>
        <member name="M:iTextSharp.text.Phrase.#ctor(System.Single,iTextSharp.text.Chunk)">
            <summary>
            Constructs a Phrase with a certain Chunk and a certain leading.
            </summary>
            <param name="leading">the leading</param>
            <param name="chunk">a Chunk</param>
        </member>
        <member name="M:iTextSharp.text.Phrase.#ctor(System.String)">
            <summary>
            Constructs a Phrase with a certain string.
            </summary>
            <param name="str">a string</param>
        </member>
        <member name="M:iTextSharp.text.Phrase.#ctor(System.String,iTextSharp.text.Font)">
            <summary>
            Constructs a Phrase with a certain string and a certain Font.
            </summary>
            <param name="str">a string</param>
            <param name="font">a Font</param>
        </member>
        <member name="M:iTextSharp.text.Phrase.#ctor(System.Single,System.String)">
            <summary>
            Constructs a Phrase with a certain leading and a certain string.
            </summary>
            <param name="leading">the leading</param>
            <param name="str">a string</param>
        </member>
        <member name="M:iTextSharp.text.Phrase.Process(iTextSharp.text.IElementListener)">
            <summary>
            Processes the element by adding it (or the different parts) to an
            <see cref="T:iTextSharp.text.IElementListener"/>.
            </summary>
            <param name="listener">an IElementListener</param>
            <returns>true if the element was processed successfully</returns>
        </member>
        <member name="M:iTextSharp.text.Phrase.IsContent">
            @see com.lowagie.text.Element#isContent()
            @since   iText 2.0.8
        </member>
        <member name="M:iTextSharp.text.Phrase.IsNestable">
            @see com.lowagie.text.Element#isNestable()
            @since   iText 2.0.8
        </member>
        <member name="M:iTextSharp.text.Phrase.Add(System.Int32,System.Object)">
            <summary>
            Adds a Chunk, an Anchor or another Phrase
            to this Phrase.
            </summary>
            <param name="index">index at which the specified element is to be inserted</param>
            <param name="o">an object of type Chunk, Anchor, or Phrase</param>
        </member>
        <member name="M:iTextSharp.text.Phrase.Add(System.Object)">
            <summary>
            Adds a Chunk, Anchor or another Phrase
            to this Phrase.
            </summary>
            <param name="o">an object of type Chunk, Anchor or Phrase</param>
            <returns>a bool</returns>
        </member>
        <member name="M:iTextSharp.text.Phrase.AddAll(System.Collections.ICollection)">
            <summary>
            Adds a collection of Chunks
            to this Phrase.
            </summary>
            <param name="collection">a collection of Chunks, Anchors and Phrases.</param>
            <returns>true if the action succeeded, false if not.</returns>
        </member>
        <member name="M:iTextSharp.text.Phrase.AddChunk(iTextSharp.text.Chunk)">
            <summary>
            Adds a Chunk.
            </summary>
            <remarks>
            This method is a hack to solve a problem I had with phrases that were split between chunks
            in the wrong place.
            </remarks>
            <param name="chunk">a Chunk</param>
            <returns>a bool</returns>
        </member>
        <member name="M:iTextSharp.text.Phrase.AddSpecial(System.Object)">
            <summary>
            Adds a Object to the Paragraph.
            </summary>
            <param name="obj">the object to add.</param>
        </member>
        <member name="M:iTextSharp.text.Phrase.IsEmpty">
            <summary>
            Checks is this Phrase contains no or 1 empty Chunk.
            </summary>
            <returns>
            false if the Phrase
            contains more than one or more non-emptyChunks.
            </returns>
        </member>
        <member name="M:iTextSharp.text.Phrase.IsTag(System.String)">
            <summary>
            Checks if a given tag corresponds with this object.
            </summary>
            <param name="tag">the given tag</param>
            <returns>true if the tag corresponds</returns>
        </member>
        <member name="M:iTextSharp.text.Phrase.#ctor(System.Boolean)">
            Constructs a Phrase that can be used in the static GetInstance() method.
            @param	dummy	a dummy parameter
        </member>
        <member name="M:iTextSharp.text.Phrase.GetInstance(System.String)">
            Gets a special kind of Phrase that changes some characters into corresponding symbols.
            @param string
            @return a newly constructed Phrase
        </member>
        <member name="M:iTextSharp.text.Phrase.GetInstance(System.Int32,System.String)">
            Gets a special kind of Phrase that changes some characters into corresponding symbols.
            @param leading
            @param string
            @return a newly constructed Phrase
        </member>
        <member name="M:iTextSharp.text.Phrase.GetInstance(System.Int32,System.String,iTextSharp.text.Font)">
            Gets a special kind of Phrase that changes some characters into corresponding symbols.
            @param leading
            @param string
            @param font
            @return a newly constructed Phrase
        </member>
        <member name="P:iTextSharp.text.Phrase.Type">
            <summary>
            Gets the type of the text element.
            </summary>
            <value>a type</value>
        </member>
        <member name="P:iTextSharp.text.Phrase.Chunks">
            <summary>
            Gets all the chunks in this element.
            </summary>
            <value>an ArrayList</value>
        </member>
        <member name="P:iTextSharp.text.Phrase.Leading">
            <summary>
            Gets/sets the leading of this phrase.
            </summary>
            <value>the linespacing</value>
        </member>
        <member name="P:iTextSharp.text.Phrase.Font">
            <summary>
            Gets the font of the first Chunk that appears in this Phrase.
            </summary>
            <value>a Font</value>
        </member>
        <member name="P:iTextSharp.text.Phrase.Content">
            Returns the content as a String object.
            This method differs from toString because toString will return an ArrayList with the toString value of the Chunks in this Phrase.
        </member>
        <member name="P:iTextSharp.text.Phrase.Hyphenation">
            Setter/getter for the hyphenation.
            @param   hyphenation a HyphenationEvent instance
            @since   2.1.2
        </member>
        <member name="F:iTextSharp.text.Paragraph.alignment">
            <summary> The alignment of the text. </summary>
        </member>
        <member name="F:iTextSharp.text.Paragraph.multipliedLeading">
            The text leading that is multiplied by the biggest font size in the line. 
        </member>
        <member name="F:iTextSharp.text.Paragraph.indentationLeft">
            <summary> The indentation of this paragraph on the left side. </summary>
        </member>
        <member name="F:iTextSharp.text.Paragraph.indentationRight">
            <summary> The indentation of this paragraph on the right side. </summary>
        </member>
        <member name="F:iTextSharp.text.Paragraph.firstLineIndent">
            Holds value of property firstLineIndent.
        </member>
        <member name="F:iTextSharp.text.Paragraph.spacingBefore">
            The spacing before the paragraph. 
        </member>
        <member name="F:iTextSharp.text.Paragraph.spacingAfter">
            The spacing after the paragraph. 
        </member>
        <member name="F:iTextSharp.text.Paragraph.extraParagraphSpace">
            Holds value of property extraParagraphSpace.
        </member>
        <member name="F:iTextSharp.text.Paragraph.keeptogether">
            <summary> Does the paragraph has to be kept together on 1 page. </summary>
        </member>
        <member name="M:iTextSharp.text.Paragraph.#ctor">
            <summary>
            Constructs a Paragraph.
            </summary>
        </member>
        <member name="M:iTextSharp.text.Paragraph.#ctor(System.Single)">
            <summary>
            Constructs a Paragraph with a certain leading.
            </summary>
            <param name="leading">the leading</param>
        </member>
        <member name="M:iTextSharp.text.Paragraph.#ctor(iTextSharp.text.Chunk)">
            <summary>
            Constructs a Paragraph with a certain Chunk.
            </summary>
            <param name="chunk">a Chunk</param>
        </member>
        <member name="M:iTextSharp.text.Paragraph.#ctor(System.Single,iTextSharp.text.Chunk)">
            <summary>
            Constructs a Paragraph with a certain Chunk
            and a certain leading.
            </summary>
            <param name="leading">the leading</param>
            <param name="chunk">a Chunk</param>
        </member>
        <member name="M:iTextSharp.text.Paragraph.#ctor(System.String)">
            <summary>
            Constructs a Paragraph with a certain string.
            </summary>
            <param name="str">a string</param>
        </member>
        <member name="M:iTextSharp.text.Paragraph.#ctor(System.String,iTextSharp.text.Font)">
            <summary>
            Constructs a Paragraph with a certain string
            and a certain Font.
            </summary>
            <param name="str">a string</param>
            <param name="font">a Font</param>
        </member>
        <member name="M:iTextSharp.text.Paragraph.#ctor(System.Single,System.String)">
            <summary>
            Constructs a Paragraph with a certain string
            and a certain leading.
            </summary>
            <param name="leading">the leading</param>
            <param name="str">a string</param>
        </member>
        <member name="M:iTextSharp.text.Paragraph.#ctor(System.Single,System.String,iTextSharp.text.Font)">
            <summary>
            Constructs a Paragraph with a certain leading, string
            and Font.
            </summary>
            <param name="leading">the leading</param>
            <param name="str">a string</param>
            <param name="font">a Font</param>
        </member>
        <member name="M:iTextSharp.text.Paragraph.#ctor(iTextSharp.text.Phrase)">
            <summary>
            Constructs a Paragraph with a certain Phrase.
            </summary>
            <param name="phrase">a Phrase</param>
        </member>
        <member name="M:iTextSharp.text.Paragraph.Add(System.Object)">
            <summary>
            Adds an Object to the Paragraph.
            </summary>
            <param name="o">the object to add</param>
            <returns>a bool</returns>
        </member>
        <member name="M:iTextSharp.text.Paragraph.SetAlignment(System.String)">
            <summary>
            Sets the alignment of this paragraph.
            </summary>
            <param name="alignment">the new alignment as a string</param>
        </member>
        <member name="M:iTextSharp.text.Paragraph.SetLeading(System.Single,System.Single)">
            Sets the leading fixed and variable. The resultant leading will be
            fixedLeading+multipliedLeading*maxFontSize where maxFontSize is the
            size of the bigest font in the line.
            @param fixedLeading the fixed leading
            @param multipliedLeading the variable leading
        </member>
        <member name="M:iTextSharp.text.Paragraph.IsTag(System.String)">
            <summary>
            Checks if a given tag corresponds with this object.
            </summary>
            <param name="tag">the given tag</param>
            <returns>true if the tag corresponds</returns>
        </member>
        <member name="P:iTextSharp.text.Paragraph.Type">
            <summary>
            Gets the type of the text element.
            </summary>
            <value>a type</value>
        </member>
        <member name="P:iTextSharp.text.Paragraph.MultipliedLeading">
            Sets the variable leading. The resultant leading will be
            multipliedLeading*maxFontSize where maxFontSize is the
            size of the bigest font in the line.
            @param multipliedLeading the variable leading
        </member>
        <member name="P:iTextSharp.text.Paragraph.Alignment">
            <summary>
            Get/set the alignment of this paragraph.
            </summary>
            <value>a integer</value>
        </member>
        <member name="P:iTextSharp.text.Paragraph.IndentationLeft">
            <summary>
            Get/set the indentation of this paragraph on the left side.
            </summary>
            <value>a float</value>
        </member>
        <member name="P:iTextSharp.text.Paragraph.IndentationRight">
            <summary>
            Get/set the indentation of this paragraph on the right side.
            </summary>
            <value>a float</value>
        </member>
        <member name="P:iTextSharp.text.Paragraph.KeepTogether">
            <summary>
            Set/get if this paragraph has to be kept together on one page.
            </summary>
            <value>a bool</value>
        </member>
        <member name="P:iTextSharp.text.Paragraph.TotalLeading">
            Gets the total leading.
            This method is based on the assumption that the
            font of the Paragraph is the font of all the elements
            that make part of the paragraph. This isn't necessarily
            true.
            @return the total leading (fixed and multiplied)
        </member>
        <member name="T:iTextSharp.text.ImgRaw">
            <summary>
            Raw Image data that has to be inserted into the document
            </summary>
            <seealso cref="T:iTextSharp.text.Element"/>
            <seealso cref="T:iTextSharp.text.Image"/>
        </member>
        <member name="T:iTextSharp.text.Image">
            <summary>
            An Image is the representation of a graphic element (JPEG, PNG or GIF)
            that has to be inserted into the document
            </summary>
            <seealso cref="T:iTextSharp.text.Element"/>
            <seealso cref="T:iTextSharp.text.Rectangle"/>
        </member>
        <member name="F:iTextSharp.text.Image.DEFAULT">
            <summary> this is a kind of image Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.RIGHT_ALIGN">
            <summary> this is a kind of image Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.LEFT_ALIGN">
            <summary> this is a kind of image Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.MIDDLE_ALIGN">
            <summary> this is a kind of image Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.TEXTWRAP">
            <summary> this is a kind of image Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.UNDERLYING">
            <summary> this is a kind of image Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.AX">
            <summary> This represents a coordinate in the transformation matrix. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.AY">
            <summary> This represents a coordinate in the transformation matrix. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.BX">
            <summary> This represents a coordinate in the transformation matrix. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.BY">
            <summary> This represents a coordinate in the transformation matrix. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.CX">
            <summary> This represents a coordinate in the transformation matrix. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.CY">
            <summary> This represents a coordinate in the transformation matrix. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.DX">
            <summary> This represents a coordinate in the transformation matrix. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.DY">
            <summary> This represents a coordinate in the transformation matrix. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.ORIGINAL_NONE">
            type of image 
        </member>
        <member name="F:iTextSharp.text.Image.ORIGINAL_JPEG">
            type of image 
        </member>
        <member name="F:iTextSharp.text.Image.ORIGINAL_PNG">
            type of image 
        </member>
        <member name="F:iTextSharp.text.Image.ORIGINAL_GIF">
            type of image 
        </member>
        <member name="F:iTextSharp.text.Image.ORIGINAL_BMP">
            type of image 
        </member>
        <member name="F:iTextSharp.text.Image.ORIGINAL_TIFF">
            type of image 
        </member>
        <member name="F:iTextSharp.text.Image.ORIGINAL_WMF">
            type of image 
        </member>
        <member name="F:iTextSharp.text.Image.ORIGINAL_JPEG2000">
            type of image 
        </member>
        <member name="F:iTextSharp.text.Image.ORIGINAL_JBIG2">
            type of image
            @since	2.1.5
        </member>
        <member name="F:iTextSharp.text.Image.invert">
            Image color inversion 
        </member>
        <member name="F:iTextSharp.text.Image.type">
            <summary> The imagetype. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.url">
            <summary> The URL of the image. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.rawData">
            <summary> The raw data of the image. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.template">
            <summary> The template to be treated as an image. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.alignment">
            <summary> The alignment of the Image. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.alt">
            <summary> Text that can be shown instead of the image. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.absoluteX">
            <summary> This is the absolute X-position of the image. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.absoluteY">
            <summary> This is the absolute Y-position of the image. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.plainWidth">
            <summary> This is the width of the image without rotation. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.plainHeight">
            <summary> This is the width of the image without rotation. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.scaledWidth">
            <summary> This is the scaled width of the image taking rotation into account. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.scaledHeight">
            <summary> This is the original height of the image taking rotation into account. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.compressionLevel">
            The compression level of the content streams.
            @since   2.1.3
        </member>
        <member name="F:iTextSharp.text.Image.rotationRadians">
            <summary> This is the rotation of the image. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.colorspace">
            <summary> this is the colorspace of a jpeg-image. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.bpc">
            <summary> this is the bits per component of the raw image. It also flags a CCITT image.</summary>
        </member>
        <member name="F:iTextSharp.text.Image.transparency">
            <summary> this is the transparency information of the raw image</summary>
        </member>
        <member name="F:iTextSharp.text.Image.indentationLeft">
            the indentation to the left. 
        </member>
        <member name="F:iTextSharp.text.Image.indentationRight">
            the indentation to the right. 
        </member>
        <member name="F:iTextSharp.text.Image.dpiX">
            <summary> Holds value of property dpiX. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.dpiY">
            <summary> Holds value of property dpiY. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.interpolation">
            <summary> Holds value of property interpolation. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.annotation">
            <summary> if the annotation is not null the image will be clickable. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.profile">
            <summary> ICC Profile attached </summary>
        </member>
        <member name="F:iTextSharp.text.Image.deflated">
            Holds value of property deflated. 
        </member>
        <member name="F:iTextSharp.text.Image.smask">
            Holds value of property smask. 
        </member>
        <member name="F:iTextSharp.text.Image.xyRatio">
            Holds value of property XYRatio. 
        </member>
        <member name="F:iTextSharp.text.Image.originalType">
            Holds value of property originalType. 
        </member>
        <member name="F:iTextSharp.text.Image.originalData">
            Holds value of property originalData. 
        </member>
        <member name="F:iTextSharp.text.Image.spacingBefore">
            The spacing before the image. 
        </member>
        <member name="F:iTextSharp.text.Image.spacingAfter">
            The spacing after the image. 
        </member>
        <member name="F:iTextSharp.text.Image.widthPercentage">
            Holds value of property widthPercentage.
        </member>
        <member name="F:iTextSharp.text.Image.initialRotation">
            Holds value of property initialRotation.
        </member>
        <member name="M:iTextSharp.text.Image.#ctor(System.Uri)">
            <summary>
            Constructs an Image-object, using an url.
            </summary>
            <param name="url">the URL where the image can be found.</param>
        </member>
        <member name="M:iTextSharp.text.Image.#ctor(iTextSharp.text.Image)">
            <summary>
            Constructs an Image object duplicate.
            </summary>
            <param name="image">another Image object.</param>
        </member>
        <member name="M:iTextSharp.text.Image.GetInstance(iTextSharp.text.Image)">
            <summary>
            Gets an instance of an Image.
            </summary>
            <param name="image">an Image</param>
            <returns>an object of type Gif, Jpeg or Png</returns>
        </member>
        <member name="M:iTextSharp.text.Image.GetInstance(System.Uri)">
            <summary>
            Gets an instance of an Image.
            </summary>
            <param name="url">an URL</param>
            <returns>an object of type Gif, Jpeg or Png</returns>
        </member>
        <member name="M:iTextSharp.text.Image.GetInstance(System.Int32,System.Int32,System.Byte[],System.Byte[])">
            Creates a JBIG2 Image.
            @param   width   the width of the image
            @param   height  the height of the image
            @param   data    the raw image data
            @param   globals JBIG2 globals
            @since   2.1.5
        </member>
        <member name="M:iTextSharp.text.Image.GetInstance(System.Byte[])">
            <summary>
            Gets an instance of an Image.
            </summary>
            <param name="img">a byte array</param>
            <returns>an object of type Gif, Jpeg or Png</returns>
        </member>
        <member name="M:iTextSharp.text.Image.GetInstance(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Converts a .NET image to a Native(PNG, JPG, GIF, WMF) image
            </summary>
            <param name="image"></param>
            <param name="?"></param>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.Image.GetInstance(System.Drawing.Image,iTextSharp.text.Color,System.Boolean)">
            <summary>
            Gets an instance of an Image from a System.Drwaing.Image.
            </summary>
            <param name="image">the System.Drawing.Image to convert</param>
            <param name="color">
            if different from null the transparency
            pixels are replaced by this color
            </param>
            <param name="forceBW">if true the image is treated as black and white</param>
            <returns>an object of type ImgRaw</returns>
        </member>
        <member name="M:iTextSharp.text.Image.GetInstance(System.Drawing.Image,iTextSharp.text.Color)">
            <summary>
            Gets an instance of an Image from a System.Drawing.Image.
            </summary>
            <param name="image">the System.Drawing.Image to convert</param>
            <param name="color">
            if different from null the transparency
            pixels are replaced by this color
            </param>
            <returns>an object of type ImgRaw</returns>
        </member>
        <member name="M:iTextSharp.text.Image.GetInstance(System.String)">
            <summary>
            Gets an instance of an Image.
            </summary>
            <param name="filename">a filename</param>
            <returns>an object of type Gif, Jpeg or Png</returns>
        </member>
        <member name="M:iTextSharp.text.Image.GetInstance(System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[])">
            <summary>
            Gets an instance of an Image in raw mode.
            </summary>
            <param name="width">the width of the image in pixels</param>
            <param name="height">the height of the image in pixels</param>
            <param name="components">1,3 or 4 for GrayScale, RGB and CMYK</param>
            <param name="bpc">bits per component</param>
            <param name="data">the image data</param>
            <returns>an object of type ImgRaw</returns>
        </member>
        <member name="M:iTextSharp.text.Image.GetInstance(iTextSharp.text.pdf.PRIndirectReference)">
            Reuses an existing image.
            @param ref the reference to the image dictionary
            @throws BadElementException on error
            @return the image
        </member>
        <member name="M:iTextSharp.text.Image.GetInstance(iTextSharp.text.pdf.PdfTemplate)">
            <summary>
            Gets an instance of an Image in raw mode.
            </summary>
            <param name="template"></param>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.Image.GetInstance(System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32,System.Byte[])">
            <summary>
            Gets an instance of an Image in raw mode.
            </summary>
            <param name="width">the width of the image in pixels</param>
            <param name="height">the height of the image in pixels</param>
            <param name="reverseBits"></param>
            <param name="typeCCITT"></param>
            <param name="parameters"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.Image.GetInstance(System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32,System.Byte[],System.Int32[])">
            <summary>
            
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="reverseBits"></param>
            <param name="typeCCITT"></param>
            <param name="parameters"></param>
            <param name="data"></param>
            <param name="transparency"></param>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.Image.GetInstance(System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32[])">
            <summary>
            Gets an instance of an Image in raw mode.
            </summary>
            <param name="width">the width of the image in pixels</param>
            <param name="height">the height of the image in pixels</param>
            <param name="components">1,3 or 4 for GrayScale, RGB and CMYK</param>
            <param name="bpc">bits per component</param>
            <param name="data">the image data</param>
            <param name="transparency">
            transparency information in the Mask format of the
            image dictionary
            </param>
            <returns>an object of type ImgRaw</returns>
        </member>
        <member name="M:iTextSharp.text.Image.SetAbsolutePosition(System.Single,System.Single)">
            <summary>
            Sets the absolute position of the Image.
            </summary>
            <param name="absoluteX"></param>
            <param name="absoluteY"></param>
        </member>
        <member name="M:iTextSharp.text.Image.ScaleAbsolute(System.Single,System.Single)">
            <summary>
            Scale the image to an absolute width and an absolute height.
            </summary>
            <param name="newWidth">the new width</param>
            <param name="newHeight">the new height</param>
        </member>
        <member name="M:iTextSharp.text.Image.ScaleAbsoluteWidth(System.Single)">
            <summary>
            Scale the image to an absolute width.
            </summary>
            <param name="newWidth">the new width</param>
        </member>
        <member name="M:iTextSharp.text.Image.ScaleAbsoluteHeight(System.Single)">
            <summary>
            Scale the image to an absolute height.
            </summary>
            <param name="newHeight">the new height</param>
        </member>
        <member name="M:iTextSharp.text.Image.ScalePercent(System.Single)">
            <summary>
            Scale the image to a certain percentage.
            </summary>
            <param name="percent">the scaling percentage</param>
        </member>
        <member name="M:iTextSharp.text.Image.ScalePercent(System.Single,System.Single)">
            <summary>
            Scale the width and height of an image to a certain percentage.
            </summary>
            <param name="percentX">the scaling percentage of the width</param>
            <param name="percentY">the scaling percentage of the height</param>
        </member>
        <member name="M:iTextSharp.text.Image.ScaleToFit(System.Single,System.Single)">
            <summary>
            Scales the image so that it fits a certain width and height.
            </summary>
            <param name="fitWidth">the width to fit</param>
            <param name="fitHeight">the height to fit</param>
        </member>
        <member name="M:iTextSharp.text.Image.GetImageRotation">
            Gets the current image rotation in radians.
            @return the current image rotation in radians
        </member>
        <member name="M:iTextSharp.text.Image.HasAbsolutePosition">
            <summary>
            Checks if the Images has to be added at an absolute position.
            </summary>
            <returns>a bool</returns>
        </member>
        <member name="M:iTextSharp.text.Image.HasAbsoluteX">
            <summary>
            Checks if the Images has to be added at an absolute X position.
            </summary>
            <returns>a bool</returns>
        </member>
        <member name="M:iTextSharp.text.Image.IsNestable">
            @see com.lowagie.text.Element#isNestable()
            @since   iText 2.0.8
        </member>
        <member name="M:iTextSharp.text.Image.IsJpeg">
            <summary>
            Returns true if the image is a Jpeg-object.
            </summary>
            <returns>a bool</returns>
        </member>
        <member name="M:iTextSharp.text.Image.IsImgRaw">
            <summary>
            Returns true if the image is a ImgRaw-object.
            </summary>
            <returns>a bool</returns>
        </member>
        <member name="M:iTextSharp.text.Image.IsImgTemplate">
            <summary>
            Returns true if the image is an ImgTemplate-object.
            </summary>
            <returns>a bool</returns>
        </member>
        <member name="M:iTextSharp.text.Image.GetSerialId">
            <summary>
            generates new serial id
            </summary>
        </member>
        <member name="M:iTextSharp.text.Image.SetDpi(System.Int32,System.Int32)">
            Sets the dots per inch value
            
            @param dpiX
                       dpi for x coordinates
            @param dpiY
                       dpi for y coordinates
        </member>
        <member name="M:iTextSharp.text.Image.IsMaskCandidate">
            <summary>
            Returns true if this Image has the
            requisites to be a mask.
            </summary>
            <returns>true if this Image can be a mask</returns>
        </member>
        <member name="M:iTextSharp.text.Image.MakeMask">
            <summary>
            Make this Image a mask.
            </summary>
        </member>
        <member name="M:iTextSharp.text.Image.IsMask">
            <summary>
            Returns true if this Image is a mask.
            </summary>
            <returns>true if this Image is a mask</returns>
        </member>
        <member name="M:iTextSharp.text.Image.HasICCProfile">
            Checks is the image has an ICC profile.
            @return the ICC profile or null
        </member>
        <member name="M:iTextSharp.text.Image.SimplifyColorspace">
            Replaces CalRGB and CalGray colorspaces with DeviceRGB and DeviceGray.
        </member>
        <member name="P:iTextSharp.text.Image.Rotation">
            <summary>
            Sets the rotation of the image in radians.
            </summary>
            <param name="r">rotation in radians</param>
        </member>
        <member name="P:iTextSharp.text.Image.RotationDegrees">
            <summary>
            Sets the rotation of the image in degrees.
            </summary>
            <param name="deg">rotation in degrees</param>
        </member>
        <member name="P:iTextSharp.text.Image.Annotation">
            <summary>
            Get/set the annotation.
            </summary>
            <value>the Annotation</value>
        </member>
        <member name="P:iTextSharp.text.Image.Bpc">
            <summary>
            Gets the bpc for the image.
            </summary>
            <remarks>
            this only makes sense for Images of the type RawImage.
            </remarks>
            <value>a bpc value</value>
        </member>
        <member name="P:iTextSharp.text.Image.RawData">
            <summary>
            Gets the raw data for the image.
            </summary>
            <remarks>
            this only makes sense for Images of the type RawImage.
            </remarks>
            <value>the raw data</value>
        </member>
        <member name="P:iTextSharp.text.Image.TemplateData">
            <summary>
            Get/set the template to be used as an image.
            </summary>
            <remarks>
            this only makes sense for Images of the type ImgTemplate.
            </remarks>
            <value>the template</value>
        </member>
        <member name="P:iTextSharp.text.Image.AbsoluteX">
            <summary>
            Returns the absolute X position.
            </summary>
            <value>a position</value>
        </member>
        <member name="P:iTextSharp.text.Image.AbsoluteY">
            <summary>
            Returns the absolute Y position.
            </summary>
            <value>a position</value>
        </member>
        <member name="P:iTextSharp.text.Image.Type">
            <summary>
            Returns the type.
            </summary>
            <value>a type</value>
        </member>
        <member name="P:iTextSharp.text.Image.Url">
            <summary>
            Gets the string-representation of the reference to the image.
            </summary>
            <value>a string</value>
        </member>
        <member name="P:iTextSharp.text.Image.Alignment">
            <summary>
            Get/set the alignment for the image.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Image.Alt">
            <summary>
            Get/set the alternative text for the image.
            </summary>
            <value>a string</value>
        </member>
        <member name="P:iTextSharp.text.Image.ScaledWidth">
            <summary>
            Gets the scaled width of the image.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Image.ScaledHeight">
            <summary>
            Gets the scaled height of the image.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Image.Colorspace">
            <summary>
            Gets the colorspace for the image.
            </summary>
            <remarks>
            this only makes sense for Images of the type Jpeg.
            </remarks>
            <value>a colorspace value</value>
        </member>
        <member name="P:iTextSharp.text.Image.Matrix">
            <summary>
            Returns the transformation matrix of the image.
            </summary>
            <value>an array [AX, AY, BX, BY, CX, CY, DX, DY]</value>
        </member>
        <member name="P:iTextSharp.text.Image.Transparency">
            <summary>
            Returns the transparency.
            </summary>
            <value>the transparency</value>
        </member>
        <member name="P:iTextSharp.text.Image.PlainWidth">
            <summary>
            Gets the plain width of the image.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Image.PlainHeight">
            <summary>
            Gets the plain height of the image.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Image.MySerialId">
            <summary>
            returns serial id for this object
            </summary>
        </member>
        <member name="P:iTextSharp.text.Image.DpiX">
            <summary>
            Gets the dots-per-inch in the X direction. Returns 0 if not available.
            </summary>
            <value>the dots-per-inch in the X direction</value>
        </member>
        <member name="P:iTextSharp.text.Image.DpiY">
            <summary>
            Gets the dots-per-inch in the Y direction. Returns 0 if not available.
            </summary>
            <value>the dots-per-inch in the Y direction</value>
        </member>
        <member name="P:iTextSharp.text.Image.ImageMask">
            <summary>
            Get/set the explicit masking.
            </summary>
            <value>the explicit masking</value>
        </member>
        <member name="P:iTextSharp.text.Image.Inverted">
            <summary>
            Inverts the meaning of the bits of a mask.
            </summary>
            <value>true to invert the meaning of the bits of a mask</value>
        </member>
        <member name="P:iTextSharp.text.Image.Interpolation">
            <summary>
            Sets the image interpolation. Image interpolation attempts to
            produce a smooth transition between adjacent sample values.
            </summary>
            <value>New value of property interpolation.</value>
        </member>
        <member name="P:iTextSharp.text.Image.TagICC">
            Tags this image with an ICC profile.
            @param profile the profile
        </member>
        <member name="P:iTextSharp.text.Image.InitialRotation">
            Some image formats, like TIFF may present the images rotated that have
            to be compensated.
        </member>
        <member name="P:iTextSharp.text.Image.CompressionLevel">
            Sets the compression level to be used if the image is written as a compressed stream.
            @param compressionLevel a value between 0 (best speed) and 9 (best compression)
            @since   2.1.3
        </member>
        <member name="M:iTextSharp.text.ImgRaw.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[])">
            <summary>
            Creats an Image in raw mode.
            </summary>
            <param name="width">the exact width of the image</param>
            <param name="height">the exact height of the image</param>
            <param name="components">1,3 or 4 for GrayScale, RGB and CMYK</param>
            <param name="bpc">bits per component. Must be 1,2,4 or 8</param>
            <param name="data">data the image data</param>
        </member>
        <member name="T:iTextSharp.text.ImgCCITT">
             CCITT Image data that has to be inserted into the document
            
             @see        Element
             @see        Image
            
             @author  Paulo Soares
            <summary>
            CCITT Image data that has to be inserted into the document
            </summary>
            <seealso cref="T:iTextSharp.text.Element"/>
            <seealso cref="T:iTextSharp.text.Image"/>
        </member>
        <member name="M:iTextSharp.text.ImgCCITT.#ctor(System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32,System.Byte[])">
            <summary>
            Creats an Image in CCITT mode.
            </summary>
            <param name="width">the exact width of the image</param>
            <param name="height">the exact height of the image</param>
            <param name="reverseBits">
            reverses the bits in data.
            Bit 0 is swapped with bit 7 and so on
            </param>
            <param name="typeCCITT">
            the type of compression in data. It can be
            CCITTG4, CCITTG31D, CCITTG32D
            </param>
            <param name="parameters">
            parameters associated with this stream. Possible values are
            CCITT_BLACKIS1, CCITT_ENCODEDBYTEALIGN, CCITT_ENDOFLINE and CCITT_ENDOFBLOCK or a
            combination of them
            </param>
            <param name="data">the image data</param>
        </member>
        <member name="T:iTextSharp.text.html.simpleparser.FactoryProperties">
            
             @author  psoares
        </member>
        <member name="M:iTextSharp.text.html.simpleparser.FactoryProperties.#ctor">
            Creates a new instance of FactoryProperties 
        </member>
        <member name="M:iTextSharp.text.html.simpleparser.FactoryProperties.GetHyphenation(iTextSharp.text.html.simpleparser.ChainedProperties)">
            Gets a HyphenationEvent based on the hyphenation entry in ChainedProperties.
            @param    props   ChainedProperties
            @return   a HyphenationEvent
            @since    2.1.2
        </member>
        <member name="M:iTextSharp.text.html.simpleparser.FactoryProperties.GetHyphenation(System.Collections.Hashtable)">
            Gets a HyphenationEvent based on the hyphenation entry in a HashMap.
            @param    props   a HashMap with properties
            @return   a HyphenationEvent
            @since    2.1.2
        </member>
        <member name="M:iTextSharp.text.html.simpleparser.FactoryProperties.GetHyphenation(System.String)">
            Gets a HyphenationEvent based on a String.
            For instance "en_UK,3,2" returns new HyphenationAuto("en", "UK", 3, 2);
            @param    a String, for instance "en_UK,2,2"
            @return   a HyphenationEvent
            @since    2.1.2
        </member>
        <member name="M:iTextSharp.text.html.simpleparser.FactoryProperties.InsertStyle(System.Collections.Hashtable)">
            This method isn't used by iText, but you can use it to analyze
            the value of a style attribute inside a HashMap.
            The different elements of the style attribute are added to the
            HashMap as key-value pairs.
            @param	h	a HashMap that should have at least a key named
            style. After this method is invoked, more keys could be added.
        </member>
        <member name="M:iTextSharp.text.html.simpleparser.FactoryProperties.InsertStyle(System.Collections.Hashtable,iTextSharp.text.html.simpleparser.ChainedProperties)">
            New method contributed by Lubos Strapko
            @param h
            @param cprops
            @since 2.1.3
        </member>
        <member name="M:System.util.collections.OrderedTree.Add(System.IComparable,System.Object)">
            <summary>
             Add
             args: ByVal key As IComparable, ByVal data As Object
             key is object that implements IComparable interface
             performance tip: change to use use int type (such as the hashcode)
            </summary>
        </member>
        <member name="M:System.util.collections.OrderedTree.RestoreAfterInsert(System.util.collections.OrderedTreeNode)">
            <summary>
             RestoreAfterInsert
             Additions to red-black trees usually destroy the red-black 
             properties. Examine the tree and restore. Rotations are normally 
             required to restore it
            </summary>
        </member>
        <member name="M:System.util.collections.OrderedTree.RotateLeft(System.util.collections.OrderedTreeNode)">
            <summary>
             RotateLeft
             Rebalance the tree by rotating the nodes to the left
            </summary>
        </member>
        <member name="M:System.util.collections.OrderedTree.RotateRight(System.util.collections.OrderedTreeNode)">
            <summary>
             RotateRight
             Rebalance the tree by rotating the nodes to the right
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.util.collections.OrderedTree.GetData(System.IComparable)" -->
        <!-- Badly formed XML comment ignored for member "M:System.util.collections.OrderedTree.GetMinKey" -->
        <!-- Badly formed XML comment ignored for member "M:System.util.collections.OrderedTree.GetMaxKey" -->
        <!-- Badly formed XML comment ignored for member "M:System.util.collections.OrderedTree.GetMinValue" -->
        <!-- Badly formed XML comment ignored for member "M:System.util.collections.OrderedTree.GetMaxValue" -->
        <!-- Badly formed XML comment ignored for member "M:System.util.collections.OrderedTree.GetEnumerator" -->
        <!-- Badly formed XML comment ignored for member "M:System.util.collections.OrderedTree.Elements" -->
        <!-- Badly formed XML comment ignored for member "M:System.util.collections.OrderedTree.IsEmpty" -->
        <!-- Badly formed XML comment ignored for member "M:System.util.collections.OrderedTree.Remove(System.IComparable)" -->
        <!-- Badly formed XML comment ignored for member "M:System.util.collections.OrderedTree.Delete(System.util.collections.OrderedTreeNode)" -->
        <member name="M:System.util.collections.OrderedTree.RestoreAfterDelete(System.util.collections.OrderedTreeNode)">
            <summary>
             RestoreAfterDelete
             Deletions from red-black trees may destroy the red-black 
             properties. Examine the tree and restore. Rotations are normally 
             required to restore it
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.util.collections.OrderedTree.RemoveMin" -->
        <!-- Badly formed XML comment ignored for member "M:System.util.collections.OrderedTree.RemoveMax" -->
        <!-- Badly formed XML comment ignored for member "M:System.util.collections.OrderedTree.Clear" -->
        <!-- Badly formed XML comment ignored for member "P:System.util.collections.OrderedTree.Keys" -->
        <!-- Badly formed XML comment ignored for member "P:System.util.collections.OrderedTree.Values" -->
        <member name="M:System.util.collections.OrderedTreeEnumerator.#ctor(System.util.collections.OrderedTreeNode,System.Boolean,System.Boolean)">
            <summary>
             Determine order, walk the tree and push the nodes onto the stack
            </summary>
        </member>
        <member name="M:System.util.collections.OrderedTreeEnumerator.HasMoreElements">
            <summary>
             HasMoreElements
            </summary>
        </member>
        <member name="M:System.util.collections.OrderedTreeEnumerator.NextElement">
            <summary>
             NextElement
            </summary>
        </member>
        <member name="M:System.util.collections.OrderedTreeEnumerator.MoveNext">
            <summary>
             MoveNext
             For .NET compatibility
            </summary>
        </member>
        <member name="P:System.util.collections.OrderedTreeEnumerator.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:System.util.collections.OrderedTreeEnumerator.Value">
            <summary>
            Data
            </summary>
        </member>
        <member name="P:System.util.collections.OrderedTreeNode.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:System.util.collections.OrderedTreeNode.Data">
            <summary>
            Data
            </summary>
        </member>
        <member name="P:System.util.collections.OrderedTreeNode.Color">
            <summary>
            Color
            </summary>
        </member>
        <member name="P:System.util.collections.OrderedTreeNode.Left">
            <summary>
            Left
            </summary>
        </member>
        <member name="P:System.util.collections.OrderedTreeNode.Right">
            <summary>
             Right
            </summary>
        </member>
        <member name="T:iTextSharp.text.xml.simpleparser.IanaEncodings">
            Translates a IANA encoding name to a Java encoding.
        </member>
        <member name="F:iTextSharp.text.xml.simpleparser.IanaEncodings.map">
            The object that maps IANA to Java encodings. 
        </member>
        <member name="T:iTextSharp.text.rtf.parser.exceptions.RtfParserException">
            <code>RtfParserException</code> is the exception object thrown by
            the parser
            
            @author Howard Shank (hgshank@yahoo.com)
            @since 2.0.8
        </member>
        <member name="M:iTextSharp.text.rtf.parser.exceptions.RtfParserException.#ctor(System.Exception)">
            Creates a RtfParserException object.
            @param ex an exception that has to be turned into a RtfParserException
        </member>
        <member name="M:iTextSharp.text.rtf.parser.exceptions.RtfParserException.#ctor">
            Constructs a <CODE>RtfParserException</CODE> whithout a message.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.exceptions.RtfParserException.#ctor(System.String)">
             Constructs a <code>RtfParserException</code> with a message.
            
             @param        message         a message describing the exception
        </member>
        <member name="M:iTextSharp.text.rtf.parser.exceptions.RtfUnknownCtrlWordException.#ctor">
            Constructs a <CODE>RtfParserException</CODE> whithout a message.
        </member>
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.pdf.PdfTextArray" -->
        <member name="M:iTextSharp.text.pdf.PdfTextArray.Add(iTextSharp.text.pdf.PdfNumber)">
             Adds a <CODE>PdfNumber</CODE> to the <CODE>PdfArray</CODE>.
            
             @param  number   displacement of the string
        </member>
        <member name="T:iTextSharp.text.pdf.PdfStructureTreeRoot">
            The structure tree root corresponds to the highest hierarchy level in a tagged PDF.
            @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.PdfStructureTreeRoot.writer">
            Holds value of property writer.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStructureTreeRoot.#ctor(iTextSharp.text.pdf.PdfWriter)">
            Creates a new instance of PdfStructureTreeRoot 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStructureTreeRoot.MapRole(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfName)">
            Maps the user tags to the standard tags. The mapping will allow a standard application to make some sense of the tagged
            document whatever the user tags may be.
            @param used the user tag
            @param standard the standard tag
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStructureTreeRoot.Writer">
            Gets the writer.
            @return the writer
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStructureTreeRoot.Reference">
            Gets the reference this object will be written to.
            @return the reference this object will be written to
        </member>
        <member name="T:iTextSharp.text.pdf.PdfNumberTree">
            Creates a number tree.
            @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfNumberTree.WriteTree(System.Collections.Hashtable,iTextSharp.text.pdf.PdfWriter)">
            Creates a number tree.
            @param items the item of the number tree. The key is an <CODE>Integer</CODE>
            and the value is a <CODE>PdfObject</CODE>.
            @param writer the writer
            @throws IOException on error
            @return the dictionary with the number tree.
        </member>
        <member name="T:iTextSharp.text.pdf.PdfNameTree">
            Creates a name tree.
            @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfNameTree.WriteTree(System.Collections.Hashtable,iTextSharp.text.pdf.PdfWriter)">
            Creates a name tree.
            @param items the item of the name tree. The key is a <CODE>String</CODE>
            and the value is a <CODE>PdfObject</CODE>. Note that although the
            keys are strings only the lower byte is used and no check is made for chars
            with the same lower byte and different upper byte. This will generate a wrong
            tree name.
            @param writer the writer
            @throws IOException on error
            @return the dictionary with the name tree. This dictionary is the one
            generally pointed to by the key /Dests, for example
        </member>
        <member name="M:iTextSharp.text.pdf.collection.PdfCollectionSchema.#ctor">
            Creates a Collection Schema dictionary.
        </member>
        <member name="M:iTextSharp.text.pdf.collection.PdfCollectionSchema.AddField(System.String,iTextSharp.text.pdf.collection.PdfCollectionField)">
            Adds a Collection field to the Schema.
            @param name  the name of the collection field
            @param field a Collection Field
        </member>
        <member name="T:iTextSharp.text.pdf.codec.wmf.InputMeta">
            <summary>
            Summary description for InputMeta.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.L">
            Left-to-right
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.LRE">
            Left-to-Right Embedding 
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.LRO">
            Left-to-Right Override 
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.R">
            Right-to-Left 
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.AL">
            Right-to-Left Arabic 
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.RLE">
            Right-to-Left Embedding 
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.RLO">
            Right-to-Left Override 
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.PDF">
            Pop Directional Format 
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.EN">
            European Number 
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.ES">
            European Number Separator 
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.ET">
            European Number Terminator 
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.AN">
            Arabic Number 
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.CS">
            Common Number Separator 
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.NSM">
            Non-Spacing Mark 
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.BN">
            Boundary Neutral 
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.B">
            Paragraph Separator 
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.S">
            Segment Separator 
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.WS">
            Whitespace 
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.ON">
            Other Neutrals 
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.TYPE_MIN">
            Minimum bidi type value. 
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.TYPE_MAX">
            Maximum bidi type value. 
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.#ctor(System.SByte[])">
             Initialize using an array of direction types.  Types range from TYPE_MIN to TYPE_MAX inclusive
             and represent the direction codes of the characters in the text.
            
             @param types the types array
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.#ctor(System.SByte[],System.SByte)">
             Initialize using an array of direction types and an externally supplied paragraph embedding level.
             The embedding level may be -1, 0, or 1.  -1 means to apply the default algorithm (rules P2 and P3),
             0 is for LTR paragraphs, and 1 is for RTL paragraphs.
            
             @param types the types array
             @param paragraphEmbeddingLevel the externally supplied paragraph embedding level.
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.RunAlgorithm">
            The algorithm.
            Does not include line-based processing (Rules L1, L2).
            These are applied later in the line-based phase of the algorithm.
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.BidiOrder.DetermineParagraphEmbeddingLevel" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.BidiOrder.DetermineExplicitEmbeddingLevels" -->
        <member name="M:iTextSharp.text.pdf.BidiOrder.RemoveExplicitCodes">
            Rules X9.
            Remove explicit codes so that they may be ignored during the remainder
            of the main portion of the algorithm.  The length of the resulting text
            is returned.
            @return the length of the data excluding explicit codes and BN.
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.ReinsertExplicitCodes(System.Int32)">
            Reinsert levels information for explicit codes.
            This is for ease of relating the level information
            to the original input data.  Note that the levels
            assigned to these codes are arbitrary, they're
            chosen so as to avoid breaking level runs.
            @param textLength the length of the data after compression
            @return the length of the data (original length of
            types array supplied to constructor)
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.ProcessEmbeddings(System.SByte[],System.SByte)">
             2) determining explicit levels
             Rules X1 - X8
            
             The interaction of these rules makes handling them a bit complex.
             This examines resultTypes but does not modify it.  It returns embedding and
             override information in the result array.  The low 7 bits are the level, the high
             bit is set if the level is an override, and clear if it is an embedding.
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.ResolveWeakTypes(System.Int32,System.Int32,System.SByte,System.SByte,System.SByte)">
             3) resolving weak types
             Rules W1-W7.
            
             Note that some weak types (EN, AN) remain after this processing is complete.
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.ResolveNeutralTypes(System.Int32,System.Int32,System.SByte,System.SByte,System.SByte)">
            6) resolving neutral types
            Rules N1-N2.
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.ResolveImplicitLevels(System.Int32,System.Int32,System.SByte,System.SByte,System.SByte)">
            7) resolving implicit embedding levels
            Rules I1, I2.
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.BidiOrder.GetLevels(System.Int32[])" -->
        <member name="M:iTextSharp.text.pdf.BidiOrder.ComputeMultilineReordering(System.SByte[],System.Int32[])">
            Return multiline reordering array for a given level array.
            Reordering does not occur across a line break.
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.ComputeReordering(System.SByte[])">
            Return reordering array for a given level array.  This reorders a single line.
            The reordering is a visual to logical map.  For example,
            the leftmost char is string.CharAt(order[0]).
            Rule L2.
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.GetBaseLevel">
            Return the base level of the paragraph.
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.IsWhitespace(System.SByte)">
            Return true if the type is considered a whitespace type for the line break rules.
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.TypeForLevel(System.Int32)">
            Return the strong type (L or R) corresponding to the level.
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.FindRunLimit(System.Int32,System.Int32,System.SByte[])">
            Return the limit of the run starting at index that includes only resultTypes in validSet.
            This checks the value at index, and will return index if that value is not in validSet.
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.FindRunStart(System.Int32,System.SByte[])">
            Return the start of the run including index that includes only resultTypes in validSet.
            This assumes the value at index is valid, and does not check it.
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.SetTypes(System.Int32,System.Int32,System.SByte)">
            Set resultTypes from start up to (but not including) limit to newType.
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.SetLevels(System.Int32,System.Int32,System.SByte)">
            Set resultLevels from start up to (but not including) limit to newLevel.
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.ValidateTypes(System.SByte[])">
            Throw exception if type array is invalid.
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.ValidateParagraphEmbeddingLevel(System.SByte)">
            Throw exception if paragraph embedding level is invalid. Special allowance for -1 so that
            default processing can still be performed when using this API.
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.ValidateLineBreaks(System.Int32[],System.Int32)">
            Throw exception if line breaks array is invalid.
        </member>
        <member name="T:iTextSharp.text.html.simpleparser.IncTable">
            
             @author  psoares
        </member>
        <member name="M:iTextSharp.text.html.simpleparser.IncTable.#ctor(System.Collections.Hashtable)">
            Creates a new instance of IncTable 
        </member>
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.html.HtmlWriter" -->
        <member name="F:iTextSharp.text.html.HtmlWriter.NBSP">
            This is a possible HTML-tag. 
        </member>
        <member name="F:iTextSharp.text.html.HtmlWriter.BEGINCOMMENT">
            This is a possible HTML-tag. 
        </member>
        <member name="F:iTextSharp.text.html.HtmlWriter.ENDCOMMENT">
            This is a possible HTML-tag. 
        </member>
        <member name="F:iTextSharp.text.html.HtmlWriter.currentfont">
            This is the current font of the HTML. 
        </member>
        <member name="F:iTextSharp.text.html.HtmlWriter.standardfont">
            This is the standard font of the HTML. 
        </member>
        <member name="F:iTextSharp.text.html.HtmlWriter.imagepath">
            This is a path for images. 
        </member>
        <member name="F:iTextSharp.text.html.HtmlWriter.pageN">
            Stores the page number. 
        </member>
        <member name="F:iTextSharp.text.html.HtmlWriter.header">
            This is the textual part of a header 
        </member>
        <member name="F:iTextSharp.text.html.HtmlWriter.footer">
            This is the textual part of the footer 
        </member>
        <member name="F:iTextSharp.text.html.HtmlWriter.markup">
            Store the markup properties of a MarkedObject. 
        </member>
        <member name="M:iTextSharp.text.html.HtmlWriter.#ctor(iTextSharp.text.Document,System.IO.Stream)">
             Constructs a <CODE>HtmlWriter</CODE>.
            
             @param doc     The <CODE>Document</CODE> that has to be written as HTML
             @param os      The <CODE>Stream</CODE> the writer has to write to.
        </member>
        <member name="M:iTextSharp.text.html.HtmlWriter.GetInstance(iTextSharp.text.Document,System.IO.Stream)">
             Gets an instance of the <CODE>HtmlWriter</CODE>.
            
             @param document  The <CODE>Document</CODE> that has to be written
             @param os  The <CODE>Stream</CODE> the writer has to write to.
             @return  a new <CODE>HtmlWriter</CODE>
        </member>
        <member name="M:iTextSharp.text.html.HtmlWriter.NewPage">
             Signals that an new page has to be started.
            
             @return  <CODE>true</CODE> if this action succeeded, <CODE>false</CODE> if not.
             @throws  DocumentException when a document isn't open yet, or has been closed
        </member>
        <member name="M:iTextSharp.text.html.HtmlWriter.Add(iTextSharp.text.IElement)">
             Signals that an <CODE>Element</CODE> was added to the <CODE>Document</CODE>.
            
             @return  <CODE>true</CODE> if the element was added, <CODE>false</CODE> if not.
             @throws  DocumentException when a document isn't open yet, or has been closed
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.html.HtmlWriter.Open" -->
        <member name="M:iTextSharp.text.html.HtmlWriter.Close">
            Signals that the <CODE>Document</CODE> was closed and that no other
            <CODE>Elements</CODE> will be added.
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.html.HtmlWriter.InitHeader" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.html.HtmlWriter.InitFooter" -->
        <member name="M:iTextSharp.text.html.HtmlWriter.WriteHeader(iTextSharp.text.Meta)">
             Writes a Metatag in the header.
            
             @param   meta   the element that has to be written
             @throws  IOException
        </member>
        <member name="M:iTextSharp.text.html.HtmlWriter.WriteLink(iTextSharp.text.Header)">
             Writes a link in the header.
            
             @param   header   the element that has to be written
             @throws  IOException
        </member>
        <member name="M:iTextSharp.text.html.HtmlWriter.WriteJavaScript(iTextSharp.text.Header)">
             Writes a JavaScript section or, if the markup attribute HtmlTags.URL is set, a JavaScript reference in the header.
            
             @param   header   the element that has to be written
             @throws  IOException
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.html.HtmlWriter.WriteComment(System.String)" -->
        <member name="M:iTextSharp.text.html.HtmlWriter.SetStandardFont(iTextSharp.text.Font)">
             Changes the standardfont.
            
             @param standardFont  The font
        </member>
        <member name="M:iTextSharp.text.html.HtmlWriter.IsOtherFont(iTextSharp.text.Font)">
             Checks if a given font is the same as the font that was last used.
            
             @param   font    the font of an object
             @return  true if the font differs
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.html.HtmlWriter.SetImagepath(System.String)" -->
        <member name="M:iTextSharp.text.html.HtmlWriter.ResetImagepath">
            Resets the imagepath.
        </member>
        <member name="M:iTextSharp.text.html.HtmlWriter.SetHeader(iTextSharp.text.HeaderFooter)">
             Changes the header of this document.
            
             @param header    the new header
        </member>
        <member name="M:iTextSharp.text.html.HtmlWriter.SetFooter(iTextSharp.text.HeaderFooter)">
             Changes the footer of this document.
            
             @param footer    the new footer
        </member>
        <member name="M:iTextSharp.text.html.HtmlWriter.Add(System.String)">
             Signals that a <CODE>String</CODE> was added to the <CODE>Document</CODE>.
            
             @return  <CODE>true</CODE> if the string was added, <CODE>false</CODE> if not.
             @throws  DocumentException when a document isn't open yet, or has been closed
        </member>
        <member name="M:iTextSharp.text.html.HtmlWriter.Write(iTextSharp.text.IElement,System.Int32)">
             Writes the HTML representation of an element.
            
             @param   element     the element
             @param   indent      the indentation
        </member>
        <member name="M:iTextSharp.text.html.HtmlWriter.WriteSection(iTextSharp.text.Section,System.Int32)">
             Writes the HTML representation of a section.
            
             @param   section     the section to write
             @param   indent      the indentation
        </member>
        <member name="M:iTextSharp.text.html.HtmlWriter.Write(iTextSharp.text.Font,System.util.Properties)">
             Writes the representation of a <CODE>Font</CODE>.
            
             @param font              a <CODE>Font</CODE>
             @param styleAttributes   the style of the font
        </member>
        <member name="M:iTextSharp.text.html.HtmlWriter.WriteCssProperty(System.String,System.String)">
            Writes out a CSS property.
        </member>
        <member name="T:iTextSharp.text.html.HtmlPeer">
            This interface is implemented by the peer of all the iText objects.
        </member>
        <member name="T:iTextSharp.text.xml.XmlPeer">
            <summary>
            This interface is implemented by the peer of all the iText objects.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.XmlPeer.tagname">
            <summary> This is the name of the alias. </summary>
        </member>
        <member name="F:iTextSharp.text.xml.XmlPeer.customTagname">
            <summary> This is the name of the alias. </summary>
        </member>
        <member name="F:iTextSharp.text.xml.XmlPeer.attributeAliases">
            <summary> This is the Map that contains the aliases of the attributes. </summary>
        </member>
        <member name="F:iTextSharp.text.xml.XmlPeer.attributeValues">
            <summary> This is the Map that contains the default values of the attributes. </summary>
        </member>
        <member name="F:iTextSharp.text.xml.XmlPeer.defaultContent">
            <summary> This is String that contains the default content of the attributes. </summary>
        </member>
        <member name="M:iTextSharp.text.xml.XmlPeer.#ctor(System.String,System.String)">
            <summary>
            Creates a XmlPeer.
            </summary>
            <param name="name"></param>
            <param name="alias"></param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlPeer.GetAttributes(System.Collections.Hashtable)">
            <summary> Gets the list of attributes of the peer. </summary>
        </member>
        <member name="M:iTextSharp.text.xml.XmlPeer.AddAlias(System.String,System.String)">
            <summary>
            Sets an alias for an attribute.
            </summary>
            <param name="name">the iText tagname</param>
            <param name="alias">the custom tagname</param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlPeer.AddValue(System.String,System.String)">
            <summary>
            Sets a value for an attribute.
            </summary>
            <param name="name">the iText tagname</param>
            <param name="value">the default value for this tag</param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlPeer.GetName(System.String)">
            <summary>
            Returns the iText attribute name.
            </summary>
            <param name="name">the custom attribute name</param>
            <returns>the iText attribute name</returns>
        </member>
        <member name="P:iTextSharp.text.xml.XmlPeer.Tag">
            <summary>
            Gets the tagname of the peer.
            </summary>
            <value>the tagname of the peer</value>
        </member>
        <member name="P:iTextSharp.text.xml.XmlPeer.Alias">
            <summary>
            Gets the alias of the peer.
            </summary>
            <value>the alias of the peer</value>
        </member>
        <member name="P:iTextSharp.text.xml.XmlPeer.Content">
            <summary>
            Sets the default content.
            </summary>
            <value>the default content</value>
        </member>
        <member name="P:iTextSharp.text.xml.XmlPeer.DefaultValues">
            <summary>
            Returns the default values.
            </summary>
            <value>the default values</value>
        </member>
        <member name="M:iTextSharp.text.html.HtmlPeer.#ctor(System.String,System.String)">
            Creates a XmlPeer.
            @param name the iText name of the tag
            @param alias the Html name of the tag
        </member>
        <member name="M:iTextSharp.text.html.HtmlPeer.AddAlias(System.String,System.String)">
             Sets an alias for an attribute.
            
             @param   name    the iText tagname
             @param   alias   the custom tagname
        </member>
        <member name="M:iTextSharp.text.html.HtmlPeer.GetAttributes(System.Collections.Hashtable)">
            @see com.lowagie.text.xml.XmlPeer#getAttributes(org.xml.sax.Attributes)
        </member>
        <member name="T:iTextSharp.text.exceptions.BadPasswordException">
            Typed exception used when opening an existing PDF document.
            Gets thrown when the document isn't a valid PDF document.
            @since 2.1.5 It was written for iText 2.0.8, but moved to another package
        </member>
        <member name="M:iTextSharp.text.exceptions.BadPasswordException.#ctor(System.String)">
            Creates an exception saying the user password was incorrect.
        </member>
        <member name="T:iTextSharp.text.Annotation">
            <summary>
            An Annotation is a little note that can be added to a page
            on a document.
            </summary>
            <seealso cref="T:iTextSharp.text.Element"/>
            <seealso cref="T:iTextSharp.text.Anchor"/>
        </member>
        <member name="F:iTextSharp.text.Annotation.TEXT">
            <summary>This is a possible annotation type.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.URL_NET">
            <summary>This is a possible annotation type.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.URL_AS_STRING">
            <summary>This is a possible annotation type.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.FILE_DEST">
            <summary>This is a possible annotation type.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.FILE_PAGE">
            <summary>This is a possible annotation type.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.NAMED_DEST">
            <summary>This is a possible annotation type.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.LAUNCH">
            <summary>This is a possible annotation type.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.SCREEN">
            <summary>This is a possible annotation type.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.TITLE">
            <summary>This is a possible attribute.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.CONTENT">
            <summary>This is a possible attribute.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.URL">
            <summary>This is a possible attribute.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.FILE">
            <summary>This is a possible attribute.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.DESTINATION">
            <summary>This is a possible attribute.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.PAGE">
            <summary>This is a possible attribute.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.NAMED">
            <summary>This is a possible attribute.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.APPLICATION">
            <summary>This is a possible attribute.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.PARAMETERS">
            <summary>This is a possible attribute.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.OPERATION">
            <summary>This is a possible attribute.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.DEFAULTDIR">
            <summary>This is a possible attribute.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.LLX">
            <summary>This is a possible attribute.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.LLY">
            <summary>This is a possible attribute.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.URX">
            <summary>This is a possible attribute.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.URY">
            <summary>This is a possible attribute.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.MIMETYPE">
            <summary>This is a possible attribute.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.annotationtype">
            <summary>This is the type of annotation.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.annotationAttributes">
            <summary>This is the title of the Annotation.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.llx">
            <summary>This is the lower left x-value</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.lly">
            <summary>This is the lower left y-value</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.urx">
            <summary>This is the upper right x-value</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.ury">
            <summary>This is the upper right y-value</summary>
        </member>
        <member name="M:iTextSharp.text.Annotation.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs an Annotation with a certain title and some text.
            </summary>
            <param name="llx">the lower left x-value</param>
            <param name="lly">the lower left y-value</param>
            <param name="urx">the upper right x-value</param>
            <param name="ury">the upper right y-value</param>
        </member>
        <member name="M:iTextSharp.text.Annotation.#ctor(System.String,System.String)">
            <summary>
            Constructs an Annotation with a certain title and some text.
            </summary>
            <param name="title">the title of the annotation</param>
            <param name="text">the content of the annotation</param>
        </member>
        <member name="M:iTextSharp.text.Annotation.#ctor(System.String,System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs an Annotation with a certain title and some text.
            </summary>
            <param name="title">the title of the annotation</param>
            <param name="text">the content of the annotation</param>
            <param name="llx">the lower left x-value</param>
            <param name="lly">the lower left y-value</param>
            <param name="urx">the upper right x-value</param>
            <param name="ury">the upper right y-value</param>
        </member>
        <member name="M:iTextSharp.text.Annotation.#ctor(System.Single,System.Single,System.Single,System.Single,System.Uri)">
            <summary>
            Constructs an Annotation.
            </summary>
            <param name="llx">the lower left x-value</param>
            <param name="lly">the lower left y-value</param>
            <param name="urx">the upper right x-value</param>
            <param name="ury">the upper right y-value</param>
            <param name="url">the external reference</param>
        </member>
        <member name="M:iTextSharp.text.Annotation.#ctor(System.Single,System.Single,System.Single,System.Single,System.String)">
            <summary>
            Constructs an Annotation.
            </summary>
            <param name="llx">the lower left x-value</param>
            <param name="lly">the lower left y-value</param>
            <param name="urx">the upper right x-value</param>
            <param name="ury">the upper right y-value</param>
            <param name="url">the external reference</param>
        </member>
        <member name="M:iTextSharp.text.Annotation.#ctor(System.Single,System.Single,System.Single,System.Single,System.String,System.String)">
            <summary>
            Constructs an Annotation.
            </summary>
            <param name="llx">the lower left x-value</param>
            <param name="lly">the lower left y-value</param>
            <param name="urx">the upper right x-value</param>
            <param name="ury">the upper right y-value</param>
            <param name="file">an external PDF file</param>
            <param name="dest">the destination in this file</param>
        </member>
        <member name="M:iTextSharp.text.Annotation.#ctor(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.Boolean)">
            <summary>
            Creates a Screen anotation to embed media clips
            </summary>
            <param name="llx">the lower left x-value</param>
            <param name="lly">the lower left y-value</param>
            <param name="urx">the upper right x-value</param>
            <param name="ury">the upper right y-value</param>
            <param name="moviePath">path to the media clip file</param>
            <param name="mimeType">mime type of the media</param>
            <param name="showOnDisplay">if true play on display of the page</param>
        </member>
        <member name="M:iTextSharp.text.Annotation.#ctor(System.Single,System.Single,System.Single,System.Single,System.String,System.Int32)">
            <summary>
            Constructs an Annotation.
            </summary>
            <param name="llx">the lower left x-value</param>
            <param name="lly">the lower left y-value</param>
            <param name="urx">the upper right x-value</param>
            <param name="ury">the upper right y-value</param>
            <param name="file">an external PDF file</param>
            <param name="page">a page number in this file</param>
        </member>
        <member name="M:iTextSharp.text.Annotation.#ctor(System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Constructs an Annotation.
            </summary>
            <param name="llx">the lower left x-value</param>
            <param name="lly">the lower left y-value</param>
            <param name="urx">the upper right x-value</param>
            <param name="ury">the upper right y-value</param>
            <param name="named">a named destination in this file</param>
            <overloads>
            Has nine overloads.
            </overloads>
        </member>
        <member name="M:iTextSharp.text.Annotation.#ctor(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.String,System.String)">
            <summary>
            Constructs an Annotation.
            </summary>
            <param name="llx">the lower left x-value</param>
            <param name="lly">the lower left y-value</param>
            <param name="urx">the upper right x-value</param>
            <param name="ury">the upper right y-value</param>
            <param name="application">an external application</param>
            <param name="parameters">parameters to pass to this application</param>
            <param name="operation">the operation to pass to this application</param>
            <param name="defaultdir">the default directory to run this application in</param>
        </member>
        <member name="M:iTextSharp.text.Annotation.Process(iTextSharp.text.IElementListener)">
            <summary>
            Processes the element by adding it (or the different parts) to an
            IElementListener.
            </summary>
            <param name="listener">an IElementListener</param>
            <returns>true if the element was process successfully</returns>
        </member>
        <member name="M:iTextSharp.text.Annotation.SetDimensions(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the dimensions of this annotation.
            </summary>
            <param name="llx">the lower left x-value</param>
            <param name="lly">the lower left y-value</param>
            <param name="urx">the upper right x-value</param>
            <param name="ury">the upper right y-value</param>
        </member>
        <member name="M:iTextSharp.text.Annotation.GetLlx">
            <summary>
            Returns the lower left x-value.
            </summary>
            <returns>a value</returns>
        </member>
        <member name="M:iTextSharp.text.Annotation.GetLly">
            <summary>
            Returns the lower left y-value.
            </summary>
            <returns>a value</returns>
        </member>
        <member name="M:iTextSharp.text.Annotation.GetUrx">
            <summary>
            Returns the uppper right x-value.
            </summary>
            <returns>a value</returns>
        </member>
        <member name="M:iTextSharp.text.Annotation.GetUry">
            <summary>
            Returns the uppper right y-value.
            </summary>
            <returns>a value</returns>
        </member>
        <member name="M:iTextSharp.text.Annotation.GetLlx(System.Single)">
            <summary>
            Returns the lower left x-value.
            </summary>
            <param name="def">the default value</param>
            <returns>a value</returns>
        </member>
        <member name="M:iTextSharp.text.Annotation.GetLly(System.Single)">
            <summary>
            Returns the lower left y-value.
            </summary>
            <param name="def">the default value</param>
            <returns>a value</returns>
        </member>
        <member name="M:iTextSharp.text.Annotation.GetUrx(System.Single)">
            <summary>
            Returns the upper right x-value.
            </summary>
            <param name="def">the default value</param>
            <returns>a value</returns>
        </member>
        <member name="M:iTextSharp.text.Annotation.GetUry(System.Single)">
            <summary>
            Returns the upper right y-value.
            </summary>
            <param name="def">the default value</param>
            <returns>a value</returns>
        </member>
        <member name="M:iTextSharp.text.Annotation.IsContent">
            @see com.lowagie.text.Element#isContent()
            @since   iText 2.0.8
        </member>
        <member name="M:iTextSharp.text.Annotation.IsNestable">
            @see com.lowagie.text.Element#isNestable()
            @since   iText 2.0.8
        </member>
        <member name="P:iTextSharp.text.Annotation.Type">
            <summary>
            Gets the type of the text element
            </summary>
        </member>
        <member name="P:iTextSharp.text.Annotation.Chunks">
            <summary>
            Gets all the chunks in this element.
            </summary>
            <value>an ArrayList</value>
        </member>
        <member name="P:iTextSharp.text.Annotation.AnnotationType">
            <summary>
            Returns the type of this Annotation.
            </summary>
            <value>a type</value>
        </member>
        <member name="P:iTextSharp.text.Annotation.Title">
            <summary>
            Returns the title of this Annotation.
            </summary>
            <value>a name</value>
        </member>
        <member name="P:iTextSharp.text.Annotation.Content">
            <summary>
            Gets the content of this Annotation.
            </summary>
            <value>a reference</value>
        </member>
        <member name="P:iTextSharp.text.Annotation.Attributes">
            <summary>
            Gets the content of this Annotation.
            </summary>
            <value>a reference</value>
        </member>
        <member name="T:iTextSharp.text.rtf.parser.destinations.RtfDestinationMgr">
            <code>RtfDestinationMgr</code> manages destination objects for the parser
            
            @author Howard Shank (hgshank@yahoo.com)
            @since 2.0.8
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationMgr.DESTINATION_NULL">
            String representation of null destination.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationMgr.DESTINATION_DOCUMENT">
            String representation of document destination.
        </member>
        <!-- Badly formed XML comment ignored for member "F:iTextSharp.text.rtf.parser.destinations.RtfDestinationMgr.destinations" -->
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationMgr.destinationObjects">
            Destination objects.
            There is only one of each destination.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationMgr.#ctor">
            Hidden default constructor becuase
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationMgr.AddListener(System.String,iTextSharp.text.rtf.parser.destinations.IRtfDestinationListener)">
             Adds a <CODE>RtfDestinationListener</CODE> to the appropriate <CODE>RtfDestination</CODE>.
            
             @param destination the destination string for the listener
             @param listener
                        the new RtfDestinationListener.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationMgr.RemoveListener(System.String,iTextSharp.text.rtf.parser.destinations.IRtfDestinationListener)">
             Removes a <CODE>RtfDestinationListener</CODE> from the appropriate <CODE>RtfDestination</CODE>.
            
             @param destination the destination string for the listener
             @param listener
                        the RtfCtrlWordListener that has to be removed.
        </member>
        <member name="T:iTextSharp.text.rtf.list.RtfListLevel">
            The RtfListLevel is a listlevel object in a list.
            
            @version $Id: RtfListLevel.java 3580 2008-08-06 15:52:00Z howard_s $
            @author Howard Shank (hgshank@yahoo.com)
            @since 2.1.3
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel.LIST_LEVEL">
            Constant for list level
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel.LIST_LEVEL_TEMPLATE_ID">
            Constant for list level
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel.LIST_LEVEL_TYPE">
            Constant for list level style old
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel.LIST_LEVEL_TYPE_NEW">
            Constant for list level style new
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel.LIST_LEVEL_ALIGNMENT">
            Constant for list level alignment old
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel.LIST_LEVEL_ALIGNMENT_NEW">
            Constant for list level alignment new
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel.LIST_LEVEL_START_AT">
            Constant for list level start at
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel.LIST_LEVEL_TEXT">
            Constant for list level text
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel.LIST_LEVEL_STYLE_NUMBERED_BEGIN">
            Constant for the beginning of the list level numbered style
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel.LIST_LEVEL_STYLE_NUMBERED_END">
            Constant for the end of the list level numbered style
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel.LIST_LEVEL_STYLE_BULLETED_BEGIN">
            Constant for the beginning of the list level bulleted style
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel.LIST_LEVEL_STYLE_BULLETED_END">
            Constant for the end of the list level bulleted style
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel.LIST_LEVEL_NUMBERS_BEGIN">
            Constant for the beginning of the list level numbers
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel.LIST_LEVEL_FOLOW">
            Constant which specifies which character follows the level text
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel.LIST_LEVEL_SPACE">
            Constant which specifies the levelspace controlword
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel.LIST_LEVEL_INDENT">
            Constant which specifies the levelindent control word
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel.LIST_LEVEL_LEGAL">
            Constant which specifies (1) if list numbers from previous levels should be converted
            to Arabic numbers; (0) if they should be left with the format specified by their
            own level's definition.
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel.LIST_LEVEL_NO_RESTART">
            Constant which specifies 
            (1) if this level does/does not restart its count each time a super ordinate level is incremented
            (0) if this level does not restart its count each time a super ordinate level is incremented.
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel.LIST_LEVEL_NUMBERS_NUMBERED">
            Constant for the list level numbers
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel.LIST_LEVEL_NUMBERS_END">
            Constant for the end of the list level numbers
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel.LIST_LEVEL_FIRST_INDENT">
            Constant for the first indentation
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel.LIST_LEVEL_SYMBOL_INDENT">
            Constant for the symbol indentation
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel.LIST_LEVEL_TENTATIVE">
            Constant for the lvltentative control word
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel.LIST_LEVEL_PICTURE">
            Constant for the levelpictureN control word
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel.listType">
            Whether this RtfList is numbered
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel.bulletCharacter">
            The text to use as the bullet character
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel.bulletChunk">
            @since 2.1.4
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel.listStartAt">
            The number to start counting at
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel.listLevel">
            The level of this RtfListLevel
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel.firstIndent">
            The first indentation of this RtfList
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel.leftIndent">
            The left indentation of this RtfList
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel.rightIndent">
            The right indentation of this RtfList
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel.symbolIndent">
            The symbol indentation of this RtfList
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel.isTentative">
            Flag to indicate if the tentative control word should be emitted.
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel.isLegal">
            Flag to indicate if the levellegal control word should be emitted.
            true  if any list numbers from previous levels should be converted to Arabic numbers; 
            false if they should be left with the format specified by their own level definition.
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel.listNoRestart">
            Does the list restart numbering each time a super ordinate level is incremented
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel.alignment">
            The alignment of this RtfList
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel.levelPicture">
            Which picture bullet from the \listpicture destination should be applied
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel.fontNumber">
            The RtfFont for numbered lists
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel.fontBullet">
            The RtfFont for bulleted lists
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListLevel.parent">
            Parent list object
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.GetListNoRestart">
            @return the listNoRestart
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.SetListNoRestart(System.Int32)">
            @param listNoRestart the listNoRestart to set
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.GetAlignment">
            @return the alignment
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.SetAlignment(System.Int32)">
            @param alignment the alignment to set
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.WriteContent(System.IO.Stream)">
            unused
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.WriteListNumbers(System.IO.Stream)">
            Writes only the list number and list level number.
            
            @param result The <code>Stream</code> to write to
            @throws IOException On i/o errors.
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.WriteIndentation(System.IO.Stream)">
            Write the indentation values for this <code>RtfList</code>.
            
            @param result The <code>Stream</code> to write to.
            @throws IOException On i/o errors.
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.WriteListBeginning(System.IO.Stream)">
            Writes the initialization part of the RtfList
            
            @param result The <code>Stream</code> to write to
            @throws IOException On i/o errors.
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.CorrectIndentation">
            Correct the indentation of this level
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.GetListLevel">
            Gets the list level of this RtfList
            
            @return Returns the list level.
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.SetListLevel(System.Int32)">
            Sets the list level of this RtfList. 
            
            @param listLevel The list level to set.
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.GetListStartAt">
            @return the listStartAt
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.SetListStartAt(System.Int32)">
            @param listStartAt the listStartAt to set
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.GetFirstIndent">
            @return the firstIndent
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.SetFirstIndent(System.Int32)">
            @param firstIndent the firstIndent to set
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.GetLeftIndent">
            @return the leftIndent
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.SetLeftIndent(System.Int32)">
            @param leftIndent the leftIndent to set
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.GetRightIndent">
            @return the rightIndent
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.SetRightIndent(System.Int32)">
            @param rightIndent the rightIndent to set
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.GetSymbolIndent">
            @return the symbolIndent
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.SetSymbolIndent(System.Int32)">
            @param symbolIndent the symbolIndent to set
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.GetParent">
            @return the parent
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.SetParent(iTextSharp.text.rtf.list.RtfList)">
            @param parent the parent to set
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.SetBulletCharacter(System.String)">
            @param bulletCharacter the bulletCharacter to set
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.SetBulletChunk(iTextSharp.text.Chunk)">
            
            @param bulletCharacter
            @since 2.1.4
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.GetListType">
            @return the listType
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.SetListType(System.Int32)">
            @param listType the listType to set
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.SetBulletFont(iTextSharp.text.Font)">
            set the bullet font
            @param f
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.GetFontNumber">
            @return the fontNumber
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.SetFontNumber(iTextSharp.text.rtf.style.RtfFont)">
            @param fontNumber the fontNumber to set
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.GetFontBullet">
            @return the fontBullet
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.SetFontBullet(iTextSharp.text.rtf.style.RtfFont)">
            @param fontBullet the fontBullet to set
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.IsTentative">
            @return the isTentative
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.SetTentative(System.Boolean)">
            @param isTentative the isTentative to set
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.IsLegal">
            @return the isLegal
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.SetLegal(System.Boolean)">
            @param isLegal the isLegal to set
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.GetLevelFollowValue">
            @return the levelFollowValue
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.SetLevelFollowValue(System.Int32)">
            @param levelFollowValue the levelFollowValue to set
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.GetLevelTextNumber">
            @return the levelTextNumber
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.SetLevelTextNumber(System.Int32)">
            @param levelTextNumber the levelTextNumber to set
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.GetListLevelParent">
            @return the listLevelParent
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListLevel.SetListLevelParent(iTextSharp.text.rtf.list.RtfListLevel)">
            @param listLevelParent the listLevelParent to set
        </member>
        <member name="T:iTextSharp.text.rtf.list.RtfListItem">
            The RtfListItem acts as a wrapper for a ListItem.
            
            @version $Version:$
            @author Mark Hall (Mark.Hall@mail.room3b.eu)
        </member>
        <member name="T:iTextSharp.text.rtf.text.RtfParagraph">
            The RtfParagraph is an extension of the RtfPhrase that adds alignment and
            indentation properties. It wraps a Paragraph.
            
            @version $Version:$
            @author Mark Hall (Mark.Hall@mail.room3b.eu)
        </member>
        <member name="T:iTextSharp.text.rtf.text.RtfPhrase">
            The RtfPhrase contains multiple RtfChunks
            
            @version $Id: RtfPhrase.cs,v 1.10 2008/05/16 19:31:24 psoares33 Exp $
            @author Mark Hall (Mark.Hall@mail.room3b.eu)
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfPhrase.PARAGRAPH_DEFAULTS">
            Constant for the resetting of the paragraph defaults
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfPhrase.PLAIN">
            Constant for resetting of font settings to their defaults
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfPhrase.IN_TABLE">
            Constant for phrase in a table indication
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfPhrase.LINE_SPACING">
            Constant for the line spacing.
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfPhrase.chunks">
            ArrayList containing the RtfChunks of this RtfPhrase
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfPhrase.lineLeading">
            The height of each line.
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfPhrase.#ctor(iTextSharp.text.rtf.document.RtfDocument)">
            A basically empty constructor that is used by the RtfParagraph.
            
            @param doc The RtfDocument this RtfPhrase belongs to.
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfPhrase.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.Phrase)">
            Constructs a new RtfPhrase for the RtfDocument with the given Phrase
            
            @param doc The RtfDocument this RtfPhrase belongs to
            @param phrase The Phrase this RtfPhrase is based on
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfPhrase.WriteContent(System.IO.Stream)">
            Write the content of this RtfPhrase. First resets to the paragraph defaults
            then if the RtfPhrase is in a RtfCell a marker for this is written and finally
            the RtfChunks of this RtfPhrase are written.
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfPhrase.SetInTable(System.Boolean)">
            Sets whether this RtfPhrase is in a table. Sets the correct inTable setting for all
            child elements.
            
            @param inTable <code>True</code> if this RtfPhrase is in a table, <code>false</code> otherwise
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfPhrase.SetInHeader(System.Boolean)">
            Sets whether this RtfPhrase is in a header. Sets the correct inTable setting for all
            child elements.
            
            @param inHeader <code>True</code> if this RtfPhrase is in a header, <code>false</code> otherwise
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfPhrase.SetRtfDocument(iTextSharp.text.rtf.document.RtfDocument)">
            Sets the RtfDocument this RtfPhrase belongs to. Also sets the RtfDocument for all child
            elements.
            
            @param doc The RtfDocument to use
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfParagraph.PARAGRAPH">
            Constant for the end of a paragraph
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfParagraph.paragraphStyle">
            An optional RtfParagraphStyle to use for styling.
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfParagraph.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.Paragraph)">
            Constructs a RtfParagraph belonging to a RtfDocument based on a Paragraph.
            
            @param doc The RtfDocument this RtfParagraph belongs to
            @param paragraph The Paragraph that this RtfParagraph is based on
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfParagraph.SetKeepTogetherWithNext(System.Boolean)">
            Set whether this RtfParagraph must stay on the same page as the next one.
             
            @param keepTogetherWithNext Whether this RtfParagraph must keep together with the next.
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfParagraph.WriteContent(System.IO.Stream)">
            Writes the content of this RtfParagraph. First paragraph specific data is written
            and then the RtfChunks of this RtfParagraph are added.
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfParagraph.GetIndentLeft">
            Gets the left indentation of this RtfParagraph.
            
            @return The left indentation.
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfParagraph.SetIndentLeft(System.Int32)">
            Sets the left indentation of this RtfParagraph.
            
            @param indentLeft The left indentation to use.
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfParagraph.GetIndentRight">
            Gets the right indentation of this RtfParagraph.
            
            @return The right indentation.
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfParagraph.SetIndentRight(System.Int32)">
            Sets the right indentation of this RtfParagraph.
            
            @param indentRight The right indentation to use.
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListItem.parentList">
            The RtfList this RtfListItem belongs to.
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListItem.containsInnerList">
            Whether this RtfListItem contains further RtfLists.
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListItem.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.ListItem)">
            Constructs a RtfListItem for a ListItem belonging to a RtfDocument.
            
            @param doc The RtfDocument this RtfListItem belongs to.
            @param listItem The ListItem this RtfListItem is based on.
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListItem.WriteContent(System.IO.Stream)">
            Writes the content of this RtfListItem.
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.rtf.list.RtfListItem.WriteDefinition(System.IO.Stream)" -->
        <member name="M:iTextSharp.text.rtf.list.RtfListItem.InheritListSettings(System.Int32,System.Int32)">
            Inherit the list settings from the parent list to RtfLists that
            are contained in this RtfListItem.
            
            @param listNumber The list number to inherit.
            @param listLevel The list level to inherit.
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListItem.CorrectIndentation">
            Correct the indentation of RtfLists in this RtfListItem by adding left/first line indentation
            from the parent RtfList. Also calls correctIndentation on all child RtfLists.
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListItem.SetParent(iTextSharp.text.rtf.list.RtfListLevel)">
            Set the parent RtfList.
            
            @param parentList The parent RtfList to use.
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListItem.GetParent">
            Set the parent RtfList.
            
            @return  The parent RtfList to use.
            @since 2.1.3
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListItem.IsContainsInnerList">
            Gets whether this RtfListItem contains further RtfLists.
            
            @return Whether this RtfListItem contains further RtfLists.
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListItem.GetLevel">
            @return the level
            @since 2.1.3
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListItem.SetLevel(System.Int32)">
            @param level the level to set
            @since 2.1.3
        </member>
        <member name="T:iTextSharp.text.rtf.list.RtfList">
            The RtfList stores one List. It also provides the methods to write the
            list declaration and the list data.
             
            @version $Id: RtfList.cs,v 1.18 2008/05/16 19:31:01 psoares33 Exp $
            @author Mark Hall (Mark.Hall@mail.room3b.eu)
            @author Thomas Bickel (tmb99@inode.at)
            @author Felix Satyaputra (f_satyaputra@yahoo.co.uk)
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.LIST_TYPE_NORMAL">
            List type of NORMAL - no control word
            @since 2.1.3
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.LIST_TYPE_SIMPLE">
            List type of listsimple
            @since 2.1.3
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.LIST_TYPE_HYBRID">
            List type of listhybrid
            @since 2.1.3
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.LIST_NUMBER">
            Constant for the list number
            @since 2.1.3
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.LIST">
            Constant for the list
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.LIST_ID">
            Constant for the list id
            @since 2.1.3
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.LIST_TEMPLATE_ID">
            Constant for the list template id
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.LIST_SIMPLE">
            Constant for the simple list
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.LIST_HYBRID">
            Constant for the hybrid list
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.LIST_RESTARTHDN">
            Constant to indicate if the list restarts at each section. Word 7 compatiblity
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.LIST_NAME">
            Constant for the name of this list
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.LIST_STYLEID">
            Constant for the identifier of the style of this list. Mutually exclusive with \\liststylename
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.LIST_STYLENAME">
            Constant for the identifier of the style of this list. Mutually exclusive with \\liststyleid
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.LIST_LEVEL_NUMBER">
            Constant for the list level value
            @since 2.1.3
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.LIST_TEXT">
            Constant for the old list text
            @since 2.1.3
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.LIST_NUMBER_END">
            Constant for the old list number end
            @since 2.1.3
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.TAB">
            Constant for a tab character
            @since 2.1.3
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.items">
            The subitems of this RtfList
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.parentList">
            The parent list if there is one.
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.listID">
            The list id
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.listType">
            This RtfList type
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.name">
            The name of the list if it exists 
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.listNumber">
            The list number of this RtfList
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.listLevels">
            The RtfList lists managed by this RtfListTable
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.#ctor">
            Constructs an empty RtfList object.
            @since 2.1.3
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.SetDocument(iTextSharp.text.rtf.document.RtfDocument)">
            Set the document.
            @param doc The RtfDocument
            @since 2.1.3
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.#ctor(iTextSharp.text.rtf.document.RtfDocument)">
            Constructs an empty RtfList object.
            @param doc The RtfDocument this RtfList belongs to
            @since 2.1.3
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.List)">
            Constructs a new RtfList for the specified List.
            
            @param doc The RtfDocument this RtfList belongs to
            @param list The List this RtfList is based on
            @since 2.1.3
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.WriteDefinition(System.IO.Stream)">
            Writes the definition part of this list level
            @param result
            @throws IOException
            @since 2.1.3
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.WriteContent(System.IO.Stream)">
            Writes the content of the RtfList
            @since 2.1.3
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.WriteListTextBlock(System.IO.Stream,System.Int32,iTextSharp.text.rtf.list.RtfListLevel)">
            
            @param result
            @param itemNr
            @param listLevel
            @throws IOException
            @since 2.1.3
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.WriteListNumbers(System.IO.Stream)">
            Writes only the list number and list level number.
            
            @param result The <code>Stream</code> to write to
            @throws IOException On i/o errors.
            @since 2.1.3
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.CreateDefaultLevels">
            Create a default set of listlevels
            @since 2.1.3
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.GetListNumber">
            Gets the id of this list
            
            @return Returns the list number.
            @since 2.1.3
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.SetListNumber(System.Int32)">
            Sets the id of this list
            
            @param listNumber The list number to set.
            @since 2.1.3
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.SetInTable(System.Boolean)">
            Sets whether this RtfList is in a table. Sets the correct inTable setting for all
            child elements.
            
            @param inTable <code>True</code> if this RtfList is in a table, <code>false</code> otherwise
            @since 2.1.3
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.SetInHeader(System.Boolean)">
            Sets whether this RtfList is in a header. Sets the correct inTable setting for all
            child elements.
            
            @param inHeader <code>True</code> if this RtfList is in a header, <code>false</code> otherwise
            @since 2.1.3
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.CorrectIndentation">
            Correct the indentation of this RtfList by adding left/first line indentation
            from the parent RtfList. Also calls correctIndentation on all child RtfLists.
            @since 2.1.3
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.SetID(System.Int32)">
            Set the list ID number
            @param id
            @since 2.1.3
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.GetID">
            Get the list ID number
            @return this list id
            @since 2.1.3
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.GetListType">
            @return the listType
            @see RtfList#LIST_TYPE_NORMAL
            @see RtfList#LIST_TYPE_SIMPLE
            @see RtfList#LIST_TYPE_HYBRID
            @since 2.1.3
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.SetListType(System.Int32)">
            @param listType the listType to set
            @see RtfList#LIST_TYPE_NORMAL
            @see RtfList#LIST_TYPE_SIMPLE
            @see RtfList#LIST_TYPE_HYBRID
            @since 2.1.3
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.GetParentList">
            @return the parentList
            @since 2.1.3
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.SetParentList(iTextSharp.text.rtf.list.RtfList)">
            @param parentList the parentList to set
            @since 2.1.3
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.GetName">
            @return the name
            @since 2.1.3
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.SetName(System.String)">
            @param name the name to set
            @since 2.1.3
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.GetListLevel(System.Int32)">
            @return the list at the index
            @since 2.1.3
        </member>
        <member name="T:iTextSharp.text.pdf.Type3Font">
            A class to support Type3 fonts.
        </member>
        <member name="T:iTextSharp.text.pdf.BaseFont">
            <summary>
            Summary description for BaseFont.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.COURIER">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.COURIER_BOLD">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.COURIER_OBLIQUE">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.COURIER_BOLDOBLIQUE">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.HELVETICA">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.HELVETICA_BOLD">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.HELVETICA_OBLIQUE">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.HELVETICA_BOLDOBLIQUE">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.SYMBOL">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.TIMES_ROMAN">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.TIMES_BOLD">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.TIMES_ITALIC">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.TIMES_BOLDITALIC">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.ZAPFDINGBATS">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.ASCENT">
            The maximum height above the baseline reached by glyphs in this
            font, excluding the height of glyphs for accented characters.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.CAPHEIGHT">
            The y coordinate of the top of flat capital letters, measured from
            the baseline.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.DESCENT">
            The maximum depth below the baseline reached by glyphs in this
            font. The value is a negative number.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.ITALICANGLE">
            The angle, expressed in degrees counterclockwise from the vertical,
            of the dominant vertical strokes of the font. The value is
            negative for fonts that slope to the right, as almost all italic fonts do.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.BBOXLLX">
            The lower left x glyph coordinate.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.BBOXLLY">
            The lower left y glyph coordinate.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.BBOXURX">
            The upper right x glyph coordinate.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.BBOXURY">
            The upper right y glyph coordinate.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.AWT_ASCENT">
            java.awt.Font property 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.AWT_DESCENT">
            java.awt.Font property 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.AWT_LEADING">
            java.awt.Font property 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.AWT_MAXADVANCE">
            java.awt.Font property 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.UNDERLINE_POSITION">
            The underline position. Usually a negative value.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.UNDERLINE_THICKNESS">
            The underline thickness.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.STRIKETHROUGH_POSITION">
            The strikethrough position.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.STRIKETHROUGH_THICKNESS">
            The strikethrough thickness.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.SUBSCRIPT_SIZE">
            The recommended vertical size for subscripts for this font.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.SUBSCRIPT_OFFSET">
            The recommended vertical offset from the baseline for subscripts for this font. Usually a negative value.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.SUPERSCRIPT_SIZE">
            The recommended vertical size for superscripts for this font.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.SUPERSCRIPT_OFFSET">
            The recommended vertical offset from the baseline for superscripts for this font.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.FONT_TYPE_T1">
            The font is Type 1.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.FONT_TYPE_TT">
            The font is True Type with a standard encoding.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.FONT_TYPE_CJK">
            The font is CJK.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.FONT_TYPE_TTUNI">
            The font is True Type with a Unicode encoding.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.FONT_TYPE_DOCUMENT">
            A font already inside the document.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.FONT_TYPE_T3">
            A Type3 font.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.IDENTITY_H">
            The Unicode encoding with horizontal writing.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.IDENTITY_V">
            The Unicode encoding with vertical writing.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.CP1250">
            A possible encoding. 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.CP1252">
            A possible encoding. 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.CP1257">
            A possible encoding. 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.WINANSI">
            A possible encoding. 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.MACROMAN">
            A possible encoding. 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.EMBEDDED">
            if the font has to be embedded 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.NOT_EMBEDDED">
            if the font doesn't have to be embedded 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.CACHED">
            if the font has to be cached 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.NOT_CACHED">
            if the font doesn't have to be cached 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.RESOURCE_PATH">
            The path to the font resources. 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.CID_NEWLINE">
            The fake CID code that represents a newline. 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.notdef">
            a not defined character in a custom PDF encoding 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.fontType">
            The font type.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.widths">
            table of characters widths for this encoding 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.differences">
            encoding names 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.unicodeDifferences">
            same as differences but with the unicode codes 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.encoding">
            encoding used with this font 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.embedded">
            true if the font is to be embedded in the PDF 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.compressionLevel">
            The compression level for the font stream.
            @since   2.1.3
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.fontSpecific">
            true if the font must use its built in encoding. In that case the
            <CODE>encoding</CODE> is only used to map a char to the position inside
            the font, not to the expected char name.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.fontCache">
            cache for the fonts already used. 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.BuiltinFonts14">
            list of the 14 built in fonts. 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.forceWidthsOutput">
            Forces the output of the width array. Only matters for the 14
            built-in fonts.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.directTextToByte">
            Converts <CODE>char</CODE> directly to <CODE>byte</CODE>
            by casting.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.subset">
            Indicates if all the glyphs and widths for that particular
            encoding should be included in the document.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.specialMap">
            Custom encodings use this map to key the Unicode character
            to the single byte code.
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.#ctor">
            Creates new BaseFont
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.CreateFont">
            Creates a new font. This will always be the default Helvetica font (not embedded).
            This method is introduced because Helvetica is used in many examples.
            @return  a BaseFont object (Helvetica, Winansi, not embedded)
            @throws  IOException         This shouldn't occur ever
            @throws  DocumentException   This shouldn't occur ever
            @since   2.1.1 
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.BaseFont.CreateFont(System.String,System.String,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.BaseFont.CreateFont(System.String,System.String,System.Boolean,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.BaseFont.CreateFont(System.String,System.String,System.Boolean,System.Boolean,System.Byte[],System.Byte[])" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.BaseFont.CreateFont(System.String,System.String,System.Boolean,System.Boolean,System.Byte[],System.Byte[],System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.BaseFont.CreateFont(System.String,System.String,System.Boolean,System.Boolean,System.Byte[],System.Byte[],System.Boolean,System.Boolean)" -->
        <member name="M:iTextSharp.text.pdf.BaseFont.CreateFont(iTextSharp.text.pdf.PRIndirectReference)">
            Creates a font based on an existing document font. The created font font may not
            behave as expected, depending on the encoding or subset.
            @param fontRef the reference to the document font
            @return the font
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetBaseName(System.String)">
            Gets the name without the modifiers Bold, Italic or BoldItalic.
            @param name the full name of the font
            @return the name without the modifiers Bold, Italic or BoldItalic
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.NormalizeEncoding(System.String)">
            Normalize the encoding names. "winansi" is changed to "Cp1252" and
            "macroman" is changed to "MacRoman".
            @param enc the encoding to be normalized
            @return the normalized encoding
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.CreateEncoding">
            Creates the <CODE>widths</CODE> and the <CODE>differences</CODE> arrays
            @throws UnsupportedEncodingException the encoding is not supported
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetRawWidth(System.Int32,System.String)">
            Gets the width from the font according to the Unicode char <CODE>c</CODE>
            or the <CODE>name</CODE>. If the <CODE>name</CODE> is null it's a symbolic font.
            @param c the unicode char
            @param name the glyph name
            @return the width of the char
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetKerning(System.Int32,System.Int32)">
            Gets the kerning between two Unicode chars.
            @param char1 the first char
            @param char2 the second char
            @return the kerning to be applied
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.SetKerning(System.Int32,System.Int32,System.Int32)">
            Sets the kerning between two Unicode chars.
            @param char1 the first char
            @param char2 the second char
            @param kern the kerning to apply in normalized 1000 units
            @return <code>true</code> if the kerning was applied, <code>false</code> otherwise
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetWidth(System.Int32)">
            Gets the width of a <CODE>char</CODE> in normalized 1000 units.
            @param char1 the unicode <CODE>char</CODE> to get the width of
            @return the width in normalized 1000 units
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetWidth(System.String)">
            Gets the width of a <CODE>string</CODE> in normalized 1000 units.
            @param text the <CODE>string</CODE> to get the witdth of
            @return the width in normalized 1000 units
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetDescent(System.String)">
            Gets the descent of a <CODE>String</CODE> in normalized 1000 units. The descent will always be
            less than or equal to zero even if all the characters have an higher descent.
            @param text the <CODE>String</CODE> to get the descent of
            @return the dexcent in normalized 1000 units
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetAscent(System.String)">
            Gets the ascent of a <CODE>String</CODE> in normalized 1000 units. The ascent will always be
            greater than or equal to zero even if all the characters have a lower ascent.
            @param text the <CODE>String</CODE> to get the ascent of
            @return the ascent in normalized 1000 units
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetDescentPoint(System.String,System.Single)">
            Gets the descent of a <CODE>String</CODE> in points. The descent will always be
            less than or equal to zero even if all the characters have an higher descent.
            @param text the <CODE>String</CODE> to get the descent of
            @param fontSize the size of the font
            @return the dexcent in points
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetAscentPoint(System.String,System.Single)">
            Gets the ascent of a <CODE>String</CODE> in points. The ascent will always be
            greater than or equal to zero even if all the characters have a lower ascent.
            @param text the <CODE>String</CODE> to get the ascent of
            @param fontSize the size of the font
            @return the ascent in points
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetWidthPointKerned(System.String,System.Single)">
            Gets the width of a <CODE>String</CODE> in points taking kerning
            into account.
            @param text the <CODE>String</CODE> to get the witdth of
            @param fontSize the font size
            @return the width in points
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetWidthPoint(System.String,System.Single)">
            Gets the width of a <CODE>string</CODE> in points.
            @param text the <CODE>string</CODE> to get the witdth of
            @param fontSize the font size
            @return the width in points
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetWidthPoint(System.Int32,System.Single)">
            Gets the width of a <CODE>char</CODE> in points.
            @param char1 the <CODE>char</CODE> to get the witdth of
            @param fontSize the font size
            @return the width in points
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.BaseFont.ConvertToBytes(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.BaseFont.ConvertToBytes(System.Int32)" -->
        <member name="M:iTextSharp.text.pdf.BaseFont.WriteFont(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.pdf.PdfIndirectReference,System.Object[])">
            Outputs to the writer the font dictionaries and streams.
            @param writer the writer for this document
            @param ref the font indirect reference
            @param params several parameters that depend on the font type
            @throws IOException on error
            @throws DocumentException error in generating the object
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetFullFontStream">
            Returns a PdfStream object with the full font program (if possible).
            This method will return null for some types of fonts (CJKFont, Type3Font)
            or if there is no font program available (standard Type 1 fonts).
            @return  a PdfStream with the font program
            @since   2.1.3
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetFontDescriptor(System.Int32,System.Single)">
            Gets the font parameter identified by <CODE>key</CODE>. Valid values
            for <CODE>key</CODE> are <CODE>ASCENT</CODE>, <CODE>CAPHEIGHT</CODE>, <CODE>DESCENT</CODE>,
            <CODE>ITALICANGLE</CODE>, <CODE>BBOXLLX</CODE>, <CODE>BBOXLLY</CODE>, <CODE>BBOXURX</CODE>
            and <CODE>BBOXURY</CODE>.
            @param key the parameter to be extracted
            @param fontSize the font size in points
            @return the parameter in points
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.IsEmbedded">
            Gets the embedded flag.
            @return <CODE>true</CODE> if the font is embedded.
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.IsFontSpecific">
            Gets the symbolic flag of the font.
            @return <CODE>true</CODE> if the font is symbolic
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.CreateSubsetPrefix">
            Creates a unique subset prefix to be added to the font name when the font is embedded and subset.
            @return the subset prefix
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetUnicodeDifferences(System.Int32)">
            Gets the Unicode character corresponding to the byte output to the pdf stream.
            @param index the byte index
            @return the Unicode character
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.BaseFont.GetFullFontName(System.String,System.String,System.Byte[])" -->
        <member name="M:iTextSharp.text.pdf.BaseFont.GetAllFontNames(System.String,System.String,System.Byte[])">
            Gets all the names from the font. Only the required tables are read.
            @param name the name of the font
            @param encoding the encoding of the font
            @param ttfAfm the true type font or the afm in a byte array
            @throws DocumentException on error
            @throws IOException on error
            @return an array of Object[] built with {getPostscriptFontName(), GetFamilyFontName(), GetFullFontName()}
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetAllNameEntries(System.String,System.String,System.Byte[])">
            Gets all the entries of the namestable from the font. Only the required tables are read.
            @param name the name of the font
            @param encoding the encoding of the font
            @param ttfAfm the true type font or the afm in a byte array
            @throws DocumentException on error
            @throws IOException on error
            @return an array of Object[] built with {getPostscriptFontName(), getFamilyFontName(), getFullFontName()}
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.EnumerateTTCNames(System.String)">
            Enumerates the postscript font names present inside a
            True Type Collection.
            @param ttcFile the file name of the font
            @throws DocumentException on error
            @throws IOException on error
            @return the postscript font names
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.EnumerateTTCNames(System.Byte[])">
            Enumerates the postscript font names present inside a
            True Type Collection.
            @param ttcArray the font as a <CODE>byte</CODE> array
            @throws DocumentException on error
            @throws IOException on error
            @return the postscript font names
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetResourceStream(System.String)">
            Gets the font resources.
            @param key the name of the resource
            @return the <CODE>Stream</CODE> to get the resource or
            <CODE>null</CODE> if not found
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.BaseFont.GetUnicodeEquivalent(System.Int32)" -->
        <member name="M:iTextSharp.text.pdf.BaseFont.GetCidCode(System.Int32)">
            Gets the CID code given an Unicode.
            It has only meaning with CJK fonts.
            @param c the Unicode
            @return the CID equivalent
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.HasKernPairs">
            Checks if the font has any kerning pairs.
            @return <CODE>true</CODE> if the font has any kerning pairs
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.CharExists(System.Int32)">
            Checks if a character exists in this font.
            @param c the character to check
            @return <CODE>true</CODE> if the character has a glyph,
            <CODE>false</CODE> otherwise
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.SetCharAdvance(System.Int32,System.Int32)">
            Sets the character advance.
            @param c the character
            @param advance the character advance normalized to 1000 units
            @return <CODE>true</CODE> if the advance was set,
            <CODE>false</CODE> otherwise
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetDocumentFonts(iTextSharp.text.pdf.PdfReader)">
            Gets a list of all document fonts. Each element of the <CODE>ArrayList</CODE>
            contains a <CODE>Object[]{String,PRIndirectReference}</CODE> with the font name
            and the indirect reference to it.
            @param reader the document where the fonts are to be listed from
            @return the list of fonts and references
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetDocumentFonts(iTextSharp.text.pdf.PdfReader,System.Int32)">
            Gets a list of the document fonts in a particular page. Each element of the <CODE>ArrayList</CODE>
            contains a <CODE>Object[]{String,PRIndirectReference}</CODE> with the font name
            and the indirect reference to it.
            @param reader the document where the fonts are to be listed from
            @param page the page to list the fonts from
            @return the list of fonts and references
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetCharBBox(System.Int32)">
            Gets the smallest box enclosing the character contours. It will return
            <CODE>null</CODE> if the font has not the information or the character has no
            contours, as in the case of the space, for example. Characters with no contours may
            also return [0,0,0,0].
            @param c the character to get the contour bounding box from
            @return an array of four floats with the bounding box in the format [llx,lly,urx,ury] or
            <code>null</code>
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.CorrectArabicAdvance">
            iText expects Arabic Diactrics (tashkeel) to have zero advance but some fonts,
            most notably those that come with Windows, like times.ttf, have non-zero
            advance for those characters. This method makes those character to have zero
            width advance and work correctly in the iText Arabic shaping and reordering
            context.
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.AddSubsetRange(System.Int32[])">
            Adds a character range when subsetting. The range is an <CODE>int</CODE> array
            where the first element is the start range inclusive and the second element is the
            end range inclusive. Several ranges are allowed in the same array.
            @param range the character range
        </member>
        <member name="P:iTextSharp.text.pdf.BaseFont.Encoding">
            Gets the encoding used to convert <CODE>string</CODE> into <CODE>byte[]</CODE>.
            @return the encoding name
        </member>
        <member name="P:iTextSharp.text.pdf.BaseFont.FontType">
            Gets the font type. The font types can be: FONT_TYPE_T1,
            FONT_TYPE_TT, FONT_TYPE_CJK and FONT_TYPE_TTUNI.
            @return the font type
        </member>
        <member name="P:iTextSharp.text.pdf.BaseFont.PostscriptFontName">
            Gets the postscript font name.
            @return the postscript font name
        </member>
        <!-- Badly formed XML comment ignored for member "P:iTextSharp.text.pdf.BaseFont.FullFontName" -->
        <!-- Badly formed XML comment ignored for member "P:iTextSharp.text.pdf.BaseFont.AllNameEntries" -->
        <!-- Badly formed XML comment ignored for member "P:iTextSharp.text.pdf.BaseFont.FamilyFontName" -->
        <member name="P:iTextSharp.text.pdf.BaseFont.CodePagesSupported">
            Gets the code pages supported by the font. This has only meaning
            with True Type fonts.
            @return the code pages supported by the font
        </member>
        <member name="P:iTextSharp.text.pdf.BaseFont.Widths">
            Gets the font width array.
            @return the font width array
        </member>
        <member name="P:iTextSharp.text.pdf.BaseFont.Differences">
            Gets the array with the names of the characters.
            @return the array with the names of the characters
        </member>
        <member name="P:iTextSharp.text.pdf.BaseFont.UnicodeDifferences">
            Gets the array with the unicode characters.
            @return the array with the unicode characters
        </member>
        <member name="P:iTextSharp.text.pdf.BaseFont.ForceWidthsOutput">
            Set to <CODE>true</CODE> to force the generation of the
            widths array.
            @param forceWidthsOutput <CODE>true</CODE> to force the generation of the
            widths array
        </member>
        <member name="P:iTextSharp.text.pdf.BaseFont.DirectTextToByte">
            Sets the conversion of <CODE>char</CODE> directly to <CODE>byte</CODE>
            by casting. This is a low level feature to put the bytes directly in
            the content stream without passing through string.GetBytes().
            @param directTextToByte New value of property directTextToByte.
        </member>
        <member name="P:iTextSharp.text.pdf.BaseFont.Subset">
            Indicates if all the glyphs and widths for that particular
            encoding should be included in the document. When set to <CODE>true</CODE>
            only the glyphs used will be included in the font. When set to <CODE>false</CODE>
            and {@link #addSubsetRange(int[])} was not called the full font will be included
            otherwise just the characters ranges will be included.
            @param subset new value of property subset
        </member>
        <member name="P:iTextSharp.text.pdf.BaseFont.CompressionLevel">
            Sets the compression level to be used for the font streams.
            @param compressionLevel a value between 0 (best speed) and 9 (best compression)
            @since 2.1.3
        </member>
        <member name="T:iTextSharp.text.pdf.BaseFont.StreamFont">
            Generates the PDF stream with the Type1 and Truetype fonts returning
            a PdfStream.
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.StreamFont.#ctor(System.Byte[],System.Int32[],System.Int32)">
            Generates the PDF stream with the Type1 and Truetype fonts returning
            a PdfStream.
            @param contents the content of the stream
            @param lengths an array of int that describes the several lengths of each part of the font
            @param compressionLevel  the compression level of the Stream
            @throws DocumentException error in the stream compression
            @since   2.1.3 (replaces the constructor without param compressionLevel)
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.StreamFont.#ctor(System.Byte[],System.String,System.Int32)">
            Generates the PDF stream for a font.
            @param contents the content of a stream
            @param subType the subtype of the font.
            @param compressionLevel  the compression level of the Stream
            @throws DocumentException error in the stream compression
            @since   2.1.3 (replaces the constructor without param compressionLevel)
        </member>
        <member name="M:iTextSharp.text.pdf.Type3Font.#ctor(iTextSharp.text.pdf.PdfWriter,System.Char[],System.Boolean)">
            Creates a Type3 font.
            @param writer the writer
            @param chars an array of chars corresponding to the glyphs used (not used, prisent for compability only)
            @param colorized if <CODE>true</CODE> the font may specify color, if <CODE>false</CODE> no color commands are allowed
            and only images as masks can be used
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.Type3Font.#ctor(iTextSharp.text.pdf.PdfWriter,System.Boolean)" -->
        <member name="M:iTextSharp.text.pdf.Type3Font.DefineGlyph(System.Char,System.Single,System.Single,System.Single,System.Single,System.Single)">
            Defines a glyph. If the character was already defined it will return the same content
            @param c the character to match this glyph.
            @param wx the advance this character will have
            @param llx the X lower left corner of the glyph bounding box. If the <CODE>colorize</CODE> option is
            <CODE>true</CODE> the value is ignored
            @param lly the Y lower left corner of the glyph bounding box. If the <CODE>colorize</CODE> option is
            <CODE>true</CODE> the value is ignored
            @param urx the X upper right corner of the glyph bounding box. If the <CODE>colorize</CODE> option is
            <CODE>true</CODE> the value is ignored
            @param ury the Y upper right corner of the glyph bounding box. If the <CODE>colorize</CODE> option is
            <CODE>true</CODE> the value is ignored
            @return a content where the glyph can be defined
        </member>
        <member name="M:iTextSharp.text.pdf.Type3Font.GetFullFontStream">
            Always returns null, because you can't get the FontStream of a Type3 font.
            @return  null
            @since   2.1.3
        </member>
        <member name="T:iTextSharp.text.pdf.SimpleNamedDestination">
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.SimpleNamedDestination.ExportToXML(System.Collections.Hashtable,System.IO.Stream,System.String,System.Boolean)" -->
        <member name="M:iTextSharp.text.pdf.SimpleNamedDestination.ExportToXML(System.Collections.Hashtable,System.IO.TextWriter,System.String,System.Boolean)">
            Exports the bookmarks to XML.
            @param names the names
            @param wrt the export destination. The writer is not closed
            @param encoding the encoding according to IANA conventions
            @param onlyASCII codes above 127 will always be escaped with &amp;#nn; if <CODE>true</CODE>,
            whatever the encoding
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.SimpleNamedDestination.ImportFromXML(System.IO.Stream)">
            Import the names from XML.
            @param inp the XML source. The stream is not closed
            @throws IOException on error
            @return the names
        </member>
        <member name="M:iTextSharp.text.pdf.SimpleNamedDestination.ImportFromXML(System.IO.TextReader)">
            Import the names from XML.
            @param inp the XML source. The reader is not closed
            @throws IOException on error
            @return the names
        </member>
        <member name="T:iTextSharp.text.pdf.ShadingColor">
            Implements a shading pattern as a <code>Color</code>.
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="T:iTextSharp.text.pdf.ExtendedColor">
            
             @author  Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="T:iTextSharp.text.Color">
            <summary>
            Base class for Color, serves as wrapper class for <see cref="T:System.Drawing.Color"/>
            to allow extension.
            </summary>
        </member>
        <member name="M:iTextSharp.text.Color.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constuctor for Color object.
            </summary>
            <param name="red">The red component value for the new Color structure. Valid values are 0 through 255.</param>
            <param name="green">The green component value for the new Color structure. Valid values are 0 through 255.</param>
            <param name="blue">The blue component value for the new Color structure. Valid values are 0 through 255.</param>
        </member>
        <member name="M:iTextSharp.text.Color.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constuctor for Color object.
            </summary>
            <param name="red">The red component value for the new Color structure. Valid values are 0 through 255.</param>
            <param name="green">The green component value for the new Color structure. Valid values are 0 through 255.</param>
            <param name="blue">The blue component value for the new Color structure. Valid values are 0 through 255.</param>
            <param name="alpha">The transparency component value for the new Color structure. Valid values are 0 through 255.</param>
        </member>
        <member name="M:iTextSharp.text.Color.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructor for Color object
            </summary>
            <param name="red">The red component value for the new Color structure. Valid values are 0 through 1.</param>
            <param name="green">The green component value for the new Color structure. Valid values are 0 through 1.</param>
            <param name="blue">The blue component value for the new Color structure. Valid values are 0 through 1.</param>
        </member>
        <member name="M:iTextSharp.text.Color.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructor for Color object
            </summary>
            <param name="red">The red component value for the new Color structure. Valid values are 0 through 1.</param>
            <param name="green">The green component value for the new Color structure. Valid values are 0 through 1.</param>
            <param name="blue">The blue component value for the new Color structure. Valid values are 0 through 1.</param>
            <param name="alpha">The transparency component value for the new Color structure. Valid values are 0 through 1.</param>
        </member>
        <member name="M:iTextSharp.text.Color.#ctor(System.Drawing.Color)">
            <summary>
            Constructor for Color object
            </summary>
            <param name="color">a Color object</param>
            <overloads>
            Has three overloads.
            </overloads>
        </member>
        <member name="P:iTextSharp.text.Color.R">
            <summary>
            Gets the red component value of this <see cref="T:System.Drawing.Color"/> structure.
            </summary>
            <value>The red component value of this <see cref="T:System.Drawing.Color"/> structure.</value>
        </member>
        <member name="P:iTextSharp.text.Color.G">
            <summary>
            Gets the green component value of this <see cref="T:System.Drawing.Color"/> structure.
            </summary>
            <value>The green component value of this <see cref="T:System.Drawing.Color"/> structure.</value>
        </member>
        <member name="P:iTextSharp.text.Color.B">
            <summary>
            Gets the blue component value of this <see cref="T:System.Drawing.Color"/> structure.
            </summary>
            <value>The blue component value of this <see cref="T:System.Drawing.Color"/> structure.</value>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfSmartCopy">
            PdfSmartCopy has the same functionality as PdfCopy,
            but when resources (such as fonts, images,...) are
            encountered, a reference to these resources is saved
            in a cache, so that they can be reused.
            This requires more memory, but reduces the file size
            of the resulting PDF document.
        </member>
        <member name="T:iTextSharp.text.pdf.PdfCopy">
            Make copies of PDF documents. Documents can be edited after reading and
            before writing them out.
            @author Mark Thompson
        </member>
        <member name="F:iTextSharp.text.pdf.PdfCopy.rotateContents">
            Holds value of property rotateContents. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopy.#ctor(iTextSharp.text.Document,System.IO.Stream)">
            Constructor
            @param document
            @param os outputstream
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopy.GetImportedPage(iTextSharp.text.pdf.PdfReader,System.Int32)">
            Grabs a page from the input document
            @param reader the reader of the document
            @param pageNumber which page to get
            @return the page
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopy.CopyIndirect(iTextSharp.text.pdf.PRIndirectReference)">
            Translate a PRIndirectReference to a PdfIndirectReference
            In addition, translates the object numbers, and copies the
            referenced object to the output file.
            NB: PRIndirectReferences (and PRIndirectObjects) really need to know what
            file they came from, because each file has its own namespace. The translation
            we do from their namespace to ours is *at best* heuristic, and guaranteed to
            fail under some circumstances.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopy.CopyDictionary(iTextSharp.text.pdf.PdfDictionary)">
            Translate a PRDictionary to a PdfDictionary. Also translate all of the
            objects contained in it.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopy.CopyStream(iTextSharp.text.pdf.PRStream)">
            Translate a PRStream to a PdfStream. The data part copies itself.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopy.CopyArray(iTextSharp.text.pdf.PdfArray)">
            Translate a PRArray to a PdfArray. Also translate all of the objects contained
            in it
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopy.CopyObject(iTextSharp.text.pdf.PdfObject)">
            Translate a PR-object to a Pdf-object
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopy.SetFromIPage(iTextSharp.text.pdf.PdfImportedPage)">
            convenience method. Given an importedpage, set our "globals"
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopy.SetFromReader(iTextSharp.text.pdf.PdfReader)">
            convenience method. Given a reader, set our "globals"
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopy.AddPage(iTextSharp.text.pdf.PdfImportedPage)">
            Add an imported page to our output
            @param iPage an imported page
            @throws IOException, BadPdfFormatException
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopy.AddPage(iTextSharp.text.Rectangle,System.Int32)">
            Adds a blank page.
            @param	rect The page dimension
            @param	rotation The rotation angle in degrees
            @since	2.1.5
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopy.CopyAcroForm(iTextSharp.text.pdf.PdfReader)">
            Copy the acroform for an input document. Note that you can only have one,
            we make no effort to merge them.
            @param reader The reader of the input file that is being copied
            @throws IOException, BadPdfFormatException
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfCopy.Close" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfCopy.CreatePageStamp(iTextSharp.text.pdf.PdfImportedPage)" -->
        <member name="P:iTextSharp.text.pdf.PdfCopy.RotateContents">
            Checks if the content is automatically adjusted to compensate
            the original page rotation.
            @return the auto-rotation status
            Flags the content to be automatically adjusted to compensate
            the original page rotation. The default is <CODE>true</CODE>.
            @param rotateContents <CODE>true</CODE> to set auto-rotation, <CODE>false</CODE>
            otherwise
        </member>
        <member name="T:iTextSharp.text.pdf.PdfCopy.IndirectReferences">
            This class holds information about indirect references, since they are
            renumbered by iText.
        </member>
        <member name="T:iTextSharp.text.pdf.PdfCopy.RefKey">
            A key to allow us to hash indirect references
        </member>
        <member name="T:iTextSharp.text.pdf.PdfContentByte">
            <CODE>PdfContentByte</CODE> is an object containing the user positioned
            text and graphic contents of a page. It knows how to apply the proper
            font encoding.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.ALIGN_CENTER">
            The alignement is center 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.ALIGN_LEFT">
            The alignement is left 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.ALIGN_RIGHT">
            The alignement is right 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.LINE_CAP_BUTT">
            A possible line cap value 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.LINE_CAP_ROUND">
            A possible line cap value 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.LINE_CAP_PROJECTING_SQUARE">
            A possible line cap value 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.LINE_JOIN_MITER">
            A possible line join value 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.LINE_JOIN_ROUND">
            A possible line join value 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.LINE_JOIN_BEVEL">
            A possible line join value 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.TEXT_RENDER_MODE_FILL">
            A possible text rendering value 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.TEXT_RENDER_MODE_STROKE">
            A possible text rendering value 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.TEXT_RENDER_MODE_FILL_STROKE">
            A possible text rendering value 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.TEXT_RENDER_MODE_INVISIBLE">
            A possible text rendering value 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.TEXT_RENDER_MODE_FILL_CLIP">
            A possible text rendering value 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.TEXT_RENDER_MODE_STROKE_CLIP">
            A possible text rendering value 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.TEXT_RENDER_MODE_FILL_STROKE_CLIP">
            A possible text rendering value 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.TEXT_RENDER_MODE_CLIP">
            A possible text rendering value 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.content">
            This is the actual content 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.writer">
            This is the writer 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.pdf">
            This is the PdfDocument 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.state">
            This is the GraphicState in use 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.layerDepth">
            The list were we save/restore the layer depth 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.stateList">
            The list were we save/restore the state 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.separator">
            The separator between commands.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.#ctor(iTextSharp.text.pdf.PdfWriter)">
             Constructs a new <CODE>PdfContentByte</CODE>-object.
            
             @param wr the writer associated to this content
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.ToString">
             Returns the <CODE>string</CODE> representation of this <CODE>PdfContentByte</CODE>-object.
            
             @return      a <CODE>string</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.ToPdf(iTextSharp.text.pdf.PdfWriter)">
            Returns the PDF representation of this <CODE>PdfContentByte</CODE>-object.
            
             @param writer the <CODE>PdfWriter</CODE>
             @return a <CODE>byte</CODE> array with the representation
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.Add(iTextSharp.text.pdf.PdfContentByte)">
             Adds the content of another <CODE>PdfContent</CODE>-object to this object.
            
             @param       other       another <CODE>PdfByteContent</CODE>-object
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfContentByte.SetFlatness(System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfContentByte.SetLineCap(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfContentByte.SetLineDash(System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfContentByte.SetLineDash(System.Single,System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfContentByte.SetLineDash(System.Single,System.Single,System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfContentByte.SetLineDash(System.Single[],System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfContentByte.SetLineJoin(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfContentByte.SetLineWidth(System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfContentByte.SetMiterLimit(System.Single)" -->
        <member name="M:iTextSharp.text.pdf.PdfContentByte.Clip">
            Modify the current clipping path by intersecting it with the current path, using the
            nonzero winding number rule to determine which regions lie inside the clipping
            path.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.EoClip">
            Modify the current clipping path by intersecting it with the current path, using the
            even-odd rule to determine which regions lie inside the clipping path.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetGrayFill(System.Single)">
             Changes the currentgray tint for filling paths (device dependent colors!).
             <P>
             Sets the color space to <B>DeviceGray</B> (or the <B>DefaultGray</B> color space),
             and sets the gray tint to use for filling paths.</P>
            
             @param   gray    a value between 0 (black) and 1 (white)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.ResetGrayFill">
            Changes the current gray tint for filling paths to black.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetGrayStroke(System.Single)">
             Changes the currentgray tint for stroking paths (device dependent colors!).
             <P>
             Sets the color space to <B>DeviceGray</B> (or the <B>DefaultGray</B> color space),
             and sets the gray tint to use for stroking paths.</P>
            
             @param   gray    a value between 0 (black) and 1 (white)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.ResetGrayStroke">
            Changes the current gray tint for stroking paths to black.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.HelperRGB(System.Single,System.Single,System.Single)">
            Helper to validate and write the RGB color components
            @param   red     the intensity of red. A value between 0 and 1
            @param   green   the intensity of green. A value between 0 and 1
            @param   blue    the intensity of blue. A value between 0 and 1
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetRGBColorFillF(System.Single,System.Single,System.Single)">
             Changes the current color for filling paths (device dependent colors!).
             <P>
             Sets the color space to <B>DeviceRGB</B> (or the <B>DefaultRGB</B> color space),
             and sets the color to use for filling paths.</P>
             <P>
             Following the PDF manual, each operand must be a number between 0 (minimum intensity) and
             1 (maximum intensity).</P>
            
             @param   red     the intensity of red. A value between 0 and 1
             @param   green   the intensity of green. A value between 0 and 1
             @param   blue    the intensity of blue. A value between 0 and 1
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.ResetRGBColorFill">
            Changes the current color for filling paths to black.
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfContentByte.SetRGBColorStrokeF(System.Single,System.Single,System.Single)" -->
        <member name="M:iTextSharp.text.pdf.PdfContentByte.ResetRGBColorStroke">
             Changes the current color for stroking paths to black.
            
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.HelperCMYK(System.Single,System.Single,System.Single,System.Single)">
             Helper to validate and write the CMYK color components.
            
             @param   cyan    the intensity of cyan. A value between 0 and 1
             @param   magenta the intensity of magenta. A value between 0 and 1
             @param   yellow  the intensity of yellow. A value between 0 and 1
             @param   black   the intensity of black. A value between 0 and 1
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetCMYKColorFillF(System.Single,System.Single,System.Single,System.Single)">
             Changes the current color for filling paths (device dependent colors!).
             <P>
             Sets the color space to <B>DeviceCMYK</B> (or the <B>DefaultCMYK</B> color space),
             and sets the color to use for filling paths.</P>
             <P>
             Following the PDF manual, each operand must be a number between 0 (no ink) and
             1 (maximum ink).</P>
            
             @param   cyan    the intensity of cyan. A value between 0 and 1
             @param   magenta the intensity of magenta. A value between 0 and 1
             @param   yellow  the intensity of yellow. A value between 0 and 1
             @param   black   the intensity of black. A value between 0 and 1
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.ResetCMYKColorFill">
             Changes the current color for filling paths to black.
            
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfContentByte.SetCMYKColorStrokeF(System.Single,System.Single,System.Single,System.Single)" -->
        <member name="M:iTextSharp.text.pdf.PdfContentByte.ResetCMYKColorStroke">
             Changes the current color for stroking paths to black.
            
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.MoveTo(System.Single,System.Single)">
             Move the current point <I>(x, y)</I>, omitting any connecting line segment.
            
             @param       x               new x-coordinate
             @param       y               new y-coordinate
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.LineTo(System.Single,System.Single)">
             Appends a straight line segment from the current point <I>(x, y)</I>. The new current
             point is <I>(x, y)</I>.
            
             @param       x               new x-coordinate
             @param       y               new y-coordinate
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.CurveTo(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
             Appends a Bêzier curve to the path, starting from the current point.
            
             @param       x1      x-coordinate of the first control point
             @param       y1      y-coordinate of the first control point
             @param       x2      x-coordinate of the second control point
             @param       y2      y-coordinate of the second control point
             @param       x3      x-coordinaat of the ending point (= new current point)
             @param       y3      y-coordinaat of the ending point (= new current point)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.CurveTo(System.Single,System.Single,System.Single,System.Single)">
             Appends a Bêzier curve to the path, starting from the current point.
            
             @param       x2      x-coordinate of the second control point
             @param       y2      y-coordinate of the second control point
             @param       x3      x-coordinaat of the ending point (= new current point)
             @param       y3      y-coordinaat of the ending point (= new current point)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.CurveFromTo(System.Single,System.Single,System.Single,System.Single)">
             Appends a Bêzier curve to the path, starting from the current point.
            
             @param       x1      x-coordinate of the first control point
             @param       y1      y-coordinate of the first control point
             @param       x3      x-coordinaat of the ending point (= new current point)
             @param       y3      y-coordinaat of the ending point (= new current point)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.Circle(System.Single,System.Single,System.Single)">
            Draws a circle. The endpoint will (x+r, y).
            
             @param x x center of circle
             @param y y center of circle
             @param r radius of circle
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.Rectangle(System.Single,System.Single,System.Single,System.Single)">
             Adds a rectangle to the current path.
            
             @param       x       x-coordinate of the starting point
             @param       y       y-coordinate of the starting point
             @param       w       width
             @param       h       height
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.VariableRectangle(iTextSharp.text.Rectangle)">
            Adds a variable width border to the current path.
            Only use if {@link com.lowagie.text.Rectangle#isUseVariableBorders() Rectangle.isUseVariableBorders}
            = true.
            @param rect a <CODE>Rectangle</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.Rectangle(iTextSharp.text.Rectangle)">
             Adds a border (complete or partially) to the current path..
            
             @param        rectangle        a <CODE>Rectangle</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.ClosePath">
            Closes the current subpath by appending a straight line segment from the current point
            to the starting point of the subpath.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.NewPath">
            Ends the path without filling or stroking it.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.Stroke">
            Strokes the path.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.ClosePathStroke">
            Closes the path and strokes it.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.Fill">
            Fills the path, using the non-zero winding number rule to determine the region to fill.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.EoFill">
            Fills the path, using the even-odd rule to determine the region to fill.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.FillStroke">
            Fills the path using the non-zero winding number rule to determine the region to fill and strokes it.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.ClosePathFillStroke">
            Closes the path, fills it using the non-zero winding number rule to determine the region to fill and strokes it.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.EoFillStroke">
            Fills the path, using the even-odd rule to determine the region to fill and strokes it.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.ClosePathEoFillStroke">
            Closes the path, fills it using the even-odd rule to determine the region to fill and strokes it.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.AddImage(iTextSharp.text.Image)">
            Adds an <CODE>Image</CODE> to the page. The <CODE>Image</CODE> must have
            absolute positioning.
            @param image the <CODE>Image</CODE> object
            @throws DocumentException if the <CODE>Image</CODE> does not have absolute positioning
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.AddImage(iTextSharp.text.Image,System.Boolean)">
            Adds an <CODE>Image</CODE> to the page. The <CODE>Image</CODE> must have
            absolute positioning. The image can be placed inline.
            @param image the <CODE>Image</CODE> object
            @param inlineImage <CODE>true</CODE> to place this image inline, <CODE>false</CODE> otherwise
            @throws DocumentException if the <CODE>Image</CODE> does not have absolute positioning
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.AddImage(iTextSharp.text.Image,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            Adds an <CODE>Image</CODE> to the page. The positioning of the <CODE>Image</CODE>
            is done with the transformation matrix. To position an <CODE>image</CODE> at (x,y)
            use AddImage(image, image_width, 0, 0, image_height, x, y).
            @param image the <CODE>Image</CODE> object
            @param a an element of the transformation matrix
            @param b an element of the transformation matrix
            @param c an element of the transformation matrix
            @param d an element of the transformation matrix
            @param e an element of the transformation matrix
            @param f an element of the transformation matrix
            @throws DocumentException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.AddImage(iTextSharp.text.Image,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            Adds an <CODE>Image</CODE> to the page. The positioning of the <CODE>Image</CODE>
            is done with the transformation matrix. To position an <CODE>image</CODE> at (x,y)
            use AddImage(image, image_width, 0, 0, image_height, x, y). The image can be placed inline.
            @param image the <CODE>Image</CODE> object
            @param a an element of the transformation matrix
            @param b an element of the transformation matrix
            @param c an element of the transformation matrix
            @param d an element of the transformation matrix
            @param e an element of the transformation matrix
            @param f an element of the transformation matrix
            @param inlineImage <CODE>true</CODE> to place this image inline, <CODE>false</CODE> otherwise
            @throws DocumentException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.Reset">
            Makes this <CODE>PdfContentByte</CODE> empty.
            Calls <code>reset( true )</code>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.Reset(System.Boolean)">
            Makes this <CODE>PdfContentByte</CODE> empty.
            @param validateContent will call <code>sanityCheck()</code> if true.
            @since 2.1.6
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.BeginText">
            Starts the writing of text.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.EndText">
            Ends the writing of text and makes the current font invalid.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SaveState">
            Saves the graphic state. <CODE>saveState</CODE> and
            <CODE>restoreState</CODE> must be balanced.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.RestoreState">
            Restores the graphic state. <CODE>saveState</CODE> and
            <CODE>restoreState</CODE> must be balanced.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetCharacterSpacing(System.Single)">
             Sets the character spacing parameter.
            
             @param       charSpace           a parameter
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetWordSpacing(System.Single)">
             Sets the word spacing parameter.
            
             @param       wordSpace           a parameter
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetHorizontalScaling(System.Single)">
             Sets the horizontal scaling parameter.
            
             @param       scale               a parameter
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetFontAndSize(iTextSharp.text.pdf.BaseFont,System.Single)">
             Set the font and the size for the subsequent text writing.
            
             @param bf the font
             @param size the font size in points
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetTextRenderingMode(System.Int32)">
             Sets the text rendering parameter.
            
             @param       rendering               a parameter
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetTextRise(System.Single)">
             Sets the text rise parameter.
             <P>
             This allows to write text in subscript or basescript mode.</P>
            
             @param       rise                a parameter
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.ShowText2(System.String)">
             A helper to insert into the content stream the <CODE>text</CODE>
             converted to bytes according to the font's encoding.
            
             @param text the text to write
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.ShowText(System.String)">
             Shows the <CODE>text</CODE>.
            
             @param text the text to write
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.GetKernArray(System.String,iTextSharp.text.pdf.BaseFont)">
            Constructs a kern array for a text in a certain font
            @param text the text
            @param font the font
            @return a PdfTextArray
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.ShowTextKerned(System.String)">
             Shows the <CODE>text</CODE> kerned.
            
             @param text the text to write
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.NewlineShowText(System.String)">
             Moves to the next line and shows <CODE>text</CODE>.
            
             @param text the text to write
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.NewlineShowText(System.Single,System.Single,System.String)">
             Moves to the next line and shows text string, using the given values of the character and word spacing parameters.
            
             @param       wordSpacing     a parameter
             @param       charSpacing     a parameter
             @param text the text to write
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetTextMatrix(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
             Changes the text matrix.
             <P>
             Remark: this operation also initializes the current point position.</P>
            
             @param       a           operand 1,1 in the matrix
             @param       b           operand 1,2 in the matrix
             @param       c           operand 2,1 in the matrix
             @param       d           operand 2,2 in the matrix
             @param       x           operand 3,1 in the matrix
             @param       y           operand 3,2 in the matrix
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetTextMatrix(System.Single,System.Single)">
             Changes the text matrix. The first four parameters are {1,0,0,1}.
             <P>
             Remark: this operation also initializes the current point position.</P>
            
             @param       x           operand 3,1 in the matrix
             @param       y           operand 3,2 in the matrix
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.MoveText(System.Single,System.Single)">
             Moves to the start of the next line, offset from the start of the current line.
            
             @param       x           x-coordinate of the new current point
             @param       y           y-coordinate of the new current point
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.MoveTextWithLeading(System.Single,System.Single)">
             Moves to the start of the next line, offset from the start of the current line.
             <P>
             As a side effect, this sets the leading parameter in the text state.</P>
            
             @param       x           offset of the new current point
             @param       y           y-coordinate of the new current point
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.NewlineText">
            Moves to the start of the next line.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.EscapeString(System.Byte[])">
             Escapes a <CODE>byte</CODE> array according to the PDF conventions.
            
             @param b the <CODE>byte</CODE> array to escape
             @return an escaped <CODE>byte</CODE> array
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.EscapeString(System.Byte[],iTextSharp.text.pdf.ByteBuffer)">
             Escapes a <CODE>byte</CODE> array according to the PDF conventions.
            
             @param b the <CODE>byte</CODE> array to escape
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.AddOutline(iTextSharp.text.pdf.PdfOutline,System.String)">
             Adds a named outline to the document.
            
             @param outline the outline
             @param name the name for the local destination
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.GetEffectiveStringWidth(System.String,System.Boolean)">
            Computes the width of the given string taking in account
            the current values of "Character spacing", "Word Spacing"
            and "Horizontal Scaling".
            The additional spacing is not computed for the last character
            of the string.
            @param text the string to get width of
            @param kerned the kerning option
            @return the width
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.ShowTextAligned(System.Int32,System.String,System.Single,System.Single,System.Single)">
            Shows text right, left or center aligned with rotation.
            @param alignment the alignment can be ALIGN_CENTER, ALIGN_RIGHT or ALIGN_LEFT
            @param text the text to show
            @param x the x pivot position
            @param y the y pivot position
            @param rotation the rotation to be applied in degrees counterclockwise
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.ShowTextAlignedKerned(System.Int32,System.String,System.Single,System.Single,System.Single)">
            Shows text kerned right, left or center aligned with rotation.
            @param alignment the alignment can be ALIGN_CENTER, ALIGN_RIGHT or ALIGN_LEFT
            @param text the text to show
            @param x the x pivot position
            @param y the y pivot position
            @param rotation the rotation to be applied in degrees counterclockwise
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.ConcatCTM(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
             Concatenate a matrix to the current transformation matrix.
             @param a an element of the transformation matrix
             @param b an element of the transformation matrix
             @param c an element of the transformation matrix
             @param d an element of the transformation matrix
             @param e an element of the transformation matrix
             @param f an element of the transformation matrix
            
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfContentByte.BezierArc(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)" -->
        <member name="M:iTextSharp.text.pdf.PdfContentByte.Arc(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
             Draws a partial ellipse inscribed within the rectangle x1,y1,x2,y2,
             starting at startAng degrees and covering extent degrees. Angles
             start with 0 to the right (+x) and increase counter-clockwise.
            
             @param x1 a corner of the enclosing rectangle
             @param y1 a corner of the enclosing rectangle
             @param x2 a corner of the enclosing rectangle
             @param y2 a corner of the enclosing rectangle
             @param startAng starting angle in degrees
             @param extent angle extent in degrees
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.Ellipse(System.Single,System.Single,System.Single,System.Single)">
             Draws an ellipse inscribed within the rectangle x1,y1,x2,y2.
            
             @param x1 a corner of the enclosing rectangle
             @param y1 a corner of the enclosing rectangle
             @param x2 a corner of the enclosing rectangle
             @param y2 a corner of the enclosing rectangle
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.CreatePattern(System.Single,System.Single,System.Single,System.Single)">
             Create a new colored tiling pattern.
            
             @param width the width of the pattern
             @param height the height of the pattern
             @param xstep the desired horizontal spacing between pattern cells.
             May be either positive or negative, but not zero.
             @param ystep the desired vertical spacing between pattern cells.
             May be either positive or negative, but not zero.
             @return the <CODE>PdfPatternPainter</CODE> where the pattern will be created
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.CreatePattern(System.Single,System.Single)">
            Create a new colored tiling pattern. Variables xstep and ystep are set to the same values
            of width and height.
            @param width the width of the pattern
            @param height the height of the pattern
            @return the <CODE>PdfPatternPainter</CODE> where the pattern will be created
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.CreatePattern(System.Single,System.Single,System.Single,System.Single,iTextSharp.text.Color)">
             Create a new uncolored tiling pattern.
            
             @param width the width of the pattern
             @param height the height of the pattern
             @param xstep the desired horizontal spacing between pattern cells.
             May be either positive or negative, but not zero.
             @param ystep the desired vertical spacing between pattern cells.
             May be either positive or negative, but not zero.
             @param color the default color. Can be <CODE>null</CODE>
             @return the <CODE>PdfPatternPainter</CODE> where the pattern will be created
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.CreatePattern(System.Single,System.Single,iTextSharp.text.Color)">
            Create a new uncolored tiling pattern.
            Variables xstep and ystep are set to the same values
            of width and height.
            @param width the width of the pattern
            @param height the height of the pattern
            @param color the default color. Can be <CODE>null</CODE>
            @return the <CODE>PdfPatternPainter</CODE> where the pattern will be created
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfContentByte.CreateTemplate(System.Single,System.Single)" -->
        <member name="M:iTextSharp.text.pdf.PdfContentByte.CreateAppearance(System.Single,System.Single)">
             Creates a new appearance to be used with form fields.
            
             @param width the bounding box width
             @param height the bounding box height
             @return the appearance created
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.AddPSXObject(iTextSharp.text.pdf.PdfPSXObject)">
             Adds a PostScript XObject to this content.
            
             @param psobject the object
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.AddTemplate(iTextSharp.text.pdf.PdfTemplate,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
             Adds a template to this content.
            
             @param template the template
             @param a an element of the transformation matrix
             @param b an element of the transformation matrix
             @param c an element of the transformation matrix
             @param d an element of the transformation matrix
             @param e an element of the transformation matrix
             @param f an element of the transformation matrix
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.AddTemplate(iTextSharp.text.pdf.PdfTemplate,System.Single,System.Single)">
             Adds a template to this content.
            
             @param template the template
             @param x the x location of this template
             @param y the y location of this template
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetCMYKColorFill(System.Int32,System.Int32,System.Int32,System.Int32)">
             Changes the current color for filling paths (device dependent colors!).
             <P>
             Sets the color space to <B>DeviceCMYK</B> (or the <B>DefaultCMYK</B> color space),
             and sets the color to use for filling paths.</P>
             <P>
             This method is described in the 'Portable Document Format Reference Manual version 1.3'
             section 8.5.2.1 (page 331).</P>
             <P>
             Following the PDF manual, each operand must be a number between 0 (no ink) and
             1 (maximum ink). This method however accepts only ints between 0x00 and 0xFF.</P>
            
             @param cyan the intensity of cyan
             @param magenta the intensity of magenta
             @param yellow the intensity of yellow
             @param black the intensity of black
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetCMYKColorStroke(System.Int32,System.Int32,System.Int32,System.Int32)">
             Changes the current color for stroking paths (device dependent colors!).
             <P>
             Sets the color space to <B>DeviceCMYK</B> (or the <B>DefaultCMYK</B> color space),
             and sets the color to use for stroking paths.</P>
             <P>
             This method is described in the 'Portable Document Format Reference Manual version 1.3'
             section 8.5.2.1 (page 331).</P>
             Following the PDF manual, each operand must be a number between 0 (miniumum intensity) and
             1 (maximum intensity). This method however accepts only ints between 0x00 and 0xFF.
            
             @param cyan the intensity of red
             @param magenta the intensity of green
             @param yellow the intensity of blue
             @param black the intensity of black
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetRGBColorFill(System.Int32,System.Int32,System.Int32)">
             Changes the current color for filling paths (device dependent colors!).
             <P>
             Sets the color space to <B>DeviceRGB</B> (or the <B>DefaultRGB</B> color space),
             and sets the color to use for filling paths.</P>
             <P>
             This method is described in the 'Portable Document Format Reference Manual version 1.3'
             section 8.5.2.1 (page 331).</P>
             <P>
             Following the PDF manual, each operand must be a number between 0 (miniumum intensity) and
             1 (maximum intensity). This method however accepts only ints between 0x00 and 0xFF.</P>
            
             @param red the intensity of red
             @param green the intensity of green
             @param blue the intensity of blue
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetRGBColorStroke(System.Int32,System.Int32,System.Int32)">
             Changes the current color for stroking paths (device dependent colors!).
             <P>
             Sets the color space to <B>DeviceRGB</B> (or the <B>DefaultRGB</B> color space),
             and sets the color to use for stroking paths.</P>
             <P>
             This method is described in the 'Portable Document Format Reference Manual version 1.3'
             section 8.5.2.1 (page 331).</P>
             Following the PDF manual, each operand must be a number between 0 (miniumum intensity) and
             1 (maximum intensity). This method however accepts only ints between 0x00 and 0xFF.
            
             @param red the intensity of red
             @param green the intensity of green
             @param blue the intensity of blue
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetColorStroke(iTextSharp.text.Color)">
            Sets the stroke color. <CODE>color</CODE> can be an
            <CODE>ExtendedColor</CODE>.
            @param color the color
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetColorFill(iTextSharp.text.Color)">
            Sets the fill color. <CODE>color</CODE> can be an
            <CODE>ExtendedColor</CODE>.
            @param color the color
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetColorFill(iTextSharp.text.pdf.PdfSpotColor,System.Single)">
            Sets the fill color to a spot color.
            @param sp the spot color
            @param tint the tint for the spot color. 0 is no color and 1
            is 100% color
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetColorStroke(iTextSharp.text.pdf.PdfSpotColor,System.Single)">
            Sets the stroke color to a spot color.
            @param sp the spot color
            @param tint the tint for the spot color. 0 is no color and 1
            is 100% color
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetPatternFill(iTextSharp.text.pdf.PdfPatternPainter)">
            Sets the fill color to a pattern. The pattern can be
            colored or uncolored.
            @param p the pattern
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.OutputColorNumbers(iTextSharp.text.Color,System.Single)">
            Outputs the color values to the content.
            @param color The color
            @param tint the tint if it is a spot color, ignored otherwise
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetPatternFill(iTextSharp.text.pdf.PdfPatternPainter,iTextSharp.text.Color)">
            Sets the fill color to an uncolored pattern.
            @param p the pattern
            @param color the color of the pattern
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetPatternFill(iTextSharp.text.pdf.PdfPatternPainter,iTextSharp.text.Color,System.Single)">
            Sets the fill color to an uncolored pattern.
            @param p the pattern
            @param color the color of the pattern
            @param tint the tint if the color is a spot color, ignored otherwise
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetPatternStroke(iTextSharp.text.pdf.PdfPatternPainter,iTextSharp.text.Color)">
            Sets the stroke color to an uncolored pattern.
            @param p the pattern
            @param color the color of the pattern
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetPatternStroke(iTextSharp.text.pdf.PdfPatternPainter,iTextSharp.text.Color,System.Single)">
            Sets the stroke color to an uncolored pattern.
            @param p the pattern
            @param color the color of the pattern
            @param tint the tint if the color is a spot color, ignored otherwise
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetPatternStroke(iTextSharp.text.pdf.PdfPatternPainter)">
            Sets the stroke color to a pattern. The pattern can be
            colored or uncolored.
            @param p the pattern
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.PaintShading(iTextSharp.text.pdf.PdfShading)">
            Paints using a shading object. 
            @param shading the shading object
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.PaintShading(iTextSharp.text.pdf.PdfShadingPattern)">
            Paints using a shading pattern. 
            @param shading the shading pattern
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetShadingFill(iTextSharp.text.pdf.PdfShadingPattern)">
            Sets the shading fill pattern.
            @param shading the shading pattern
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetShadingStroke(iTextSharp.text.pdf.PdfShadingPattern)">
            Sets the shading stroke pattern
            @param shading the shading pattern
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.CheckWriter">
            Check if we have a valid PdfWriter.
            
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.ShowText(iTextSharp.text.pdf.PdfTextArray)">
            Show an array of text.
            @param text array of text
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.LocalGoto(System.String,System.Single,System.Single,System.Single,System.Single)">
            Implements a link to other part of the document. The jump will
            be made to a local destination with the same name, that must exist.
            @param name the name for this link
            @param llx the lower left x corner of the activation area
            @param lly the lower left y corner of the activation area
            @param urx the upper right x corner of the activation area
            @param ury the upper right y corner of the activation area
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.LocalDestination(System.String,iTextSharp.text.pdf.PdfDestination)">
            The local destination to where a local goto with the same
            name will jump.
            @param name the name of this local destination
            @param destination the <CODE>PdfDestination</CODE> with the jump coordinates
            @return <CODE>true</CODE> if the local destination was added,
            <CODE>false</CODE> if a local destination with the same name
            already exists
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.RemoteGoto(System.String,System.String,System.Single,System.Single,System.Single,System.Single)">
            Implements a link to another document.
            @param filename the filename for the remote document
            @param name the name to jump to
            @param llx the lower left x corner of the activation area
            @param lly the lower left y corner of the activation area
            @param urx the upper right x corner of the activation area
            @param ury the upper right y corner of the activation area
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.RemoteGoto(System.String,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            Implements a link to another document.
            @param filename the filename for the remote document
            @param page the page to jump to
            @param llx the lower left x corner of the activation area
            @param lly the lower left y corner of the activation area
            @param urx the upper right x corner of the activation area
            @param ury the upper right y corner of the activation area
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.RoundRectangle(System.Single,System.Single,System.Single,System.Single,System.Single)">
             Adds a round rectangle to the current path.
            
             @param x x-coordinate of the starting point
             @param y y-coordinate of the starting point
             @param w width
             @param h height
             @param r radius of the arc corner
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetAction(iTextSharp.text.pdf.PdfAction,System.Single,System.Single,System.Single,System.Single)">
            Implements an action in an area.
            @param action the <CODE>PdfAction</CODE>
            @param llx the lower left x corner of the activation area
            @param lly the lower left y corner of the activation area
            @param urx the upper right x corner of the activation area
            @param ury the upper right y corner of the activation area
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetLiteral(System.String)">
            Outputs a <CODE>string</CODE> directly to the content.
            @param s the <CODE>string</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetLiteral(System.Char)">
            Outputs a <CODE>char</CODE> directly to the content.
            @param c the <CODE>char</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetLiteral(System.Single)">
            Outputs a <CODE>float</CODE> directly to the content.
            @param n the <CODE>float</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.CheckNoPattern(iTextSharp.text.pdf.PdfTemplate)">
            Throws an error if it is a pattern.
            @param t the object to check
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.DrawRadioField(System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            Draws a TextField.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.DrawTextField(System.Single,System.Single,System.Single,System.Single)">
            Draws a TextField.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.DrawButton(System.Single,System.Single,System.Single,System.Single,System.String,iTextSharp.text.pdf.BaseFont,System.Single)">
            Draws a button.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetGState(iTextSharp.text.pdf.PdfGState)">
            Sets the graphic state
            @param gstate the graphic state
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfContentByte.BeginLayer(iTextSharp.text.pdf.IPdfOCG)" -->
        <member name="M:iTextSharp.text.pdf.PdfContentByte.EndLayer">
            Ends a layer controled graphic block. It will end the most recent open block.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetDefaultColorspace(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfObject)">
            Sets the default colorspace.
            @param name the name of the colorspace. It can be <CODE>PdfName.DEFAULTGRAY</CODE>, <CODE>PdfName.DEFAULTRGB</CODE>
            or <CODE>PdfName.DEFAULTCMYK</CODE>
            @param obj the colorspace. A <CODE>null</CODE> or <CODE>PdfNull</CODE> removes any colorspace with the same name
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.BeginMarkedContentSequence(iTextSharp.text.pdf.PdfStructureElement)">
            Begins a marked content sequence. This sequence will be tagged with the structure <CODE>struc</CODE>.
            The same structure can be used several times to connect text that belongs to the same logical segment
            but is in a different location, like the same paragraph crossing to another page, for example.
            @param struc the tagging structure
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.EndMarkedContentSequence">
            Ends a marked content sequence
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.BeginMarkedContentSequence(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfDictionary,System.Boolean)">
            Begins a marked content sequence. If property is <CODE>null</CODE> the mark will be of the type
            <CODE>BMC</CODE> otherwise it will be <CODE>BDC</CODE>.
            @param tag the tag
            @param property the property
            @param inline <CODE>true</CODE> to include the property in the content or <CODE>false</CODE>
            to include the property in the resource dictionary with the possibility of reusing
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.BeginMarkedContentSequence(iTextSharp.text.pdf.PdfName)">
            This is just a shorthand to <CODE>beginMarkedContentSequence(tag, null, false)</CODE>.
            @param tag the tag
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SanityCheck">
            Checks for any dangling state: Mismatched save/restore state, begin/end text,
            begin/end layer, or begin/end marked content sequence.
            If found, this function will throw.  This function is called automatically
            during a reset() (from Document.newPage() for example), and before writing 
            itself out in toPdf().
            One possible cause: not calling myPdfGraphics2D.dispose() will leave dangling
                                saveState() calls.
            @since 2.1.6
            @throws IllegalPdfSyntaxException (a runtime exception)
        </member>
        <member name="P:iTextSharp.text.pdf.PdfContentByte.InternalBuffer">
            Gets the internal buffer.
            @return the internal buffer
        </member>
        <member name="P:iTextSharp.text.pdf.PdfContentByte.XTLM">
             Gets the x position of the text line matrix.
            
             @return the x position of the text line matrix
        </member>
        <member name="P:iTextSharp.text.pdf.PdfContentByte.YTLM">
             Gets the y position of the text line matrix.
            
             @return the y position of the text line matrix
        </member>
        <member name="P:iTextSharp.text.pdf.PdfContentByte.CharacterSpacing">
             Gets the current character spacing.
            
             @return the current character spacing
        </member>
        <member name="P:iTextSharp.text.pdf.PdfContentByte.WordSpacing">
             Gets the current word spacing.
            
             @return the current word spacing
        </member>
        <member name="P:iTextSharp.text.pdf.PdfContentByte.HorizontalScaling">
             Gets the current character spacing.
            
             @return the current character spacing
        </member>
        <member name="P:iTextSharp.text.pdf.PdfContentByte.Leading">
             Gets the current text leading.
            
             @return the current text leading
        </member>
        <member name="P:iTextSharp.text.pdf.PdfContentByte.Size">
             Gets the size of this content.
            
             @return the size of the content
        </member>
        <member name="P:iTextSharp.text.pdf.PdfContentByte.RootOutline">
             Gets the root outline.
            
             @return the root outline
        </member>
        <member name="P:iTextSharp.text.pdf.PdfContentByte.PdfWriter">
            Gets the <CODE>PdfWriter</CODE> in use by this object.
            @return the <CODE>PdfWriter</CODE> in use by this object
        </member>
        <member name="P:iTextSharp.text.pdf.PdfContentByte.PdfDocument">
            Gets the <CODE>PdfDocument</CODE> in use by this object.
            @return the <CODE>PdfDocument</CODE> in use by this object
        </member>
        <member name="P:iTextSharp.text.pdf.PdfContentByte.Duplicate">
             Gets a duplicate of this <CODE>PdfContentByte</CODE>. All
             the members are copied by reference but the buffer stays different.
            
             @return a copy of this <CODE>PdfContentByte</CODE>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfContentByte.GraphicState">
            This class keeps the graphic state of the current page
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.GraphicState.fontDetails">
            This is the font in use 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.GraphicState.colorDetails">
            This is the color in use 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.GraphicState.size">
            This is the font size in use 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.GraphicState.xTLM">
            The x position of the text line matrix. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.GraphicState.yTLM">
            The y position of the text line matrix. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.GraphicState.leading">
            The current text leading. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.GraphicState.scale">
            The current horizontal scaling 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.GraphicState.charSpace">
            The current character spacing 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.GraphicState.wordSpace">
            The current word spacing 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopy.StampContent.#ctor(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.pdf.PageResources)">
            Creates a new instance of StampContent 
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCopy.StampContent.Duplicate">
             Gets a duplicate of this <CODE>PdfContentByte</CODE>. All
             the members are copied by reference but the buffer stays different.
            
             @return a copy of this <CODE>PdfContentByte</CODE>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfSmartCopy.streamMap">
            the cache with the streams and references. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSmartCopy.#ctor(iTextSharp.text.Document,System.IO.Stream)">
            Creates a PdfSmartCopy instance. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSmartCopy.CopyIndirect(iTextSharp.text.pdf.PRIndirectReference)">
            Translate a PRIndirectReference to a PdfIndirectReference
            In addition, translates the object numbers, and copies the
            referenced object to the output file if it wasn't available
            in the cache yet. If it's in the cache, the reference to
            the already used stream is returned.
            
            NB: PRIndirectReferences (and PRIndirectObjects) really need to know what
            file they came from, because each file has its own namespace. The translation
            we do from their namespace to ours is *at best* heuristic, and guaranteed to
            fail under some circumstances.
        </member>
        <member name="T:iTextSharp.text.pdf.PdfPageEventHelper">
             Helps the use of <CODE>PdfPageEvent</CODE> by implementing all the interface methods.
             A class can extend <CODE>PdfPageEventHelper</CODE> and only implement the
             needed methods.
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="T:iTextSharp.text.pdf.IPdfPageEvent">
             Allows a class to catch several document events.
            
             @author  Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="M:iTextSharp.text.pdf.IPdfPageEvent.OnOpenDocument(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document)">
             Called when the document is opened.
            
             @param writer the <CODE>PdfWriter</CODE> for this document
             @param document the document
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.IPdfPageEvent.OnStartPage(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document)" -->
        <member name="M:iTextSharp.text.pdf.IPdfPageEvent.OnEndPage(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document)">
             Called when a page is finished, just before being written to the document.
            
             @param writer the <CODE>PdfWriter</CODE> for this document
             @param document the document
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.IPdfPageEvent.OnCloseDocument(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.IPdfPageEvent.OnParagraph(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.IPdfPageEvent.OnParagraphEnd(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.IPdfPageEvent.OnChapter(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Single,iTextSharp.text.Paragraph)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.IPdfPageEvent.OnChapterEnd(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.IPdfPageEvent.OnSection(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Single,System.Int32,iTextSharp.text.Paragraph)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.IPdfPageEvent.OnSectionEnd(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.IPdfPageEvent.OnGenericTag(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,iTextSharp.text.Rectangle,System.String)" -->
        <member name="M:iTextSharp.text.pdf.PdfPageEventHelper.OnOpenDocument(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document)">
             Called when the document is opened.
            
             @param writer the <CODE>PdfWriter</CODE> for this document
             @param document the document
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfPageEventHelper.OnStartPage(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document)" -->
        <member name="M:iTextSharp.text.pdf.PdfPageEventHelper.OnEndPage(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document)">
             Called when a page is finished, just before being written to the document.
            
             @param writer the <CODE>PdfWriter</CODE> for this document
             @param document the document
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfPageEventHelper.OnCloseDocument(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfPageEventHelper.OnParagraph(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfPageEventHelper.OnParagraphEnd(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfPageEventHelper.OnChapter(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Single,iTextSharp.text.Paragraph)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfPageEventHelper.OnChapterEnd(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfPageEventHelper.OnSection(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Single,System.Int32,iTextSharp.text.Paragraph)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfPageEventHelper.OnSectionEnd(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfPageEventHelper.OnGenericTag(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,iTextSharp.text.Rectangle,System.String)" -->
        <member name="T:iTextSharp.text.pdf.LZWDecoder">
             A class for performing LZW decoding.
            
            
        </member>
        <member name="M:iTextSharp.text.pdf.LZWDecoder.Decode(System.Byte[],System.IO.Stream)">
             Method to decode LZW compressed data.
            
             @param data            The compressed data.
             @param uncompData      Array to return the uncompressed data in.
        </member>
        <member name="M:iTextSharp.text.pdf.LZWDecoder.InitializeStringTable">
            Initialize the string table.
        </member>
        <member name="M:iTextSharp.text.pdf.LZWDecoder.WriteString(System.Byte[])">
            Write out the string just uncompressed.
        </member>
        <member name="M:iTextSharp.text.pdf.LZWDecoder.AddStringToTable(System.Byte[],System.Byte)">
            Add a new string to the string table.
        </member>
        <member name="M:iTextSharp.text.pdf.LZWDecoder.AddStringToTable(System.Byte[])">
            Add a new string to the string table.
        </member>
        <member name="M:iTextSharp.text.pdf.LZWDecoder.ComposeString(System.Byte[],System.Byte)">
            Append <code>newstring</code> to the end of <code>oldstring</code>.
        </member>
        <member name="T:iTextSharp.text.pdf.GrayColor">
            
             @author  Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="T:iTextSharp.text.pdf.draw.DottedLineSeparator">
            Element that draws a dotted line from left to right.
            Can be added directly to a document or column.
            Can also be used to create a separator chunk.
            @since   2.1.2 
        </member>
        <member name="F:iTextSharp.text.pdf.draw.DottedLineSeparator.gap">
            the gap between the dots. 
        </member>
        <member name="M:iTextSharp.text.pdf.draw.DottedLineSeparator.Draw(iTextSharp.text.pdf.PdfContentByte,System.Single,System.Single,System.Single,System.Single,System.Single)">
            @see com.lowagie.text.pdf.draw.DrawInterface#draw(com.lowagie.text.pdf.PdfContentByte, float, float, float, float, float)
        </member>
        <member name="P:iTextSharp.text.pdf.draw.DottedLineSeparator.Gap">
            Setter for the gap between the center of the dots of the dotted line.
            @param   gap the gap between the center of the dots
        </member>
        <member name="T:iTextSharp.text.pdf.crypto.IVGenerator">
            An initialization vector generator for a CBC block encryption. It's a random generator based on RC4.
            @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="M:iTextSharp.text.pdf.crypto.IVGenerator.#ctor">
            Creates a new instance of IVGenerator 
        </member>
        <member name="M:iTextSharp.text.pdf.crypto.IVGenerator.GetIV">
            Gets a 16 byte random initialization vector.
            @return a 16 byte random initialization vector
        </member>
        <member name="M:iTextSharp.text.pdf.crypto.IVGenerator.GetIV(System.Int32)">
            Gets a random initialization vector.
            @param len the length of the initialization vector
            @return a random initialization vector
        </member>
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.pdf.CFFFontSubset" -->
        <member name="M:iTextSharp.text.pdf.CFFFont.GetEntireIndexRange(System.Int32)">
            a utility that creates a range item for an entire index
            
             @param indexOffset where the index is
             @return a range item representing the entire index
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFont.GetCID(System.String)">
            get a single CID font. The PDF architecture (1.4)
            supports 16-bit strings only with CID CFF fonts, not
            in Type-1 CFF fonts, so we convert the font to CID if
            it is in the Type-1 format.
            Two other tasks that we need to do are to select
            only a single font from the CFF package (this again is
            a PDF restriction) and to subset the CharStrings glyph
            description.
        </member>
        <member name="F:iTextSharp.text.pdf.CFFFont.buf">
            A random Access File or an array
            (contributed by orly manor)
        </member>
        <member name="T:iTextSharp.text.pdf.CFFFont.Item">
            List items for the linked list that builds the new CID font.
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFont.Item.Increment(System.Int32[])">
            remember the current offset and increment by item's size in bytes. 
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFont.Item.Emit(System.Byte[])">
            Emit the byte stream for this item. 
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFont.Item.Xref">
            Fix up cross references to this item (applies only to markers). 
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFont.OffsetItem.Set(System.Int32)">
            set the value of an offset item that was initially unknown.
            It will be fixed up latex by a call to xref on some marker.
        </member>
        <member name="T:iTextSharp.text.pdf.CFFFont.RangeItem">
            A range item.
        </member>
        <member name="T:iTextSharp.text.pdf.CFFFont.IndexOffsetItem">
            An index-offset item for the list.
            The size denotes the required size in the CFF. A positive
            value means that we need a specific size in bytes (for offset arrays)
            and a negative value means that this is a dict item that uses a
            variable-size representation.
        </member>
        <member name="T:iTextSharp.text.pdf.CFFFont.SubrMarkerItem">
             
             @author orly manor
            
             TODO To change the template for this generated type comment go to
             Window - Preferences - Java - Code Generation - Code and Comments
        </member>
        <member name="T:iTextSharp.text.pdf.CFFFont.DictOffsetItem">
            an unknown offset in a dictionary for the list.
            We will fix up the offset later; for now, assume it's large.
        </member>
        <member name="T:iTextSharp.text.pdf.CFFFont.UInt24Item">
            Card24 item.
        </member>
        <member name="T:iTextSharp.text.pdf.CFFFont.UInt32Item">
            Card32 item.
        </member>
        <member name="T:iTextSharp.text.pdf.CFFFont.UInt16Item">
            A SID or Card16 item.
        </member>
        <member name="T:iTextSharp.text.pdf.CFFFont.UInt8Item">
            A Card8 item.
        </member>
        <member name="T:iTextSharp.text.pdf.CFFFont.DictNumberItem">
            A dictionary number on the list.
            This implementation is inefficient: it doesn't use the variable-length
            representation.
        </member>
        <member name="T:iTextSharp.text.pdf.CFFFont.MarkerItem">
            An offset-marker item for the list.
            It is used to mark an offset and to set the offset list item.
        </member>
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.pdf.CFFFont.Font" -->
        <member name="F:iTextSharp.text.pdf.CFFFontSubset.ENDCHAR_OP">
            Operator codes for unused  CharStrings and unused local and global Subrs
        </member>
        <member name="F:iTextSharp.text.pdf.CFFFontSubset.SubrsFunctions">
            The Strings in this array represent Type1/Type2 operator names
        </member>
        <member name="F:iTextSharp.text.pdf.CFFFontSubset.SubrsEscapeFuncs">
            The Strings in this array represent Type1/Type2 escape operator names
        </member>
        <member name="F:iTextSharp.text.pdf.CFFFontSubset.GlyphsUsed">
            A HashMap containing the glyphs used in the text after being converted
            to glyph number by the CMap 
        </member>
        <member name="F:iTextSharp.text.pdf.CFFFontSubset.glyphsInList">
            The GlyphsUsed keys as an ArrayList
        </member>
        <member name="F:iTextSharp.text.pdf.CFFFontSubset.FDArrayUsed">
            A HashMap for keeping the FDArrays being used by the font
        </member>
        <member name="F:iTextSharp.text.pdf.CFFFontSubset.hSubrsUsed">
            A HashMaps array for keeping the subroutines used in each FontDict
        </member>
        <member name="F:iTextSharp.text.pdf.CFFFontSubset.lSubrsUsed">
            The SubroutinesUsed HashMaps as ArrayLists
        </member>
        <member name="F:iTextSharp.text.pdf.CFFFontSubset.hGSubrsUsed">
            A HashMap for keeping the Global subroutines used in the font
        </member>
        <member name="F:iTextSharp.text.pdf.CFFFontSubset.lGSubrsUsed">
            The Global SubroutinesUsed HashMaps as ArrayLists
        </member>
        <member name="F:iTextSharp.text.pdf.CFFFontSubset.hSubrsUsedNonCID">
            A HashMap for keeping the subroutines used in a non-cid font
        </member>
        <member name="F:iTextSharp.text.pdf.CFFFontSubset.lSubrsUsedNonCID">
            The SubroutinesUsed HashMap as ArrayList
        </member>
        <member name="F:iTextSharp.text.pdf.CFFFontSubset.NewLSubrsIndex">
            An array of the new Indexs for the local Subr. One index for each FontDict
        </member>
        <member name="F:iTextSharp.text.pdf.CFFFontSubset.NewSubrsIndexNonCID">
            The new subroutines index for a non-cid font
        </member>
        <member name="F:iTextSharp.text.pdf.CFFFontSubset.NewGSubrsIndex">
            The new global subroutines index of the font
        </member>
        <member name="F:iTextSharp.text.pdf.CFFFontSubset.NewCharStringsIndex">
            The new CharString of the font
        </member>
        <member name="F:iTextSharp.text.pdf.CFFFontSubset.GBias">
            The bias for the global subroutines
        </member>
        <member name="F:iTextSharp.text.pdf.CFFFontSubset.OutputList">
            The linked list for generating the new font stream
        </member>
        <member name="F:iTextSharp.text.pdf.CFFFontSubset.NumOfHints">
            Number of arguments to the stem operators in a subroutine calculated recursivly
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.#ctor(iTextSharp.text.pdf.RandomAccessFileOrArray,System.Collections.Hashtable)">
            C'tor for CFFFontSubset
            @param rf - The font file
            @param GlyphsUsed - a HashMap that contains the glyph used in the subset 
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.CountCharset(System.Int32,System.Int32)">
            Calculates the length of the charset according to its format
            @param Offset The Charset Offset
            @param NumofGlyphs Number of glyphs in the font
            @return the length of the Charset
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.CountRange(System.Int32,System.Int32)">
            Function calculates the number of ranges in the Charset
            @param NumofGlyphs The number of glyphs in the font
            @param Type The format of the Charset
            @return The number of ranges in the Charset data structure
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.ReadFDSelect(System.Int32)">
            Read the FDSelect of the font and compute the array and its length
            @param Font The index of the font being processed
            @return The Processed FDSelect of the font
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.BuildFDArrayUsed(System.Int32)">
            Function reads the FDSelect and builds the FDArrayUsed HashMap According to the glyphs used
            @param Font the Number of font being processed
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.ReadFDArray(System.Int32)">
            Read the FDArray count, offsize and Offset array
            @param Font
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.Process(System.String)">
            The Process function extracts one font out of the CFF file and returns a
            subset version of the original.
            @param fontName - The name of the font to be taken out of the CFF
            @return The new font stream
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.CalcBias(System.Int32,System.Int32)">
            Function calcs bias according to the CharString type and the count
            of the subrs
            @param Offset The offset to the relevent subrs index
            @param Font the font
            @return The calculated Bias
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.BuildNewCharString(System.Int32)">
            Function uses BuildNewIndex to create the new index of the subset charstrings
             @param FontIndex the font
             @throws IOException
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.CFFFontSubset.BuildNewLGSubrs(System.Int32)" -->
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.BuildFDSubrsOffsets(System.Int32,System.Int32)">
            The function finds for the FD array processed the local subr offset and its 
            offset array.  
            @param Font the font
            @param FD The FDARRAY processed
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.CFFFontSubset.BuildSubrUsed(System.Int32,System.Int32,System.Int32,System.Int32[],System.Collections.Hashtable,System.Collections.ArrayList)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.CFFFontSubset.BuildGSubrsUsed(System.Int32)" -->
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.ReadASubr(System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.Hashtable,System.Collections.ArrayList,System.Int32[])">
            The function reads a subrs (glyph info) between begin and end.
            Adds calls to a Lsubr to the hSubr and lSubrs.
            Adds calls to a Gsubr to the hGSubr and lGSubrs.
            @param begin the start point of the subr
            @param end the end point of the subr
            @param GBias the bias of the Global Subrs
            @param LBias the bias of the Local Subrs
            @param hSubr the HashMap for the lSubrs
            @param lSubr the ArrayList for the lSubrs
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.HandelStack">
            Function Checks how the current operator effects the run time stack after being run 
            An operator may increase or decrease the stack size
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.StackOpp">
            Function checks the key and return the change to the stack after the operator
            @return The change in the stack. 2-> flush the stack
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.EmptyStack">
             Empty the Type2 Stack
            
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.PopStack">
             Pop one element from the stack 
            
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.PushStack">
             Add an item to the stack
            
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.ReadCommand">
            The function reads the next command after the file pointer is set
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.CalcHints(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[])">
            The function reads the subroutine and returns the number of the hint in it.
            If a call to another subroutine is found the function calls recursively.
            @param begin the start point of the subr
            @param end the end point of the subr
            @param LBias the bias of the Local Subrs
            @param GBias the bias of the Global Subrs
            @param LSubrsOffsets The Offsets array of the subroutines
            @return The number of hints in the subroutine read.
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.BuildNewIndex(System.Int32[],System.Collections.Hashtable,System.Byte)">
            Function builds the new offset array, object array and assembles the index.
            used for creating the glyph and subrs subsetted index 
            @param Offsets the offset array of the original index  
            @param Used the hashmap of the used objects
            @param OperatorForUnusedEntries the operator inserted into the data stream for unused entries
            @return the new index subset version 
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.AssembleIndex(System.Int32[],System.Byte[])">
            Function creates the new index, inserting the count,offsetsize,offset array
            and object array.
            @param NewOffsets the subsetted offset array
            @param NewObjects the subsetted object array
            @return the new index created
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.BuildNewFile(System.Int32)">
            The function builds the new output stream according to the subset process
            @param Font the font
            @return the subseted font stream
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.CopyHeader">
            Function Copies the header from the original fileto the output list
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.BuildIndexHeader(System.Int32,System.Int32,System.Int32)">
            Function Build the header of an index
            @param Count the count field of the index
            @param Offsize the offsize field of the index
            @param First the first offset of the index
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.CreateKeys(iTextSharp.text.pdf.CFFFont.OffsetItem,iTextSharp.text.pdf.CFFFont.OffsetItem,iTextSharp.text.pdf.CFFFont.OffsetItem,iTextSharp.text.pdf.CFFFont.OffsetItem)">
            Function adds the keys into the TopDict
            @param fdarrayRef OffsetItem for the FDArray
            @param fdselectRef OffsetItem for the FDSelect
            @param charsetRef OffsetItem for the CharSet
            @param charstringsRef OffsetItem for the CharString
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.CreateNewStringIndex(System.Int32)">
            Function takes the original string item and adds the new strings
            to accomodate the CID rules
            @param Font the font
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.CreateFDSelect(iTextSharp.text.pdf.CFFFont.OffsetItem,System.Int32)">
            Function creates new FDSelect for non-CID fonts.
            The FDSelect built uses a single range for all glyphs
            @param fdselectRef OffsetItem for the FDSelect
            @param nglyphs the number of glyphs in the font
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.CreateCharset(iTextSharp.text.pdf.CFFFont.OffsetItem,System.Int32)">
            Function creates new CharSet for non-CID fonts.
            The CharSet built uses a single range for all glyphs
            @param charsetRef OffsetItem for the CharSet
            @param nglyphs the number of glyphs in the font
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.CreateFDArray(iTextSharp.text.pdf.CFFFont.OffsetItem,iTextSharp.text.pdf.CFFFont.OffsetItem,System.Int32)">
            Function creates new FDArray for non-CID fonts.
            The FDArray built has only the "Private" operator that points to the font's
            original private dict 
            @param fdarrayRef OffsetItem for the FDArray
            @param privateRef OffsetItem for the Private Dict
            @param Font the font
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.Reconstruct(System.Int32)">
            Function reconstructs the FDArray, PrivateDict and LSubr for CID fonts
            @param Font the font
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.ReconstructFDArray(System.Int32,iTextSharp.text.pdf.CFFFont.OffsetItem[])">
            Function subsets the FDArray and builds the new one with new offsets
            @param Font The font
            @param fdPrivate OffsetItem Array (one for each FDArray)
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.ReconstructPrivateDict(System.Int32,iTextSharp.text.pdf.CFFFont.OffsetItem[],iTextSharp.text.pdf.CFFFont.IndexBaseItem[],iTextSharp.text.pdf.CFFFont.OffsetItem[])">
            Function Adds the new private dicts (only for the FDs used) to the list
            @param Font the font
            @param fdPrivate OffsetItem array one element for each private
            @param fdPrivateBase IndexBaseItem array one element for each private
            @param fdSubrs OffsetItem array one element for each private
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.ReconstructPrivateSubrs(System.Int32,iTextSharp.text.pdf.CFFFont.IndexBaseItem[],iTextSharp.text.pdf.CFFFont.OffsetItem[])">
            Function Adds the new LSubrs dicts (only for the FDs used) to the list
            @param Font  The index of the font
            @param fdPrivateBase The IndexBaseItem array for the linked list
            @param fdSubrs OffsetItem array for the linked list
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.CalcSubrOffsetSize(System.Int32,System.Int32)">
            Calculates how many byte it took to write the offset for the subrs in a specific
            private dict.
            @param Offset The Offset for the private dict
            @param Size The size of the private dict
            @return The size of the offset of the subrs in the private dict
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.CountEntireIndexRange(System.Int32)">
            Function computes the size of an index
            @param indexOffset The offset for the computed index
            @return The size of the index
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.CreateNonCIDPrivate(System.Int32,iTextSharp.text.pdf.CFFFont.OffsetItem)">
            The function creates a private dict for a font that was not CID
            All the keys are copied as is except for the subrs key 
            @param Font the font
            @param Subr The OffsetItem for the subrs of the private 
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.CreateNonCIDSubrs(System.Int32,iTextSharp.text.pdf.CFFFont.IndexBaseItem,iTextSharp.text.pdf.CFFFont.OffsetItem)">
            the function marks the beginning of the subrs index and adds the subsetted subrs
            index to the output list. 
            @param Font the font
            @param PrivateBase IndexBaseItem for the private that's referencing to the subrs
            @param Subrs OffsetItem for the subrs
            @throws IOException
        </member>
        <member name="T:iTextSharp.text.html.Markup">
            <summary>
            A class that contains all the possible tagnames and their attributes.
            </summary>
        </member>
        <member name="F:iTextSharp.text.html.Markup.ITEXT_TAG">
            the key for any tag 
        </member>
        <member name="F:iTextSharp.text.html.Markup.HTML_TAG_BODY">
            the markup for the body part of a file 
        </member>
        <member name="F:iTextSharp.text.html.Markup.HTML_TAG_DIV">
            The DIV tag. 
        </member>
        <member name="F:iTextSharp.text.html.Markup.HTML_TAG_LINK">
            This is a possible HTML-tag. 
        </member>
        <member name="F:iTextSharp.text.html.Markup.HTML_TAG_SPAN">
            The SPAN tag. 
        </member>
        <member name="F:iTextSharp.text.html.Markup.HTML_ATTR_HEIGHT">
            the height attribute. 
        </member>
        <member name="F:iTextSharp.text.html.Markup.HTML_ATTR_HREF">
            the hyperlink reference attribute. 
        </member>
        <member name="F:iTextSharp.text.html.Markup.HTML_ATTR_REL">
            This is a possible HTML attribute for the LINK tag. 
        </member>
        <member name="F:iTextSharp.text.html.Markup.HTML_ATTR_STYLE">
            This is used for inline css style information 
        </member>
        <member name="F:iTextSharp.text.html.Markup.HTML_ATTR_TYPE">
            This is a possible HTML attribute for the LINK tag. 
        </member>
        <member name="F:iTextSharp.text.html.Markup.HTML_ATTR_STYLESHEET">
            This is a possible HTML attribute. 
        </member>
        <member name="F:iTextSharp.text.html.Markup.HTML_ATTR_WIDTH">
            the width attribute. 
        </member>
        <member name="F:iTextSharp.text.html.Markup.HTML_ATTR_CSS_CLASS">
            attribute for specifying externally defined CSS class 
        </member>
        <member name="F:iTextSharp.text.html.Markup.HTML_ATTR_CSS_ID">
            The ID attribute. 
        </member>
        <member name="F:iTextSharp.text.html.Markup.HTML_VALUE_JAVASCRIPT">
            This is a possible value for the language attribute (SCRIPT tag). 
        </member>
        <member name="F:iTextSharp.text.html.Markup.HTML_VALUE_CSS">
            This is a possible HTML attribute for the LINK tag. 
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_BGCOLOR">
            the CSS tag for background color 
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_COLOR">
            the CSS tag for text color 
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_DISPLAY">
            CSS key that indicate the way something has to be displayed 
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_FONTFAMILY">
            the CSS tag for the font family 
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_FONTSIZE">
            the CSS tag for the font size 
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_FONTSTYLE">
            the CSS tag for the font style 
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_FONTWEIGHT">
            the CSS tag for the font weight 
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_LINEHEIGHT">
            the CSS tag for text decorations 
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_MARGIN">
            the CSS tag for the margin of an object 
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_MARGINLEFT">
            the CSS tag for the margin of an object 
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_MARGINRIGHT">
            the CSS tag for the margin of an object 
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_MARGINTOP">
            the CSS tag for the margin of an object 
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_MARGINBOTTOM">
            the CSS tag for the margin of an object 
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_PADDING">
            the CSS tag for the margin of an object 
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_PADDINGLEFT">
            the CSS tag for the margin of an object 
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_PADDINGRIGHT">
            the CSS tag for the margin of an object 
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_PADDINGTOP">
            the CSS tag for the margin of an object 
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_PADDINGBOTTOM">
            the CSS tag for the margin of an object 
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_BORDERCOLOR">
            the CSS tag for the margin of an object 
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_BORDERWIDTH">
            the CSS tag for the margin of an object 
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_BORDERWIDTHLEFT">
            the CSS tag for the margin of an object 
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_BORDERWIDTHRIGHT">
            the CSS tag for the margin of an object 
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_BORDERWIDTHTOP">
            the CSS tag for the margin of an object 
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_BORDERWIDTHBOTTOM">
            the CSS tag for the margin of an object 
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_PAGE_BREAK_AFTER">
            the CSS tag for adding a page break when the document is printed 
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_PAGE_BREAK_BEFORE">
            the CSS tag for adding a page break when the document is printed 
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_TEXTALIGN">
            the CSS tag for the horizontal alignment of an object 
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_TEXTDECORATION">
            the CSS tag for text decorations 
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_VERTICALALIGN">
            the CSS tag for text decorations 
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_KEY_VISIBILITY">
            the CSS tag for the visibility of objects 
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_VALUE_ALWAYS">
            value for the CSS tag for adding a page break when the document is printed 
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_VALUE_BLOCK">
            A possible value for the DISPLAY key 
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_VALUE_BOLD">
            a CSS value for text font weight 
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_VALUE_HIDDEN">
            the value if you want to hide objects. 
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_VALUE_INLINE">
            A possible value for the DISPLAY key 
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_VALUE_ITALIC">
            a CSS value for text font style 
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_VALUE_LINETHROUGH">
            a CSS value for text decoration 
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_VALUE_LISTITEM">
            A possible value for the DISPLAY key 
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_VALUE_NONE">
            a CSS value 
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_VALUE_NORMAL">
            a CSS value 
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_VALUE_OBLIQUE">
            a CSS value for text font style 
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_VALUE_TABLE">
            A possible value for the DISPLAY key 
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_VALUE_TABLEROW">
            A possible value for the DISPLAY key 
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_VALUE_TABLECELL">
            A possible value for the DISPLAY key 
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_VALUE_TEXTALIGNLEFT">
            the CSS value for a horizontal alignment of an object 
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_VALUE_TEXTALIGNRIGHT">
            the CSS value for a horizontal alignment of an object 
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_VALUE_TEXTALIGNCENTER">
            the CSS value for a horizontal alignment of an object 
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_VALUE_TEXTALIGNJUSTIFY">
            the CSS value for a horizontal alignment of an object 
        </member>
        <member name="F:iTextSharp.text.html.Markup.CSS_VALUE_UNDERLINE">
            a CSS value for text decoration 
        </member>
        <member name="F:iTextSharp.text.html.Markup.DEFAULT_FONT_SIZE">
            a default value for font-size 
            @since 2.1.3
        </member>
        <member name="M:iTextSharp.text.html.Markup.ParseLength(System.String)">
            <summary>
            Parses a length.
            </summary>
            <param name="str">a length in the form of an optional + or -, followed by a number and a unit.</param>
            <returns>a float</returns>
        </member>
        <member name="M:iTextSharp.text.html.Markup.ParseLength(System.String,System.Single)">
            New method contributed by: Lubos Strapko
            
            @since 2.1.3
        </member>
        <member name="M:iTextSharp.text.html.Markup.DecodeColor(System.String)">
            <summary>
            Converts a <CODE>Color</CODE> into a HTML representation of this <CODE>Color</CODE>.
            </summary>
            <param name="color">the <CODE>Color</CODE> that has to be converted.</param>
            <returns>the HTML representation of this <CODE>Color</CODE></returns>
        </member>
        <member name="M:iTextSharp.text.html.Markup.ParseAttributes(System.String)">
            <summary>
            This method parses a string with attributes and returns a Properties object.
            </summary>
            <param name="str">a string of this form: 'key1="value1"; key2="value2";... keyN="valueN" '</param>
            <returns>a Properties object</returns>
        </member>
        <member name="M:iTextSharp.text.html.Markup.RemoveComment(System.String,System.String,System.String)">
            Removes the comments sections of a String.
            
            @param string
                       the original String
            @param startComment
                       the String that marks the start of a Comment section
            @param endComment
                       the String that marks the end of a Comment section.
            @return the String stripped of its comment section
        </member>
        <member name="T:iTextSharp.text.FontFactoryImp">
            <summary>
            If you are using True Type fonts, you can declare the paths of the different ttf- and ttc-files
            to this class first and then create fonts in your code using one of the getFont method
            without having to enter a path as parameter.
            </summary>
        </member>
        <member name="F:iTextSharp.text.FontFactoryImp.trueTypeFonts">
            <summary> This is a map of postscriptfontnames of True Type fonts and the path of their ttf- or ttc-file. </summary>
        </member>
        <member name="F:iTextSharp.text.FontFactoryImp.fontFamilies">
            <summary> This is a map of fontfamilies. </summary>
        </member>
        <member name="F:iTextSharp.text.FontFactoryImp.defaultEncoding">
            <summary> This is the default encoding to use. </summary>
        </member>
        <member name="F:iTextSharp.text.FontFactoryImp.defaultEmbedding">
            <summary> This is the default value of the <VAR>embedded</VAR> variable. </summary>
        </member>
        <member name="M:iTextSharp.text.FontFactoryImp.#ctor">
            <summary> Creates new FontFactory </summary>
        </member>
        <member name="M:iTextSharp.text.FontFactoryImp.GetFont(System.String,System.String,System.Boolean,System.Single,System.Int32,iTextSharp.text.Color)">
            <summary>
            Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="encoding">the encoding of the font</param>
            <param name="embedded">true if the font is to be embedded in the PDF</param>
            <param name="size">the size of this font</param>
            <param name="style">the style of this font</param>
            <param name="color">the Color of this font</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactoryImp.GetFont(System.String,System.String,System.Boolean,System.Single,System.Int32,iTextSharp.text.Color,System.Boolean)">
            <summary>
            Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="encoding">the encoding of the font</param>
            <param name="embedded">true if the font is to be embedded in the PDF</param>
            <param name="size">the size of this font</param>
            <param name="style">the style of this font</param>
            <param name="color">the Color of this font</param>
            <param name="cached">true if the font comes from the cache or is added to the cache if new, false if the font is always created new</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactoryImp.GetFont(System.util.Properties)">
            <summary>
            Constructs a Font-object.
            </summary>
            <param name="attributes">the attributes of a Font object</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactoryImp.GetFont(System.String,System.String,System.Boolean,System.Single,System.Int32)">
            <summary>
            Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="encoding">the encoding of the font</param>
            <param name="embedded">true if the font is to be embedded in the PDF</param>
            <param name="size">the size of this font</param>
            <param name="style">the style of this font</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactoryImp.GetFont(System.String,System.String,System.Boolean,System.Single)">
            <summary>
            Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="encoding">the encoding of the font</param>
            <param name="embedded">true if the font is to be embedded in the PDF</param>
            <param name="size">the size of this font</param>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.FontFactoryImp.GetFont(System.String,System.String,System.Boolean)">
            <summary>
            Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="encoding">the encoding of the font</param>
            <param name="embedded">true if the font is to be embedded in the PDF</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactoryImp.GetFont(System.String,System.String,System.Single,System.Int32,iTextSharp.text.Color)">
            <summary>
            Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="encoding">the encoding of the font</param>
            <param name="size">the size of this font</param>
            <param name="style">the style of this font</param>
            <param name="color">the Color of this font</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactoryImp.GetFont(System.String,System.String,System.Single,System.Int32)">
            <summary>
            Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="encoding">the encoding of the font</param>
            <param name="size">the size of this font</param>
            <param name="style">the style of this font</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactoryImp.GetFont(System.String,System.String,System.Single)">
            <summary>
            Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="encoding">the encoding of the font</param>
            <param name="size">the size of this font</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactoryImp.GetFont(System.String,System.String)">
            <summary>
            Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="encoding">the encoding of the font</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactoryImp.GetFont(System.String,System.Single,System.Int32,iTextSharp.text.Color)">
            <summary>
            Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="size">the size of this font</param>
            <param name="style">the style of this font</param>
            <param name="color">the Color of this font</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactoryImp.GetFont(System.String,System.Single,iTextSharp.text.Color)">
            <summary>
            Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="size">the size of this font</param>
            <param name="color">the Color of this font</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactoryImp.GetFont(System.String,System.Single,System.Int32)">
            <summary>
            Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="size">the size of this font</param>
            <param name="style">the style of this font</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactoryImp.GetFont(System.String,System.Single)">
            <summary>
            Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="size">the size of this font</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactoryImp.GetFont(System.String)">
            <summary>
            Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactoryImp.RegisterFamily(System.String,System.String,System.String)">
            Register a font by giving explicitly the font family and name.
            @param familyName the font family
            @param fullName the font name
            @param path the font path
        </member>
        <member name="M:iTextSharp.text.FontFactoryImp.Register(System.String)">
            <summary>
            Register a ttf- or a ttc-file.
            </summary>
            <param name="path">the path to a ttf- or ttc-file</param>
        </member>
        <member name="M:iTextSharp.text.FontFactoryImp.Register(System.String,System.String)">
            <summary>
            Register a ttf- or a ttc-file and use an alias for the font contained in the ttf-file.
            </summary>
            <param name="path">the path to a ttf- or ttc-file</param>
            <param name="alias">the alias you want to use for the font</param>
        </member>
        <member name="M:iTextSharp.text.FontFactoryImp.RegisterDirectory(System.String)">
            Register all the fonts in a directory.
            @param dir the directory
            @return the number of fonts registered
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.FontFactoryImp.RegisterDirectory(System.String,System.Boolean)" -->
        <member name="M:iTextSharp.text.FontFactoryImp.RegisterDirectories">
            Register fonts in some probable directories. It usually works in Windows,
            Linux and Solaris.
            @return the number of fonts registered
        </member>
        <member name="M:iTextSharp.text.FontFactoryImp.IsRegistered(System.String)">
            <summary>
            Checks if a certain font is registered.
            </summary>
            <param name="fontname">the name of the font that has to be checked</param>
            <returns>true if the font is found</returns>
        </member>
        <member name="P:iTextSharp.text.FontFactoryImp.RegisteredFonts">
            <summary>
            Gets a set of registered fontnames.
            </summary>
            <value>a set of registered fontnames</value>
        </member>
        <member name="P:iTextSharp.text.FontFactoryImp.RegisteredFamilies">
            <summary>
            Gets a set of registered font families.
            </summary>
            <value>a set of registered font families</value>
        </member>
        <member name="T:iTextSharp.text.ChapterAutoNumber">
             Chapter with auto numbering.
            
             @author Michael Niedermair
        </member>
        <member name="T:iTextSharp.text.Chapter">
            <summary>
            A Chapter is a special Section.
            </summary>
            <remarks>
            A chapter number has to be created using a Paragraph as title
            and an int as chapter number. The chapter number is shown be
            default. If you don't want to see the chapter number, you have to set the
            numberdepth to 0.
            </remarks>
            <example>
            <code>
            Paragraph title2 = new Paragraph("This is Chapter 2", FontFactory.GetFont(FontFactory.HELVETICA, 18, Font.BOLDITALIC, new Color(0, 0, 255)));
            <strong>Chapter chapter2 = new Chapter(title2, 2);
            chapter2.SetNumberDepth(0);</strong>
            Paragraph someText = new Paragraph("This is some text");
            <strong>chapter2.Add(someText);</strong>
            Paragraph title21 = new Paragraph("This is Section 1 in Chapter 2", FontFactory.GetFont(FontFactory.HELVETICA, 16, Font.BOLD, new Color(255, 0, 0)));
            Section section1 = <strong>chapter2.AddSection(title21);</strong>
            Paragraph someSectionText = new Paragraph("This is some silly paragraph in a chapter and/or section. It contains some text to test the functionality of Chapters and Section.");
            section1.Add(someSectionText);
            </code>
            </example>
        </member>
        <member name="T:iTextSharp.text.Section">
            <summary>
            A Section is a part of a Document containing
            other Sections, Paragraphs, List
            and/or Tables.
            </summary>
            <remarks>
            You can not construct a Section yourself.
            You will have to ask an instance of Section to the
            Chapter or Section to which you want to
            add the new Section.
            </remarks>
            <example>
            <code>
            Paragraph title2 = new Paragraph("This is Chapter 2", FontFactory.GetFont(FontFactory.HELVETICA, 18, Font.BOLDITALIC, new Color(0, 0, 255)));
            Chapter chapter2 = new Chapter(title2, 2);
            Paragraph someText = new Paragraph("This is some text");
            chapter2.Add(someText);
            Paragraph title21 = new Paragraph("This is Section 1 in Chapter 2", FontFactory.GetFont(FontFactory.HELVETICA, 16, Font.BOLD, new Color(255, 0, 0)));
            <strong>Section section1 = chapter2.AddSection(title21);</strong>
            Paragraph someSectionText = new Paragraph("This is some silly paragraph in a chapter and/or section. It contains some text to test the functionality of Chapters and Section.");
            <strong>section1.Add(someSectionText);</strong>
            Paragraph title211 = new Paragraph("This is SubSection 1 in Section 1 in Chapter 2", FontFactory.GetFont(FontFactory.HELVETICA, 14, Font.BOLD, new Color(255, 0, 0)));
            <strong>Section section11 = section1.AddSection(40, title211, 2);
            section11.Add(someSectionText);</strong>strong>
            </code>
            </example>
        </member>
        <member name="T:iTextSharp.text.ILargeElement">
            Interface implemented by Element objects that can potentially consume
            a lot of memory. Objects implementing the LargeElement interface can
            be added to a Document more than once. If you have invoked setCompleted(false),
            they will be added partially and the content that was added will be
            removed until you've invoked setCompleted(true);
            @since   iText 2.0.8
        </member>
        <member name="M:iTextSharp.text.ILargeElement.FlushContent">
            Flushes the content that has been added.
        </member>
        <member name="P:iTextSharp.text.ILargeElement.ElementComplete">
            If you invoke setCompleted(false), you indicate that the content
            of the object isn't complete yet; it can be added to the document
            partially, but more will follow. If you invoke setCompleted(true),
            you indicate that you won't add any more data to the object.
            @since   iText 2.0.8
            @param   complete    false if you'll be adding more data after
                                 adding the object to the document.
        </member>
        <member name="F:iTextSharp.text.Section.NUMBERSTYLE_DOTTED">
            A possible number style. The default number style: "1.2.3."
            @since   iText 2.0.8
        </member>
        <member name="F:iTextSharp.text.Section.NUMBERSTYLE_DOTTED_WITHOUT_FINAL_DOT">
            A possible number style. For instance: "1.2.3"
            @since   iText 2.0.8
        </member>
        <member name="F:iTextSharp.text.Section.title">
            <summary> This is the title of this section. </summary>
        </member>
        <member name="F:iTextSharp.text.Section.numberDepth">
            <summary> This is the number of sectionnumbers that has to be shown before the section title. </summary>
        </member>
        <member name="F:iTextSharp.text.Section.numberStyle">
            The style for sectionnumbers.
            @since    iText 2.0.8
        </member>
        <member name="F:iTextSharp.text.Section.indentationLeft">
            <summary> The indentation of this section on the left side. </summary>
        </member>
        <member name="F:iTextSharp.text.Section.indentationRight">
            <summary> The indentation of this section on the right side. </summary>
        </member>
        <member name="F:iTextSharp.text.Section.indentation">
            <summary> The additional indentation of the content of this section. </summary>
        </member>
        <member name="F:iTextSharp.text.Section.subsections">
            <summary> This is the number of subsections. </summary>
        </member>
        <member name="F:iTextSharp.text.Section.numbers">
            <summary> This is the complete list of sectionnumbers of this section and the parents of this section. </summary>
        </member>
        <member name="F:iTextSharp.text.Section.complete">
            Indicates if the Section will be complete once added to the document.
            @since   iText 2.0.8
        </member>
        <member name="F:iTextSharp.text.Section.addedCompletely">
            Indicates if the Section was added completely to the document.
            @since   iText 2.0.8
        </member>
        <member name="F:iTextSharp.text.Section.notAddedYet">
            Indicates if this is the first time the section was added.
            @since   iText 2.0.8
        </member>
        <member name="F:iTextSharp.text.Section.bookmarkOpen">
            <summary> false if the bookmark children are not visible </summary>
        </member>
        <member name="F:iTextSharp.text.Section.triggerNewPage">
            true if the section has to trigger a new page 
        </member>
        <member name="F:iTextSharp.text.Section.bookmarkTitle">
            The bookmark title if different from the content title 
        </member>
        <member name="M:iTextSharp.text.Section.#ctor">
            <summary>
            Constructs a new Section.
            </summary>
            <overloads>
            Has 2 overloads.
            </overloads>
        </member>
        <member name="M:iTextSharp.text.Section.#ctor(iTextSharp.text.Paragraph,System.Int32)">
            <summary>
            Constructs a new Section.
            </summary>
            <param name="title">a Paragraph</param>
            <param name="numberDepth">the numberDepth</param>
        </member>
        <member name="M:iTextSharp.text.Section.SetNumbers(System.Int32,System.Collections.ArrayList)">
            <summary>
            Sets the number of this section.
            </summary>
            <param name="number">the number of this section</param>
            <param name="numbers">an ArrayList, containing the numbers of the Parent</param>
        </member>
        <member name="M:iTextSharp.text.Section.Process(iTextSharp.text.IElementListener)">
            <summary>
            Processes the element by adding it (or the different parts) to an
            IElementListener.
            </summary>
            <param name="listener">the IElementListener</param>
            <returns>true if the element was processed successfully</returns>
        </member>
        <member name="M:iTextSharp.text.Section.IsContent">
            @see com.lowagie.text.Element#isContent()
            @since   iText 2.0.8
        </member>
        <member name="M:iTextSharp.text.Section.IsNestable">
            @see com.lowagie.text.Element#isNestable()
            @since   iText 2.0.8
        </member>
        <member name="M:iTextSharp.text.Section.Add(System.Int32,System.Object)">
            <summary>
            Adds a Paragraph, List or Table
            to this Section.
            </summary>
            <param name="index">index at which the specified element is to be inserted</param>
            <param name="o">an object of type Paragraph, List or Table</param>
        </member>
        <member name="M:iTextSharp.text.Section.Add(System.Object)">
            <summary>
            Adds a Paragraph, List, Table or another Section
            to this Section.
            </summary>
            <param name="o">an object of type Paragraph, List, Table or another Section</param>
            <returns>a bool</returns>
        </member>
        <member name="M:iTextSharp.text.Section.AddAll(System.Collections.ICollection)">
            <summary>
            Adds a collection of Elements
            to this Section.
            </summary>
            <param name="collection">a collection of Paragraphs, Lists and/or Tables</param>
            <returns>true if the action succeeded, false if not.</returns>
        </member>
        <member name="M:iTextSharp.text.Section.AddSection(System.Single,iTextSharp.text.Paragraph,System.Int32)">
            <summary>
            Creates a Section, adds it to this Section and returns it.
            </summary>
            <param name="indentation">the indentation of the new section</param>
            <param name="title">the title of the new section</param>
            <param name="numberDepth">the numberDepth of the section</param>
            <returns>the newly added Section</returns>
        </member>
        <member name="M:iTextSharp.text.Section.AddSection(System.Single,iTextSharp.text.Paragraph)">
            <summary>
            Creates a Section, adds it to this Section and returns it.
            </summary>
            <param name="indentation">the indentation of the new section</param>
            <param name="title">the title of the new section</param>
            <returns>the newly added Section</returns>
        </member>
        <member name="M:iTextSharp.text.Section.AddSection(iTextSharp.text.Paragraph,System.Int32)">
            <summary>
            Creates a Section, add it to this Section and returns it.
            </summary>
            <param name="title">the title of the new section</param>
            <param name="numberDepth">the numberDepth of the section</param>
            <returns>the newly added Section</returns>
        </member>
        <member name="M:iTextSharp.text.Section.AddMarkedSection">
            Adds a marked section. For use in class MarkedSection only!
        </member>
        <member name="M:iTextSharp.text.Section.AddSection(iTextSharp.text.Paragraph)">
            <summary>
            Creates a Section, adds it to this Section and returns it.
            </summary>
            <param name="title">the title of the new section</param>
            <returns>the newly added Section</returns>
        </member>
        <member name="M:iTextSharp.text.Section.AddSection(System.Single,System.String,System.Int32)">
             Adds a Section to this Section and returns it.
            
             @param    indentation    the indentation of the new section
             @param    title        the title of the new section
             @param    numberDepth    the numberDepth of the section
            <summary>
            Adds a Section to this Section and returns it.
            </summary>
            <param name="indentation">the indentation of the new section</param>
            <param name="title">the title of the new section</param>
            <param name="numberDepth">the numberDepth of the section</param>
            <returns>the newly added Section</returns>
        </member>
        <member name="M:iTextSharp.text.Section.AddSection(System.String,System.Int32)">
             Adds a Section to this Section and returns it.
            
             @param    title        the title of the new section
             @param    numberDepth    the numberDepth of the section
            <summary>
            Adds a Section to this Section and returns it.
            </summary>
            <param name="title">the title of the new section</param>
            <param name="numberDepth">the numberDepth of the section</param>
            <returns>the newly added Section</returns>
        </member>
        <member name="M:iTextSharp.text.Section.AddSection(System.Single,System.String)">
            <summary>
            Adds a Section to this Section and returns it.
            </summary>
            <param name="indentation">the indentation of the new section</param>
            <param name="title">the title of the new section</param>
            <returns>the newly added Section</returns>
        </member>
        <member name="M:iTextSharp.text.Section.AddSection(System.String)">
            <summary>
            Adds a Section to this Section and returns it.
            </summary>
            <param name="title">the title of the new section</param>
            <returns>the newly added Section</returns>
        </member>
        <member name="M:iTextSharp.text.Section.Set(System.util.Properties)">
            <summary>
            Alters the attributes of this Section.
            </summary>
            <param name="attributes">the attributes</param>
        </member>
        <member name="M:iTextSharp.text.Section.ConstructTitle(iTextSharp.text.Paragraph,System.Collections.ArrayList,System.Int32,System.Int32)">
            Constructs a Paragraph that will be used as title for a Section or Chapter.
            @param    title   the title of the section
            @param    numbers a list of sectionnumbers
            @param    numberDepth how many numbers have to be shown
            @param    numberStyle the numbering style
            @return   a Paragraph object
            @since    iText 2.0.8
        </member>
        <member name="M:iTextSharp.text.Section.IsChapter">
            <summary>
            Checks if this object is a Chapter.
            </summary>
            <returns>
            true if it is a Chapter,
            false if it is a Section
            </returns>
        </member>
        <member name="M:iTextSharp.text.Section.IsSection">
            <summary>
            Checks if this object is a Section.
            </summary>
            <returns>
            true if it is a Section,
            false if it is a Chapter.
            </returns>
        </member>
        <member name="M:iTextSharp.text.Section.IsTitle(System.String)">
            <summary>
            Checks if a given tag corresponds with a title tag for this object.
            </summary>
            <param name="tag">the given tag</param>
            <returns>true if the tag corresponds</returns>
        </member>
        <member name="M:iTextSharp.text.Section.IsTag(System.String)">
            <summary>
            Checks if a given tag corresponds with this object.
            </summary>
            <param name="tag">the given tag</param>
            <returns>true if the tag corresponds</returns>
        </member>
        <member name="M:iTextSharp.text.Section.GetBookmarkTitle">
            Gets the bookmark title.
            @return the bookmark title
        </member>
        <member name="M:iTextSharp.text.Section.SetChapterNumber(System.Int32)">
            Changes the Chapter number.
        </member>
        <member name="M:iTextSharp.text.Section.FlushContent">
            @since   iText 2.0.8
            @see com.lowagie.text.LargeElement#flushContent()
        </member>
        <member name="M:iTextSharp.text.Section.NewPage">
            Adds a new page to the section.
            @since   2.1.1
        </member>
        <member name="P:iTextSharp.text.Section.Type">
            <summary>
            Gets the type of the text element.
            </summary>
            <value>a type</value>
        </member>
        <member name="P:iTextSharp.text.Section.Chunks">
            <summary>
            Gets all the chunks in this element.
            </summary>
            <value>an ArrayList</value>
        </member>
        <member name="P:iTextSharp.text.Section.Title">
            <summary>
            Get/set the title of this section
            </summary>
            <value>a Paragraph</value>
        </member>
        <member name="P:iTextSharp.text.Section.NumberStyle">
            Sets the style for numbering sections.
            Possible values are NUMBERSTYLE_DOTTED: 1.2.3. (the default)
            or NUMBERSTYLE_DOTTED_WITHOUT_FINAL_DOT: 1.2.3
            @since    iText 2.0.8
        </member>
        <member name="P:iTextSharp.text.Section.NumberDepth">
            <summary>
            Get/set the numberdepth of this Section.
            </summary>
            <value>a int</value>
        </member>
        <member name="P:iTextSharp.text.Section.IndentationLeft">
            <summary>
            Get/set the indentation of this Section on the left side.
            </summary>
            <value>the indentation</value>
        </member>
        <member name="P:iTextSharp.text.Section.IndentationRight">
            <summary>
            Get/set the indentation of this Section on the right side.
            </summary>
            <value>the indentation</value>
        </member>
        <member name="P:iTextSharp.text.Section.Indentation">
            <summary>
            Get/set the indentation of the content of this Section.
            </summary>
            <value>the indentation</value>
        </member>
        <member name="P:iTextSharp.text.Section.Depth">
            <summary>
            Returns the depth of this section.
            </summary>
            <value>the depth</value>
        </member>
        <member name="P:iTextSharp.text.Section.BookmarkOpen">
            <summary>
            Get/set the bookmark
            </summary>
            <value>a bool</value>
        </member>
        <member name="P:iTextSharp.text.Section.BookmarkTitle">
            Sets the bookmark title. The bookmark title is the same as the section title but
            can be changed with this method.
            @param bookmarkTitle the bookmark title
        </member>
        <member name="P:iTextSharp.text.Section.NotAddedYet">
            Indicates if this is the first time the section is added.
            @since   iText2.0.8
            @return  true if the section wasn't added yet
        </member>
        <member name="P:iTextSharp.text.Section.AddedCompletely">
            @see com.lowagie.text.LargeElement#isAddedCompletely()
            @since   iText 2.0.8
        </member>
        <member name="P:iTextSharp.text.Section.ElementComplete">
            @since   iText 2.0.8
            @see com.lowagie.text.LargeElement#isComplete()
        </member>
        <member name="M:iTextSharp.text.Chapter.#ctor(System.Int32)">
            Constructs a new <CODE>Chapter</CODE>.
            @param   number      the Chapter number
        </member>
        <member name="M:iTextSharp.text.Chapter.#ctor(iTextSharp.text.Paragraph,System.Int32)">
            <summary>
            Constructs a new Chapter.
            </summary>
            <param name="title">the Chapter title (as a Paragraph)</param>
            <param name="number">the Chapter number</param>
            <overoads>
            Has three overloads.
            </overoads>
        </member>
        <member name="M:iTextSharp.text.Chapter.#ctor(System.String,System.Int32)">
            <summary>
            Constructs a new Chapter.
            </summary>
            <param name="title">the Chapter title (as a string)</param>
            <param name="number">the Chapter number</param>
            <overoads>
            Has three overloads.
            </overoads>
        </member>
        <member name="M:iTextSharp.text.Chapter.IsNestable">
            @see com.lowagie.text.Element#isNestable()
            @since   iText 2.0.8
        </member>
        <member name="P:iTextSharp.text.Chapter.Type">
            <summary>
            Gets the type of the text element.
            </summary>
            <value>a type</value>
        </member>
        <member name="F:iTextSharp.text.ChapterAutoNumber.numberSet">
            Is the chapter number already set?
            @since	2.1.4
        </member>
        <member name="M:iTextSharp.text.ChapterAutoNumber.#ctor(iTextSharp.text.Paragraph)">
             Create a new object.
            
             @param para     the Chapter title (as a <CODE>Paragraph</CODE>)
        </member>
        <member name="M:iTextSharp.text.ChapterAutoNumber.#ctor(System.String)">
            Create a new objet.
            
            @param title     the Chapter title (as a <CODE>String</CODE>)
        </member>
        <member name="M:iTextSharp.text.ChapterAutoNumber.AddSection(System.String)">
             Create a new section for this chapter and ad it.
            
             @param title  the Section title (as a <CODE>String</CODE>)
             @return Returns the new section.
        </member>
        <member name="M:iTextSharp.text.ChapterAutoNumber.AddSection(iTextSharp.text.Paragraph)">
             Create a new section for this chapter and add it.
            
             @param title  the Section title (as a <CODE>Paragraph</CODE>)
             @return Returns the new section.
        </member>
        <member name="M:iTextSharp.text.ChapterAutoNumber.SetAutomaticNumber(System.Int32)">
            Changes the Chapter number.
            @param	number	the new chapter number
            @since 2.1.4
        </member>
        <member name="T:iTextSharp.text.xml.xmp.PdfSchema">
            An implementation of an XmpSchema.
        </member>
        <member name="T:iTextSharp.text.xml.xmp.XmpSchema">
            Abstract superclass of the XmpSchemas supported by iText.
        </member>
        <member name="T:System.util.Properties">
            <summary>
            Summary description for Properties.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpSchema.xmlns">
            the namesspace 
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpSchema.#ctor(System.String)">
            Constructs an XMP schema. 
            @param xmlns
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpSchema.ToString">
            The String representation of the contents.
            @return a String representation.
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpSchema.Process(System.Text.StringBuilder,System.Object)">
            Processes a property
            @param buf
            @param p
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpSchema.AddProperty(System.String,System.String)">
            @param key
            @param value
            @return the previous property (null if there wasn't one)
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpSchema.SetProperty(System.String,iTextSharp.text.xml.xmp.LangAlt)">
            @see java.util.Properties#setProperty(java.lang.String, java.lang.String)
            
            @param key
            @param value
            @return the previous property (null if there wasn't one)
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpSchema.Escape(System.String)">
            @param content
            @return
        </member>
        <member name="P:iTextSharp.text.xml.xmp.XmpSchema.Xmlns">
            @return Returns the xmlns.
        </member>
        <member name="F:iTextSharp.text.xml.xmp.PdfSchema.DEFAULT_XPATH_ID">
            default namespace identifier
        </member>
        <member name="F:iTextSharp.text.xml.xmp.PdfSchema.DEFAULT_XPATH_URI">
            default namespace uri
        </member>
        <member name="F:iTextSharp.text.xml.xmp.PdfSchema.KEYWORDS">
            Keywords. 
        </member>
        <member name="F:iTextSharp.text.xml.xmp.PdfSchema.VERSION">
            The PDF file version (for example: 1.0, 1.3, and so on). 
        </member>
        <member name="F:iTextSharp.text.xml.xmp.PdfSchema.PRODUCER">
            The Producer. 
        </member>
        <member name="M:iTextSharp.text.xml.xmp.PdfSchema.#ctor">
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.xml.xmp.PdfSchema.AddKeywords(System.String)">
            Adds keywords.
            @param keywords
        </member>
        <member name="M:iTextSharp.text.xml.xmp.PdfSchema.AddProducer(System.String)">
            Adds the producer.
            @param producer
        </member>
        <member name="M:iTextSharp.text.xml.xmp.PdfSchema.AddVersion(System.String)">
            Adds the version.
            @param version
        </member>
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.xml.simpleparser.SimpleXMLParser" -->
        <member name="F:iTextSharp.text.xml.simpleparser.SimpleXMLParser.UNKNOWN">
            possible states 
        </member>
        <member name="F:iTextSharp.text.xml.simpleparser.SimpleXMLParser.stack">
            the state stack 
        </member>
        <member name="F:iTextSharp.text.xml.simpleparser.SimpleXMLParser.character">
            The current character. 
        </member>
        <member name="F:iTextSharp.text.xml.simpleparser.SimpleXMLParser.previousCharacter">
            The previous character. 
        </member>
        <member name="F:iTextSharp.text.xml.simpleparser.SimpleXMLParser.lines">
            the line we are currently reading 
        </member>
        <member name="F:iTextSharp.text.xml.simpleparser.SimpleXMLParser.columns">
            the column where the current character occurs 
        </member>
        <member name="F:iTextSharp.text.xml.simpleparser.SimpleXMLParser.eol">
            was the last character equivalent to a newline? 
        </member>
        <member name="F:iTextSharp.text.xml.simpleparser.SimpleXMLParser.nowhite">
            A boolean indicating if the next character should be taken into account
            if it's a space character. When nospace is false, the previous character
            wasn't whitespace.
            @since 2.1.5
        </member>
        <member name="F:iTextSharp.text.xml.simpleparser.SimpleXMLParser.state">
            the current state 
        </member>
        <member name="F:iTextSharp.text.xml.simpleparser.SimpleXMLParser.html">
            Are we parsing HTML? 
        </member>
        <member name="F:iTextSharp.text.xml.simpleparser.SimpleXMLParser.text">
            current text (whatever is encountered between tags) 
        </member>
        <!-- Badly formed XML comment ignored for member "F:iTextSharp.text.xml.simpleparser.SimpleXMLParser.entity" -->
        <member name="F:iTextSharp.text.xml.simpleparser.SimpleXMLParser.tag">
            current tagname 
        </member>
        <member name="F:iTextSharp.text.xml.simpleparser.SimpleXMLParser.attributes">
            current attributes 
        </member>
        <member name="F:iTextSharp.text.xml.simpleparser.SimpleXMLParser.doc">
            The handler to which we are going to forward document content 
        </member>
        <member name="F:iTextSharp.text.xml.simpleparser.SimpleXMLParser.comment">
            The handler to which we are going to forward comments. 
        </member>
        <member name="F:iTextSharp.text.xml.simpleparser.SimpleXMLParser.nested">
            Keeps track of the number of tags that are open. 
        </member>
        <member name="F:iTextSharp.text.xml.simpleparser.SimpleXMLParser.quoteCharacter">
            the quote character that was used to open the quote. 
        </member>
        <member name="F:iTextSharp.text.xml.simpleparser.SimpleXMLParser.attributekey">
            the attribute key. 
        </member>
        <member name="F:iTextSharp.text.xml.simpleparser.SimpleXMLParser.attributevalue">
            the attribute value. 
        </member>
        <member name="M:iTextSharp.text.xml.simpleparser.SimpleXMLParser.#ctor(iTextSharp.text.xml.simpleparser.ISimpleXMLDocHandler,iTextSharp.text.xml.simpleparser.ISimpleXMLDocHandlerComment,System.Boolean)">
            Creates a Simple XML parser object.
            Call Go(BufferedReader) immediately after creation.
        </member>
        <member name="M:iTextSharp.text.xml.simpleparser.SimpleXMLParser.Go(System.IO.TextReader)">
            Does the actual parsing. Perform this immediately
            after creating the parser object.
        </member>
        <member name="M:iTextSharp.text.xml.simpleparser.SimpleXMLParser.RestoreState">
            Gets a state from the stack
            @return the previous state
        </member>
        <member name="M:iTextSharp.text.xml.simpleparser.SimpleXMLParser.SaveState(System.Int32)">
            Adds a state to the stack.
            @param   s   a state to add to the stack
        </member>
        <member name="M:iTextSharp.text.xml.simpleparser.SimpleXMLParser.Flush">
            Flushes the text that is currently in the buffer.
            The text can be ignored, added to the document
            as content or as comment,... depending on the current state.
        </member>
        <member name="M:iTextSharp.text.xml.simpleparser.SimpleXMLParser.InitTag">
            Initialized the tag name and attributes.
        </member>
        <member name="M:iTextSharp.text.xml.simpleparser.SimpleXMLParser.DoTag">
            Sets the name of the tag. 
        </member>
        <member name="M:iTextSharp.text.xml.simpleparser.SimpleXMLParser.ProcessTag(System.Boolean)">
            processes the tag.
            @param start if true we are dealing with a tag that has just been opened; if false we are closing a tag.
        </member>
        <member name="M:iTextSharp.text.xml.simpleparser.SimpleXMLParser.ThrowException(System.String)">
            Throws an exception 
        </member>
        <member name="M:iTextSharp.text.xml.simpleparser.SimpleXMLParser.Parse(iTextSharp.text.xml.simpleparser.ISimpleXMLDocHandler,iTextSharp.text.xml.simpleparser.ISimpleXMLDocHandlerComment,System.IO.TextReader,System.Boolean)">
            Parses the XML document firing the events to the handler.
            @param doc the document handler
            @param r the document. The encoding is already resolved. The reader is not closed
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.xml.simpleparser.SimpleXMLParser.Parse(iTextSharp.text.xml.simpleparser.ISimpleXMLDocHandler,System.IO.Stream)">
            Parses the XML document firing the events to the handler.
            @param doc the document handler
            @param in the document. The encoding is deduced from the stream. The stream is not closed
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.xml.simpleparser.SimpleXMLParser.EscapeXML(System.String,System.Boolean)">
            Escapes a string with the appropriated XML codes.
            @param s the string to be escaped
            @param onlyASCII codes above 127 will always be escaped with &amp;#nn; if <CODE>true</CODE>
            @return the escaped string
        </member>
        <member name="M:iTextSharp.text.xml.simpleparser.SimpleXMLParser.GetEncodingName(System.Byte[])">
            Returns the IANA encoding name that is auto-detected from
            the bytes specified, with the endian-ness of that encoding where appropriate.
            (method found in org.apache.xerces.impl.XMLEntityManager, originaly published
            by the Apache Software Foundation under the Apache Software License; now being
            used in iText under the MPL)
            @param b4    The first four bytes of the input.
            @return an IANA-encoding string
        </member>
        <member name="T:iTextSharp.text.rtf.parser.RtfImportMappings">
            The RtfImportMappings make it possible to define font
            and color mappings when using the RtfWriter2.importRtfFragment
            method. This is necessary, because a RTF fragment does not
            contain font or color information, just references to the
            font and color tables.<br /><br />
            
            The font mappings are fontNr -&gt; fontName and the color
            mappigns are colorNr -&gt; Color.
            
            @author Mark Hall (Mark.Hall@mail.room3b.eu)
            @author Howard Shank (hgshank@yahoo.com)
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfImportMappings.fontMappings">
            The fontNr to fontName mappings.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfImportMappings.colorMappings">
            The colorNr to Color mappings.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfImportMappings.listMappings">
            The listNr to List mappings.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfImportMappings.stylesheetListMappings">
            The sytlesheetListNr to Stylesheet mappings.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfImportMappings.#ctor">
            Constructs a new RtfImportMappings initialising the mappings.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfImportMappings.AddFont(System.String,System.String)">
            Add a font to the list of mappings.
            
            @param fontNr The font number.
            @param fontName The font name.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfImportMappings.AddColor(System.String,iTextSharp.text.Color)">
            Add a color to the list of mappings.
            
            @param colorNr The color number.
            @param color The Color.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfImportMappings.AddList(System.String,System.String)">
            Add a List to the list of mappings.
            
            @param listNr The List number.
            @param list The List.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfImportMappings.AddStylesheetList(System.String,System.String)">
            Add a Stylesheet List to the list of mappings.
            
            @param stylesheetListNr The Stylesheet List number.
            @param list The StylesheetList.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfImportMappings.GetFontMappings">
            Gets the list of font mappings. String to String.
            
            @return The font mappings.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfImportMappings.GetColorMappings">
            Gets the list of color mappings. String to Color.
            
            @return The color mappings.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfImportMappings.GetListMappings">
            Gets the list of List mappings.
            
            @return The List mappings.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfImportMappings.GetStylesheetListMappings">
            Gets the list of Stylesheet mappings. .
            
            @return The Stylesheet List mappings.
        </member>
        <member name="T:iTextSharp.text.rtf.parser.destinations.RtfDestination">
            <code>RtfDestination</code> is the base class for destinations according
            to the RTF Specification. All destinations must extend from this class.
            
            @author Howard Shank (hgshank@yahoo.com
            
            @since 2.0.8
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestination.rtfParser">
            Parser object 
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestination.modified">
            Is data in destination modified? 
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestination.lastCtrlWord">
            The last control word handled by this destination 
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestination.listeners">
            The <code>RtfDestinationListener</code>. 
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestination.#ctor">
            Constructor.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestination.#ctor(iTextSharp.text.rtf.parser.RtfParser)">
            Constructor
            @param parser <code>RtfParser</code> object.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestination.SetParser(iTextSharp.text.rtf.parser.RtfParser)">
            Set the parser to use with the RtfDestination object.
            
            @param parser The RtfParser object.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestination.CloseDestination">
            Clean up when destination is closed.
            @return true if handled, false if not handled
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestination.HandleOpeningSubGroup">
            Handle a new subgroup contained within this group
            @return true if handled, false if not handled
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestination.HandleCloseGroup">
            Clean up when group is closed.
            @return true if handled, false if not handled
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestination.HandleOpenGroup">
            Setup when group is opened.
            @return true if handled, false if not handled
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestination.HandleCharacter(System.Int32)">
            Handle text for this destination
            @return true if handled, false if not handled
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestination.HandleControlWord(iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordData)">
            Handle control word for this destination
            @param ctrlWordData The control word and parameter information object
            @return true if handled, false if not handled
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestination.SetToDefaults">
            Method to set this object to the default values. Must be implemented in child class.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestination.IsModified">
            Method to indicate if data in this destination has changed.
            @return true if modified, false if not modified.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestination.AddListener(iTextSharp.text.rtf.parser.destinations.IRtfDestinationListener)">
             Adds a <CODE>RtfDestinationListener</CODE> to the <CODE>RtfDestinationMgr</CODE>.
            
             @param listener
                        the new RtfDestinationListener.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestination.RemoveListener(iTextSharp.text.rtf.parser.destinations.IRtfDestinationListener)">
             Removes a <CODE>RtfDestinationListener</CODE> from the <CODE>RtfDestinationMgr</CODE>.
            
             @param listener
                        the RtfCtrlWordListener that has to be removed.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestination.OnCtrlWord(iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordData)">
            
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestination.AfterCtrlWord(iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordData)">
            
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestination.BeforeCharacter(System.Int32)">
            
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestination.OnCharacter(System.Int32)">
            
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestination.AfterCharacter(System.Int32)">
            
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestination.OnOpenGroup">
            
            @return
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestination.OnCloseGroup">
            
            @return
        </member>
        <member name="T:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordHandler">
            <code>RtfCtrlWordBase</code> is the base class for all
            control word handlers to extend from.
            
            @author Howard Shank (hgshank@yahoo.com)
            @since 2.0.8
        </member>
        <member name="F:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordHandler.debug">
            Debug flag - internal use
            @since 2.0.8
        </member>
        <member name="F:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordHandler.rtfParser">
            Local variable referencing the parser object. 
            @since 2.0.8
        </member>
        <member name="F:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordHandler.ctrlWord">
            The control word for this class.
            @since 2.0.8
        </member>
        <member name="F:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordHandler.defaultParameterValue">
            The default value for this control word.
            Not all control words use a default parameter value.
            @since 2.0.8
        </member>
        <member name="F:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordHandler.passDefaultParameterValue">
            Does this control word use the default value?
            @since 2.0.8
        </member>
        <member name="F:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordHandler.ctrlWordType">
            Control Word type. Destination, toggle, value, etc.
            @since 2.0.8
        </member>
        <member name="F:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordHandler.specialHandler">
            Class, property, etc.
            @since 2.0.8
        </member>
        <member name="F:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordHandler.rtfVersionSupported">
            What version of the RTF spec the control word was introduced.
            @since 2.0.8
        </member>
        <member name="F:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordHandler.ctrlWordData">
            The control word as parsed by the parser.
            @since 2.0.8
        </member>
        <member name="F:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordHandler.groupPrefix">
            String containing the value of "{" or "" (blank) depending on if this is the
            first control word in a group.
            @since 2.0.8
        </member>
        <member name="F:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordHandler.ctrlWordPrefix">
            The prefix for all control words.
            @since 2.0.8
        </member>
        <member name="F:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordHandler.ctrlWordSuffix">
            The prefix for all control words.
            @since 2.0.8
        </member>
        <member name="M:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordHandler.#ctor(iTextSharp.text.rtf.parser.RtfParser,System.String,System.Int32,System.Boolean,System.Int32,System.String,System.String,System.String)">
             Constructor:
            
             @param rtfParser
                  The parser for this control word.
             @param ctrlWord
                  The string value of this control word.
             @param defaultParameterValue
                  The default value of this control word. Not all control words have values.
             @param passDefaultParameterValue
                  Flag indicating if this control word should use the default value.
             @param ctrlWordType
                  Indicator of the type of control word this is. DESTINATION|DESTINATION_EX|VALUE|FLAG|TOGGLE|SYMBOL
             @param prefix
                  String to prefix the ctrl word with. "\" or "\*\" are the 2 used values.
             @param suffix
                  String to add as suffix to the ctrl word. " " and "" are the 2 used values.
             @param specialHandler
                  If TOGGLE then the property name as String (propertyGroup.propertyName format ex. "character.bold")
                  If FLAG then the property name as String (propertyGroup.propertyName format ex. "character.bold")
                  If VALUE then the property name as String (propertyGroup.propertyName format ex. "character.bold")
                  If SYMBOL then the character to use for substitution as String
                  If DESTINATION|DESTINATION_EX then the RtfDestination class name as String
             
             @since 2.0.8
        </member>
        <member name="M:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordHandler.HandleControlword(iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordData)">
            The primary control word handler method.
            Called by the parser once it has a control word and parameter if applicable.
            
            @param ctrlWordDataIn
                 The control word and associated parameter if applicable.
            @return
                 <code>true</code> or <code>false</code> if the control word was handled.
            @since 2.0.8
        </member>
        <member name="M:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordHandler.BeforeControlWord">
            Pre-processing before the control word.
            
            If return value is true, no further processing will be performed on
            this control word.
            
            @return <code>false</code> = stop processing, <code>true</code> = continue processing 
            @since 2.0.8
        </member>
        <member name="M:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordHandler.OnControlWord">
            Handle the control word.
            
            @return <code>true</code> if control word was handled, <code>false</code> if it was not handled.
            @since 2.0.8
        </member>
        <member name="M:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordHandler.AfterControlWord">
            Post-processing after the control word.
            
            @return <code>false</code> = stop processing, <code>true</code> = continue processing
            @since 2.0.8
        </member>
        <member name="M:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordHandler.PrintDebug(System.String)">
            Debug function to print class/method
            @param txt The <code>String</code> to output.
            @since 2.0.8
        </member>
        <member name="T:iTextSharp.text.rtf.field.RtfPageNumber">
            The RtfPageNumber provides the page number field in rtf documents.
            
            @version $Revision: 1.4 $
            @author Mark Hall (Mark.Hall@mail.room3b.eu)
            @author <a href="mailto:Steffen.Stundzig@smb-tec.com">Steffen.Stundzig@smb-tec.com</a>
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfPageNumber.PAGE_NUMBER">
            Constant for the page number
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfPageNumber.#ctor">
            Constructs a RtfPageNumber. This can be added anywhere to add a page number field.
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfPageNumber.#ctor(iTextSharp.text.Font)">
            Constructs a RtfPageNumber with a specified Font. This can be added anywhere to
            add a page number field.
            @param font
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfPageNumber.#ctor(iTextSharp.text.rtf.document.RtfDocument)">
            Constructs a RtfPageNumber object.
            
            @param doc The RtfDocument this RtfPageNumber belongs to
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfPageNumber.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.Font)">
            Constructs a RtfPageNumber object with a specific font.
            
            @param doc The RtfDocument this RtfPageNumber belongs to
            @param font The Font to use
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfPageNumber.WriteFieldInstContent(System.IO.Stream)">
            Writes the field instruction content
            
            @
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfPageNumber.WriteFieldResultContent(System.IO.Stream)">
            Writes the field result content
            
            @
        </member>
        <member name="T:iTextSharp.text.rtf.direct.RtfDirectContent">
            The RtfDirectContent makes it possible to directly add RTF code into
            an RTF document. This can be used to directly add RTF fragments that
            have been created with other RTF editors. One important aspect is that
            font and color numbers will not be modified. This means that the
            fonts and colors visible in the final document might not be equivalent
            with those set on the direct content.<br /><br />
            
            For convenience the RtfDirectContent provides a DIRECT_SOFT_LINEBREAK
            constant that makes it possible to easily add soft line-breaks anywhere in
            the RTF document.
            
            @version $Revision: 1.6 $
            @author Mark Hall (Mark.Hall@mail.room3b.eu)
        </member>
        <member name="F:iTextSharp.text.rtf.direct.RtfDirectContent.DIRECT_SOFT_LINEBREAK">
            Add the DIRECT_SOFT_LINEBREAK to the Document to insert
            a soft line-break at that position.
        </member>
        <member name="F:iTextSharp.text.rtf.direct.RtfDirectContent.directContent">
            The direct content to add.
        </member>
        <member name="M:iTextSharp.text.rtf.direct.RtfDirectContent.#ctor(System.String)">
            Constructs a new RtfDirectContent with the content to add.
            
            @param directContent The content to add.
        </member>
        <member name="M:iTextSharp.text.rtf.direct.RtfDirectContent.WriteContent(System.IO.Stream)">
            Writes the element content to the given output stream.
        </member>
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.pdf.SequenceList" -->
        <member name="M:iTextSharp.text.pdf.SequenceList.Expand(System.String,System.Int32)">
            Generates a list of numbers from a string.
            @param ranges the comma separated ranges
            @param maxNumber the maximum number in the range
            @return a list with the numbers as <CODE>Integer</CODE>
        </member>
        <member name="T:iTextSharp.text.pdf.Pfm2afm">
            Converts a PFM file into an AFM file.
        </member>
        <member name="M:iTextSharp.text.pdf.Pfm2afm.#ctor(iTextSharp.text.pdf.RandomAccessFileOrArray,System.IO.Stream)">
            Creates a new instance of Pfm2afm 
        </member>
        <member name="M:iTextSharp.text.pdf.Pfm2afm.Convert(iTextSharp.text.pdf.RandomAccessFileOrArray,System.IO.Stream)">
            Converts a PFM file into an AFM file.
            @param inp the PFM file
            @param outp the AFM file
            @throws IOException on error
        </member>
        <member name="F:iTextSharp.text.pdf.Pfm2afm.Win2PSStd">
            Translate table from 1004 to psstd.  1004 is an extension of the
            Windows translate table used in PM.
        </member>
        <member name="F:iTextSharp.text.pdf.Pfm2afm.WinClass">
            Character class.  This is a minor attempt to overcome the problem that
            in the pfm file, all unused characters are given the width of space.
            Note that this array isn't used in iText.
        </member>
        <member name="F:iTextSharp.text.pdf.Pfm2afm.WinChars">
            Windows character names.  Give a name to the used locations
            for when the all flag is specified.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTransition.SPLITVOUT">
            Out Vertical Split
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTransition.SPLITHOUT">
            Out Horizontal Split
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTransition.SPLITVIN">
            In Vertical Split
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTransition.SPLITHIN">
            IN Horizontal Split
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTransition.BLINDV">
            Vertical Blinds
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTransition.BLINDH">
            Vertical Blinds
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTransition.INBOX">
            Inward Box
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTransition.OUTBOX">
            Outward Box
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTransition.LRWIPE">
            Left-Right Wipe
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTransition.RLWIPE">
            Right-Left Wipe
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTransition.BTWIPE">
            Bottom-Top Wipe
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTransition.TBWIPE">
            Top-Bottom Wipe
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTransition.DISSOLVE">
            Dissolve
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTransition.LRGLITTER">
            Left-Right Glitter
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTransition.TBGLITTER">
            Top-Bottom Glitter
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTransition.DGLITTER">
            Diagonal Glitter
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTransition.duration">
            duration of the transition effect
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTransition.type">
            type of the transition effect
        </member>
        <member name="M:iTextSharp.text.pdf.PdfTransition.#ctor">
              Constructs a <CODE>Transition</CODE>.
            
        </member>
        <member name="M:iTextSharp.text.pdf.PdfTransition.#ctor(System.Int32)">
              Constructs a <CODE>Transition</CODE>.
            
            @param  type      type of the transition effect
        </member>
        <member name="M:iTextSharp.text.pdf.PdfTransition.#ctor(System.Int32,System.Int32)">
              Constructs a <CODE>Transition</CODE>.
            
            @param  type      type of the transition effect
            @param  duration  duration of the transition effect
        </member>
        <member name="T:iTextSharp.text.pdf.PdfSigGenericPKCS">
            A signature dictionary representation for the standard filters.
        </member>
        <member name="T:iTextSharp.text.pdf.PdfSignature">
            Implements the signature dictionary.
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSignature.#ctor(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfName)">
            Creates new PdfSignature 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfSigGenericPKCS.hashAlgorithm">
            The hash algorith, for example "SHA1"
        </member>
        <member name="F:iTextSharp.text.pdf.PdfSigGenericPKCS.pkcs">
            The class instance that calculates the PKCS#1 and PKCS#7
        </member>
        <member name="F:iTextSharp.text.pdf.PdfSigGenericPKCS.name">
            The subject name in the signing certificate (the element "CN")
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSigGenericPKCS.#ctor(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfName)">
            Creates a generic standard filter.
            @param filter the filter name
            @param subFilter the sub-filter name
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSigGenericPKCS.SetSignInfo(Org.BouncyCastle.Crypto.ICipherParameters,Org.BouncyCastle.X509.X509Certificate[],System.Object[])">
            Sets the crypto information to sign.
            @param privKey the private key
            @param certChain the certificate chain
            @param crlList the certificate revocation list. It can be <CODE>null</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSigGenericPKCS.SetExternalDigest(System.Byte[],System.Byte[],System.String)">
            Sets the digest/signature to an external calculated value.
            @param digest the digest. This is the actual signature
            @param RSAdata the extra data that goes into the data tag in PKCS#7
            @param digestEncryptionAlgorithm the encryption algorithm. It may must be <CODE>null</CODE> if the <CODE>digest</CODE>
            is also <CODE>null</CODE>. If the <CODE>digest</CODE> is not <CODE>null</CODE>
            then it may be "RSA" or "DSA"
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSigGenericPKCS.Name">
            Gets the subject name in the signing certificate (the element "CN")
            @return the subject name in the signing certificate (the element "CN")
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSigGenericPKCS.Signer">
            Gets the class instance that does the actual signing.
            @return the class instance that does the actual signing
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSigGenericPKCS.SignerContents">
            Gets the signature content. This can be a PKCS#1 or a PKCS#7. It corresponds to
            the /Contents key.
            @return the signature content
        </member>
        <member name="T:iTextSharp.text.pdf.PdfSigGenericPKCS.VeriSign">
            Creates a standard filter of the type VeriSign.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSigGenericPKCS.VeriSign.#ctor">
            The constructor for the default provider.
        </member>
        <member name="T:iTextSharp.text.pdf.PdfSigGenericPKCS.PPKLite">
            Creates a standard filter of the type self signed.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSigGenericPKCS.PPKLite.#ctor">
            The constructor for the default provider.
        </member>
        <member name="T:iTextSharp.text.pdf.PdfSigGenericPKCS.PPKMS">
            Creates a standard filter of the type Windows Certificate.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSigGenericPKCS.PPKMS.#ctor">
            The constructor for the default provider.
        </member>
        <member name="T:iTextSharp.text.pdf.PdfReader">
            Reads a PDF document.
            @author Paulo Soares (psoares@consiste.pt)
            @author Kazuya Ujihara
        </member>
        <member name="F:iTextSharp.text.pdf.PdfReader.appendable">
            Holds value of property appendable.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.#ctor(System.String)">
            Reads and parses a PDF document.
            @param filename the file name of the document
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.#ctor(System.String,System.Byte[])">
            Reads and parses a PDF document.
            @param filename the file name of the document
            @param ownerPassword the password to read the document
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.#ctor(System.Byte[])">
            Reads and parses a PDF document.
            @param pdfIn the byte array with the document
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.#ctor(System.Byte[],System.Byte[])">
            Reads and parses a PDF document.
            @param pdfIn the byte array with the document
            @param ownerPassword the password to read the document
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.#ctor(System.String,Org.BouncyCastle.X509.X509Certificate,Org.BouncyCastle.Crypto.ICipherParameters)">
            Reads and parses a PDF document.
            @param filename the file name of the document
            @param certificate the certificate to read the document
            @param certificateKey the private key of the certificate
            @param certificateKeyProvider the security provider for certificateKey
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.#ctor(System.Uri)">
            Reads and parses a PDF document.
            @param url the Uri of the document
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.#ctor(System.Uri,System.Byte[])">
            Reads and parses a PDF document.
            @param url the Uri of the document
            @param ownerPassword the password to read the document
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.#ctor(System.IO.Stream,System.Byte[])">
            Reads and parses a PDF document.
            @param is the <CODE>InputStream</CODE> containing the document. The stream is read to the
            end but is not closed
            @param ownerPassword the password to read the document
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.#ctor(System.IO.Stream)">
            Reads and parses a PDF document.
            @param isp the <CODE>InputStream</CODE> containing the document. The stream is read to the
            end but is not closed
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.#ctor(iTextSharp.text.pdf.RandomAccessFileOrArray,System.Byte[])">
            Reads and parses a pdf document. Contrary to the other constructors only the xref is read
            into memory. The reader is said to be working in "partial" mode as only parts of the pdf
            are read as needed. The pdf is left open but may be closed at any time with
            <CODE>PdfReader.Close()</CODE>, reopen is automatic.
            @param raf the document location
            @param ownerPassword the password or <CODE>null</CODE> for no password
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.#ctor(iTextSharp.text.pdf.PdfReader)">
            Creates an independent duplicate.
            @param reader the <CODE>PdfReader</CODE> to duplicate
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetPageRotation(System.Int32)">
            Gets the page rotation. This value can be 0, 90, 180 or 270.
            @param index the page number. The first page is 1
            @return the page rotation
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetPageSizeWithRotation(System.Int32)">
            Gets the page size, taking rotation into account. This
            is a <CODE>Rectangle</CODE> with the value of the /MediaBox and the /Rotate key.
            @param index the page number. The first page is 1
            @return a <CODE>Rectangle</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetPageSizeWithRotation(iTextSharp.text.pdf.PdfDictionary)">
            Gets the rotated page from a page dictionary.
            @param page the page dictionary
            @return the rotated page
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetPageSize(System.Int32)">
            Gets the page size without taking rotation into account. This
            is the value of the /MediaBox key.
            @param index the page number. The first page is 1
            @return the page size
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetPageSize(iTextSharp.text.pdf.PdfDictionary)">
            Gets the page from a page dictionary
            @param page the page dictionary
            @return the page
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetCropBox(System.Int32)">
            Gets the crop box without taking rotation into account. This
            is the value of the /CropBox key. The crop box is the part
            of the document to be displayed or printed. It usually is the same
            as the media box but may be smaller. If the page doesn't have a crop
            box the page size will be returned.
            @param index the page number. The first page is 1
            @return the crop box
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetBoxSize(System.Int32,System.String)">
            Gets the box size. Allowed names are: "crop", "trim", "art", "bleed" and "media".
            @param index the page number. The first page is 1
            @param boxName the box name
            @return the box rectangle or null
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetNormalizedRectangle(iTextSharp.text.pdf.PdfArray)">
            Normalizes a <CODE>Rectangle</CODE> so that llx and lly are smaller than urx and ury.
            @param box the original rectangle
            @return a normalized <CODE>Rectangle</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.ReadDecryptedDocObj">
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetPdfObjectRelease(iTextSharp.text.pdf.PdfObject)">
            @param obj
            @return a PdfObject
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetPdfObject(iTextSharp.text.pdf.PdfObject)">
            Reads a <CODE>PdfObject</CODE> resolving an indirect reference
            if needed.
            @param obj the <CODE>PdfObject</CODE> to read
            @return the resolved <CODE>PdfObject</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetPdfObjectRelease(iTextSharp.text.pdf.PdfObject,iTextSharp.text.pdf.PdfObject)">
            Reads a <CODE>PdfObject</CODE> resolving an indirect reference
            if needed. If the reader was opened in partial mode the object will be released
            to save memory.
            @param obj the <CODE>PdfObject</CODE> to read
            @param parent
            @return a PdfObject
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetPdfObject(iTextSharp.text.pdf.PdfObject,iTextSharp.text.pdf.PdfObject)">
            @param obj
            @param parent
            @return a PdfObject
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetPdfObjectRelease(System.Int32)">
            @param idx
            @return a PdfObject
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetPdfObject(System.Int32)">
            @param idx
            @return aPdfObject
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.ResetLastXrefPartial">
            
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.ReleaseLastXrefPartial">
            
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.ReleaseLastXrefPartial(iTextSharp.text.pdf.PdfObject)">
            @param obj
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.AddPdfObject(iTextSharp.text.pdf.PdfObject)">
            @param obj
            @return an indirect reference
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.DumpPerc">
            @return the percentage of the cross reference table that has been read
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.KillIndirect(iTextSharp.text.pdf.PdfObject)">
            Eliminates the reference to the object freeing the memory used by it and clearing
            the xref entry.
            @param obj the object. If it's an indirect reference it will be eliminated
            @return the object or the already erased dereferenced object
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.FlateDecode(System.Byte[])">
            Decodes a stream that has the FlateDecode filter.
            @param in the input data
            @return the decoded data
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.DecodePredictor(System.Byte[],iTextSharp.text.pdf.PdfObject)">
            @param in
            @param dicPar
            @return a byte array
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.FlateDecode(System.Byte[],System.Boolean)">
            A helper to FlateDecode.
            @param in the input data
            @param strict <CODE>true</CODE> to read a correct stream. <CODE>false</CODE>
            to try to read a corrupted stream
            @return the decoded data
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.ASCIIHexDecode(System.Byte[])">
            Decodes a stream that has the ASCIIHexDecode filter.
            @param in the input data
            @return the decoded data
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.ASCII85Decode(System.Byte[])">
            Decodes a stream that has the ASCII85Decode filter.
            @param in the input data
            @return the decoded data
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.LZWDecode(System.Byte[])">
            Decodes a stream that has the LZWDecode filter.
            @param in the input data
            @return the decoded data
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.IsRebuilt">
            Checks if the document had errors and was rebuilt.
             @return true if rebuilt.
            
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetPageN(System.Int32)">
            Gets the dictionary that represents a page.
            @param pageNum the page number. 1 is the first
            @return the page dictionary
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetPageNRelease(System.Int32)">
            @param pageNum
            @return a Dictionary object
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.ReleasePage(System.Int32)">
            @param pageNum
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.ResetReleasePage">
            
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetPageOrigRef(System.Int32)">
            Gets the page reference to this page.
            @param pageNum the page number. 1 is the first
            @return the page reference
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetPageContent(System.Int32,iTextSharp.text.pdf.RandomAccessFileOrArray)">
            Gets the contents of the page.
            @param pageNum the page number. 1 is the first
            @param file the location of the PDF document
            @throws IOException on error
            @return the content
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetPageContent(System.Int32)">
            Gets the contents of the page.
            @param pageNum the page number. 1 is the first
            @throws IOException on error
            @return the content
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.SetPageContent(System.Int32,System.Byte[])">
            Sets the contents of the page.
            @param content the new page content
            @param pageNum the page number. 1 is the first
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.SetPageContent(System.Int32,System.Byte[],System.Int32)">
            Sets the contents of the page.
            @param content the new page content
            @param pageNum the page number. 1 is the first
            @since   2.1.3   (the method already existed without param compressionLevel)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetStreamBytes(iTextSharp.text.pdf.PRStream,iTextSharp.text.pdf.RandomAccessFileOrArray)">
            Get the content from a stream applying the required filters.
            @param stream the stream
            @param file the location where the stream is
            @throws IOException on error
            @return the stream content
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetStreamBytes(iTextSharp.text.pdf.PRStream)">
            Get the content from a stream applying the required filters.
            @param stream the stream
            @throws IOException on error
            @return the stream content
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetStreamBytesRaw(iTextSharp.text.pdf.PRStream,iTextSharp.text.pdf.RandomAccessFileOrArray)">
            Get the content from a stream as it is without applying any filter.
            @param stream the stream
            @param file the location where the stream is
            @throws IOException on error
            @return the stream content
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetStreamBytesRaw(iTextSharp.text.pdf.PRStream)">
            Get the content from a stream as it is without applying any filter.
            @param stream the stream
            @throws IOException on error
            @return the stream content
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.EliminateSharedStreams">
            Eliminates shared streams if they exist. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.IsEncrypted">
            Returns <CODE>true</CODE> if the PDF is encrypted.
            @return <CODE>true</CODE> if the PDF is encrypted
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.Is128Key">
            Returns <CODE>true</CODE> if the PDF has a 128 bit key encryption.
            @return <CODE>true</CODE> if the PDF has a 128 bit key encryption
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.ShuffleSubsetNames">
            Finds all the font subsets and changes the prefixes to some
            random values.
            @return the number of font subsets altered
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.CreateFakeFontSubsets">
            Finds all the fonts not subset but embedded and marks them as subset.
            @return the number of fonts altered
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetNamedDestination">
            Gets all the named destinations as an <CODE>Hashtable</CODE>. The key is the name
            and the value is the destinations array.
            @return gets all the named destinations
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetNamedDestination(System.Boolean)">
            Gets all the named destinations as an <CODE>HashMap</CODE>. The key is the name
            and the value is the destinations array.
            @param   keepNames   true if you want the keys to be real PdfNames instead of Strings
            @return gets all the named destinations
            @since   2.1.6
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetNamedDestinationFromNames">
            Gets the named destinations from the /Dests key in the catalog as an <CODE>Hashtable</CODE>. The key is the name
            and the value is the destinations array.
            @return gets the named destinations
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetNamedDestinationFromNames(System.Boolean)">
            Gets the named destinations from the /Dests key in the catalog as an <CODE>HashMap</CODE>. The key is the name
            and the value is the destinations array.
            @param   keepNames   true if you want the keys to be real PdfNames instead of Strings
            @return gets the named destinations
            @since   2.1.6
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetNamedDestinationFromStrings">
            Gets the named destinations from the /Names key in the catalog as an <CODE>Hashtable</CODE>. The key is the name
            and the value is the destinations array.
            @return gets the named destinations
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.RemoveFields">
            Removes all the fields from the document.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.RemoveAnnotations">
            Removes all the annotations and fields from the document.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.ConsolidateNamedDestinations">
            Replaces all the local named links with the actual destinations. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.Close">
            Closes the reader
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.RemoveUnusedObjects">
            Removes all the unreachable objects.
            @return the number of indirect objects removed
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetJavaScript(iTextSharp.text.pdf.RandomAccessFileOrArray)">
            Gets the global document JavaScript.
            @param file the document file
            @throws IOException on error
            @return the global document JavaScript
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.SelectPages(System.String)">
            Selects the pages to keep in the document. The pages are described as
            ranges. The page ordering can be changed but
            no page repetitions are allowed. Note that it may be very slow in partial mode.
            @param ranges the comma separated ranges as described in {@link SequenceList}
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.SelectPages(System.Collections.ArrayList)">
            Selects the pages to keep in the document. The pages are described as a
            <CODE>List</CODE> of <CODE>Integer</CODE>. The page ordering can be changed but
            no page repetitions are allowed. Note that it may be very slow in partial mode.
            @param pagesToKeep the pages to keep in the document
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.AddViewerPreference(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfObject)">
            Adds a viewer preference
            @param key a key for a viewer preference
            @param value a value for the viewer preference
            @see PdfViewerPreferences#addViewerPreference
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.IsNewXrefType">
            Getter for property newXrefType.
            @return Value of property newXrefType.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.IsHybridXref">
            Getter for property hybridXref.
            @return Value of property hybridXref.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.RemoveUsageRights">
            Removes any usage rights that this PDF may have. Only Adobe can grant usage rights
            and any PDF modification with iText will invalidate them. Invalidated usage rights may
            confuse Acrobat and it's advisabe to remove them altogether.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetCertificationLevel">
            Gets the certification level for this document. The return values can be <code>PdfSignatureAppearance.NOT_CERTIFIED</code>, 
            <code>PdfSignatureAppearance.CERTIFIED_NO_CHANGES_ALLOWED</code>,
            <code>PdfSignatureAppearance.CERTIFIED_FORM_FILLING</code> and
            <code>PdfSignatureAppearance.CERTIFIED_FORM_FILLING_AND_ANNOTATIONS</code>.
            <p>
            No signature validation is made, use the methods availabe for that in <CODE>AcroFields</CODE>.
            </p>
            @return gets the certification level for this document
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.SafeFile">
            Gets a new file instance of the original PDF
            document.
            @return a new file instance of the original PDF document
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.NumberOfPages">
            Gets the number of pages in the document.
            @return the number of pages in the document
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.Catalog">
            Returns the document's catalog. This dictionary is not a copy,
            any changes will be reflected in the catalog.
            @return the document's catalog
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.AcroForm">
            Returns the document's acroform, if it has one.
            @return the document's acroform
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.Info">
            Returns the content of the document information dictionary as a <CODE>Hashtable</CODE>
            of <CODE>String</CODE>.
            @return content of the document information dictionary
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.Tampered">
            Sets the tampered state. A tampered PdfReader cannot be reused in PdfStamper.
            @param tampered the tampered state
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.Metadata">
            Gets the XML metadata.
            @throws IOException on error
            @return the XML metadata
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.LastXref">
            Gets the byte address of the last xref table.
            @return the byte address of the last xref table
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.XrefSize">
            Gets the number of xref objects.
            @return the number of xref objects
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.EofPos">
            Gets the byte address of the %%EOF marker.
            @return the byte address of the %%EOF marker
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.PdfVersion">
            Gets the PDF version. Only the last version char is returned. For example
            version 1.4 is returned as '4'.
            @return the PDF version
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.Permissions">
            Gets the encryption permissions. It can be used directly in
            <CODE>PdfWriter.SetEncryption()</CODE>.
            @return the encryption permissions
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.Trailer">
            Gets the trailer dictionary
            @return the trailer dictionary
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.AcroFields">
            Gets a read-only version of <CODE>AcroFields</CODE>.
            @return a read-only version of <CODE>AcroFields</CODE>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.JavaScript">
            Gets the global document JavaScript.
            @throws IOException on error
            @return the global document JavaScript
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.ViewerPreferences">
            Sets the viewer preferences as the sum of several constants.
            @param preferences the viewer preferences
            @see PdfViewerPreferences#setViewerPreferences
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.SimpleViewerPreferences">
            Returns a bitset representing the PageMode and PageLayout viewer preferences.
            Doesn't return any information about the ViewerPreferences dictionary.
            @return an int that contains the Viewer Preferences.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.FileLength">
            Getter for property fileLength.
            @return Value of property fileLength.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.IsOpenedWithFullPermissions">
            Checks if the document was opened with the owner password so that the end application
            can decide what level of access restrictions to apply. If the document is not encrypted
            it will return <CODE>true</CODE>.
            @return <CODE>true</CODE> if the document was opened with the owner password or if it's not encrypted,
            <CODE>false</CODE> if the document was opened with the user password
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.PageRefs.GetPageN(System.Int32)">
            Gets the dictionary that represents a page.
            @param pageNum the page number. 1 is the first
            @return the page dictionary
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.PageRefs.GetPageNRelease(System.Int32)">
            @param pageNum
            @return a dictionary object
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.PageRefs.GetPageOrigRefRelease(System.Int32)">
            @param pageNum
            @return an indirect reference
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.PageRefs.GetPageOrigRef(System.Int32)">
            Gets the page reference to this page.
            @param pageNum the page number. 1 is the first
            @return the page reference
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.PageRefs.ReleasePage(System.Int32)">
            @param pageNum
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.PageRefs.ResetReleasePage">
            
        </member>
        <member name="T:iTextSharp.text.pdf.PdfPublicKeySecurityHandler">
            @author Aiken Sam (aikensam@ieee.org)
        </member>
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.pdf.PdfPage" -->
        <member name="F:iTextSharp.text.pdf.PdfPage.PORTRAIT">
            value of the <B>Rotate</B> key for a page in PORTRAIT 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPage.LANDSCAPE">
            value of the <B>Rotate</B> key for a page in LANDSCAPE 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPage.INVERTEDPORTRAIT">
            value of the <B>Rotate</B> key for a page in INVERTEDPORTRAIT 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPage.SEASCAPE">
            value of the <B>Rotate</B> key for a page in SEASCAPE 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPage.mediaBox">
            value of the <B>MediaBox</B> key 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPage.#ctor(iTextSharp.text.pdf.PdfRectangle,System.Collections.Hashtable,iTextSharp.text.pdf.PdfDictionary,System.Int32)">
             Constructs a <CODE>PdfPage</CODE>.
            
             @param       mediaBox        a value for the <B>MediaBox</B> key
             @param       resources       an indirect reference to a <CODE>PdfResources</CODE>-object
             @param       rotate          a value for the <B>Rotate</B> key
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPage.#ctor(iTextSharp.text.pdf.PdfRectangle,System.Collections.Hashtable,iTextSharp.text.pdf.PdfDictionary)">
             Constructs a <CODE>PdfPage</CODE>.
            
             @param       mediaBox        a value for the <B>MediaBox</B> key
             @param       resources       an indirect reference to a <CODE>PdfResources</CODE>-object
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfPage.IsParent" -->
        <member name="M:iTextSharp.text.pdf.PdfPage.Add(iTextSharp.text.pdf.PdfIndirectReference)">
             Adds an indirect reference pointing to a <CODE>PdfContents</CODE>-object.
            
             @param       contents        an indirect reference to a <CODE>PdfContents</CODE>-object
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPage.RotateMediaBox">
             Rotates the mediabox, but not the text in it.
            
             @return      a <CODE>PdfRectangle</CODE>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPage.MediaBox">
             Returns the MediaBox of this Page.
            
             @return      a <CODE>PdfRectangle</CODE>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfFunction">
            Implements PDF functions.
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfFunction.#ctor(iTextSharp.text.pdf.PdfWriter)">
            Creates new PdfFunction 
        </member>
        <member name="T:iTextSharp.text.pdf.PdfAction">
             A <CODE>PdfAction</CODE> defines an action that can be triggered from a PDF file.
            
             @see     PdfDictionary
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAction.FIRSTPAGE">
            A named action to go to the first page.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAction.PREVPAGE">
            A named action to go to the previous page.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAction.NEXTPAGE">
            A named action to go to the next page.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAction.LASTPAGE">
            A named action to go to the last page.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAction.PRINTDIALOG">
            A named action to open a print dialog.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAction.SUBMIT_XFDF">
            a possible submitvalue 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAction.SUBMIT_INCLUDE_APPEND_SAVES">
            a possible submitvalue 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAction.SUBMIT_INCLUDE_ANNOTATIONS">
            a possible submitvalue 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAction.SUBMIT_PDF">
            a possible submitvalue 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAction.SUBMIT_CANONICAL_FORMAT">
            a possible submitvalue 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAction.SUBMIT_EXCL_NON_USER_ANNOTS">
            a possible submitvalue 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAction.SUBMIT_EXCL_F_KEY">
            a possible submitvalue 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAction.SUBMIT_EMBED_FORM">
            a possible submitvalue 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAction.RESET_EXCLUDE">
            a possible submitvalue 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAction.#ctor">
            Create an empty action.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAction.#ctor(System.Uri)">
             Constructs a new <CODE>PdfAction</CODE> of Subtype URI.
            
             @param url the Url to go to
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAction.#ctor(System.String)">
             Constructs a new <CODE>PdfAction</CODE> of Subtype URI.
            
             @param url the url to go to
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAction.#ctor(iTextSharp.text.pdf.PdfIndirectReference)">
            Constructs a new <CODE>PdfAction</CODE> of Subtype GoTo.
            @param destination the destination to go to
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAction.#ctor(System.String,System.String)">
            Constructs a new <CODE>PdfAction</CODE> of Subtype GoToR.
            @param filename the file name to go to
            @param name the named destination to go to
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAction.#ctor(System.String,System.Int32)">
            Constructs a new <CODE>PdfAction</CODE> of Subtype GoToR.
            @param filename the file name to go to
            @param page the page destination to go to
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAction.#ctor(System.Int32)">
            Implements name actions. The action can be FIRSTPAGE, LASTPAGE,
            NEXTPAGE and PREVPAGE.
            @param named the named action
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAction.#ctor(System.String,System.String,System.String,System.String)">
            Launchs an application or a document.
            @param application the application to be launched or the document to be opened or printed.
            @param parameters (Windows-specific) A parameter string to be passed to the application.
            It can be <CODE>null</CODE>.
            @param operation (Windows-specific) the operation to perform: "open" - Open a document,
            "print" - Print a document.
            It can be <CODE>null</CODE>.
            @param defaultDir (Windows-specific) the default directory in standard DOS syntax.
            It can be <CODE>null</CODE>.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAction.CreateLaunch(System.String,System.String,System.String,System.String)">
            Launchs an application or a document.
            @param application the application to be launched or the document to be opened or printed.
            @param parameters (Windows-specific) A parameter string to be passed to the application.
            It can be <CODE>null</CODE>.
            @param operation (Windows-specific) the operation to perform: "open" - Open a document,
            "print" - Print a document.
            It can be <CODE>null</CODE>.
            @param defaultDir (Windows-specific) the default directory in standard DOS syntax.
            It can be <CODE>null</CODE>.
            @return a Launch action
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAction.Rendition(System.String,iTextSharp.text.pdf.PdfFileSpecification,System.String,iTextSharp.text.pdf.PdfIndirectReference)">
            Creates a Rendition action
            @param file
            @param fs
            @param mimeType
            @param ref
            @return a Media Clip action
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAction.JavaScript(System.String,iTextSharp.text.pdf.PdfWriter,System.Boolean)">
            Creates a JavaScript action. If the JavaScript is smaller than
            50 characters it will be placed as a string, otherwise it will
            be placed as a compressed stream.
            @param code the JavaScript code
            @param writer the writer for this action
            @param unicode select JavaScript unicode. Note that the internal
            Acrobat JavaScript engine does not support unicode,
            so this may or may not work for you
            @return the JavaScript action
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAction.JavaScript(System.String,iTextSharp.text.pdf.PdfWriter)">
            Creates a JavaScript action. If the JavaScript is smaller than
            50 characters it will be place as a string, otherwise it will
            be placed as a compressed stream.
            @param code the JavaScript code
            @param writer the writer for this action
            @return the JavaScript action
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAction.Next(iTextSharp.text.pdf.PdfAction)">
            Add a chained action.
            @param na the next action
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAction.GotoLocalPage(System.Int32,iTextSharp.text.pdf.PdfDestination,iTextSharp.text.pdf.PdfWriter)">
            Creates a GoTo action to an internal page.
            @param page the page to go. First page is 1
            @param dest the destination for the page
            @param writer the writer for this action
            @return a GoTo action
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAction.GotoLocalPage(System.String,System.Boolean)">
            Creates a GoTo action to a named destination.
            @param dest the named destination
            @param isName if true sets the destination as a name, if false sets it as a String
            @return a GoToR action
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAction.GotoRemotePage(System.String,System.String,System.Boolean,System.Boolean)">
            Creates a GoToR action to a named destination.
            @param filename the file name to go to
            @param dest the destination name
            @param isName if true sets the destination as a name, if false sets it as a String
            @param newWindow open the document in a new window if <CODE>true</CODE>, if false the current document is replaced by the new document.
            @return a GoToR action
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAction.GotoEmbedded(System.String,iTextSharp.text.pdf.collection.PdfTargetDictionary,System.String,System.Boolean,System.Boolean)">
            Creates a GoToE action to an embedded file.
            @param filename   the root document of the target (null if the target is in the same document)
            @param dest the named destination
            @param isName if true sets the destination as a name, if false sets it as a String
            @return a GoToE action
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAction.GotoEmbedded(System.String,iTextSharp.text.pdf.collection.PdfTargetDictionary,iTextSharp.text.pdf.PdfObject,System.Boolean)">
            Creates a GoToE action to an embedded file.
            @param filename   the root document of the target (null if the target is in the same document)
            @param target a path to the target document of this action
            @param dest       the destination inside the target document, can be of type PdfDestination, PdfName, or PdfString
            @param newWindow  if true, the destination document should be opened in a new window
            @return a GoToE action
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfAction.SetOCGstate(System.Collections.ArrayList,System.Boolean)" -->
        <member name="T:iTextSharp.text.pdf.OcspClientBouncyCastle">
            OcspClient implementation using BouncyCastle.
            @author psoares
            @since	2.1.6
        </member>
        <member name="T:iTextSharp.text.pdf.IOcspClient">
            Interface for the OCSP Client.
            @since 2.1.6
        </member>
        <member name="M:iTextSharp.text.pdf.IOcspClient.GetEncoded">
            Gets an encoded byte array.
            @return   a byte array
        </member>
        <member name="F:iTextSharp.text.pdf.OcspClientBouncyCastle.rootCert">
            root certificate 
        </member>
        <member name="F:iTextSharp.text.pdf.OcspClientBouncyCastle.checkCert">
            check certificate 
        </member>
        <member name="F:iTextSharp.text.pdf.OcspClientBouncyCastle.url">
            OCSP URL 
        </member>
        <member name="M:iTextSharp.text.pdf.OcspClientBouncyCastle.#ctor(Org.BouncyCastle.X509.X509Certificate,Org.BouncyCastle.X509.X509Certificate,System.String)">
            Creates an instance of an OcspClient that will be using BouncyCastle.
            @param checkCert	the check certificate
            @param rootCert	the root certificate
            @param url	the OCSP URL
        </member>
        <member name="M:iTextSharp.text.pdf.OcspClientBouncyCastle.GenerateOCSPRequest(Org.BouncyCastle.X509.X509Certificate,Org.BouncyCastle.Math.BigInteger)">
            Generates an OCSP request using BouncyCastle.
            @param issuerCert	certificate of the issues
            @param serialNumber	serial number
            @return	an OCSP request
            @throws OCSPException
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.pdf.OcspClientBouncyCastle.GetEncoded">
            @return 	a byte array
            @see com.lowagie.text.pdf.OcspClient#getEncoded()
        </member>
        <member name="T:iTextSharp.text.ISplitCharacter">
            <summary>
            Interface for customizing the split character.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.ISplitCharacter.IsSplitCharacter(System.Int32,System.Int32,System.Int32,System.Char[],iTextSharp.text.pdf.PdfChunk[])" -->
        <member name="T:iTextSharp.text.rtf.text.RtfAnnotation">
            The RtfAnnotation provides support for adding Annotations to the rtf document.
            Only simple Annotations with Title / Content are supported.
            
            @version $Version:$
            @author Mark Hall (Mark.Hall@mail.room3b.eu)
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfAnnotation.ANNOTATION_ID">
            Constant for the id of the annotation
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfAnnotation.ANNOTATION_AUTHOR">
            Constant for the author of the annotation
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfAnnotation.ANNOTATION">
            Constant for the actual annotation
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfAnnotation.title">
            The title of this RtfAnnotation
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfAnnotation.content">
            The content of this RtfAnnotation
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfAnnotation.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.Annotation)">
            Constructs a RtfAnnotation based on an Annotation.
            
            @param doc The RtfDocument this RtfAnnotation belongs to
            @param annotation The Annotation this RtfAnnotation is based off
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfAnnotation.WriteContent(System.IO.Stream)">
            Writes the content of the RtfAnnotation
        </member>
        <member name="T:iTextSharp.text.rtf.table.RtfBorder">
            The RtfBorder handle one row or cell border.
            INTERNAL USE ONLY
            
            @version $Version:$
            @author Mark Hall (Mark.Hall@mail.room3b.eu)
            @author Unknown
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.ROW_BORDER">
            Constant for a row border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.CELL_BORDER">
            Constant for a cell border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.NO_BORDER">
            This border is no border :-)
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.LEFT_BORDER">
            Constant for a left border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.TOP_BORDER">
            Constant for a top border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.RIGHT_BORDER">
            Constant for a right border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BOTTOM_BORDER">
            Constant for a bottom border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BOX_BORDER">
            Constant for a box (left, top, right, bottom) border 
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.VERTICAL_BORDER">
            Constant for a vertical line
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.HORIZONTAL_BORDER">
            Constant for a horizontal line
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_NONE">
            Constant for a border with no border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_SINGLE">
            Constant for a single border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_DOUBLE_THICK">
            Constant for a double thick border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_SHADOWED">
            Constant for a shadowed border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_DOTTED">
            Constant for a dotted border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_DASHED">
            Constant for a dashed border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_HAIRLINE">
            Constant for a hairline border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_DOUBLE">
            Constant for a double border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_DOT_DASH">
            Constant for a dot dash border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_DOT_DOT_DASH">
            Constant for a dot dot dash border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_TRIPLE">
            Constant for a triple border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_THICK_THIN">
            Constant for a thick thin border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_THIN_THICK">
            Constant for a thin thick border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_THIN_THICK_THIN">
            Constant for a thin thick thin border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_THICK_THIN_MED">
            Constant for a thick thin medium border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_THIN_THICK_MED">
            Constant for a thin thick medium border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_THIN_THICK_THIN_MED">
            Constant for a thin thick thin medium border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_THICK_THIN_LARGE">
            Constant for a thick thin large border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_THIN_THICK_LARGE">
            Constant for a thin thick large border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_THIN_THICK_THIN_LARGE">
            Constant for a thin thick thin large border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_WAVY">
            Constant for a wavy border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_DOUBLE_WAVY">
            Constant for a double wavy border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_STRIPED">
            Constant for a striped border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_EMBOSS">
            Constant for an embossed border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_ENGRAVE">
            Constant for an engraved border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.ROW_BORDER_LEFT">
            Constant for the left row border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.ROW_BORDER_TOP">
            Constant for the top row border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.ROW_BORDER_RIGHT">
            Constant for the right row border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.ROW_BORDER_BOTTOM">
            Constant for the bottom row border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.ROW_BORDER_HORIZONTAL">
            Constant for the horizontal line
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.ROW_BORDER_VERTICAL">
            Constant for the vertical line
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.CELL_BORDER_LEFT">
            Constant for the left cell border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.CELL_BORDER_TOP">
            Constant for the top cell border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.CELL_BORDER_RIGHT">
            Constant for the right cell border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.CELL_BORDER_BOTTOM">
            Constant for the bottom cell border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_WIDTH">
            Constant for the border width
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_COLOR_NUMBER">
            Constant for the border colour number
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_STYLE_SINGLE">
            Constant for the single border style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_STYLE_DOUBLE_THICK">
            Constant for the double thick border style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_STYLE_SHADOWED">
            Constant for the shadowed border style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_STYLE_DOTTED">
            Constant for the dotted border style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_STYLE_DASHED">
            Constant for the dashed border style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_STYLE_HAIRLINE">
            Constant for the hairline border style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_STYLE_DOUBLE">
            Constant for the double border style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_STYLE_DOT_DASH">
            Constant for the dot dash border style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_STYLE_DOT_DOT_DASH">
            Constant for the dot dot dash border style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_STYLE_TRIPLE">
            Constant for the triple border style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_STYLE_THICK_THIN">
            Constant for the thick thin border style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_STYLE_THIN_THICK">
            Constant for the thin thick border style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_STYLE_THIN_THICK_THIN">
            Constant for the thin thick thin border style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_STYLE_THICK_THIN_MED">
            Constant for the thick thin medium border style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_STYLE_THIN_THICK_MED">
            Constant for the thin thick medium border style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_STYLE_THIN_THICK_THIN_MED">
            Constant for the thin thick thin medium border style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_STYLE_THICK_THIN_LARGE">
            Constant for the thick thin large border style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_STYLE_THIN_THICK_LARGE">
            Constant for the thin thick large border style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_STYLE_THIN_THICK_THIN_LARGE">
            Constant for the thin thick thin large border style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_STYLE_WAVY">
            Constant for the wavy border style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_STYLE_DOUBLE_WAVY">
            Constant for the double wavy border style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_STYLE_STRIPED">
            Constant for the striped border style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_STYLE_EMBOSS">
            Constant for the embossed border style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_STYLE_ENGRAVE">
            Constant for the engraved border style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.borderType">
            The type of this RtfBorder
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.borderPosition">
            The position of this RtfBorder
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.borderStyle">
            The style of this RtfBorder
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.borderWidth">
            The width of this RtfBorder
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.borderColor">
            The colour of this RtfBorder
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfBorder.#ctor(iTextSharp.text.rtf.document.RtfDocument,System.Int32,iTextSharp.text.rtf.table.RtfBorder)">
            Makes a copy of the given RtfBorder
            
            @param doc The RtfDocument this RtfBorder belongs to
            @param borderType The border type of this RtfBorder
            @param border The RtfBorder to copy
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfBorder.#ctor(iTextSharp.text.rtf.document.RtfDocument,System.Int32,System.Int32,System.Int32,System.Single,iTextSharp.text.Color)">
            Constructs a RtfBorder
            
            @param doc The RtfDocument this RtfBorder belongs to
            @param borderType The type of border this RtfBorder is
            @param borderPosition The position of this RtfBorder
            @param borderStyle The style of this RtfBorder
            @param borderWidth The width of this RtfBorder
            @param borderColor The colour of this RtfBorder
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfBorder.WriteContent(System.IO.Stream)">
            Writes the RtfBorder settings
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfBorder.WriteBorderStyle">
            Writes the style of this RtfBorder
            
            @return A byte array containing the style of this RtfBorder
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfBorder.GetBorderColor">
            Gets the colour of this RtfBorder
            
            @return Returns RtfColor of this RtfBorder
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfBorder.GetBorderPosition">
            Gets the position of this RtfBorder
            @return Returns the position of this RtfBorder
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfBorder.GetBorderStyle">
            Gets the style of this RtfBorder
            
            @return Returns the style of this RtfBorder
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfBorder.GetBorderType">
            Gets the type of this RtfBorder
            
            @return Returns the type of this RtfBorder
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfBorder.GetBorderWidth">
            Gets the width of this RtfBorder
            
            @return Returns the width of this RtfBorder
        </member>
        <member name="T:iTextSharp.text.rtf.parser.destinations.RtfDestinationInfo">
            <code>RtfDestinationInfo</code> handles data destined for the info destination
            
            @author Howard Shank (hgshank@yahoo.com)
            @since 2.0.8
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationInfo.#ctor(iTextSharp.text.rtf.parser.RtfParser,System.String)">
            Constructs a new RtfDestinationInfo.
            
            @param parser The RtfParser object.
        </member>
        <member name="T:iTextSharp.text.rtf.parser.destinations.RtfDestinationColorTable">
            <code>RtfDestinationColorTable</code> handles data destined for the color table destination
            
            @author Howard Shank (hgshank@yahoo.com)
            
            @since 2.0.8
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationColorTable.importHeader">
            The RtfImportHeader to add color mappings to.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationColorTable.colorNr">
            The number of the current color being parsed.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationColorTable.red">
            The red component of the current color being parsed.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationColorTable.green">
            The green component of the current color being parsed.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationColorTable.blue">
            The blue component of the current color being parsed.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationColorTable.ctint">
            Specifies the tint when specifying a theme color.
            RTF control word ctint
            
            0 - 255: 0 = full Tint(white), 255 = no tint. 
            Default value: 255
            
            If tint is specified and is less than 255, cshade must equal 255.
            ctint/cshade are mutually exclusive
            
            @see com.lowagie.text.rtf.parser.destinations.RtfDestinationColorTable#cshade
            @see com.lowagie.text.rtf.parser.destinations.RtfDestinationColorTable#themeColor
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationColorTable.cshade">
            Specifies the shade when specifying a theme color.
            RTF control word cshade
            
            0 - 255: 0 = full Shade(black), 255 = no shade. 
            Default value: 255
            
            If shade is specified and is less than 255, ctint must equal 255.
            cshade/ctint are mutually exclusive
            
            @see com.lowagie.text.rtf.parser.destinations.RtfDestinationColorTable#ctint
            @see com.lowagie.text.rtf.parser.destinations.RtfDestinationColorTable#themeColor
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationColorTable.themeColor">
            Specifies the use of a theme color.
            
            @see com.lowagie.text.rtf.parser.enumerations.RtfColorThemes
            @see com.lowagie.text.rtf.parser.destinations.RtfDestinationColorTable#ctint
            @see com.lowagie.text.rtf.parser.destinations.RtfDestinationColorTable#cshade
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationColorTable.colorMap">
            Color map object for conversions
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationColorTable.#ctor">
            Constructor.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationColorTable.#ctor(iTextSharp.text.rtf.parser.RtfParser)">
            Constructs a new RtfColorTableParser.
            
            @param importHeader The RtfImportHeader to add the color mappings to.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationColorTable.SetToDefaults">
            Set default values.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationColorTable.ProcessColor">
            Processes the color triplet parsed from the document.
            Add it to the import mapping so colors can be mapped when encountered
            in the RTF import or conversion.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationColorTable.SetRed(System.Int32)">
            Set the red color to value.
            @param value Value to set red to.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationColorTable.SetGreen(System.Int32)">
            Set the green color value.
            @param value Value to set green to.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationColorTable.SetBlue(System.Int32)">
            Set the blue color value.
            @param value Value to set blue to.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationColorTable.SetTint(System.Int32)">
            Set the tint value
            @param value Value to set the tint to
            @see com.lowagie.text.rtf.parser.destinations.RtfDestinationColorTable#ctint
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationColorTable.SetShade(System.Int32)">
            Set the shade value
            @param value Value to set the shade to
            @see com.lowagie.text.rtf.parser.destinations.RtfDestinationColorTable#cshade
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationColorTable.SetThemeColor(System.Int32)">
            Set the theme color value.
            @param value Value to set the theme color to
            @see com.lowagie.text.rtf.parser.enumerations.RtfColorThemes
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationColorTable.GetColor(System.String)">
            Get the <code>Color</code> object that is mapped to the key.
            @param key The map number.
            *@return <code>Color</code> object from the map. null if key does not exist.
        </member>
        <member name="T:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter">
            The RtfHeaderFooter represents one header or footer. This class can be used
            directly.
            
            @version $Id: RtfHeaderFooter.cs,v 1.7 2008/05/16 19:30:59 psoares33 Exp $
            @author Mark Hall (Mark.Hall@mail.room3b.eu)
        </member>
        <member name="T:iTextSharp.text.HeaderFooter">
            <summary>
            A HeaderFooter-object is a Rectangle with text
            that can be put above and/or below every page.
            </summary>
            <example>
            <code>
            <strong>HeaderFooter header = new HeaderFooter(new Phrase("This is a header."), false);
            HeaderFooter footer = new HeaderFooter(new Phrase("This is page "), new Phrase("."));</strong>
            document.SetHeader(header);
            document.SetFooter(footer);
            </code>
            </example>
        </member>
        <member name="F:iTextSharp.text.HeaderFooter.numbered">
            <summary> Does the page contain a pagenumber? </summary>
        </member>
        <member name="F:iTextSharp.text.HeaderFooter.before">
            <summary> This is the Phrase that comes before the pagenumber. </summary>
        </member>
        <member name="F:iTextSharp.text.HeaderFooter.pageN">
            <summary> This is number of the page. </summary>
        </member>
        <member name="F:iTextSharp.text.HeaderFooter.after">
            <summary> This is the Phrase that comes after the pagenumber. </summary>
        </member>
        <member name="F:iTextSharp.text.HeaderFooter.alignment">
            <summary> This is alignment of the header/footer. </summary>
        </member>
        <member name="M:iTextSharp.text.HeaderFooter.#ctor(iTextSharp.text.Phrase,iTextSharp.text.Phrase)">
            <summary>
            Constructs a HeaderFooter-object.
            </summary>
            <param name="before">the Phrase before the pagenumber</param>
            <param name="after">the Phrase after the pagenumber</param>
        </member>
        <member name="M:iTextSharp.text.HeaderFooter.#ctor(iTextSharp.text.Phrase,System.Boolean)">
            <summary>
            Constructs a Header-object with a pagenumber at the end.
            </summary>
            <param name="before">the Phrase before the pagenumber</param>
            <param name="numbered">true if the page has to be numbered</param>
        </member>
        <member name="M:iTextSharp.text.HeaderFooter.IsNumbered">
            <summary>
            Checks if the HeaderFooter contains a page number.
            </summary>
            <returns>true if the page has to be numbered</returns>
        </member>
        <member name="M:iTextSharp.text.HeaderFooter.SetAlignment(System.String)">
            <summary>
            Sets the alignment of this HeaderFooter.
            </summary>
            <param name="alignment">the new alignment as a string</param>
        </member>
        <member name="P:iTextSharp.text.HeaderFooter.Before">
            <summary>
            Get/set the part that comes before the pageNumber.
            </summary>
            <value>a Phrase</value>
        </member>
        <member name="P:iTextSharp.text.HeaderFooter.After">
            <summary>
            Get/set the part that comes after the pageNumber.
            </summary>
            <value>a Phrase</value>
        </member>
        <member name="P:iTextSharp.text.HeaderFooter.PageNumber">
            <summary>
            Sets the page number.
            </summary>
            <value>the new page number</value>
        </member>
        <member name="P:iTextSharp.text.HeaderFooter.Alignment">
            <summary>
            Sets the Element.
            </summary>
            <value>the new alignment</value>
        </member>
        <member name="P:iTextSharp.text.HeaderFooter.Paragraph">
            <summary>
            Gets the Paragraph that can be used as header or footer.
            </summary>
            <returns>a Paragraph</returns>
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.TYPE_HEADER">
            Constant for the header type
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.TYPE_FOOTER">
            Constant for the footer type
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.DISPLAY_FIRST_PAGE">
            Constant for displaying the header/footer on the first page
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.DISPLAY_ALL_PAGES">
            Constant for displaying the header/footer on all pages
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.DISPLAY_LEFT_PAGES">
            Constant for displaying the header/footer on all left hand pages
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.DISPLAY_RIGHT_PAGES">
            Constant for displaying the header/footer on all right hand pages
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.HEADER_ALL">
            Constant for a header on all pages
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.HEADER_FIRST">
            Constant for a header on the first page
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.HEADER_LEFT">
            Constant for a header on all left hand pages
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.HEADER_RIGHT">
            Constant for a header on all right hand pages
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.FOOTER_ALL">
            Constant for a footer on all pages
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.FOOTER_FIRST">
            Constant for a footer on the first page
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.FOOTER_LEFT">
            Constnat for a footer on the left hand pages
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.FOOTER_RIGHT">
            Constant for a footer on the right hand pages
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.document">
            The RtfDocument this RtfHeaderFooter belongs to
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.content">
            The content of this RtfHeaderFooter
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.type">
            The display type of this RtfHeaderFooter. TYPE_HEADER or TYPE_FOOTER
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.displayAt">
            The display location of this RtfHeaderFooter. DISPLAY_FIRST_PAGE,
            DISPLAY_LEFT_PAGES, DISPLAY_RIGHT_PAGES or DISPLAY_ALL_PAGES
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.HeaderFooter,System.Int32,System.Int32)">
            Constructs a RtfHeaderFooter based on a HeaderFooter with a certain type and displayAt
            location. For internal use only.
            
            @param doc The RtfDocument this RtfHeaderFooter belongs to
            @param headerFooter The HeaderFooter to base this RtfHeaderFooter on
            @param type The type of RtfHeaderFooter
            @param displayAt The display location of this RtfHeaderFooter
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.rtf.headerfooter.RtfHeaderFooter,System.Int32)">
            Constructs a RtfHeaderFooter as a copy of an existing RtfHeaderFooter.
            For internal use only.
            
            @param doc The RtfDocument this RtfHeaderFooter belongs to
            @param headerFooter The RtfHeaderFooter to copy
            @param displayAt The display location of this RtfHeaderFooter
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.HeaderFooter)">
            Constructs a RtfHeaderFooter for a HeaderFooter.
             
            @param doc The RtfDocument this RtfHeaderFooter belongs to
            @param headerFooter The HeaderFooter to base this RtfHeaderFooter on
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.#ctor(iTextSharp.text.IElement)">
             Constructs a RtfHeaderFooter for any Element.
            
             @param element The Element to display as content of this RtfHeaderFooter
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.#ctor(iTextSharp.text.IElement[])">
            Constructs a RtfHeaderFooter for an array of Elements.
            
            @param elements The Elements to display as the content of this RtfHeaderFooter.
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.SetRtfDocument(iTextSharp.text.rtf.document.RtfDocument)">
            Sets the RtfDocument this RtfElement belongs to
            
            @param doc The RtfDocument to use
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.WriteContent(System.IO.Stream)">
            Write the content of this RtfHeaderFooter.
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.SetDisplayAt(System.Int32)">
            Sets the display location of this RtfHeaderFooter
            
            @param displayAt The display location to use.
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.SetType(System.Int32)">
            Sets the type of this RtfHeaderFooter
            
            @param type The type to use.
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.GetContent">
            Gets the content of this RtfHeaderFooter
            
            @return The content of this RtfHeaderFooter
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.SetInTable(System.Boolean)">
            Unused
            @param inTable
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.SetInHeader(System.Boolean)">
            Unused
            @param inHeader
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.SetAlignment(System.Int32)">
            Set the alignment of this RtfHeaderFooter. Passes the setting
            on to the contained element.
        </member>
        <member name="T:iTextSharp.text.rtf.document.output.RtfMemoryCache">
            The RtfMemoryCache is an RtfDataCache that keeps the whole rtf document
            data in memory. Fast but memory intensive.
            
            @version $Revision: 1.3 $
            @author Mark Hall (Mark.Hall@mail.room3b.eu)
        </member>
        <member name="F:iTextSharp.text.rtf.document.output.RtfMemoryCache.data">
            The buffer for the rtf document data.
        </member>
        <member name="M:iTextSharp.text.rtf.document.output.RtfMemoryCache.#ctor">
            Constructs a RtfMemoryCache.
        </member>
        <member name="M:iTextSharp.text.rtf.document.output.RtfMemoryCache.GetOutputStream">
            Gets the MemoryStream.
        </member>
        <member name="M:iTextSharp.text.rtf.document.output.RtfMemoryCache.WriteTo(System.IO.Stream)">
            Writes the content of the MemoryStream into the Stream.
        </member>
        <member name="T:iTextSharp.text.pdf.XfaForm">
            Processes XFA forms.
            @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.#ctor">
            An empty constructor to build on.
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.GetXfaObject(iTextSharp.text.pdf.PdfReader)">
            Return the XFA Object, could be an array, could be a Stream.
            Returns null f no XFA Object is present.
            @param    reader  a PdfReader instance
            @return   the XFA object
            @since    2.1.3
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.#ctor(iTextSharp.text.pdf.PdfReader)">
            A constructor from a <CODE>PdfReader</CODE>. It basically does everything
            from finding the XFA stream to the XML parsing.
            @param reader the reader
            @throws java.io.IOException on error
            @throws javax.xml.parsers.ParserConfigurationException on error
            @throws org.xml.sax.SAXException on error
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.ExtractNodes">
            Extracts the nodes from the domDocument.
            @since    2.1.5
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.SetXfa(iTextSharp.text.pdf.XfaForm,iTextSharp.text.pdf.PdfReader,iTextSharp.text.pdf.PdfWriter)">
            Sets the XFA key from a byte array. The old XFA is erased.
            @param form the data
            @param reader the reader
            @param writer the writer
            @throws java.io.IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.SetXfa(iTextSharp.text.pdf.PdfWriter)">
            Sets the XFA key from the instance data. The old XFA is erased.
            @param writer the writer
            @throws java.io.IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.SerializeDoc(System.Xml.XmlNode)">
            Serializes a XML document to a byte array.
            @param n the XML document
            @throws java.io.IOException on error
            @return the serialized XML document
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.FindFieldName(System.String,iTextSharp.text.pdf.AcroFields)">
            Finds the complete field name contained in the "classic" forms from a partial
            name.
            @param name the complete or partial name
            @param af the fields
            @return the complete name or <CODE>null</CODE> if not found
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.FindDatasetsName(System.String)">
            Finds the complete SOM name contained in the datasets section from a 
            possibly partial name.
            @param name the complete or partial name
            @return the complete name or <CODE>null</CODE> if not found
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.FindDatasetsNode(System.String)">
            Finds the <CODE>Node</CODE> contained in the datasets section from a 
            possibly partial name.
            @param name the complete or partial name
            @return the <CODE>Node</CODE> or <CODE>null</CODE> if not found
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.GetNodeText(System.Xml.XmlNode)">
            Gets all the text contained in the child nodes of this node.
            @param n the <CODE>Node</CODE>
            @return the text found or "" if no text was found
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.SetNodeText(System.Xml.XmlNode,System.String)">
            Sets the text of this node. All the child's node are deleted and a new
            child text node is created.
            @param n the <CODE>Node</CODE> to add the text to
            @param text the text to add
        </member>
        <member name="P:iTextSharp.text.pdf.XfaForm.XfaPresent">
            Returns <CODE>true</CODE> if it is a XFA form.
            @return <CODE>true</CODE> if it is a XFA form
        </member>
        <member name="P:iTextSharp.text.pdf.XfaForm.DomDocument">
            Gets the top level DOM document.
            @return the top level DOM document
        </member>
        <member name="P:iTextSharp.text.pdf.XfaForm.Reader">
            Sets the <CODE>PdfReader</CODE> to be used by this instance.
            @param reader the <CODE>PdfReader</CODE> to be used by this instance
        </member>
        <member name="P:iTextSharp.text.pdf.XfaForm.Changed">
            Checks if this XFA form was changed.
            @return <CODE>true</CODE> if this XFA form was changed
        </member>
        <member name="P:iTextSharp.text.pdf.XfaForm.TemplateSom">
            Gets the class that contains the template processing section of the XFA.
            @return the class that contains the template processing section of the XFA
        </member>
        <member name="P:iTextSharp.text.pdf.XfaForm.DatasetsSom">
            Gets the class that contains the datasets processing section of the XFA.
            @return the class that contains the datasets processing section of the XFA
        </member>
        <member name="P:iTextSharp.text.pdf.XfaForm.AcroFieldsSom">
            Gets the class that contains the "classic" fields processing.
            @return the class that contains the "classic" fields processing
        </member>
        <member name="P:iTextSharp.text.pdf.XfaForm.DatasetsNode">
            Gets the <CODE>Node</CODE> that corresponds to the datasets part.
            @return the <CODE>Node</CODE> that corresponds to the datasets part
        </member>
        <member name="T:iTextSharp.text.pdf.XfaForm.InverseStore">
            A structure to store each part of a SOM name and link it to the next part
            beginning from the lower hierarchie.
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.InverseStore.IsSimilar(System.String)">
            Search the current node for a similar name. A similar name starts
            with the same name but has a differnt index. For example, "detail[3]" 
            is similar to "detail[9]". The main use is to discard names that
            correspond to out of bounds records.
            @param name the name to search
            @return <CODE>true</CODE> if a similitude was found
        </member>
        <member name="P:iTextSharp.text.pdf.XfaForm.InverseStore.DefaultName">
            Gets the full name by traversing the hiearchie using only the
            index 0.
            @return the full name
        </member>
        <member name="T:iTextSharp.text.pdf.XfaForm.Stack2">
            Another stack implementation. The main use is to facilitate
            the porting to other languages.
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.Stack2.Peek">
            Looks at the object at the top of this stack without removing it from the stack.
            @return the object at the top of this stack
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.Stack2.Pop">
            Removes the object at the top of this stack and returns that object as the value of this function.
            @return the object at the top of this stack 
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.Stack2.Push(System.Object)">
            Pushes an item onto the top of this stack.
            @param item the item to be pushed onto this stack
            @return the <CODE>item</CODE> argument
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.Stack2.Empty">
            Tests if this stack is empty.
            @return <CODE>true</CODE> if and only if this stack contains no items; <CODE>false</CODE> otherwise
        </member>
        <member name="T:iTextSharp.text.pdf.XfaForm.Xml2Som">
            A class for some basic SOM processing.
        </member>
        <member name="F:iTextSharp.text.pdf.XfaForm.Xml2Som.order">
            The order the names appear in the XML, depth first.
        </member>
        <member name="F:iTextSharp.text.pdf.XfaForm.Xml2Som.name2Node">
            The mapping of full names to nodes.
        </member>
        <member name="F:iTextSharp.text.pdf.XfaForm.Xml2Som.inverseSearch">
            The data to do a search from the bottom hierarchie.
        </member>
        <member name="F:iTextSharp.text.pdf.XfaForm.Xml2Som.stack">
            A stack to be used when parsing.
        </member>
        <member name="F:iTextSharp.text.pdf.XfaForm.Xml2Som.anform">
            A temporary store for the repetition count.
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.Xml2Som.EscapeSom(System.String)">
            Escapes a SOM string fragment replacing "." with "\.".
            @param s the unescaped string
            @return the escaped string
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.Xml2Som.UnescapeSom(System.String)">
            Unescapes a SOM string fragment replacing "\." with ".".
            @param s the escaped string
            @return the unescaped string
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.Xml2Som.PrintStack">
            Outputs the stack as the sequence of elements separated
            by '.'.
            @return the stack as the sequence of elements separated by '.'
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.Xml2Som.GetShortName(System.String)">
            Gets the name with the <CODE>#subform</CODE> removed.
            @param s the long name
            @return the short name
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.Xml2Som.InverseSearchAdd(System.String)">
            Adds a SOM name to the search node chain.
            @param unstack the SOM name
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.Xml2Som.InverseSearchAdd(System.Collections.Hashtable,iTextSharp.text.pdf.XfaForm.Stack2,System.String)">
            Adds a SOM name to the search node chain.
            @param inverseSearch the start point
            @param stack the stack with the separeted SOM parts
            @param unstack the full name
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.Xml2Som.InverseSearchGlobal(System.Collections.ArrayList)">
            Searchs the SOM hiearchie from the bottom.
            @param parts the SOM parts
            @return the full name or <CODE>null</CODE> if not found
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.Xml2Som.SplitParts(System.String)">
            Splits a SOM name in the individual parts.
            @param name the full SOM name
            @return the split name
        </member>
        <member name="P:iTextSharp.text.pdf.XfaForm.Xml2Som.Order">
            Gets the order the names appear in the XML, depth first.
            @return the order the names appear in the XML, depth first
        </member>
        <member name="P:iTextSharp.text.pdf.XfaForm.Xml2Som.Name2Node">
            Gets the mapping of full names to nodes.
            @return the mapping of full names to nodes
        </member>
        <member name="P:iTextSharp.text.pdf.XfaForm.Xml2Som.InverseSearch">
            Gets the data to do a search from the bottom hierarchie.
            @return the data to do a search from the bottom hierarchie
        </member>
        <member name="T:iTextSharp.text.pdf.XfaForm.Xml2SomDatasets">
            Processes the datasets section in the XFA form.
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.Xml2SomDatasets.#ctor(System.Xml.XmlNode)">
            Creates a new instance from the datasets node. This expects
            not the datasets but the data node that comes below.
            @param n the datasets node
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.Xml2SomDatasets.InsertNode(System.Xml.XmlNode,System.String)">
            Inserts a new <CODE>Node</CODE> that will match the short name.
            @param n the datasets top <CODE>Node</CODE>
            @param shortName the short name
            @return the new <CODE>Node</CODE> of the inserted name
        </member>
        <member name="T:iTextSharp.text.pdf.XfaForm.AcroFieldsSearch">
            A class to process "classic" fields.
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.AcroFieldsSearch.#ctor(System.Collections.ICollection)">
            Creates a new instance from a Collection with the full names.
            @param items the Collection
        </member>
        <member name="P:iTextSharp.text.pdf.XfaForm.AcroFieldsSearch.AcroShort2LongName">
            Gets the mapping from short names to long names. A long 
            name may contain the #subform name part.
            @return the mapping from short names to long names
        </member>
        <member name="T:iTextSharp.text.pdf.XfaForm.Xml2SomTemplate">
            Processes the template section in the XFA form.
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.Xml2SomTemplate.#ctor(System.Xml.XmlNode)">
            Creates a new instance from the datasets node.
            @param n the template node
        </member>
        <member name="M:iTextSharp.text.pdf.XfaForm.Xml2SomTemplate.GetFieldType(System.String)">
            Gets the field type as described in the <CODE>template</CODE> section of the XFA.
            @param s the exact template name
            @return the field type or <CODE>null</CODE> if not found
        </member>
        <member name="P:iTextSharp.text.pdf.XfaForm.Xml2SomTemplate.DynamicForm">
            <CODE>true</CODE> if it's a dynamic form; <CODE>false</CODE>
            if it's a static form.
            @return <CODE>true</CODE> if it's a dynamic form; <CODE>false</CODE>
            if it's a static form
        </member>
        <member name="T:iTextSharp.text.pdf.PdfReaderInstance">
             Instance of PdfReader in each output document.
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReaderInstance.GetFormXObject(System.Int32,System.Int32)">
            Gets the content stream of a page as a PdfStream object.
            @param   pageNumber          the page of which you want the stream
            @param   compressionLevel    the compression level you want to apply to the stream
            @return  a PdfStream object
            @since   2.1.3 (the method already existed without param compressionLevel)
        </member>
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.pdf.PdfPTable" -->
        <member name="F:iTextSharp.text.pdf.PdfPTable.BASECANVAS">
            The index of the original <CODE>PdfcontentByte</CODE>.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPTable.BACKGROUNDCANVAS">
            The index of the duplicate <CODE>PdfContentByte</CODE> where the background will be drawn.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPTable.LINECANVAS">
            The index of the duplicate <CODE>PdfContentByte</CODE> where the border lines will be drawn.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPTable.TEXTCANVAS">
            The index of the duplicate <CODE>PdfContentByte</CODE> where the text will be drawn.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPTable.headerRows">
            Holds value of property headerRows. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPTable.widthPercentage">
            Holds value of property widthPercentage. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPTable.horizontalAlignment">
            Holds value of property horizontalAlignment. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPTable.skipFirstHeader">
            Holds value of property skipFirstHeader. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPTable.skipLastFooter">
            Holds value of property skipLastFooter.
            @since    2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPTable.lockedWidth">
            Holds value of property lockedWidth.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPTable.splitRows">
            Holds value of property splitRows.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPTable.spacingBefore">
            The spacing before the table. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPTable.spacingAfter">
            The spacing after the table. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPTable.extendLastRow">
            Holds value of property extendLastRow.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPTable.headersInEvent">
            Holds value of property headersInEvent.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPTable.splitLate">
            Holds value of property splitLate.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPTable.keepTogether">
            Defines if the table should be kept
            on one page if possible
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPTable.complete">
            Indicates if the PdfPTable is complete once added to the document.
            @since	iText 2.0.8
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPTable.rowCompleted">
            Keeps track of the completeness of the current row.
            @since    2.1.6
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.#ctor(System.Single[])">
            Constructs a <CODE>PdfPTable</CODE> with the relative column widths.
            @param relativeWidths the relative column widths
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.#ctor(System.Int32)">
            Constructs a <CODE>PdfPTable</CODE> with <CODE>numColumns</CODE> columns.
            @param numColumns the number of columns
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.#ctor(iTextSharp.text.pdf.PdfPTable)">
            Constructs a copy of a <CODE>PdfPTable</CODE>.
            @param table the <CODE>PdfPTable</CODE> to be copied
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.ShallowCopy(iTextSharp.text.pdf.PdfPTable)">
            Makes a shallow copy of a table (format without content).
            @param table
            @return a shallow copy of the table
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.CopyFormat(iTextSharp.text.pdf.PdfPTable)">
            Copies the format of the sourceTable without copying the content. 
            @param sourceTable
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.SetWidths(System.Single[])">
            Sets the relative widths of the table.
            @param relativeWidths the relative widths of the table.
            @throws DocumentException if the number of widths is different than the number
            of columns
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.SetWidths(System.Int32[])">
            Sets the relative widths of the table.
            @param relativeWidths the relative widths of the table.
            @throws DocumentException if the number of widths is different than the number
            of columns
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.SetTotalWidth(System.Single[])">
            Sets the full width of the table from the absolute column width.
            @param columnWidth the absolute width of each column
            @throws DocumentException if the number of widths is different than the number
            of columns
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.SetWidthPercentage(System.Single[],iTextSharp.text.Rectangle)">
            Sets the percentage width of the table from the absolute column width.
            @param columnWidth the absolute width of each column
            @param pageSize the page size
            @throws DocumentException
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.CalculateHeights(System.Boolean)">
            Calculates the heights of the table.
            
            @param    firsttime   if true, the heights of the rows will be recalculated.
            This takes time; normally the heights of the rows are already calcultated,
            so in most cases, it's save to use false as parameter.
            @return   the total height of the table. Note that it will be 0 if you didn't
            specify the width of the table with SetTotalWidth().
            @since    2.1.5   added a parameter and a return type to an existing method,
            and made it public
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.CalculateHeightsFast">
            Calculates the heights of the table.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.AddCell(iTextSharp.text.pdf.PdfPCell)">
            Adds a cell element.
            
            @param cell the cell element
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.SkipColsWithRowspanAbove">
            When updating the row index, cells with rowspan should be taken into account.
            This is what happens in this method.
            @since    2.1.6
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.RowSpanAbove(System.Int32,System.Int32)">
            Checks if there are rows above belonging to a rowspan.
            @param    currRow the current row to check
            @param    currCol the current column to check
            @return   true if there's a cell above that belongs to a rowspan
            @since    2.1.6
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.AddCell(System.String)">
            Adds a cell element.
            @param text the text for the cell
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.AddCell(iTextSharp.text.pdf.PdfPTable)">
            Adds a nested table.
            @param table the table to be added to the cell
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.AddCell(iTextSharp.text.Image)">
            Adds an Image as Cell.
            @param image the <CODE>Image</CODE> to add to the table. This image will fit in the cell
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.AddCell(iTextSharp.text.Phrase)">
            Adds a cell element.
            @param phrase the <CODE>Phrase</CODE> to be added to the cell
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfPTable.WriteSelectedRows(System.Int32,System.Int32,System.Single,System.Single,iTextSharp.text.pdf.PdfContentByte[])" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfPTable.WriteSelectedRows(System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,iTextSharp.text.pdf.PdfContentByte[])" -->
        <member name="M:iTextSharp.text.pdf.PdfPTable.WriteSelectedRows(System.Int32,System.Int32,System.Single,System.Single,iTextSharp.text.pdf.PdfContentByte)">
            Writes the selected rows to the document.
            
            @param rowStart the first row to be written, zero index
            @param rowEnd the last row to be written + 1. If it is -1 all the
            rows to the end are written
            @param xPos the x write coodinate
            @param yPos the y write coodinate
            @param canvas the <CODE>PdfContentByte</CODE> where the rows will
            be written to
            @return the y coordinate position of the bottom of the last row
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfPTable.WriteSelectedRows(System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,iTextSharp.text.pdf.PdfContentByte)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfPTable.BeginWritingRows(iTextSharp.text.pdf.PdfContentByte)" -->
        <member name="M:iTextSharp.text.pdf.PdfPTable.EndWritingRows(iTextSharp.text.pdf.PdfContentByte[])">
            Finishes writing the table.
            @param canvases the array returned by <CODE>beginWritingRows()</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.GetRowHeight(System.Int32)">
            Gets the height of a particular row.
            @param idx the row index (starts at 0)
            @return the height of a particular row
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.GetRowHeight(System.Int32,System.Boolean)">
            Gets the height of a particular row.
            
            @param idx the row index (starts at 0)
            @param firsttime  is this the first time the row heigh is calculated?
            @return the height of a particular row
            @since    3.0.0
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.GetRowspanHeight(System.Int32,System.Int32)">
            Gets the maximum height of a cell in a particular row (will only be different
            from getRowHeight is one of the cells in the row has a rowspan > 1).
            
            @param    rowIndex    the row index
            @param    cellIndex   the cell index
            @return the height of a particular row including rowspan
            @since    2.1.6
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.DeleteRow(System.Int32)">
            Deletes a row from the table.
            @param rowNumber the row to be deleted
            @return <CODE>true</CODE> if the row was deleted
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.DeleteLastRow">
            Deletes the last row in the table.
            @return <CODE>true</CODE> if the last row was deleted
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.DeleteBodyRows">
            Removes all of the rows except headers
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.IsContent">
            @see com.lowagie.text.Element#isContent()
            @since   iText 2.0.8
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.IsNestable">
            @see com.lowagie.text.Element#isNestable()
            @since   iText 2.0.8
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.Process(iTextSharp.text.IElementListener)">
             Processes the element by adding it (or the different parts) to an
             <CODE>ElementListener</CODE>.
            
             @param    listener    an <CODE>ElementListener</CODE>
             @return    <CODE>true</CODE> if the element was processed successfully
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.GetRow(System.Int32)">
            Gets a row with a given index
            (added by Jin-Hsia Yang).
            @param idx
            @return the row at position idx
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.GetRows(System.Int32,System.Int32)">
            Gets an arraylist with a selection of rows.
            @param    start   the first row in the selection
            @param    end     the first row that isn't part of the selection
            @return   a selection of rows
            @since    2.1.6
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.AdjustCellsInRow(System.Int32,System.Int32)">
            Calculates the extra height needed in a row because of rowspans.
            @param    start   the index of the start row (the one to adjust)
            @param    end     the index of the end row on the page
            @since    2.1.6
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.CompleteRow">
            Completes the current row with the default cell. An incomplete row will be dropped
            but calling this method will make sure that it will be present in the table.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.FlushContent">
            @since   iText 2.0.8
            @see com.lowagie.text.LargeElement#flushContent()
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPTable.TotalWidth">
            Gets the full width of the table.
            @return the full width of the table
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPTable.DefaultCell">
            Gets the default <CODE>PdfPCell</CODE> that will be used as
            reference for all the <CODE>addCell</CODE> methods except
            <CODE>addCell(PdfPCell)</CODE>.
            @return default <CODE>PdfPCell</CODE>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPTable.Size">
            Gets the number of rows in this table.
            @return the number of rows in this table
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPTable.TotalHeight">
            Gets the total height of the table.
            @return the total height of the table
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPTable.HeaderHeight">
            Gets the height of the rows that constitute the header as defined by
            <CODE>setHeaderRows()</CODE>.
            @return the height of the rows that constitute the header and footer
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPTable.FooterHeight">
            Gets the height of the rows that constitute the header as defined by
            <CODE>setFooterRows()</CODE>.
            @return the height of the rows that constitute the footer
            @since 2.1.1
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPTable.NumberOfColumns">
            Returns the number of columns.
            @return  the number of columns.
            @since   2.1.1
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPTable.Chunks">
             Gets all the chunks in this element.
            
             @return    an <CODE>ArrayList</CODE>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPTable.Type">
             Gets the type of the text element.
            
             @return    a type
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPTable.Rows">
            Gets an arraylist with all the rows in the table.
            @return an arraylist
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPTable.AbsoluteWidths">
            Gets the absolute sizes of each column width.
            @return he absolute sizes of each column width
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPTable.SkipLastFooter">
            Tells you if the last footer needs to be skipped
            (for instance if the footer says "continued on the next page")
            
            @return Value of property skipLastFooter.
            @since   2.1.6
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPTable.KeepTogether">
             If true the table will be kept on one page if it fits, by forcing a 
             new page if it doesn't fit on the current page. The default is to
             split the table over multiple pages.
            
             @param p_KeepTogether whether to try to keep the table on one page
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPTable.ElementComplete">
            @since   iText 2.0.8
            @see com.lowagie.text.LargeElement#isComplete()
        </member>
        <member name="T:iTextSharp.text.pdf.PdfPatternPainter">
            Implements the pattern.
        </member>
        <member name="T:iTextSharp.text.pdf.PdfTemplate">
            Implements the form XObject.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTemplate.thisReference">
            The indirect reference to this template 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTemplate.pageResources">
            The resources used by this template 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTemplate.bBox">
            The bounding box of this template 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfTemplate.#ctor">
            Creates a <CODE>PdfTemplate</CODE>.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfTemplate.#ctor(iTextSharp.text.pdf.PdfWriter)">
             Creates new PdfTemplate
            
             @param wr the <CODE>PdfWriter</CODE>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfTemplate.CreateTemplate(iTextSharp.text.pdf.PdfWriter,System.Single,System.Single)" -->
        <member name="M:iTextSharp.text.pdf.PdfTemplate.GetFormXObject(System.Int32)">
             Gets the stream representing this template.
            
             @param   compressionLevel    the compressionLevel
             @return the stream representing this template
             @since   2.1.3   (replacing the method without param compressionLevel)
        </member>
        <member name="P:iTextSharp.text.pdf.PdfTemplate.Width">
             Gets the bounding width of this template.
            
             @return width the bounding width
        </member>
        <member name="P:iTextSharp.text.pdf.PdfTemplate.Height">
             Gets the bounding heigth of this template.
            
             @return heigth the bounding height
        </member>
        <member name="P:iTextSharp.text.pdf.PdfTemplate.Layer">
            Gets the layer this template belongs to.
            @return the layer this template belongs to or <code>null</code> for no layer defined
        </member>
        <member name="P:iTextSharp.text.pdf.PdfTemplate.IndirectReference">
             Gets the indirect reference to this template.
            
             @return the indirect reference to this template
        </member>
        <member name="P:iTextSharp.text.pdf.PdfTemplate.Resources">
             Constructs the resources used by this template.
            
             @return the resources used by this template
        </member>
        <member name="P:iTextSharp.text.pdf.PdfTemplate.Duplicate">
            Gets a duplicate of this <CODE>PdfTemplate</CODE>. All
            the members are copied by reference but the buffer stays different.
            @return a copy of this <CODE>PdfTemplate</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.#ctor">
            Creates a <CODE>PdfPattern</CODE>.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.#ctor(iTextSharp.text.pdf.PdfWriter)">
             Creates new PdfPattern
            
             @param wr the <CODE>PdfWriter</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.GetPattern">
            Gets the stream representing this pattern
            @return the stream representing this pattern
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.GetPattern(System.Int32)">
            Gets the stream representing this pattern
            @param   compressionLevel    the compression level of the stream
            @return the stream representing this pattern
            @since   2.1.3
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.SetGrayFill(System.Single)">
            @see com.lowagie.text.pdf.PdfContentByte#setGrayFill(float)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.ResetGrayFill">
            @see com.lowagie.text.pdf.PdfContentByte#resetGrayFill()
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.SetGrayStroke(System.Single)">
            @see com.lowagie.text.pdf.PdfContentByte#setGrayStroke(float)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.ResetGrayStroke">
            @see com.lowagie.text.pdf.PdfContentByte#resetGrayStroke()
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.SetRGBColorFillF(System.Single,System.Single,System.Single)">
            @see com.lowagie.text.pdf.PdfContentByte#setRGBColorFillF(float, float, float)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.ResetRGBColorFill">
            @see com.lowagie.text.pdf.PdfContentByte#resetRGBColorFill()
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.SetRGBColorStrokeF(System.Single,System.Single,System.Single)">
            @see com.lowagie.text.pdf.PdfContentByte#setRGBColorStrokeF(float, float, float)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.ResetRGBColorStroke">
            @see com.lowagie.text.pdf.PdfContentByte#resetRGBColorStroke()
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.SetCMYKColorFillF(System.Single,System.Single,System.Single,System.Single)">
            @see com.lowagie.text.pdf.PdfContentByte#setCMYKColorFillF(float, float, float, float)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.ResetCMYKColorFill">
            @see com.lowagie.text.pdf.PdfContentByte#resetCMYKColorFill()
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.SetCMYKColorStrokeF(System.Single,System.Single,System.Single,System.Single)">
            @see com.lowagie.text.pdf.PdfContentByte#setCMYKColorStrokeF(float, float, float, float)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.ResetCMYKColorStroke">
            @see com.lowagie.text.pdf.PdfContentByte#resetCMYKColorStroke()
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.AddImage(iTextSharp.text.Image,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            @see com.lowagie.text.pdf.PdfContentByte#addImage(com.lowagie.text.Image, float, float, float, float, float, float)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.SetCMYKColorFill(System.Int32,System.Int32,System.Int32,System.Int32)">
            @see com.lowagie.text.pdf.PdfContentByte#setCMYKColorFill(int, int, int, int)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.SetCMYKColorStroke(System.Int32,System.Int32,System.Int32,System.Int32)">
            @see com.lowagie.text.pdf.PdfContentByte#setCMYKColorStroke(int, int, int, int)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.SetRGBColorFill(System.Int32,System.Int32,System.Int32)">
            @see com.lowagie.text.pdf.PdfContentByte#setRGBColorFill(int, int, int)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.SetRGBColorStroke(System.Int32,System.Int32,System.Int32)">
            @see com.lowagie.text.pdf.PdfContentByte#setRGBColorStroke(int, int, int)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.SetColorStroke(iTextSharp.text.Color)">
            @see com.lowagie.text.pdf.PdfContentByte#setColorStroke(java.awt.Color)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.SetColorFill(iTextSharp.text.Color)">
            @see com.lowagie.text.pdf.PdfContentByte#setColorFill(java.awt.Color)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.SetColorFill(iTextSharp.text.pdf.PdfSpotColor,System.Single)">
            @see com.lowagie.text.pdf.PdfContentByte#setColorFill(com.lowagie.text.pdf.PdfSpotColor, float)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.SetColorStroke(iTextSharp.text.pdf.PdfSpotColor,System.Single)">
            @see com.lowagie.text.pdf.PdfContentByte#setColorStroke(com.lowagie.text.pdf.PdfSpotColor, float)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.SetPatternFill(iTextSharp.text.pdf.PdfPatternPainter)">
            @see com.lowagie.text.pdf.PdfContentByte#setPatternFill(com.lowagie.text.pdf.PdfPatternPainter)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.SetPatternFill(iTextSharp.text.pdf.PdfPatternPainter,iTextSharp.text.Color,System.Single)">
            @see com.lowagie.text.pdf.PdfContentByte#setPatternFill(com.lowagie.text.pdf.PdfPatternPainter, java.awt.Color, float)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.SetPatternStroke(iTextSharp.text.pdf.PdfPatternPainter,iTextSharp.text.Color,System.Single)">
            @see com.lowagie.text.pdf.PdfContentByte#setPatternStroke(com.lowagie.text.pdf.PdfPatternPainter, java.awt.Color, float)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.SetPatternStroke(iTextSharp.text.pdf.PdfPatternPainter)">
            @see com.lowagie.text.pdf.PdfContentByte#setPatternStroke(com.lowagie.text.pdf.PdfPatternPainter)
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPatternPainter.Duplicate">
            Gets a duplicate of this <CODE>PdfPatternPainter</CODE>. All
            the members are copied by reference but the buffer stays different.
            @return a copy of this <CODE>PdfPatternPainter</CODE>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfLiteral">
            a Literal
        </member>
        <member name="T:iTextSharp.text.pdf.PdfImportedPage">
            Represents an imported page.
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfImportedPage.AddImage(iTextSharp.text.Image,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            Always throws an error. This operation is not allowed.
            @param image dummy
            @param a dummy
            @param b dummy
            @param c dummy
            @param d dummy
            @param e dummy
            @param f dummy
            @throws DocumentException  dummy 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfImportedPage.AddTemplate(iTextSharp.text.pdf.PdfTemplate,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            Always throws an error. This operation is not allowed.
            @param template dummy
            @param a dummy
            @param b dummy
            @param c dummy
            @param d dummy
            @param e dummy
            @param f  dummy 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfImportedPage.GetFormXObject(System.Int32)">
             Gets the stream representing this page.
            
             @param   compressionLevel    the compressionLevel
             @return the stream representing this page
             @since   2.1.3   (replacing the method without param compressionLevel)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfImportedPage.SetFontAndSize(iTextSharp.text.pdf.BaseFont,System.Single)">
            Always throws an error. This operation is not allowed.
            @param bf dummy
            @param size dummy 
        </member>
        <member name="P:iTextSharp.text.pdf.PdfImportedPage.FromReader">
            Reads the content from this <CODE>PdfImportedPage</CODE>-object from a reader.
            
             @return self
            
        </member>
        <member name="P:iTextSharp.text.pdf.PdfImportedPage.Duplicate">
            Always throws an error. This operation is not allowed.
            @return  dummy 
        </member>
        <member name="T:iTextSharp.text.pdf.PdfImage">
            <CODE>PdfImage</CODE> is a <CODE>PdfStream</CODE> containing an image-<CODE>Dictionary</CODE> and -stream.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfImage.name">
            This is the <CODE>PdfName</CODE> of the image. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfImage.#ctor(iTextSharp.text.Image,System.String,iTextSharp.text.pdf.PdfIndirectReference)">
             Constructs a <CODE>PdfImage</CODE>-object.
            
             @param image the <CODE>Image</CODE>-object
             @param name the <CODE>PdfName</CODE> for this image
             @throws BadPdfFormatException on error
        </member>
        <member name="P:iTextSharp.text.pdf.PdfImage.Name">
             Returns the <CODE>PdfName</CODE> of the image.
            
             @return        the name
        </member>
        <member name="T:iTextSharp.text.pdf.PdfCopyFieldsImp">
            
             @author  psoares
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyFieldsImp.SetVisited(iTextSharp.text.pdf.PRIndirectReference)">
            Sets a reference to "visited" in the copy process.
            @param   ref the reference that needs to be set to "visited"
            @return  true if the reference was set to visited
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyFieldsImp.IsVisited(iTextSharp.text.pdf.PRIndirectReference)">
            Checks if a reference has already been "visited" in the copy process.
            @param   ref the reference that needs to be checked
            @return  true if the reference was already visited
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyFieldsImp.IsPage(iTextSharp.text.pdf.PRIndirectReference)">
            Checks if a reference refers to a page object.
            @param   ref the reference that needs to be checked
            @return  true is the reference refers to a page object.
        </member>
        <member name="T:iTextSharp.text.pdf.PdfColor">
             A <CODE>PdfColor</CODE> defines a Color (it's a <CODE>PdfArray</CODE> containing 3 values).
            
             @see        PdfDictionary
        </member>
        <member name="M:iTextSharp.text.pdf.PdfColor.#ctor(System.Int32,System.Int32,System.Int32)">
             Constructs a new <CODE>PdfColor</CODE>.
            
             @param        red            a value between 0 and 255
             @param        green        a value between 0 and 255
             @param        blue        a value between 0 and 255
        </member>
        <member name="F:iTextSharp.text.pdf.intern.PdfAnnotationsImp.acroForm">
            This is the AcroForm object for the complete document.
        </member>
        <member name="F:iTextSharp.text.pdf.intern.PdfAnnotationsImp.annotations">
            This is the array containing the references to annotations
            that were added to the document.
        </member>
        <member name="F:iTextSharp.text.pdf.intern.PdfAnnotationsImp.delayedAnnotations">
            This is an array containg references to some delayed annotations
            (that were added for a page that doesn't exist yet).
        </member>
        <member name="M:iTextSharp.text.pdf.intern.PdfAnnotationsImp.HasValidAcroForm">
            Checks if the AcroForm is valid.
        </member>
        <member name="P:iTextSharp.text.pdf.intern.PdfAnnotationsImp.AcroForm">
            Gets the AcroForm object.
            @return the PdfAcroform object of the PdfDocument
        </member>
        <member name="T:iTextSharp.text.pdf.hyphenation.SimplePatternParser">
            Parses the xml hyphenation pattern.
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.SimplePatternParser.#ctor">
            Creates a new instance of PatternParser2 
        </member>
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.pdf.hyphenation.CharVector" -->
        <member name="F:iTextSharp.text.pdf.hyphenation.CharVector.DEFAULT_BLOCK_SIZE">
            Capacity increment size
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.CharVector.array">
            The encapsulated array
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.CharVector.n">
            Points to next free item
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.CharVector.Clear">
            Reset Vector but don't resize or clear elements
        </member>
        <member name="P:iTextSharp.text.pdf.hyphenation.CharVector.Length">
            return number of items in array
        </member>
        <member name="P:iTextSharp.text.pdf.hyphenation.CharVector.Capacity">
            returns current capacity of array
        </member>
        <member name="T:iTextSharp.text.pdf.events.IndexEvents">
            Class for an index.
            
            @author Michael Niedermair
        </member>
        <member name="F:iTextSharp.text.pdf.events.IndexEvents.indextag">
            keeps the indextag with the pagenumber
        </member>
        <member name="M:iTextSharp.text.pdf.events.IndexEvents.OnGenericTag(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,iTextSharp.text.Rectangle,System.String)">
            All the text that is passed to this event, gets registered in the indexentry.
            
            @see com.lowagie.text.pdf.PdfPageEventHelper#onGenericTag(
                 com.lowagie.text.pdf.PdfWriter, com.lowagie.text.Document,
                 com.lowagie.text.Rectangle, java.lang.String)
        </member>
        <member name="F:iTextSharp.text.pdf.events.IndexEvents.indexcounter">
            indexcounter
        </member>
        <member name="F:iTextSharp.text.pdf.events.IndexEvents.indexentry">
            the list for the index entry
        </member>
        <member name="M:iTextSharp.text.pdf.events.IndexEvents.Create(System.String,System.String,System.String,System.String)">
             Create an index entry.
            
             @param text  The text for the Chunk.
             @param in1   The first level.
             @param in2   The second level.
             @param in3   The third level.
             @return Returns the Chunk.
        </member>
        <member name="M:iTextSharp.text.pdf.events.IndexEvents.Create(System.String,System.String)">
             Create an index entry.
            
             @param text  The text for the Chunk.
             @param in1   The first level.
             @return Returns the Chunk.
        </member>
        <member name="M:iTextSharp.text.pdf.events.IndexEvents.Create(System.String,System.String,System.String)">
             Create an index entry.
            
             @param text  The text for the Chunk.
             @param in1   The first level.
             @param in2   The second level.
             @return Returns the Chunk.
        </member>
        <member name="M:iTextSharp.text.pdf.events.IndexEvents.Create(iTextSharp.text.Chunk,System.String,System.String,System.String)">
             Create an index entry.
            
             @param text  The text.
             @param in1   The first level.
             @param in2   The second level.
             @param in3   The third level.
        </member>
        <member name="M:iTextSharp.text.pdf.events.IndexEvents.Create(iTextSharp.text.Chunk,System.String)">
             Create an index entry.
            
             @param text  The text.
             @param in1   The first level.
        </member>
        <member name="M:iTextSharp.text.pdf.events.IndexEvents.Create(iTextSharp.text.Chunk,System.String,System.String)">
             Create an index entry.
            
             @param text  The text.
             @param in1   The first level.
             @param in2   The second level.
        </member>
        <member name="F:iTextSharp.text.pdf.events.IndexEvents.comparator">
            Comparator for sorting the index
        </member>
        <member name="M:iTextSharp.text.pdf.events.IndexEvents.SetComparator(System.Collections.IComparer)">
            Set the comparator.
            @param aComparator The comparator to set.
        </member>
        <member name="M:iTextSharp.text.pdf.events.IndexEvents.GetSortedEntries">
            Returns the sorted list with the entries and the collected page numbers.
            @return Returns the sorted list with the entries and teh collected page numbers.
        </member>
        <member name="T:iTextSharp.text.pdf.events.IndexEvents.Entry">
            Class for an index entry.
            <p>
            In the first step, only in1, in2,in3 and tag are used.
            After the collections of the index entries, pagenumbers are used.
            </p>
        </member>
        <member name="F:iTextSharp.text.pdf.events.IndexEvents.Entry.in1">
            first level
        </member>
        <member name="F:iTextSharp.text.pdf.events.IndexEvents.Entry.in2">
            second level
        </member>
        <member name="F:iTextSharp.text.pdf.events.IndexEvents.Entry.in3">
            third level
        </member>
        <member name="F:iTextSharp.text.pdf.events.IndexEvents.Entry.tag">
            the tag
        </member>
        <member name="F:iTextSharp.text.pdf.events.IndexEvents.Entry.pagenumbers">
            the lsit of all page numbers.
        </member>
        <member name="F:iTextSharp.text.pdf.events.IndexEvents.Entry.tags">
            the lsit of all tags.
        </member>
        <member name="M:iTextSharp.text.pdf.events.IndexEvents.Entry.#ctor(System.String,System.String,System.String,System.String,iTextSharp.text.pdf.events.IndexEvents)">
            Create a new object.
            @param aIn1   The first level.
            @param aIn2   The second level.
            @param aIn3   The third level.
            @param aTag   The tag.
        </member>
        <member name="M:iTextSharp.text.pdf.events.IndexEvents.Entry.GetIn1">
            Returns the in1.
            @return Returns the in1.
        </member>
        <member name="M:iTextSharp.text.pdf.events.IndexEvents.Entry.GetIn2">
            Returns the in2.
            @return Returns the in2.
        </member>
        <member name="M:iTextSharp.text.pdf.events.IndexEvents.Entry.GetIn3">
            Returns the in3.
            @return Returns the in3.
        </member>
        <member name="M:iTextSharp.text.pdf.events.IndexEvents.Entry.GetTag">
            Returns the tag.
            @return Returns the tag.
        </member>
        <member name="M:iTextSharp.text.pdf.events.IndexEvents.Entry.GetPageNumber">
            Returns the pagenumer for this entry.
            @return Returns the pagenumer for this entry.
        </member>
        <member name="M:iTextSharp.text.pdf.events.IndexEvents.Entry.AddPageNumberAndTag(System.Int32,System.String)">
            Add a pagenumber.
            @param number    The page number.
            @param tag
        </member>
        <member name="M:iTextSharp.text.pdf.events.IndexEvents.Entry.GetKey">
            Returns the key for the map-entry.
            @return Returns the key for the map-entry.
        </member>
        <member name="M:iTextSharp.text.pdf.events.IndexEvents.Entry.GetPagenumbers">
            Returns the pagenumbers.
            @return Returns the pagenumbers.
        </member>
        <member name="M:iTextSharp.text.pdf.events.IndexEvents.Entry.GetTags">
            Returns the tags.
            @return Returns the tags.
        </member>
        <member name="M:iTextSharp.text.pdf.events.IndexEvents.Entry.ToString">
            print the entry (only for test)
            @return the toString implementation of the entry
        </member>
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.pdf.codec.TIFFField" -->
        <member name="F:iTextSharp.text.pdf.codec.TIFFField.TIFF_BYTE">
            Flag for 8 bit unsigned integers. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TIFFField.TIFF_ASCII">
            Flag for null-terminated ASCII strings. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TIFFField.TIFF_SHORT">
            Flag for 16 bit unsigned integers. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TIFFField.TIFF_LONG">
            Flag for 32 bit unsigned integers. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TIFFField.TIFF_RATIONAL">
            Flag for pairs of 32 bit unsigned integers. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TIFFField.TIFF_SBYTE">
            Flag for 8 bit signed integers. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TIFFField.TIFF_UNDEFINED">
            Flag for 8 bit uninterpreted bytes. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TIFFField.TIFF_SSHORT">
            Flag for 16 bit signed integers. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TIFFField.TIFF_SLONG">
            Flag for 32 bit signed integers. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TIFFField.TIFF_SRATIONAL">
            Flag for pairs of 32 bit signed integers. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TIFFField.TIFF_FLOAT">
            Flag for 32 bit IEEE floats. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TIFFField.TIFF_DOUBLE">
            Flag for 64 bit IEEE doubles. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TIFFField.tag">
            The tag number. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TIFFField.type">
            The tag type. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TIFFField.count">
            The number of data items present in the field. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TIFFField.data">
            The field data. 
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFField.#ctor">
            The default constructor. 
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.codec.TIFFField.#ctor(System.Int32,System.Int32,System.Int32,System.Object)" -->
        <member name="M:iTextSharp.text.pdf.codec.TIFFField.GetTag">
            Returns the tag number, between 0 and 65535.
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFField.GetType">
             Returns the type of the data stored in the IFD.
             For a TIFF6.0 file, the value will equal one of the
             TIFF_ constants defined in this class.  For future
             revisions of TIFF, higher values are possible.
            
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFField.GetCount">
            Returns the number of elements in the IFD.
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.codec.TIFFField.GetAsBytes" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.codec.TIFFField.GetAsChars" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.codec.TIFFField.GetAsShorts" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.codec.TIFFField.GetAsInts" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.codec.TIFFField.GetAsLongs" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.codec.TIFFField.GetAsFloats" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.codec.TIFFField.GetAsDoubles" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.codec.TIFFField.GetAsSRationals" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.codec.TIFFField.GetAsRationals" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.codec.TIFFField.GetAsInt(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.codec.TIFFField.GetAsLong(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.codec.TIFFField.GetAsFloat(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.codec.TIFFField.GetAsDouble(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.codec.TIFFField.GetAsString(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.codec.TIFFField.GetAsSRational(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.codec.TIFFField.GetAsRational(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.codec.TIFFField.CompareTo(System.Object)" -->
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.pdf.codec.BmpImage" -->
        <member name="M:iTextSharp.text.pdf.codec.BmpImage.GetImage(System.Uri)">
            Reads a BMP from an url.
            @param url the url
            @throws IOException on error
            @return the image
        </member>
        <member name="M:iTextSharp.text.pdf.codec.BmpImage.GetImage(System.IO.Stream)">
            Reads a BMP from a stream. The stream is not closed.
            @param is the stream
            @throws IOException on error
            @return the image
        </member>
        <member name="M:iTextSharp.text.pdf.codec.BmpImage.GetImage(System.IO.Stream,System.Boolean,System.Int32)">
            Reads a BMP from a stream. The stream is not closed.
            The BMP may not have a header and be considered as a plain DIB.
            @param is the stream
            @param noHeader true to process a plain DIB
            @param size the size of the DIB. Not used for a BMP
            @throws IOException on error
            @return the image
        </member>
        <member name="M:iTextSharp.text.pdf.codec.BmpImage.GetImage(System.String)">
            Reads a BMP from a file.
            @param file the file
            @throws IOException on error
            @return the image
        </member>
        <member name="M:iTextSharp.text.pdf.codec.BmpImage.GetImage(System.Byte[])">
            Reads a BMP from a byte array.
            @param data the byte array
            @throws IOException on error
            @return the image
        </member>
        <member name="T:iTextSharp.text.pdf.CJKFont">
             Creates a CJK font compatible with the fonts in the Adobe Asian font Pack.
            
             @author  Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.CJKFont.CJK_ENCODING">
            The encoding used in the PDF document for CJK fonts
        </member>
        <member name="F:iTextSharp.text.pdf.CJKFont.fontName">
            The font name 
        </member>
        <member name="F:iTextSharp.text.pdf.CJKFont.style">
            The style modifier 
        </member>
        <member name="F:iTextSharp.text.pdf.CJKFont.CMap">
            The CMap name associated with this font 
        </member>
        <member name="M:iTextSharp.text.pdf.CJKFont.#ctor(System.String,System.String,System.Boolean)">
            Creates a CJK font.
            @param fontName the name of the font
            @param enc the encoding of the font
            @param emb always <CODE>false</CODE>. CJK font and not embedded
            @throws DocumentException on error
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.CJKFont.IsCJKFont(System.String,System.String)">
            Checks if its a valid CJK font.
            @param fontName the font name
            @param enc the encoding
            @return <CODE>true</CODE> if it is CJK font
        </member>
        <member name="M:iTextSharp.text.pdf.CJKFont.GetWidth(System.Int32)">
            Gets the width of a <CODE>char</CODE> in normalized 1000 units.
            @param char1 the unicode <CODE>char</CODE> to get the width of
            @return the width in normalized 1000 units
        </member>
        <member name="M:iTextSharp.text.pdf.CJKFont.GetFullFontStream">
            You can't get the FontStream of a CJK font (CJK fonts are never embedded),
            so this method always returns null.
            @return  null
            @since   2.1.3
        </member>
        <member name="M:iTextSharp.text.pdf.CJKFont.GetFontDescriptor(System.Int32,System.Single)">
            Gets the font parameter identified by <CODE>key</CODE>. Valid values
            for <CODE>key</CODE> are <CODE>ASCENT</CODE>, <CODE>CAPHEIGHT</CODE>, <CODE>DESCENT</CODE>
            and <CODE>ITALICANGLE</CODE>.
            @param key the parameter to be extracted
            @param fontSize the font size in points
            @return the parameter in points
        </member>
        <!-- Badly formed XML comment ignored for member "P:iTextSharp.text.pdf.CJKFont.FullFontName" -->
        <!-- Badly formed XML comment ignored for member "P:iTextSharp.text.pdf.CJKFont.AllNameEntries" -->
        <!-- Badly formed XML comment ignored for member "P:iTextSharp.text.pdf.CJKFont.FamilyFontName" -->
        <member name="T:iTextSharp.text.pdf.BarcodeCodabar">
            Implements the code codabar. The default parameters are:
             <pre>
            x = 0.8f;
            n = 2;
            font = BaseFont.CreateFont("Helvetica", "winansi", false);
            size = 8;
            baseline = size;
            barHeight = size * 3;
            textAlignment = Element.ALIGN_CENTER;
            generateChecksum = false;
            checksumText = false;
            startStopText = false;
             </pre>
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeCodabar.CHARS">
            The index chars to <CODE>BARS</CODE>.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeCodabar.BARS">
            The bars to generate the code.
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeCodabar.#ctor">
            Creates a new BarcodeCodabar.
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeCodabar.GetBarsCodabar(System.String)">
            Creates the bars.
            @param text the text to create the bars
            @return the bars
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.BarcodeCodabar.PlaceBarcode(iTextSharp.text.pdf.PdfContentByte,iTextSharp.text.Color,iTextSharp.text.Color)" -->
        <member name="P:iTextSharp.text.pdf.BarcodeCodabar.BarcodeSize">
            Gets the maximum area that the barcode and the text, if
            any, will occupy. The lower left corner is always (0, 0).
            @return the size the barcode occupies.
        </member>
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.html.HtmlEncoder" -->
        <member name="F:iTextSharp.text.html.HtmlEncoder.htmlCode">
            List with the HTML translation of all the characters. 
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.html.HtmlEncoder.#ctor" -->
        <member name="M:iTextSharp.text.html.HtmlEncoder.Encode(System.String)">
             Converts a <CODE>String</CODE> to the HTML-format of this <CODE>String</CODE>.
            
             @param   string  The <CODE>String</CODE> to convert
             @return  a <CODE>String</CODE>
        </member>
        <member name="M:iTextSharp.text.html.HtmlEncoder.Encode(iTextSharp.text.Color)">
             Converts a <CODE>Color</CODE> into a HTML representation of this <CODE>Color</CODE>.
            
             @param   color   the <CODE>Color</CODE> that has to be converted.
             @return  the HTML representation of this <COLOR>Color</COLOR>
        </member>
        <member name="M:iTextSharp.text.html.HtmlEncoder.GetAlignment(System.Int32)">
             Translates the alignment value.
            
             @param   alignment   the alignment value
             @return  the translated value
        </member>
        <member name="T:iTextSharp.text.factories.GreekAlphabetFactory">
            This class can produce String combinations representing a number built with
            Greek letters (from alpha to omega, then alpha alpha, alpha beta, alpha gamma).
            We are aware of the fact that the original Greek numbering is different;
            See http://www.cogsci.indiana.edu/farg/harry/lan/grknum.htm#ancient
            but this isn't implemented yet; the main reason being the fact that we
            need a font that has the obsolete Greek characters qoppa and sampi.
        </member>
        <member name="M:iTextSharp.text.factories.GreekAlphabetFactory.GetString(System.Int32)">
            Changes an int into a lower case Greek letter combination.
            @param index the original number
            @return the letter combination
        </member>
        <member name="M:iTextSharp.text.factories.GreekAlphabetFactory.GetLowerCaseString(System.Int32)">
            Changes an int into a lower case Greek letter combination.
            @param index the original number
            @return the letter combination
        </member>
        <member name="M:iTextSharp.text.factories.GreekAlphabetFactory.GetUpperCaseString(System.Int32)">
            Changes an int into a upper case Greek letter combination.
            @param index the original number
            @return the letter combination
        </member>
        <member name="M:iTextSharp.text.factories.GreekAlphabetFactory.GetString(System.Int32,System.Boolean)">
            Changes an int into a Greek letter combination.
            @param index the original number
            @return the letter combination
        </member>
        <member name="T:System.util.Util">
            <summary>
            Summary description for Util.
            </summary>
        </member>
        <member name="T:System.Drawing.Dimension">
            <summary>
            The <code>Dimension</code> class encapsulates the width and
            height of a component (in int precision) in a single object. 
            </summary>
            <remarks>
            The class is 
            associated with certain properties of components. Several methods 
            defined by the <code>Component</code> class and the 
            <code>LayoutManager</code> interface return a <code>Dimension</code> object.
            <p/>
            Normally the values of <code>width</code> 
            and <code>height</code> are non-negative ints. 
            The constructors that allow you to create a dimension do 
            not prevent you from setting a negative value for these properties. 
            If the value of <code>width</code> or <code>height</code> is 
            negative, the behavior of some methods defined by other objects is 
            undefined. 
            </remarks>
        </member>
        <member name="T:System.Drawing.Dimension2D">
            <summary>
            The <code>Dimension2D</code> class is to encapsulate a width 
            and a height dimension.
            </summary>
            <remarks>
            This class is only the abstract baseclass for all objects that
            store a 2D dimension.
            The actual storage representation of the sizes is left to
            the subclass.
            </remarks>
        </member>
        <member name="M:System.Drawing.Dimension2D.#ctor">
            <summary>
            This is an abstract class that cannot be instantiated directly.
            Type-specific implementation subclasses are available for
            instantiation and provide a number of formats for storing
            the information necessary to satisfy the various accessor
            methods below.
            </summary>
            <seealso cref="T:System.Drawing.Dimension"/>
        </member>
        <member name="M:System.Drawing.Dimension2D.SetSize(System.Double,System.Double)">
            <summary>
            Sets the size of this <code>Dimension</code> object to the 
            specified width and height.
            </summary>
            <param name="width">the new width for the <code>Dimension</code>
            object</param>
            <param name="height">the new height for the <code>Dimension</code> 
            object</param>
        </member>
        <member name="M:System.Drawing.Dimension2D.Clone">
            <summary>
            Creates a new object of the same class as this object.
            </summary>
            <returns>a clone of this instance</returns>
        </member>
        <member name="P:System.Drawing.Dimension2D.Width">
            <summary>
            Returns the width of this <code>Dimension</code> in double 
            precision.
            </summary>
               <value>the width</value>
        </member>
        <member name="P:System.Drawing.Dimension2D.Height">
            <summary>
            Returns the height of this <code>Dimension</code> in double 
            precision.
            </summary>
            <value>the height</value>
        </member>
        <member name="P:System.Drawing.Dimension2D.Size">
            <summary>
            Sets the size of this <code>Dimension2D</code> object to 
            match the specified size.
            </summary>
            <value>the size</value>
        </member>
        <member name="F:System.Drawing.Dimension.width">
            <summary>
            The width dimension. Negative values can be used. 
            </summary>
        </member>
        <member name="F:System.Drawing.Dimension.height">
            <summary>
            The height dimension. Negative values can be used. 
            </summary>
        </member>
        <member name="M:System.Drawing.Dimension.#ctor">
            <summary>
            Creates an instance of <code>Dimension</code> with a width 
            of zero and a height of zero. 
            </summary>
        </member>
        <member name="M:System.Drawing.Dimension.#ctor(System.Drawing.Dimension)">
            <summary>
            Creates an instance of <code>Dimension</code> whose width 
            and height are the same as for the specified dimension. 
            </summary>
            <param name="d">
            the specified dimension for the 
            <code>width</code> and 
            <code>height</code> values.
            </param>
        </member>
        <member name="M:System.Drawing.Dimension.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a Dimension and initializes it to the specified width and
            specified height.
            </summary>
            <param name="width">the specified width dimension</param>
            <param name="height">the specified height dimension</param>
        </member>
        <member name="M:System.Drawing.Dimension.SetSize(System.Double,System.Double)">
            <summary>
            Set the size of this Dimension object to the specified width
            and height in double precision.
            </summary>
            <param name="width">the new width for the Dimension object</param>
            <param name="height">the new height for the Dimension object</param>
        </member>
        <member name="M:System.Drawing.Dimension.SetSize(System.Int32,System.Int32)">
            <summary>
            Set the size of this <code>Dimension</code> object 
            to the specified width and height.
            </summary>
            <param name="width">the new width for this <code>Dimension</code> object.</param>
            <param name="height">the new height for this <code>Dimension</code> object.</param>
        </member>
        <member name="M:System.Drawing.Dimension.Equals(System.Object)">
            <summary>
            Checks whether two dimension objects have equal values.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:System.Drawing.Dimension.GetHashCode">
            <summary>
            Returns the hash code for this Dimension.
            </summary>
            <returns>a hash code</returns>
        </member>
        <member name="M:System.Drawing.Dimension.ToString">
            <summary>
            Returns a string representation of the values of this 
            <code>Dimension</code> object's <code>height</code> and 
            <code>width</code> fields.
            </summary>
            <remarks>
            This method is intended to be used only 
            for debugging purposes, and the content and format of the returned 
            string may vary between implementations. The returned string may be 
            empty but may not be <code>null</code>.
            </remarks>
            <returns>a string representation of this <code>Dimension</code>
            object.
            </returns>
        </member>
        <member name="P:System.Drawing.Dimension.Width">
            <summary>
            Returns the width of this dimension in double precision.
            </summary>
            <value>the width</value>
        </member>
        <member name="P:System.Drawing.Dimension.Height">
            <summary>
            Returns the height of this dimension in double precision.
            </summary>
            <value>the height</value>
        </member>
        <member name="P:System.Drawing.Dimension.Size">
            <summary>
            Get/set the size of this <code>Dimension</code> object.
            </summary>
            <value>the size</value>
        </member>
        <member name="M:iTextSharp.text.SpecialSymbol.Index(System.String)">
             Returns the first occurrence of a special symbol in a <CODE>String</CODE>.
            
             @param    string        a <CODE>String</CODE>
             @return    an index of -1 if no special symbol was found
        </member>
        <member name="M:iTextSharp.text.SpecialSymbol.Get(System.Char,iTextSharp.text.Font)">
            Gets a chunk with a symbol character.
            @param c a character that has to be changed into a symbol
            @param font Font if there is no SYMBOL character corresponding with c
            @return a SYMBOL version of a character
        </member>
        <member name="M:iTextSharp.text.SpecialSymbol.GetCorrespondingSymbol(System.Char)">
             Looks for the corresponding symbol in the font Symbol.
            
             @param    c    the original ASCII-char
             @return    the corresponding symbol in font Symbol
        </member>
        <member name="T:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordMap">
             <code>RtfCtrlWords</code> handles the creation of the control word wiring.
             It is a class containing the hash map of the control words (key)
             and their associated class (value).
            
             @author Howard Shank (hgshank@yahoo.com)
             @since 2.0.8
        </member>
        <member name="F:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordMap.ctrlWords">
            Control Word Hashtable mapping object.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordMap.GetCtrlWordHandler(System.String)">
            Get the Hashtable object containing the control words.
            Initializes the instance if this is the first instantiation
            of RtfCtrlWords class.
            @since 2.0.8
        </member>
        <member name="M:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordMap.#ctor(iTextSharp.text.rtf.parser.RtfParser)">
            Constructor
            @param rtfParser The parser object.
            @since 2.0.8
        </member>
        <member name="T:iTextSharp.text.rtf.document.RtfProtection">
            <code>RtfProtection</code> 
            <pre>
            See ECMA Specification for WordprocessingML documentProtection element.
            
            <strong>Reference:</strong>
            Standard ECMA-376 1st Edition / December 2006
            Office Open XML File Formats
            </pre>
            @since 2.1.1
            @author Howard Shank (hgshank@yahoo.com)
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfProtection.LEVEL_NONE">
            Default for protection level. 
            @since 2.1.1
            @author Howard Shank (hgshank@yahoo.com)
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfProtection.LEVEL_REVPROT">
            REVPROT
            Mutually exclusive
            This document is protected for revisions. The user can edit the document, 
            but revision marking cannot be disabled.
            @since 2.1.1
            @author Howard Shank (hgshank@yahoo.com)
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfProtection.LEVEL_ANNOTPROT">
            ANNNOTPROT
            Mutually exclusive
            This document is protected for comments (annotations).
            The user cannot edit the document but can insert comments (annotations).
            @since 2.1.1
            @author Howard Shank (hgshank@yahoo.com)
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfProtection.LEVEL_FORMPROT">
            FORMPROT
            Mutually exclusive
            Document is protected for forms.
            see also \allprot (forms controlword)
            @since 2.1.1
            @author Howard Shank (hgshank@yahoo.com)
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfProtection.LEVEL_READPROT">
            READPROT
            Mutually exclusive but can be combined with ANNOTPROT for backward compatibility 
            Document is protected for editing, except areas marked as exceptions by \protstart and\protend
            @since 2.1.1
            @author Howard Shank (hgshank@yahoo.com)
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfProtection.STYLELOCK">
            STYLELOCK
            
            The document contains styles and formatting restrictions.
            @since 2.1.1
            @author Howard Shank (hgshank@yahoo.com)
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfProtection.STYLELOCKENFORCED">
            STYLELOCKENFORCED
            
            The styles and formatting restrictions are being enforced.
            @since 2.1.1
            @author Howard Shank (hgshank@yahoo.com)
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfProtection.STYLELOCKBACKCOMP">
            STYLELOCKBACKCOMP
            
            Style lockdown backward compatibility flag, indicating we emitted protection 
            keywords to get documents with styles and formatting restrictions to behave 
            in a reasonable way when opened by older versions.
            @since 2.1.1
            @author Howard Shank (hgshank@yahoo.com)
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfProtection.AUTOFMTOVERRIDE">
            STYLELOCKBACKCOMP
            
            Allow AutoFormat to override styles and formatting restrictions.  When style 
            protection is on, the user cannot add direct formatting.  This setting allows 
            AutoFormat actions to apply direct formatting when needed.
            @since 2.1.1
            @author Howard Shank (hgshank@yahoo.com)
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfProtection.initialCodeArray">
            <code>initialCodeArray</code> Table from ECMA-376 Specification
            @since 2.1.1
            @author Howard Shank (hgshank@yahoo.com)
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfProtection.encryptionMatrix">
            <code>encryptionMatrix</code> Table from ECMA-376 Specification
            @since 2.1.1
            @author Howard Shank (hgshank@yahoo.com)
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfProtection.GenerateHash(System.String)">
            <code>generateHash</code> generates the password hash from a clear text string.
            
            @param pwd Clear text string input
            @return hex encoded password hash
            
            @author Howard Shank (hgshank@yahoo.com)
            @since 2.1.1
        </member>
        <member name="T:iTextSharp.text.rtf.document.output.RtfEfficientMemoryCache">
            The RtfEfficientMemoryCache is an RtfDataCache that keeps the whole rtf document
            data in memory.
            More efficient than {@link RtfMemoryCache}.
            
            @version $Id: RtfEfficientMemoryCache.cs,v 1.1 2007/05/26 20:44:49 psoares33 Exp $
            @author Thomas Bickel (tmb99@inode.at)
        </member>
        <member name="F:iTextSharp.text.rtf.document.output.RtfEfficientMemoryCache.bab">
            The buffer for the rtf document data.
        </member>
        <member name="M:iTextSharp.text.rtf.document.output.RtfEfficientMemoryCache.#ctor">
            Constructs a RtfMemoryCache.
        </member>
        <member name="M:iTextSharp.text.rtf.document.output.RtfEfficientMemoryCache.GetOutputStream">
            Gets the OutputStream.
        </member>
        <member name="M:iTextSharp.text.rtf.document.output.RtfEfficientMemoryCache.WriteTo(System.IO.Stream)">
            Writes the content of the buffer into the OutputStream.
        </member>
        <member name="T:iTextSharp.text.Row">
            <summary>
            A Row is part of a Table
            and contains some Cells.
            </summary>
            <remarks>
            All Rows are constructed by a Table-object.
            You don't have to construct any Row yourself.
            In fact you can't construct a Row outside the package.
            <P/>
            Since a Cell can span several rows and/or columns
            a row can contain reserved space without any content.
            </remarks>
            <seealso cref="T:iTextSharp.text.Element"/>
            <seealso cref="T:iTextSharp.text.Cell"/>
            <seealso cref="T:iTextSharp.text.Table"/>
        </member>
        <member name="F:iTextSharp.text.Row.NULL">
            <summary> id of a null element in a Row</summary>
        </member>
        <member name="F:iTextSharp.text.Row.CELL">
            <summary> id of the Cell element in a Row</summary>
        </member>
        <member name="F:iTextSharp.text.Row.TABLE">
            <summary> id of the Table element in a Row</summary>
        </member>
        <member name="F:iTextSharp.text.Row.columns">
            <summary> This is the number of columns in the Row. </summary>
        </member>
        <member name="F:iTextSharp.text.Row.currentColumn">
            <summary> This is a valid position the Row. </summary>
        </member>
        <member name="F:iTextSharp.text.Row.reserved">
            <summary> This is the array that keeps track of reserved cells. </summary>
        </member>
        <member name="F:iTextSharp.text.Row.cells">
            <summary> This is the array of Objects (Cell or Table). </summary>
        </member>
        <member name="F:iTextSharp.text.Row.horizontalAlignment">
            <summary> This is the horizontal alignment. </summary>
        </member>
        <member name="M:iTextSharp.text.Row.#ctor(System.Int32)">
            <summary>
            Constructs a Row with a certain number of columns.
            </summary>
            <param name="columns">a number of columns</param>
        </member>
        <member name="M:iTextSharp.text.Row.Process(iTextSharp.text.IElementListener)">
            <summary>
            Processes the element by adding it (or the different parts) to a
            IElementListener.
            </summary>
            <param name="listener">an IElementListener</param>
            <returns>true if the element was processed successfully</returns>
        </member>
        <member name="M:iTextSharp.text.Row.IsContent">
            @see com.lowagie.text.Element#isContent()
            @since   iText 2.0.8
        </member>
        <member name="M:iTextSharp.text.Row.IsNestable">
            @see com.lowagie.text.Element#isNestable()
            @since   iText 2.0.8
        </member>
        <member name="M:iTextSharp.text.Row.DeleteColumn(System.Int32)">
            <summary>
            Deletes a certain column has been deleted.
            </summary>
            <param name="column">the number of the column to delete</param>
        </member>
        <member name="M:iTextSharp.text.Row.AddElement(System.Object)">
            <summary>
            Adds a Cell to the Row.
            </summary>
            <param name="element">the element to add (currently only Cells and Tables supported)</param>
            <returns>
            the column position the Cell was added,
                   or -1 if the element couldn't be added.
            </returns>
        </member>
        <member name="M:iTextSharp.text.Row.AddElement(System.Object,System.Int32)">
            <summary>
            Adds an element to the Row at the position given.
            </summary>
            <param name="element">the element to add. (currently only Cells and Tables supported</param>
            <param name="column">the position where to add the cell</param>
            <returns>
            the column position the Cell was added,
                   or -1 if the Cell couldn't be added.
            </returns>
        </member>
        <member name="M:iTextSharp.text.Row.SetElement(System.Object,System.Int32)">
            <summary>
            Puts Cell to the Row at the position given, doesn't reserve colspan.
            </summary>
            <param name="aElement">the cell to add.</param>
            <param name="column">the position where to add the cell.</param>
        </member>
        <member name="M:iTextSharp.text.Row.Reserve(System.Int32)">
            <summary>
            Reserves a Cell in the Row.
            </summary>
            <param name="column">the column that has to be reserved.</param>
            <returns>true if the column was reserved, false if not.</returns>
        </member>
        <member name="M:iTextSharp.text.Row.Reserve(System.Int32,System.Int32)">
            <summary>
            Reserves a Cell in the Row.
            </summary>
            <param name="column">the column that has to be reserved.</param>
            <param name="size">the number of columns</param>
            <returns>true if the column was reserved, false if not.</returns>
        </member>
        <member name="M:iTextSharp.text.Row.IsReserved(System.Int32)">
            <summary>
            Returns true/false when this position in the Row has been reserved, either filled or through a colspan of an Element.
            </summary>
            <param name="column">the column.</param>
            <returns>true if the column was reserved, false if not.</returns>
        </member>
        <member name="M:iTextSharp.text.Row.GetElementID(System.Int32)">
            <summary>
            Returns the type-id of the element in a Row.
            </summary>
            <param name="column">the column of which you'd like to know the type</param>
            <returns>the element id</returns>
        </member>
        <member name="M:iTextSharp.text.Row.GetObjectID(System.Object)">
            <summary>
            Returns the type-id of an Object.
            </summary>
            <param name="element"></param>
            <returns>the object of which you'd like to know the type-id, -1 if invalid</returns>
        </member>
        <member name="M:iTextSharp.text.Row.GetCell(System.Int32)">
            <summary>
            Gets a Cell or Table from a certain column.
            </summary>
            <param name="column">the column the Cell/Table is in.</param>
            <returns>
            the Cell,Table or Object if the column was
            reserved or null if empty.
            </returns>
        </member>
        <member name="M:iTextSharp.text.Row.IsEmpty">
            <summary>
            Checks if the row is empty.
            </summary>
            <returns>true if none of the columns is reserved.</returns>
        </member>
        <member name="P:iTextSharp.text.Row.Type">
            <summary>
            Gets the type of the text element.
            </summary>
            <value>a type</value>
        </member>
        <member name="P:iTextSharp.text.Row.Chunks">
            <summary>
            Gets all the chunks in this element.
            </summary>
            <value>an ArrayList</value>
        </member>
        <member name="P:iTextSharp.text.Row.Columns">
            <summary>
            Gets the number of columns.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Row.HorizontalAlignment">
            <summary>
            Gets the horizontal Element.
            </summary>
            <value>a value</value>
        </member>
        <member name="T:iTextSharp.text.pdf.SpotColor">
            
             @author  psoares
        </member>
        <member name="T:iTextSharp.text.pdf.PdfShading">
            Implements the shading dictionary (or stream).
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.PdfShading.bBox">
            Holds value of property bBox. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfShading.antiAlias">
            Holds value of property antiAlias. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfShading.#ctor(iTextSharp.text.pdf.PdfWriter)">
            Creates new PdfShading 
        </member>
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.pdf.PdfNumber" -->
        <member name="F:iTextSharp.text.pdf.PdfNumber.value">
            actual value of this <CODE>PdfNumber</CODE>, represented as a <CODE>double</CODE> 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfNumber.#ctor(System.String)">
             Constructs a <CODE>PdfNumber</CODE>-object.
            
             @param        content            value of the new <CODE>PdfNumber</CODE>-object
        </member>
        <member name="M:iTextSharp.text.pdf.PdfNumber.#ctor(System.Int32)">
             Constructs a new int <CODE>PdfNumber</CODE>-object.
            
             @param        value                value of the new <CODE>PdfNumber</CODE>-object
        </member>
        <member name="M:iTextSharp.text.pdf.PdfNumber.#ctor(System.Double)">
             Constructs a new REAL <CODE>PdfNumber</CODE>-object.
            
             @param        value                value of the new <CODE>PdfNumber</CODE>-object
        </member>
        <member name="M:iTextSharp.text.pdf.PdfNumber.#ctor(System.Single)">
             Constructs a new REAL <CODE>PdfNumber</CODE>-object.
            
             @param        value                value of the new <CODE>PdfNumber</CODE>-object
        </member>
        <member name="M:iTextSharp.text.pdf.PdfNumber.Increment">
            Increments the value of the <CODE>PdfNumber</CODE>-object with 1.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfNumber.IntValue">
             Returns the primitive <CODE>int</CODE> value of this object.
            
             @return        a value
        </member>
        <member name="P:iTextSharp.text.pdf.PdfNumber.DoubleValue">
             Returns the primitive <CODE>double</CODE> value of this object.
            
             @return        a value
        </member>
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.pdf.PdfDocument" -->
        <member name="T:iTextSharp.text.Document">
            <summary>
            A generic Document class.
            </summary>
            <remarks>
            All kinds of Text-elements can be added to a HTMLDocument.
            The Document signals all the listeners when an element
            has been added.<p/>
            <OL>
                <LI/>Once a document is created you can add some meta information.
                <LI/>You can also set the headers/footers.
                <LI/>You have to open the document before you can write content.
                <LI/>You can only write content (no more meta-formation!) once a document is opened.
                <LI/>When you change the header/footer on a certain page, this will be effective starting on the next page.
                <LI/>Ater closing the document, every listener (as well as its OutputStream) is closed too.
            </OL>
            </remarks>
            <example>
            <code>
            // creation of the document with a certain size and certain margins
            <strong>Document document = new Document(PageSize.A4, 50, 50, 50, 50);</strong>
            try {
                // creation of the different writers
                HtmlWriter.GetInstance(<strong>document</strong>, System.out);
                PdfWriter.GetInstance(<strong>document</strong>, new FileOutputStream("text.pdf"));
                // we add some meta information to the document
                <strong>document.AddAuthor("Bruno Lowagie");
                document.AddSubject("This is the result of a Test.");</strong>
                
                // we define a header and a footer
                HeaderFooter header = new HeaderFooter(new Phrase("This is a header."), false);
                HeaderFooter footer = new HeaderFooter(new Phrase("This is page "), new Phrase("."));
                footer.SetAlignment(Element.ALIGN_CENTER);
                <strong>document.SetHeader(header);
                document.SetFooter(footer);</strong>
                // we open the document for writing
                <strong>document.Open();
                document.Add(new Paragraph("Hello world"));</strong>
            }
            catch (DocumentException de) {
                Console.Error.WriteLine(de.Message);
            }
            <strong>document.Close();</strong>
            </code>
            </example>
        </member>
        <member name="F:iTextSharp.text.Document.ITEXT">
            This constant may only be changed by Paulo Soares and/or Bruno Lowagie.
            @since	2.1.6
        </member>
        <member name="F:iTextSharp.text.Document.RELEASE">
            This constant may only be changed by Paulo Soares and/or Bruno Lowagie.
            @since	2.1.6
        </member>
        <member name="F:iTextSharp.text.Document.ITEXT_VERSION">
            This constant may only be changed by Paulo Soares and/or Bruno Lowagie. 
        </member>
        <member name="F:iTextSharp.text.Document.Compress">
            <summary> Allows the pdf documents to be produced without compression for debugging purposes. </summary>
        </member>
        <member name="F:iTextSharp.text.Document.WmfFontCorrection">
            <summary> Scales the WMF font size. The default value is 0.86.  </summary>
        </member>
        <member name="F:iTextSharp.text.Document.listeners">
            <summary> The IDocListener. </summary>
        </member>
        <member name="F:iTextSharp.text.Document.open">
            <summary> Is the document open or not? </summary>
        </member>
        <member name="F:iTextSharp.text.Document.close">
            <summary> Has the document allready been closed? </summary>
        </member>
        <member name="F:iTextSharp.text.Document.pageSize">
            <summary> The size of the page. </summary>
        </member>
        <member name="F:iTextSharp.text.Document.marginLeft">
            <summary> margin in x direction starting from the left </summary>
        </member>
        <member name="F:iTextSharp.text.Document.marginRight">
            <summary> margin in x direction starting from the right </summary>
        </member>
        <member name="F:iTextSharp.text.Document.marginTop">
            <summary> margin in y direction starting from the top </summary>
        </member>
        <member name="F:iTextSharp.text.Document.marginBottom">
            <summary> margin in y direction starting from the bottom </summary>
        </member>
        <member name="F:iTextSharp.text.Document.marginMirroringTopBottom">
            mirroring of the top/bottom margins
            @since	2.1.6
        </member>
        <member name="F:iTextSharp.text.Document.javaScript_onLoad">
            <summary> Content of JavaScript onLoad function </summary>
        </member>
        <member name="F:iTextSharp.text.Document.javaScript_onUnLoad">
            <summary> Content of JavaScript onUnLoad function  </summary>
        </member>
        <member name="F:iTextSharp.text.Document.htmlStyleClass">
            <summary> Style class in HTML body tag </summary>
        </member>
        <member name="F:iTextSharp.text.Document.pageN">
            <summary> Current pagenumber </summary>
        </member>
        <member name="F:iTextSharp.text.Document.header">
            <summary> This is the textual part of a Page; it can contain a header </summary>
        </member>
        <member name="F:iTextSharp.text.Document.footer">
            <summary> This is the textual part of the footer </summary>
        </member>
        <member name="F:iTextSharp.text.Document.chapternumber">
            This is a chapter number in case ChapterAutoNumber is used. 
        </member>
        <member name="M:iTextSharp.text.Document.#ctor">
            <summary>
            Constructs a new Document-object.
            </summary>
            <overloads>
            Has three overloads.
            </overloads>
        </member>
        <member name="M:iTextSharp.text.Document.#ctor(iTextSharp.text.Rectangle)">
            <summary>
            Constructs a new Document-object.
            </summary>
            <param name="pageSize">the pageSize</param>
        </member>
        <member name="M:iTextSharp.text.Document.#ctor(iTextSharp.text.Rectangle,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new Document-object.
            </summary>
            <param name="pageSize">the pageSize</param>
            <param name="marginLeft">the margin on the left</param>
            <param name="marginRight">the margin on the right</param>
            <param name="marginTop">the margin on the top</param>
            <param name="marginBottom">the margin on the bottom</param>
        </member>
        <member name="M:iTextSharp.text.Document.AddDocListener(iTextSharp.text.IDocListener)">
            <summary>
            Adds a IDocListener to the Document.
            </summary>
            <param name="listener">the new IDocListener</param>
        </member>
        <member name="M:iTextSharp.text.Document.RemoveIDocListener(iTextSharp.text.IDocListener)">
            <summary>
            Removes a IDocListener from the Document.
            </summary>
            <param name="listener">the IDocListener that has to be removed.</param>
        </member>
        <member name="M:iTextSharp.text.Document.Add(iTextSharp.text.IElement)">
            <summary>
            Adds an Element to the Document.
            </summary>
            <param name="element">the Element to add</param>
            <returns>true if the element was added, false if not</returns>
        </member>
        <member name="M:iTextSharp.text.Document.Open">
            <summary>
            Opens the document.
            </summary>
            <remarks>
            Once the document is opened, you can't write any Header- or Meta-information
            anymore. You have to open the document before you can begin to add content
            to the body of the document.
            </remarks>
        </member>
        <member name="M:iTextSharp.text.Document.SetPageSize(iTextSharp.text.Rectangle)">
            <summary>
            Sets the pagesize.
            </summary>
            <param name="pageSize">the new pagesize</param>
            <returns>a bool</returns>
        </member>
        <member name="M:iTextSharp.text.Document.SetMargins(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the margins.
            </summary>
            <param name="marginLeft">the margin on the left</param>
            <param name="marginRight">the margin on the right</param>
            <param name="marginTop">the margin on the top</param>
            <param name="marginBottom">the margin on the bottom</param>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.Document.NewPage">
            <summary>
            Signals that an new page has to be started.
            </summary>
            <returns>true if the page was added, false if not.</returns>
        </member>
        <member name="M:iTextSharp.text.Document.ResetHeader">
            <summary>
            Resets the header of this document.
            </summary>
        </member>
        <member name="M:iTextSharp.text.Document.ResetFooter">
            <summary>
            Resets the footer of this document.
            </summary>
        </member>
        <member name="M:iTextSharp.text.Document.ResetPageCount">
            <summary>
            Sets the page number to 0.
            </summary>
        </member>
        <member name="M:iTextSharp.text.Document.Close">
            <summary>
            Closes the document.
            </summary>
            <remarks>
            Once all the content has been written in the body, you have to close
            the body. After that nothing can be written to the body anymore.
            </remarks>
        </member>
        <member name="M:iTextSharp.text.Document.AddHeader(System.String,System.String)">
            <summary>
            Adds a user defined header to the document.
            </summary>
            <param name="name">the name of the header</param>
            <param name="content">the content of the header</param>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="M:iTextSharp.text.Document.AddTitle(System.String)">
            <summary>
            Adds the title to a Document.
            </summary>
            <param name="title">the title</param>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="M:iTextSharp.text.Document.AddSubject(System.String)">
            <summary>
            Adds the subject to a Document.
            </summary>
            <param name="subject">the subject</param>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="M:iTextSharp.text.Document.AddKeywords(System.String)">
            <summary>
            Adds the keywords to a Document.
            </summary>
            <param name="keywords">keywords to add</param>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="M:iTextSharp.text.Document.AddAuthor(System.String)">
            <summary>
            Adds the author to a Document.
            </summary>
            <param name="author">the name of the author</param>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="M:iTextSharp.text.Document.AddCreator(System.String)">
            <summary>
            Adds the creator to a Document.
            </summary>
            <param name="creator">the name of the creator</param>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="M:iTextSharp.text.Document.AddProducer">
            <summary>
            Adds the producer to a Document.
            </summary>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="M:iTextSharp.text.Document.AddCreationDate">
            <summary>
            Adds the current date and time to a Document.
            </summary>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="M:iTextSharp.text.Document.GetLeft(System.Single)">
            <summary>
            Returns the lower left x-coordinate considering a given margin.
            </summary>
            <param name="margin">a margin</param>
            <returns>the lower left x-coordinate</returns>
        </member>
        <member name="M:iTextSharp.text.Document.GetRight(System.Single)">
            <summary>
            Returns the upper right x-coordinate, considering a given margin.
            </summary>
            <param name="margin">a margin</param>
            <returns>the upper right x-coordinate</returns>
        </member>
        <member name="M:iTextSharp.text.Document.GetTop(System.Single)">
            <summary>
            Returns the upper right y-coordinate, considering a given margin.
            </summary>
            <param name="margin">a margin</param>
            <returns>the upper right y-coordinate</returns>
        </member>
        <member name="M:iTextSharp.text.Document.GetBottom(System.Single)">
            <summary>
            Returns the lower left y-coordinate, considering a given margin.
            </summary>
            <param name="margin">a margin</param>
            <returns>the lower left y-coordinate</returns>
        </member>
        <member name="M:iTextSharp.text.Document.IsOpen">
            <summary>
            Checks if the document is open.
            </summary>
            <returns>true if the document is open</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.Document.SetMarginMirroring(System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.Document.SetMarginMirroringTopBottom(System.Boolean)" -->
        <member name="M:iTextSharp.text.Document.IsMarginMirroring">
            Gets the margin mirroring flag.
            
            @return the margin mirroring flag
        </member>
        <member name="P:iTextSharp.text.Document.Header">
            <summary>
            Changes the header of this document.
            </summary>
            <value>a HeaderFooter</value>
        </member>
        <member name="P:iTextSharp.text.Document.Footer">
            <summary>
            Changes the footer of this document.
            </summary>
            <value>a HeaderFooter</value>
        </member>
        <member name="P:iTextSharp.text.Document.PageCount">
            <summary>
            Sets the page number.
            </summary>
            <value>an int</value>
        </member>
        <member name="P:iTextSharp.text.Document.PageNumber">
            <summary>
            Returns the current page number.
            </summary>
            <value>an int</value>
        </member>
        <member name="P:iTextSharp.text.Document.LeftMargin">
            <summary>
            Returns the left margin.
            </summary>
            <value>the left margin</value>
        </member>
        <member name="P:iTextSharp.text.Document.RightMargin">
            <summary>
            Return the right margin.
            </summary>
            <value>the right margin</value>
        </member>
        <member name="P:iTextSharp.text.Document.TopMargin">
            <summary>
            Returns the top margin.
            </summary>
            <value>the top margin</value>
        </member>
        <member name="P:iTextSharp.text.Document.BottomMargin">
            <summary>
            Returns the bottom margin.
            </summary>
            <value>the bottom margin</value>
        </member>
        <member name="P:iTextSharp.text.Document.Left">
            <summary>
            Returns the lower left x-coordinate.
            </summary>
            <value>the lower left x-coordinate</value>
        </member>
        <member name="P:iTextSharp.text.Document.Right">
            <summary>
            Returns the upper right x-coordinate.
            </summary>
            <value>the upper right x-coordinate.</value>
        </member>
        <member name="P:iTextSharp.text.Document.Top">
            <summary>
            Returns the upper right y-coordinate.
            </summary>
            <value>the upper right y-coordinate.</value>
        </member>
        <member name="P:iTextSharp.text.Document.Bottom">
            <summary>
            Returns the lower left y-coordinate.
            </summary>
            <value>the lower left y-coordinate.</value>
        </member>
        <member name="P:iTextSharp.text.Document.PageSize">
            <summary>
            Gets the pagesize.
            </summary>
            <value>the page size</value>
        </member>
        <member name="P:iTextSharp.text.Document.Product">
            Gets the product name.
            This method may only be changed by Paulo Soares and/or Bruno Lowagie.
            @return the product name
            @since	2.1.6
        </member>
        <member name="P:iTextSharp.text.Document.Release">
            Gets the release number.
            This method may only be changed by Paulo Soares and/or Bruno Lowagie.
            @return the product name
            @since	2.1.6
        </member>
        <member name="P:iTextSharp.text.Document.Version">
            <summary>
            Gets the iText version.
            </summary>
            <value>iText version</value>
        </member>
        <member name="P:iTextSharp.text.Document.JavaScript_onLoad">
            <summary>
            Gets the JavaScript onLoad command.
            </summary>
            <value>the JavaScript onLoad command.</value>
        </member>
        <member name="P:iTextSharp.text.Document.JavaScript_onUnLoad">
            <summary>
            Gets the JavaScript onUnLoad command.
            </summary>
            <value>the JavaScript onUnLoad command</value>
        </member>
        <member name="P:iTextSharp.text.Document.HtmlStyleClass">
            <summary>
            Gets the style class of the HTML body tag
            </summary>
            <value>the style class of the HTML body tag</value>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.hangingPunctuation">
            The characters to be applied the hanging punctuation. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.#ctor">
            Constructs a new PDF document.
            @throws DocumentException on error
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.writer">
            The <CODE>PdfWriter</CODE>. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.AddWriter(iTextSharp.text.pdf.PdfWriter)">
             Adds a <CODE>PdfWriter</CODE> to the <CODE>PdfDocument</CODE>.
            
             @param writer the <CODE>PdfWriter</CODE> that writes everything
                                 what is added to this document to an outputstream.
             @throws DocumentException on error
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.text">
            This is the PdfContentByte object, containing the text. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.graphics">
            This is the PdfContentByte object, containing the borders and other Graphics. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.leading">
            This represents the leading of the lines. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.currentHeight">
            This is the current height of the document. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.isSectionTitle">
            Signals that onParagraph is valid (to avoid that a Chapter/Section title is treated as a Paragraph).
            @since 2.1.2
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.leadingCount">
            Signals that the current leading has to be subtracted from a YMark object.
            @since 2.1.2
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.alignment">
            This represents the current alignment of the PDF Elements. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.anchorAction">
            The current active <CODE>PdfAction</CODE> when processing an <CODE>Anchor</CODE>. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.Add(iTextSharp.text.IElement)">
             Signals that an <CODE>Element</CODE> was added to the <CODE>Document</CODE>.
            
             @param element the element to add
             @return <CODE>true</CODE> if the element was added, <CODE>false</CODE> if not.
             @throws DocumentException when a document isn't open yet, or has been closed
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfDocument.Open" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfDocument.Close" -->
        <member name="F:iTextSharp.text.pdf.PdfDocument.xmpMetadata">
            XMP Metadata for the page. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.NewPage">
             Makes a new page and sends it to the <CODE>PdfWriter</CODE>.
            
             @return a <CODE>bool</CODE>
             @throws DocumentException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.SetPageSize(iTextSharp.text.Rectangle)">
             Sets the pagesize.
            
             @param pageSize the new pagesize
             @return <CODE>true</CODE> if the page size was set
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.nextMarginLeft">
            margin in x direction starting from the left. Will be valid in the next page 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.nextMarginRight">
            margin in x direction starting from the right. Will be valid in the next page 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.nextMarginTop">
            margin in y direction starting from the top. Will be valid in the next page 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.nextMarginBottom">
            margin in y direction starting from the bottom. Will be valid in the next page 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.SetMargins(System.Single,System.Single,System.Single,System.Single)">
             Sets the margins.
            
             @param    marginLeft      the margin on the left
             @param    marginRight     the margin on the right
             @param    marginTop       the margin on the top
             @param    marginBottom    the margin on the bottom
             @return   a <CODE>bool</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.SetMarginMirroring(System.Boolean)">
            @see com.lowagie.text.DocListener#setMarginMirroring(bool)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.SetMarginMirroringTopBottom(System.Boolean)">
            @see com.lowagie.text.DocListener#setMarginMirroring(boolean)
            @since    2.1.6
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.ResetPageCount">
            Sets the page number to 0.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.ResetHeader">
            Resets the header of this document.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.ResetFooter">
            Resets the footer of this document.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.firstPageEvent">
            Signals that OnOpenDocument should be called. 
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfDocument.InitPage" -->
        <member name="F:iTextSharp.text.pdf.PdfDocument.line">
            The line that is currently being written. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.lines">
            The lines that are written until now. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.NewLine">
            Adds the current line to the list of lines and also adds an empty line.
            @throws DocumentException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.CarriageReturn">
            If the current line is not empty or null, it is added to the arraylist
            of lines and a new empty line is added.
            @throws DocumentException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.GetVerticalPosition(System.Boolean)">
            Gets the current vertical page position.
            @param ensureNewLine Tells whether a new line shall be enforced. This may cause side effects 
              for elements that do not terminate the lines they've started because those lines will get
              terminated. 
            @return The current vertical page position.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.lastElementType">
            Holds the type of the last element, that has been added to the document. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.EnsureNewLine">
            Ensures that a new line has been started. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.FlushLines">
             Writes all the lines to the text-object.
            
             @return the displacement that was caused
             @throws DocumentException on error
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfDocument.WriteLineToContent(iTextSharp.text.pdf.PdfLine,iTextSharp.text.pdf.PdfContentByte,iTextSharp.text.pdf.PdfContentByte,System.Object[],System.Single)" -->
        <member name="M:iTextSharp.text.pdf.PdfDocument.AddSpacing(System.Single,System.Single,iTextSharp.text.Font)">
            Adds extra space.
            This method should probably be rewritten.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.info">
            some meta information about the Document. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.GetCatalog(iTextSharp.text.pdf.PdfIndirectReference)">
             Gets the <CODE>PdfCatalog</CODE>-object.
            
             @param pages an indirect reference to this document pages
             @return <CODE>PdfCatalog</CODE>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.rootOutline">
            This is the root outline of the document. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.currentOutline">
            This is the current <CODE>PdfOutline</CODE> in the hierarchy of outlines. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.AddOutline(iTextSharp.text.pdf.PdfOutline,System.String)">
            Adds a named outline to the document .
            @param outline the outline to be added
            @param name the name of this local destination
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.viewerPreferences">
            Contains the Viewer preferences of this PDF document. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.AddViewerPreference(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfObject)">
            @see com.lowagie.text.pdf.interfaces.PdfViewerPreferences#addViewerPreference(com.lowagie.text.pdf.PdfName, com.lowagie.text.pdf.PdfObject) 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.LocalGoto(System.String,System.Single,System.Single,System.Single,System.Single)">
            Implements a link to other part of the document. The jump will
            be made to a local destination with the same name, that must exist.
            @param name the name for this link
            @param llx the lower left x corner of the activation area
            @param lly the lower left y corner of the activation area
            @param urx the upper right x corner of the activation area
            @param ury the upper right y corner of the activation area
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.RemoteGoto(System.String,System.String,System.Single,System.Single,System.Single,System.Single)">
            Implements a link to another document.
            @param filename the filename for the remote document
            @param name the name to jump to
            @param llx the lower left x corner of the activation area
            @param lly the lower left y corner of the activation area
            @param urx the upper right x corner of the activation area
            @param ury the upper right y corner of the activation area
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.RemoteGoto(System.String,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            Implements a link to another document.
            @param filename the filename for the remote document
            @param page the page to jump to
            @param llx the lower left x corner of the activation area
            @param lly the lower left y corner of the activation area
            @param urx the upper right x corner of the activation area
            @param ury the upper right y corner of the activation area
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.SetAction(iTextSharp.text.pdf.PdfAction,System.Single,System.Single,System.Single,System.Single)">
            Implements an action in an area.
            @param action the <CODE>PdfAction</CODE>
            @param llx the lower left x corner of the activation area
            @param lly the lower left y corner of the activation area
            @param urx the upper right x corner of the activation area
            @param ury the upper right y corner of the activation area
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.localDestinations">
            Stores the destinations keyed by name. Value is
            <CODE>Object[]{PdfAction,PdfIndirectReference,PdfDestintion}</CODE>.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.LocalDestination(System.String,iTextSharp.text.pdf.PdfDestination)">
            The local destination to where a local goto with the same
            name will jump to.
            @param name the name of this local destination
            @param destination the <CODE>PdfDestination</CODE> with the jump coordinates
            @return <CODE>true</CODE> if the local destination was added,
            <CODE>false</CODE> if a local destination with the same name
            already existed
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.jsCounter">
            Stores a list of document level JavaScript actions.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.nextPageSize">
            This is the size of the next page. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.thisBoxSize">
            This is the size of the several boxes of the current Page. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.boxSize">
            This is the size of the several boxes that will be used in
            the next page. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.GetBoxSize(System.String)">
            Gives the size of a trim, art, crop or bleed box, or null if not defined.
            @param boxName crop, trim, art or bleed
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.pageEmpty">
            This checks if the page is empty. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.duration">
            The duration of the page 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.transition">
            The page transition 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.pageResources">
            This are the page resources of the current Page. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.strictImageSequence">
            Holds value of property strictImageSequence. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.imageEnd">
            This is the position where the image ends. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.ClearTextWrap">
            Method added by Pelikan Stephan
            @see com.lowagie.text.DocListener#clearTextWrap()
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.imageWait">
            This is the image that could not be shown on a previous page. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.Add(iTextSharp.text.Image)">
            Adds an image to the document.
            @param image the <CODE>Image</CODE> to add
            @throws PdfException on error
            @throws DocumentException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.AddPTable(iTextSharp.text.pdf.PdfPTable)">
            Adds a <CODE>PdfPTable</CODE> to the document.
            @param ptable the <CODE>PdfPTable</CODE> to be added to the document.
            @throws DocumentException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.AddPdfTable(iTextSharp.text.Table)">
            Adds a new table to 
            @param table              Table to add.  Rendered rows will be deleted after processing.
            @param onlyFirstPage      Render only the first full page
            @throws DocumentException
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.GetBottom(iTextSharp.text.Table)">
             Returns the bottomvalue of a <CODE>Table</CODE> if it were added to this document.
            
             @param    table   the table that may or may not be added to this document
             @return   a bottom value
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDocument.Leading">
            Getter for the current leading.
            @return  the current leading
            @since   2.1.2
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDocument.XmpMetadata">
            Use this method to set the XMP Metadata.
            @param xmpMetadata The xmpMetadata to set.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDocument.PageCount">
             Sets the page number.
            
             @param    pageN       the new page number
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDocument.Header">
             Changes the header of this document.
            
             @param header the new header
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDocument.Footer">
             Changes the footer of this document.
            
             @param    footer      the new footer
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDocument.IndentLeft">
             Gets the indentation on the left side.
            
             @return   a margin
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDocument.IndentRight">
             Gets the indentation on the right side.
            
             @return   a margin
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDocument.IndentTop">
             Gets the indentation on the top side.
            
             @return   a margin
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDocument.IndentBottom">
             Gets the indentation on the bottom side.
            
             @return   a margin
        </member>
        <!-- Badly formed XML comment ignored for member "P:iTextSharp.text.pdf.PdfDocument.Info" -->
        <member name="P:iTextSharp.text.pdf.PdfDocument.RootOutline">
            Gets the root outline. All the outlines must be created with a parent.
            The first level is created with this outline.
            @return the root outline
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDocument.ViewerPreferences">
            @see com.lowagie.text.pdf.interfaces.PdfViewerPreferences#setViewerPreferences(int) 
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDocument.Collection">
            Sets the collection dictionary.
            @param collection a dictionary of type PdfCollection
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDocument.AcroForm">
            Gets the AcroForm object.
            @return the PdfAcroform object of the PdfDocument
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDocument.Duration">
            Sets the display duration for the page (for presentations)
            @param seconds   the number of seconds to display the page
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDocument.Transition">
            Sets the transition for the page
            @param transition   the PdfTransition object
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDocument.StrictImageSequence">
            Setter for property strictImageSequence.
             @param strictImageSequence New value of property strictImageSequence.
            
        </member>
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.pdf.PdfDocument.PdfInfo" -->
        <member name="M:iTextSharp.text.pdf.PdfDocument.PdfInfo.#ctor">
            Construct a <CODE>PdfInfo</CODE>-object.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.PdfInfo.#ctor(System.String,System.String,System.String)">
             Constructs a <CODE>PdfInfo</CODE>-object.
            
             @param        author      name of the author of the document
             @param        title       title of the document
             @param        subject     subject of the document
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.PdfInfo.AddTitle(System.String)">
             Adds the title of the document.
            
             @param    title       the title of the document
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.PdfInfo.AddSubject(System.String)">
             Adds the subject to the document.
            
             @param    subject     the subject of the document
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.PdfInfo.AddKeywords(System.String)">
             Adds some keywords to the document.
            
             @param    keywords        the keywords of the document
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.PdfInfo.AddAuthor(System.String)">
             Adds the name of the author to the document.
            
             @param    author      the name of the author
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.PdfInfo.AddCreator(System.String)">
             Adds the name of the creator to the document.
            
             @param    creator     the name of the creator
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.PdfInfo.AddProducer">
            Adds the name of the producer to the document.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.PdfInfo.AddCreationDate">
            Adds the date of creation to the document.
        </member>
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.pdf.PdfDocument.PdfCatalog" -->
        <member name="M:iTextSharp.text.pdf.PdfDocument.PdfCatalog.#ctor(iTextSharp.text.pdf.PdfIndirectReference,iTextSharp.text.pdf.PdfWriter)">
             Constructs a <CODE>PdfCatalog</CODE>.
            
             @param        pages       an indirect reference to the root of the document's Pages tree.
             @param writer the writer the catalog applies to
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.PdfCatalog.AddNames(System.util.collections.OrderedTree,System.Collections.Hashtable,System.Collections.Hashtable,iTextSharp.text.pdf.PdfWriter)">
            Adds the names of the named destinations to the catalog.
            @param localDestinations the local destinations
            @param documentJavaScript the javascript used in the document
            @param writer the writer the catalog applies to
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDocument.PdfCatalog.AdditionalActions">
            Sets the document level additional actions.
            @param actions   dictionary of actions
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.Indentation.indentLeft">
            This represents the current indentation of the PDF Elements on the left side. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.Indentation.sectionIndentLeft">
            Indentation to the left caused by a section. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.Indentation.listIndentLeft">
            This represents the current indentation of the PDF Elements on the left side. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.Indentation.imageIndentLeft">
            This is the indentation caused by an image on the left. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.Indentation.indentRight">
            This represents the current indentation of the PDF Elements on the right side. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.Indentation.sectionIndentRight">
            Indentation to the right caused by a section. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.Indentation.imageIndentRight">
            This is the indentation caused by an image on the right. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.Indentation.indentTop">
            This represents the current indentation of the PDF Elements on the top side. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.Indentation.indentBottom">
            This represents the current indentation of the PDF Elements on the bottom side. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.RenderingContext.table">
            A PdfPTable
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.RenderingContext.ConsumeRowspan(iTextSharp.text.pdf.PdfCell)">
            Consumes the rowspan
            @param c
            @return a rowspan.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.RenderingContext.CurrentRowspan(iTextSharp.text.pdf.PdfCell)">
            Looks at the current rowspan.
            @param c
            @return the current rowspan
        </member>
        <member name="T:iTextSharp.text.pdf.PdfDashPattern">
             A <CODE>PdfDashPattern</CODE> defines a dash pattern as described in
             the PDF Reference Manual version 1.3 p 325 (section 8.4.3).
            
             @see        PdfArray
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDashPattern.dash">
            This is the length of a dash. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDashPattern.gap">
            This is the length of a gap. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDashPattern.phase">
            This is the phase. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDashPattern.#ctor">
            Constructs a new <CODE>PdfDashPattern</CODE>.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDashPattern.#ctor(System.Single)">
            Constructs a new <CODE>PdfDashPattern</CODE>.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDashPattern.#ctor(System.Single,System.Single)">
            Constructs a new <CODE>PdfDashPattern</CODE>.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDashPattern.#ctor(System.Single,System.Single,System.Single)">
            Constructs a new <CODE>PdfDashPattern</CODE>.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDashPattern.ToPdf(iTextSharp.text.pdf.PdfWriter,System.IO.Stream)">
             Returns the PDF representation of this <CODE>PdfArray</CODE>.
            
             @return        an array of <CODE>byte</CODE>s
        </member>
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.pdf.PdfCell" -->
        <member name="F:iTextSharp.text.pdf.PdfCell.lines">
            These are the PdfLines in the Cell. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfCell.line">
            These are the PdfLines in the Cell. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfCell.images">
            These are the Images in the Cell. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfCell.leading">
            This is the leading of the lines. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfCell.rownumber">
            This is the number of the row the cell is in. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfCell.rowspan">
            This is the rowspan of the cell. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfCell.cellspacing">
            This is the cellspacing of the cell. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfCell.cellpadding">
            This is the cellpadding of the cell. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfCell.header">
            Indicates if this cell belongs to the header of a <CODE>PdfTable</CODE> 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfCell.contentHeight">
            This is the total height of the content of the cell.  Note that the actual cell
            height may be larger due to another cell on the row *
        </member>
        <member name="F:iTextSharp.text.pdf.PdfCell.useAscender">
            Indicates that the largest ascender height should be used to
            determine the height of the first line. Setting this to true can help
            with vertical alignment problems. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfCell.useDescender">
            Indicates that the largest descender height should be added to the height of
            the last line (so characters like y don't dip into the border). 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfCell.useBorderPadding">
            Adjusts the cell contents to compensate for border widths.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCell.#ctor(iTextSharp.text.Cell,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
             Constructs a <CODE>PdfCell</CODE>-object.
            
             @param   cell        the original <CODE>Cell</CODE>
             @param   rownumber   the number of the <CODE>Row</CODE> the <CODE>Cell</CODE> was in.
             @param   left        the left border of the <CODE>PdfCell</CODE>
             @param   right       the right border of the <CODE>PdfCell</CODE>
             @param   top         the top border of the <CODE>PdfCell</CODE>
             @param   cellspacing the cellspacing of the <CODE>Table</CODE>
             @param   cellpadding the cellpadding of the <CODE>Table</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCell.GetBorderWidthInside(System.Int32)">
            Gets the amount of the border for the specified side that is inside the Rectangle.
            For non-variable width borders this is only 1/2 the border width on that side.  This
            always returns 0 if {@link #useBorderPadding} is false;
            @param side the side to check.  One of the side constants in {@link com.lowagie.text.Rectangle}
            @return the borderwidth inside the cell
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCell.AddImage(iTextSharp.text.Image,System.Single,System.Single,System.Single,System.Int32)">
             Adds an image to this Cell.
            
             @param i           the image to add
             @param left        the left border
             @param right       the right border
             @param extraHeight extra height to add above image
             @param alignment   horizontal alignment (constant from Element class)
             @return the height of the image
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfCell.GetLines(System.Single,System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfCell.GetImages(System.Single,System.Single)" -->
        <member name="M:iTextSharp.text.pdf.PdfCell.SetHeader">
             Checks if this cell belongs to the header of a <CODE>PdfTable</CODE>.
            
             @return  <CODE>void</CODE>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfCell.MayBeRemoved" -->
        <member name="M:iTextSharp.text.pdf.PdfCell.RemainingLinesHeight">
             Returns the total height of all the lines in the cell.
            
             @return  a value
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCell.ProcessActions(iTextSharp.text.IElement,iTextSharp.text.pdf.PdfAction,System.Collections.ArrayList)">
            Processes all actions contained in the cell.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfCell.groupNumber">
            This is the number of the group the cell is in.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCell.Rectangle(System.Single,System.Single)">
             Gets a Rectangle that is altered to fit on the page.
            
             @param    top     the top position
             @param    bottom  the bottom position
             @return   a <CODE>Rectangle</CODE>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCell.Left">
             Returns the lower left x-coordinaat.
            
             @return      the lower left x-coordinaat
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCell.Right">
             Returns the upper right x-coordinate.
            
             @return      the upper right x-coordinate
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCell.Top">
             Returns the upper right y-coordinate.
            
             @return      the upper right y-coordinate
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCell.Bottom">
             Returns the lower left y-coordinate.
            
             @return      the lower left y-coordinate
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCell.FirstLineRealHeight">
            Calculates what the height of the first line should be so that the content will be
            flush with the top.  For text, this is the height of the ascender.  For an image,
            it is the actual height of the image.
            @return the real height of the first line
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCell.Header">
            Indicates that this cell belongs to the header of a <CODE>PdfTable</CODE>.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCell.Size">
             Returns the number of lines in the cell.
            
             @return  a value
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCell.RemainingHeight">
             Returns the height needed to draw the remaining text.
            
             @return  a height
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCell.Leading">
             Gets the leading of a cell.
            
             @return  the leading of the lines is the cell.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCell.Rownumber">
             Gets the number of the row this cell is in..
            
             @return  a number
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCell.Rowspan">
             Gets the rowspan of a cell.
            
             @return  the rowspan of the cell
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCell.Cellspacing">
             Gets the cellspacing of a cell.
            
             @return  a value
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCell.Cellpadding">
             Gets the cellpadding of a cell..
            
             @return  a value
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCell.GroupNumber">
             Gets the number of the group this cell is in..
            
             @return   a number
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCell.UseAscender">
            Gets the value of {@link #useAscender}
            @return useAscender
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCell.UseDescender">
            Gets the value of {@link #useDescender}
            @return useDescender
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCell.UseBorderPadding">
            Sets the value of {@link #useBorderPadding}.
            @param use adjust layour for borders if true
        </member>
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.pdf.PdfBoolean" -->
        <member name="F:iTextSharp.text.pdf.PdfBoolean.TRUE">
            A possible value of <CODE>PdfBoolean</CODE> 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfBoolean.FALSE">
            A possible value of <CODE>PdfBoolean</CODE> 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfBoolean.value">
            the bool value of this object 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfBoolean.#ctor(System.Boolean)">
             Constructs a <CODE>PdfBoolean</CODE>-object.
            
             @param        value            the value of the new <CODE>PdfObject</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfBoolean.#ctor(System.String)">
             Constructs a <CODE>PdfBoolean</CODE>-object.
            
             @param        value            the value of the new <CODE>PdfObject</CODE>, represented as a <CODE>string</CODE>
            
             @throws        BadPdfFormatException    thrown if the <VAR>value</VAR> isn't '<CODE>true</CODE>' or '<CODE>false</CODE>'
        </member>
        <member name="P:iTextSharp.text.pdf.PdfBoolean.BooleanValue">
             Returns the primitive value of the <CODE>PdfBoolean</CODE>-object.
            
             @return        the actual value of the object.
        </member>
        <member name="T:iTextSharp.text.pdf.PdfAcroForm">
            Each PDF document can contain maximum 1 AcroForm.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAcroForm.fieldTemplates">
            This is a map containing FieldTemplates. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAcroForm.documentFields">
            This is an array containing DocumentFields. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAcroForm.calculationOrder">
            This is an array containing the calculationorder of the fields. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAcroForm.sigFlags">
            Contains the signature flags. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAcroForm.#ctor(iTextSharp.text.pdf.PdfWriter)">
            Creates new PdfAcroForm 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAcroForm.AddFieldTemplates(System.Collections.Hashtable)">
            Adds fieldTemplates.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAcroForm.AddDocumentField(iTextSharp.text.pdf.PdfIndirectReference)">
            Adds documentFields.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAcroForm.IsValid">
            Closes the AcroForm.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAcroForm.AddCalculationOrder(iTextSharp.text.pdf.PdfFormField)">
            Adds an object to the calculationOrder.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAcroForm.AddFormField(iTextSharp.text.pdf.PdfFormField)">
            Adds a formfield to the AcroForm.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAcroForm.SetSignatureParams(iTextSharp.text.pdf.PdfFormField,System.String,System.Single,System.Single,System.Single,System.Single)">
            @param field
            @param name
            @param llx
            @param lly
            @param urx
            @param ury
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAcroForm.DrawSignatureAppearences(iTextSharp.text.pdf.PdfFormField,System.Single,System.Single,System.Single,System.Single)">
            @param field
            @param llx
            @param lly
            @param urx
            @param ury
        </member>
        <member name="P:iTextSharp.text.pdf.PdfAcroForm.SigFlags">
            Sets the signature flags.
        </member>
        <member name="T:iTextSharp.text.pdf.PatternColor">
            Represents a pattern. Can be used in high-level constructs (Paragraph, Cell, etc.).
        </member>
        <member name="F:iTextSharp.text.pdf.PatternColor.painter">
            The actual pattern.
        </member>
        <member name="M:iTextSharp.text.pdf.PatternColor.#ctor(iTextSharp.text.pdf.PdfPatternPainter)">
            Creates a color representing a pattern.
            @param painter the actual pattern
        </member>
        <member name="P:iTextSharp.text.pdf.PatternColor.Painter">
            Gets the pattern.
            @return the pattern
        </member>
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.pdf.hyphenation.IPatternConsumer" -->
        <member name="M:iTextSharp.text.pdf.hyphenation.IPatternConsumer.AddClass(System.String)">
            Add a character class.
            A character class defines characters that are considered
            equivalent for the purpose of hyphenation (e.g. "aA"). It
            usually means to ignore case.
            @param chargroup character group
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.IPatternConsumer.AddException(System.String,System.Collections.ArrayList)">
            Add a hyphenation exception. An exception replaces the
            result obtained by the algorithm for cases for which this
            fails or the user wants to provide his own hyphenation.
            A hyphenatedword is a vector of alternating String's and
            {@link Hyphen Hyphen} instances
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.IPatternConsumer.AddPattern(System.String,System.String)">
            Add hyphenation patterns.
            @param pattern the pattern
            @param values interletter values expressed as a string of
            digit characters.
        </member>
        <member name="T:iTextSharp.text.pdf.FdfReader">
            Reads an FDF form and makes the fields available
            @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="M:iTextSharp.text.pdf.FdfReader.#ctor(System.String)">
            Reads an FDF form.
            @param filename the file name of the form
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.FdfReader.#ctor(System.Byte[])">
            Reads an FDF form.
            @param pdfIn the byte array with the form
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.FdfReader.#ctor(System.Uri)">
            Reads an FDF form.
            @param url the URL of the document
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.FdfReader.#ctor(System.IO.Stream)">
            Reads an FDF form.
            @param is the <CODE>InputStream</CODE> containing the document. The stream is read to the
            end but is not closed
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.FdfReader.GetField(System.String)">
            Gets the field dictionary.
            @param name the fully qualified field name
            @return the field dictionary
        </member>
        <member name="M:iTextSharp.text.pdf.FdfReader.GetFieldValue(System.String)">
            Gets the field value or <CODE>null</CODE> if the field does not
            exist or has no value defined.
            @param name the fully qualified field name
            @return the field value or <CODE>null</CODE>
        </member>
        <member name="P:iTextSharp.text.pdf.FdfReader.Fields">
            Gets all the fields. The map is keyed by the fully qualified
            field name and the value is a merged <CODE>PdfDictionary</CODE>
            with the field content.
            @return all the fields
        </member>
        <member name="P:iTextSharp.text.pdf.FdfReader.FileSpec">
            Gets the PDF file specification contained in the FDF.
            @return the PDF file specification contained in the FDF
        </member>
        <member name="T:iTextSharp.text.pdf.collection.PdfCollectionField">
             @author blowagie
            
        </member>
        <member name="F:iTextSharp.text.pdf.collection.PdfCollectionField.TEXT">
            A possible type of collection field. 
        </member>
        <member name="F:iTextSharp.text.pdf.collection.PdfCollectionField.DATE">
            A possible type of collection field. 
        </member>
        <member name="F:iTextSharp.text.pdf.collection.PdfCollectionField.NUMBER">
            A possible type of collection field. 
        </member>
        <member name="F:iTextSharp.text.pdf.collection.PdfCollectionField.FILENAME">
            A possible type of collection field. 
        </member>
        <member name="F:iTextSharp.text.pdf.collection.PdfCollectionField.DESC">
            A possible type of collection field. 
        </member>
        <member name="F:iTextSharp.text.pdf.collection.PdfCollectionField.MODDATE">
            A possible type of collection field. 
        </member>
        <member name="F:iTextSharp.text.pdf.collection.PdfCollectionField.CREATIONDATE">
            A possible type of collection field. 
        </member>
        <member name="F:iTextSharp.text.pdf.collection.PdfCollectionField.SIZE">
            A possible type of collection field. 
        </member>
        <member name="F:iTextSharp.text.pdf.collection.PdfCollectionField.fieldType">
            The type of the PDF collection field. 
        </member>
        <member name="M:iTextSharp.text.pdf.collection.PdfCollectionField.#ctor(System.String,System.Int32)">
            Creates a PdfCollectionField.
            @param name      the field name
            @param type      the field type
        </member>
        <member name="M:iTextSharp.text.pdf.collection.PdfCollectionField.IsCollectionItem">
            Checks if the type of the field is suitable for a Collection Item.
        </member>
        <member name="M:iTextSharp.text.pdf.collection.PdfCollectionField.GetValue(System.String)">
            Returns a PdfObject that can be used as the value of a Collection Item.
            @param String    value   the value that has to be changed into a PdfObject (PdfString, PdfDate or PdfNumber) 
        </member>
        <member name="P:iTextSharp.text.pdf.collection.PdfCollectionField.Order">
            The relative order of the field name. Fields are sorted in ascending order.
            @param i a number indicating the order of the field
        </member>
        <member name="P:iTextSharp.text.pdf.collection.PdfCollectionField.Visible">
            Sets the initial visibility of the field.
            @param visible   the default is true (visible)
        </member>
        <member name="P:iTextSharp.text.pdf.collection.PdfCollectionField.Editable">
            Indication if the field value should be editable in the viewer.
            @param editable  the default is false (not editable)
        </member>
        <member name="F:iTextSharp.text.pdf.collection.PdfCollection.DETAILS">
            A type of PDF Collection 
        </member>
        <member name="F:iTextSharp.text.pdf.collection.PdfCollection.TILE">
            A type of PDF Collection 
        </member>
        <member name="F:iTextSharp.text.pdf.collection.PdfCollection.HIDDEN">
            A type of PDF Collection 
        </member>
        <member name="M:iTextSharp.text.pdf.collection.PdfCollection.#ctor(System.Int32)">
            Constructs a PDF Collection.
            @param   type    the type of PDF collection.
        </member>
        <member name="P:iTextSharp.text.pdf.collection.PdfCollection.InitialDocument">
            Identifies the document that will be initially presented
            in the user interface.
            @param description   the description that was used when attaching the file to the document
        </member>
        <member name="P:iTextSharp.text.pdf.collection.PdfCollection.Schema">
            Sets the Collection schema dictionary.
            @param schema    an overview of the collection fields
        </member>
        <member name="P:iTextSharp.text.pdf.collection.PdfCollection.Sort">
            Sets the Collection sort dictionary.
            @param sort  a collection sort dictionary
        </member>
        <member name="M:iTextSharp.text.pdf.codec.wmf.MetaState.#ctor">
            Creates new MetaState 
        </member>
        <member name="P:iTextSharp.text.pdf.codec.wmf.MetaState.CurrentBackgroundColor">
            Getter for property currentBackgroundColor.
            @return Value of property currentBackgroundColor.
        </member>
        <member name="P:iTextSharp.text.pdf.codec.wmf.MetaState.CurrentTextColor">
            Getter for property currentTextColor.
            @return Value of property currentTextColor.
        </member>
        <member name="P:iTextSharp.text.pdf.codec.wmf.MetaState.BackgroundMode">
            Getter for property backgroundMode.
            @return Value of property backgroundMode.
        </member>
        <member name="P:iTextSharp.text.pdf.codec.wmf.MetaState.TextAlign">
            Getter for property textAlign.
            @return Value of property textAlign.
        </member>
        <member name="P:iTextSharp.text.pdf.codec.wmf.MetaState.PolyFillMode">
            Getter for property polyFillMode.
            @return Value of property polyFillMode.
        </member>
        <member name="T:iTextSharp.text.FontFactory">
            <summary>
            If you are using True Type fonts, you can declare the paths of the different ttf- and ttc-files
            to this static class first and then create fonts in your code using one of the static getFont-method
            without having to enter a path as parameter.
            </summary>
        </member>
        <member name="F:iTextSharp.text.FontFactory.COURIER">
            <summary> This is a possible value of a base 14 type 1 font </summary>
        </member>
        <member name="F:iTextSharp.text.FontFactory.COURIER_BOLD">
            <summary> This is a possible value of a base 14 type 1 font </summary>
        </member>
        <member name="F:iTextSharp.text.FontFactory.COURIER_OBLIQUE">
            <summary> This is a possible value of a base 14 type 1 font </summary>
        </member>
        <member name="F:iTextSharp.text.FontFactory.COURIER_BOLDOBLIQUE">
            <summary> This is a possible value of a base 14 type 1 font </summary>
        </member>
        <member name="F:iTextSharp.text.FontFactory.HELVETICA">
            <summary> This is a possible value of a base 14 type 1 font </summary>
        </member>
        <member name="F:iTextSharp.text.FontFactory.HELVETICA_BOLD">
            <summary> This is a possible value of a base 14 type 1 font </summary>
        </member>
        <member name="F:iTextSharp.text.FontFactory.HELVETICA_OBLIQUE">
            <summary> This is a possible value of a base 14 type 1 font </summary>
        </member>
        <member name="F:iTextSharp.text.FontFactory.HELVETICA_BOLDOBLIQUE">
            <summary> This is a possible value of a base 14 type 1 font </summary>
        </member>
        <member name="F:iTextSharp.text.FontFactory.SYMBOL">
            <summary> This is a possible value of a base 14 type 1 font </summary>
        </member>
        <member name="F:iTextSharp.text.FontFactory.TIMES">
            <summary> This is a possible value of a base 14 type 1 font </summary>
        </member>
        <member name="F:iTextSharp.text.FontFactory.TIMES_ROMAN">
            <summary> This is a possible value of a base 14 type 1 font </summary>
        </member>
        <member name="F:iTextSharp.text.FontFactory.TIMES_BOLD">
            <summary> This is a possible value of a base 14 type 1 font </summary>
        </member>
        <member name="F:iTextSharp.text.FontFactory.TIMES_ITALIC">
            <summary> This is a possible value of a base 14 type 1 font </summary>
        </member>
        <member name="F:iTextSharp.text.FontFactory.TIMES_BOLDITALIC">
            <summary> This is a possible value of a base 14 type 1 font </summary>
        </member>
        <member name="F:iTextSharp.text.FontFactory.ZAPFDINGBATS">
            <summary> This is a possible value of a base 14 type 1 font </summary>
        </member>
        <member name="F:iTextSharp.text.FontFactory.defaultEncoding">
            <summary> This is the default encoding to use. </summary>
        </member>
        <member name="F:iTextSharp.text.FontFactory.defaultEmbedding">
            <summary> This is the default value of the <VAR>embedded</VAR> variable. </summary>
        </member>
        <member name="M:iTextSharp.text.FontFactory.#ctor">
            <summary> Creates new FontFactory </summary>
        </member>
        <member name="M:iTextSharp.text.FontFactory.GetFont(System.String,System.String,System.Boolean,System.Single,System.Int32,iTextSharp.text.Color)">
            <summary>
            Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="encoding">the encoding of the font</param>
            <param name="embedded">true if the font is to be embedded in the PDF</param>
            <param name="size">the size of this font</param>
            <param name="style">the style of this font</param>
            <param name="color">the Color of this font</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactory.GetFont(System.String,System.String,System.Boolean,System.Single,System.Int32,iTextSharp.text.Color,System.Boolean)">
            <summary>
            Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="encoding">the encoding of the font</param>
            <param name="embedded">true if the font is to be embedded in the PDF</param>
            <param name="size">the size of this font</param>
            <param name="style">the style of this font</param>
            <param name="color">the Color of this font</param>
            <param name="cached">true if the font comes from the cache or is added to the cache if new, false if the font is always created new</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactory.GetFont(System.util.Properties)">
            <summary>
            Constructs a Font-object.
            </summary>
            <param name="attributes">the attributes of a Font object</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactory.GetFont(System.String,System.String,System.Boolean,System.Single,System.Int32)">
            <summary>
            Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="encoding">the encoding of the font</param>
            <param name="embedded">true if the font is to be embedded in the PDF</param>
            <param name="size">the size of this font</param>
            <param name="style">the style of this font</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactory.GetFont(System.String,System.String,System.Boolean,System.Single)">
            <summary>
            Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="encoding">the encoding of the font</param>
            <param name="embedded">true if the font is to be embedded in the PDF</param>
            <param name="size">the size of this font</param>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.FontFactory.GetFont(System.String,System.String,System.Boolean)">
            <summary>
            Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="encoding">the encoding of the font</param>
            <param name="embedded">true if the font is to be embedded in the PDF</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactory.GetFont(System.String,System.String,System.Single,System.Int32,iTextSharp.text.Color)">
            <summary>
            Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="encoding">the encoding of the font</param>
            <param name="size">the size of this font</param>
            <param name="style">the style of this font</param>
            <param name="color">the Color of this font</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactory.GetFont(System.String,System.String,System.Single,System.Int32)">
            <summary>
            Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="encoding">the encoding of the font</param>
            <param name="size">the size of this font</param>
            <param name="style">the style of this font</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactory.GetFont(System.String,System.String,System.Single)">
            <summary>
            Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="encoding">the encoding of the font</param>
            <param name="size">the size of this font</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactory.GetFont(System.String,System.String)">
            <summary>
            Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="encoding">the encoding of the font</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactory.GetFont(System.String,System.Single,System.Int32,iTextSharp.text.Color)">
            <summary>
            Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="size">the size of this font</param>
            <param name="style">the style of this font</param>
            <param name="color">the Color of this font</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactory.GetFont(System.String,System.Single,iTextSharp.text.Color)">
            <summary>
            Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="size">the size of this font</param>
            <param name="color">the Color of this font</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactory.GetFont(System.String,System.Single,System.Int32)">
            <summary>
            Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="size">the size of this font</param>
            <param name="style">the style of this font</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactory.GetFont(System.String,System.Single)">
            <summary>
            Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="size">the size of this font</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactory.GetFont(System.String)">
            <summary>
            Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactory.RegisterFamily(System.String,System.String,System.String)">
            Register a font by giving explicitly the font family and name.
            @param familyName the font family
            @param fullName the font name
            @param path the font path
        </member>
        <member name="M:iTextSharp.text.FontFactory.Register(System.String)">
            <summary>
            Register a ttf- or a ttc-file.
            </summary>
            <param name="path">the path to a ttf- or ttc-file</param>
        </member>
        <member name="M:iTextSharp.text.FontFactory.Register(System.String,System.String)">
            <summary>
            Register a ttf- or a ttc-file and use an alias for the font contained in the ttf-file.
            </summary>
            <param name="path">the path to a ttf- or ttc-file</param>
            <param name="alias">the alias you want to use for the font</param>
        </member>
        <member name="M:iTextSharp.text.FontFactory.RegisterDirectory(System.String)">
            Register all the fonts in a directory.
            @param dir the directory
            @return the number of fonts registered
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.FontFactory.RegisterDirectory(System.String,System.Boolean)" -->
        <member name="M:iTextSharp.text.FontFactory.RegisterDirectories">
            Register fonts in some probable directories. It usually works in Windows,
            Linux and Solaris.
            @return the number of fonts registered
        </member>
        <member name="M:iTextSharp.text.FontFactory.Contains(System.String)">
            <summary>
            Checks whether the given font is contained within the object
            </summary>
            <param name="fontname">the name of the font</param>
            <returns>true if font is contained within the object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactory.IsRegistered(System.String)">
            <summary>
            Checks if a certain font is registered.
            </summary>
            <param name="fontname">the name of the font that has to be checked</param>
            <returns>true if the font is found</returns>
        </member>
        <member name="P:iTextSharp.text.FontFactory.RegisteredFonts">
            <summary>
            Gets a set of registered fontnames.
            </summary>
            <value>a set of registered fontnames</value>
        </member>
        <member name="P:iTextSharp.text.FontFactory.RegisteredFamilies">
            <summary>
            Gets a set of registered font families.
            </summary>
            <value>a set of registered font families</value>
        </member>
        <member name="T:iTextSharp.text.xml.simpleparser.EntitiesToSymbol">
            This class contains entities that can be used in an entity tag.
        </member>
        <member name="F:iTextSharp.text.xml.simpleparser.EntitiesToSymbol.map">
            This is a map that contains all possible id values of the entity tag
            that can be translated to a character in font Symbol.
        </member>
        <member name="M:iTextSharp.text.xml.simpleparser.EntitiesToSymbol.Get(System.String,iTextSharp.text.Font)">
            Gets a chunk with a symbol character.
            @param e a symbol value (see Entities class: alfa is greek alfa,...)
            @param font the font if the symbol isn't found (otherwise Font.SYMBOL)
            @return a Chunk
        </member>
        <member name="M:iTextSharp.text.xml.simpleparser.EntitiesToSymbol.GetCorrespondingSymbol(System.String)">
             Looks for the corresponding symbol in the font Symbol.
            
             @param    name    the name of the entity
             @return   the corresponding character in font Symbol
        </member>
        <member name="T:iTextSharp.text.rtf.RtfMapper">
            The RtfMapper provides mappings between com.lowagie.text.* classes
            and the corresponding com.lowagie.text.rtf.** classes.
            
            @version $Version:$
            @author Mark Hall (Mark.Hall@mail.room3b.eu)
        </member>
        <member name="F:iTextSharp.text.rtf.RtfMapper.rtfDoc">
            The RtfDocument this RtfMapper belongs to
        </member>
        <member name="M:iTextSharp.text.rtf.RtfMapper.#ctor(iTextSharp.text.rtf.document.RtfDocument)">
            Constructs a RtfMapper for a RtfDocument
            
            @param doc The RtfDocument this RtfMapper belongs to
        </member>
        <member name="M:iTextSharp.text.rtf.RtfMapper.MapElement(iTextSharp.text.IElement)">
            Takes an Element subclass and returns an array of RtfBasicElement
            subclasses, that contained the mapped RTF equivalent to the Element
            passed in.
            
            @param element The Element to wrap
            @return An array of RtfBasicElement wrapping the Element
            @throws DocumentException
        </member>
        <member name="T:iTextSharp.text.rtf.field.RtfAnchor">
            
            @version $Version:$
            @author Mark Hall (Mark.Hall@mail.room3b.eu)
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfAnchor.HYPERLINK">
            Constant for a hyperlink
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfAnchor.url">
            The url of this RtfAnchor
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfAnchor.content">
            The RtfPhrase to display for the url
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfAnchor.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.Anchor)">
            Constructs a RtfAnchor based on a RtfField
            
            @param doc The RtfDocument this RtfAnchor belongs to
            @param anchor The Anchor this RtfAnchor is based on
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfAnchor.WriteFieldInstContent(System.IO.Stream)">
            Write the field instructions for this RtfAnchor. Sets the field
            type to HYPERLINK and then writes the url.
            
            @return The field instructions for this RtfAnchor
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfAnchor.WriteFieldResultContent(System.IO.Stream)">
            Write the field result for this RtfAnchor. Writes the content
            of the RtfPhrase.
        </member>
        <member name="T:iTextSharp.text.rtf.document.RtfProtectionSetting">
            The RtfProtectionSetting handles document protection elements 
            
            @version $Id: RtfProtectionSetting.cs,v 1.2 2008/05/13 11:25:50 psoares33 Exp $
            @author Howard Shank (hgshank@yahoo.com)
            @since 2.1.1 
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfProtectionSetting.FORMPROT">
            Constant for Form protection controlword
            Mutually exclusive
            @see com.lowagie.text.rtf.document.RtfProtectionSetting#REVPROT(com.lowagie.text.rtf.document.RtfProtectionSetting)
            @see com.lowagie.text.rtf.document.RtfProtectionSetting#ANNOTPROT(com.lowagie.text.rtf.document.RtfProtectionSetting)
            @see com.lowagie.text.rtf.document.RtfProtectionSetting#READPROT(com.lowagie.text.rtf.document.RtfProtectionSetting)
            @since 2.1.1
            @author Howard Shank (hgshank@yahoo.com) 
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfProtectionSetting.REVPROT">
            Constant for Revision protection controlword
            Mutually exclusive
            @see com.lowagie.text.rtf.document.RtfProtectionSetting#FORMPROT(com.lowagie.text.rtf.document.RtfProtectionSetting)
            @see com.lowagie.text.rtf.document.RtfProtectionSetting#ANNOTPROT(com.lowagie.text.rtf.document.RtfProtectionSetting)
            @see com.lowagie.text.rtf.document.RtfProtectionSetting#READPROT(com.lowagie.text.rtf.document.RtfProtectionSetting)
            @since 2.1.1
            @author Howard Shank (hgshank@yahoo.com) 
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfProtectionSetting.ANNOTPROT">
            Constant for Annotation/Comment protection controlword
            Mutually exclusive
            @see com.lowagie.text.rtf.document.RtfProtectionSetting#FORMPROT(com.lowagie.text.rtf.document.RtfProtectionSetting)
            @see com.lowagie.text.rtf.document.RtfProtectionSetting#REVPROT(com.lowagie.text.rtf.document.RtfProtectionSetting)
            @see com.lowagie.text.rtf.document.RtfProtectionSetting#READPROT(com.lowagie.text.rtf.document.RtfProtectionSetting)
            @since 2.1.1
            @author Howard Shank (hgshank@yahoo.com) 
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfProtectionSetting.READPROT">
            Constant for read only rotection controlword
            Mutually exclusive - exception, can be combined with ANNOTPROT
            for backwards compatibility
            @see com.lowagie.text.rtf.document.RtfProtectionSetting#FORMPROT(com.lowagie.text.rtf.document.RtfProtectionSetting)
            @see com.lowagie.text.rtf.document.RtfProtectionSetting#REVPROT(com.lowagie.text.rtf.document.RtfProtectionSetting)
            @see com.lowagie.text.rtf.document.RtfProtectionSetting#ANNOTPROT(com.lowagie.text.rtf.document.RtfProtectionSetting)
            @since 2.1.1
            @author Howard Shank (hgshank@yahoo.com) 
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfProtectionSetting.PROTLEVEL">
            Constant for protlevel controlword
            @since 2.1.1
            @author Howard Shank (hgshank@yahoo.com) 
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfProtectionSetting.ENFORCEPROT">
            Constant for enforceprot controlword
            @since 2.1.1
            @author Howard Shank (hgshank@yahoo.com) 
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfProtectionSetting.READONLYRECOMMENDED">
            Constant for enforceprot controlword.
            Implemented in Microsoft Word 2007.
            
            @since 2.1.1
            @author Howard Shank (hgshank@yahoo.com) 
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfProtectionSetting.#ctor(iTextSharp.text.rtf.document.RtfDocument)">
            Constructs a <code>RtfProtectionSetting</code> belonging to a RtfDocument
            
            @param doc The <code>RtfDocument</code> this <code>RtfProtectionSetting</code> belongs to
            @since 2.1.1
            @author Howard Shank (hgshank@yahoo.com) 
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfProtectionSetting.WriteContent(System.IO.Stream)">
            Writes the RTF protection control words
            @since 2.1.1
            @author Howard Shank (hgshank@yahoo.com) 
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfProtectionSetting.WriteDefinition(System.IO.Stream)">
            Writes the RTF protection control words
            @since 2.1.1
            @author Howard Shank (hgshank@yahoo.com) 
        </member>
        <member name="T:iTextSharp.text.rtf.document.RtfDocumentSettings">
            The RtfDocumentSettings contains output specific settings. These settings modify
            how the actual document is then generated and some settings may mean that some
            RTF readers can't read the document or render it wrongly.
            
            @version $Id: RtfDocumentSettings.cs,v 1.10 2008/05/16 19:30:51 psoares33 Exp $
            @author Mark Hall (Mark.Hall@mail.room3b.eu)
            @author Thomas Bickel (tmb99@inode.at)
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentSettings.document">
            The RtfDocument this RtfDocumentSettings belongs to.
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentSettings.outputTableRowDefinitionAfter">
            Whether to also output the table row definition after the cell content.
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentSettings.outputDebugLineBreaks">
            Whether to output the line breaks that make the rtf document source more readable.
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentSettings.alwaysGenerateSoftLinebreaks">
            Whether to always generate soft linebreaks for \n in Chunks.
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentSettings.alwaysUseUnicode">
            Whether to always translate characters past 'z' into unicode representations.
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentSettings.dataCacheStyle">
            How to cache the document during generation. Defaults to RtfDataCache.CACHE_MEMORY;
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentSettings.writeImageScalingInformation">
            Whether to write image scaling information. This is required for Word 2000, 97 and Word for Mac
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentSettings.imagePDFConformance">
            Whether images should be written in order to mimick the PDF output. 
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentSettings.protectionLevel">
            Document protection level
            @since 2.1.1
            @author Howard Shank (hgshank@yahoo.com)
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentSettings.protectionHash">
            Document protection level password hash.
            @since 2.1.1
            @author Howard Shank (hgshank@yahoo.com)
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentSettings.readOnlyRecommended">
            Document recommended to be opened in read only mode.
            @since 2.1.1
            @author Howard Shank (hgshank@yahoo.com)
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentSettings.imageWrittenAsBinary">
            Images are written as binary data and not hex encoded.
            @since 2.1.1
            @author Mark Hall (Mark.Hall@mail.room3b.eu)
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.#ctor(iTextSharp.text.rtf.document.RtfDocument)">
            Constructs a new RtfDocumentSettings object.
            
            @param document The RtfDocument this RtfDocumentSettings belong to.
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.IsOutputDebugLineBreaks">
            Gets whether to output the line breaks for increased rtf document readability.
            
            @return Whether to output line breaks.
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.SetOutputDebugLineBreaks(System.Boolean)">
            Sets whether to output the line breaks for increased rtf document readability.
            Some line breaks may be added where the rtf specification demands it.
            
            @param outputDebugLineBreaks The outputDebugLineBreaks to set.
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.IsOutputTableRowDefinitionAfter">
            Gets whether the table row definition should also be written after the cell content.
            
            @return Returns the outputTableRowDefinitionAfter.
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.SetOutputTableRowDefinitionAfter(System.Boolean)">
            Sets whether the table row definition should also be written after the cell content.
            This is recommended to be set to <code>true</code> if you need Word2000 compatiblity and
            <code>false</code> if the document should be opened in OpenOffice.org Writer.
            
            @param outputTableRowDefinitionAfter The outputTableRowDefinitionAfter to set.
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.IsAlwaysGenerateSoftLinebreaks">
            Gets whether all linebreaks inside Chunks are generated as soft linebreaks.
            
            @return <code>True</code> if soft linebreaks are generated, <code>false</code> for hard linebreaks.
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.SetAlwaysGenerateSoftLinebreaks(System.Boolean)">
            Sets whether to always generate soft linebreaks.
            
            @param alwaysGenerateSoftLinebreaks Whether to always generate soft linebreaks.
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.IsAlwaysUseUnicode">
            Gets whether all characters bigger than 'z' are represented as unicode.
            
            @return <code>True</code> if unicode representation is used, <code>false</code> otherwise.
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.SetAlwaysUseUnicode(System.Boolean)">
            Sets whether to represent all characters bigger than 'z' as unicode.
            
            @param alwaysUseUnicode <code>True</code> to use unicode representation, <code>false</code> otherwise.
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.RegisterParagraphStyle(iTextSharp.text.rtf.style.RtfParagraphStyle)">
            Registers the RtfParagraphStyle for further use in the document. This does not need to be
            done for the default styles in the RtfParagraphStyle object. Those are added automatically.
            
            @param rtfParagraphStyle The RtfParagraphStyle to register.
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.SetDataCacheStyle(System.Int32)">
            Sets the data cache style. This controls where the document is cached during
            generation. Two cache styles are supported:
            <ul>
              <li>RtfDataCache.CACHE_MEMORY: The document is cached in memory. This is fast,
                but places a limit on how big the document can get before causing
                OutOfMemoryExceptions.</li>
              <li>RtfDataCache.CACHE_DISK: The document is cached on disk. This is slower
                than the CACHE_MEMORY setting, but the document size is now only constrained
                by the amount of free disk space.</li>
            </ul>
            
            @param dataCacheStyle The data cache style to set. Valid constants can be found
             in RtfDataCache.
            @see com.lowagie.text.rtf.document.output.output.RtfDataCache.
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.GetDataCacheStyle">
            Gets the current data cache style.
            
            @return The current data cache style.
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.IsImagePDFConformance">
            Gets the current setting on image PDF conformance.
            
            @return The current image PDF conformance.
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.SetImagePDFConformance(System.Boolean)">
            Sets the image PDF conformance setting. By default images will be added
            as if they were displayed with 72dpi. Set this to <code>false</code>
            if images should be generated with the Word default DPI setting.
            
            @param imagePDFConformance <code>True</code> if PDF equivalence is desired, <code>false</code>
              for the default Word display.
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.IsWriteImageScalingInformation">
            Gets whether to write scaling information for images.
            
            @return Whether to write scaling information for images.
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.SetWriteImageScalingInformation(System.Boolean)">
            Sets whether image scaling information should be written. This needs to be set to <code>true</code>
            MS Word 2000, MS Word 97 and Word for Mac.
            
            @param writeImageScalingInformation Whether to write image scaling information.
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.SetOptionsForMSWord2000And97">
            Set the options required for RTF documents to display correctly in MS Word 2000
            and MS Word 97.
            Sets <code>outputTableRowDefinitionAfter = true</code> and <code>writeImageScalingInformation = true</code>.
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.SetOptionsForMSWordForMac">
            Set the options required for RTF documents to display correctly in MS Word for Mac.
            Sets <code>writeImageScalingInformation = true</code>.
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.SetOptionsForMSWordXP">
            Set the options required for RTF documents to display correctly in MS Word XP (2002).
            Sets <code>writeImageScalingInformation = false</code>.
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.SetOptionsForOpenOfficeOrg">
            Set the options required for RTF documents to display correctly in OpenOffice.Org
            Writer.
            Sets <code>outputTableRowDefinitionAfter = false</code>.
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.SetProtection(System.Int32,System.String)">
            @param level Document protecton level
            @param pwd Document password - clear text
            @since 2.1.1
            @author Howard Shank (hgshank@yahoo.com)
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.UnprotectDocument(System.String)">
            @param pwd Document password - clear text
            @return true if document unprotected, false if protection is not removed.
            @since 2.1.1
            @author Howard Shank (hgshank@yahoo.com)
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.SetProtectionLevel(System.Int32)">
            @param level Document protection level
            @since 2.1.1
            @author Howard Shank (hgshank@yahoo.com)
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.SetPasswordHash(System.String)">
            This function is not intended for general use. Please see 'public bool SetProtection(int level, String pwd)'
            @param pwd Password HASH to set the document password hash to.
            @since 2.1.1
            @author Howard Shank (hgshank@yahoo.com)
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.ConvertProtectionLevel">
            Converts protection level from internal bitmap value to protlevel output value
            @return <pre>
            0 = Revision protection
            1 = Annotation/Comment protection
            2 = Form protection
            3 = Read only protection
            </pre>
            @since 2.1.1
            @author Howard Shank (hgshank@yahoo.com)
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.GetProtectionLevelRaw">
            @return RTF document protection level
            @since 2.1.1
            @author Howard Shank (hgshank@yahoo.com)
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.GetProtectionLevel">
            @return RTF document protection level
            @since 2.1.1
            @author Howard Shank (hgshank@yahoo.com)
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.GetProtectionLevelBytes">
            @return RTF document protection level as a byte array (byte[])
            @since 2.1.1
            @author Howard Shank (hgshank@yahoo.com)
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.SetNewPassword(System.String,System.String)">
            @param oldPwd Old password - clear text
            @param newPwd New password - clear text
            @return true if password set, false if password not set
            @since 2.1.1
            @author Howard Shank (hgshank@yahoo.com)
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.SetReadOnlyRecommended(System.Boolean)">
            Set the RTF flag that recommends the document be opened in read only mode.
            @param value true if the flag is to be set, false if it is NOT to be set
            @since 2.1.1
            @author Howard Shank (hgshank@yahoo.com)
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.GetReadOnlyRecommended">
            Get the RTF flag that recommends if the the document should be opened in read only mode.
            @return true if flag is set, false if it is not set
            @since 2.1.1
            @author Howard Shank (hgshank@yahoo.com)
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.IsDocumentProtected">
            Determine if document has protection enabled.
            @return true if protection is enabled, false if it is not enabled
            @since 2.1.1
            @author Howard Shank (hgshank@yahoo.com)
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.GetProtectionHashBytes">
            Obtain the password has as a byte array.
            @return The bytes of the password hash as a byte array (byte[])
            @since 2.1.1
            @author Howard Shank (hgshank@yahoo.com)
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.SetImageWrittenAsBinary(System.Boolean)">
            Set whether images are written as binary data or are hex encoded.
            
            @param imageWrittenAsBinary <code>True</code> to write images as binary data, <code>false</code> for hex encoding.
            @since 2.1.1
            @author Mark Hall (Mark.Hall@mail.room3b.eu)
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.IsImageWrittenAsBinary">
            Gets whether images are written as binary data or are hex encoded. Defaults to <code>true</code>.
            
            @since 2.1.1
            @return <code>True</code> if images are written as binary data, <code>false</code> if hex encoded.
            @author Mark Hall (Mark.Hall@mail.room3b.eu)
        </member>
        <member name="T:iTextSharp.text.pdf.TrueTypeFontSubSet">
            Subsets a True Type font by removing the unneeded glyphs from
             the font.
            
             @author  Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFontSubSet.tableDirectory">
            Contains the location of the several tables. The key is the name of
            the table and the value is an <CODE>int[3]</CODE> where position 0
            is the checksum, position 1 is the offset from the start of the file
            and position 2 is the length of the table.
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFontSubSet.rf">
            The file in use.
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFontSubSet.fileName">
            The file name.
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFontSubSet.#ctor(System.String,iTextSharp.text.pdf.RandomAccessFileOrArray,System.Collections.Hashtable,System.Int32,System.Boolean,System.Boolean)">
            Creates a new TrueTypeFontSubSet
            @param directoryOffset The offset from the start of the file to the table directory
            @param fileName the file name of the font
            @param glyphsUsed the glyphs used
            @param includeCmap <CODE>true</CODE> if the table cmap is to be included in the generated font
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFontSubSet.Process">
            Does the actual work of subsetting the font.
            @throws IOException on error
            @throws DocumentException on error
            @return the subset font
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFontSubSet.ReadStandardString(System.Int32)">
            Reads a <CODE>string</CODE> from the font file as bytes using the Cp1252
             encoding.
            @param length the length of bytes to read
            @return the <CODE>string</CODE> read
            @throws IOException the font file could not be read
        </member>
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.pdf.PushbuttonField" -->
        <member name="F:iTextSharp.text.pdf.BaseField.BORDER_WIDTH_THIN">
            A thin border with 1 point width. 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.BORDER_WIDTH_MEDIUM">
            A medium border with 2 point width. 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.BORDER_WIDTH_THICK">
            A thick border with 3 point width. 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.VISIBLE">
            The field is visible. 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.HIDDEN">
            The field is hidden. 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.VISIBLE_BUT_DOES_NOT_PRINT">
            The field is visible but does not print. 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.HIDDEN_BUT_PRINTABLE">
            The field is hidden but is printable. 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.READ_ONLY">
            The user may not change the value of the field. 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.REQUIRED">
            The field must have a value at the time it is exported by a submit-form
            action.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.MULTILINE">
            The field may contain multiple lines of text.
            This flag is only meaningful with text fields.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.DO_NOT_SCROLL">
            The field will not scroll (horizontally for single-line
            fields, vertically for multiple-line fields) to accommodate more text
            than will fit within its annotation rectangle. Once the field is full, no
            further text will be accepted.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.PASSWORD">
            The field is intended for entering a secure password that should
            not be echoed visibly to the screen.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.FILE_SELECTION">
            The text entered in the field represents the pathname of
            a file whose contents are to be submitted as the value of the field.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.DO_NOT_SPELL_CHECK">
            The text entered in the field will not be spell-checked.
            This flag is meaningful only in text fields and in combo
            fields with the <CODE>EDIT</CODE> flag set.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.EDIT">
            If set the combo box includes an editable text box as well as a drop list; if
            clear, it includes only a drop list.
            This flag is only meaningful with combo fields.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.COMB">
            combo box flag.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.rotation">
            Holds value of property rotation. 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.visibility">
            Holds value of property visibility. 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.fieldName">
            Holds value of property fieldName. 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.options">
            Holds value of property options. 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.maxCharacterLength">
            Holds value of property maxCharacterLength. 
        </member>
        <member name="M:iTextSharp.text.pdf.BaseField.#ctor(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Rectangle,System.String)">
            Creates a new <CODE>TextField</CODE>.
            @param writer the document <CODE>PdfWriter</CODE>
            @param box the field location and dimensions
            @param fieldName the field name. If <CODE>null</CODE> only the widget keys
            will be included in the field allowing it to be used as a kid field.
        </member>
        <member name="M:iTextSharp.text.pdf.BaseField.SetRotationFromPage(iTextSharp.text.Rectangle)">
            Convenience method to set the field rotation the same as the
            page rotation.
            @param page the page
        </member>
        <member name="M:iTextSharp.text.pdf.BaseField.MoveFields(iTextSharp.text.pdf.PdfDictionary,iTextSharp.text.pdf.PdfDictionary)">
            Moves the field keys from <CODE>from</CODE> to <CODE>to</CODE>. The moved keys
            are removed from <CODE>from</CODE>.
            @param from the source
            @param to the destination. It may be <CODE>null</CODE>
        </member>
        <member name="P:iTextSharp.text.pdf.BaseField.BorderWidth">
            Sets the border width in points. To eliminate the border
            set the border color to <CODE>null</CODE>.
            @param borderWidth the border width in points
        </member>
        <member name="P:iTextSharp.text.pdf.BaseField.BorderStyle">
            Sets the border style. The styles are found in <CODE>PdfBorderDictionary</CODE>
            and can be <CODE>STYLE_SOLID</CODE>, <CODE>STYLE_DASHED</CODE>,
            <CODE>STYLE_BEVELED</CODE>, <CODE>STYLE_INSET</CODE> and
            <CODE>STYLE_UNDERLINE</CODE>.
            @param borderStyle the border style
        </member>
        <member name="P:iTextSharp.text.pdf.BaseField.BorderColor">
            Sets the border color. Set to <CODE>null</CODE> to remove
            the border.
            @param borderColor the border color
        </member>
        <member name="P:iTextSharp.text.pdf.BaseField.BackgroundColor">
            Sets the background color. Set to <CODE>null</CODE> for
            transparent background.
            @param backgroundColor the background color
        </member>
        <member name="P:iTextSharp.text.pdf.BaseField.TextColor">
            Sets the text color. If <CODE>null</CODE> the color used
            will be black.
            @param textColor the text color
        </member>
        <member name="P:iTextSharp.text.pdf.BaseField.Font">
            Sets the text font. If <CODE>null</CODE> then Helvetica
            will be used.
            @param font the text font
        </member>
        <member name="P:iTextSharp.text.pdf.BaseField.FontSize">
            Sets the font size. If 0 then auto-sizing will be used but
            only for text fields.
            @param fontSize the font size
        </member>
        <member name="P:iTextSharp.text.pdf.BaseField.Alignment">
            Sets the text horizontal alignment. It can be <CODE>Element.ALIGN_LEFT</CODE>,
            <CODE>Element.ALIGN_CENTER</CODE> and <CODE>Element.ALIGN_RIGHT</CODE>.
            @param alignment the text horizontal alignment
        </member>
        <member name="P:iTextSharp.text.pdf.BaseField.Text">
            Sets the text for text fields.
            @param text the text
        </member>
        <member name="P:iTextSharp.text.pdf.BaseField.Box">
            Sets the field dimension and position.
            @param box the field dimension and position
        </member>
        <member name="P:iTextSharp.text.pdf.BaseField.Rotation">
            Sets the field rotation. This value should be the same as
            the page rotation where the field will be shown.
            @param rotation the field rotation
        </member>
        <member name="P:iTextSharp.text.pdf.BaseField.Visibility">
            Sets the field visibility flag. This flags can be one of
            <CODE>VISIBLE</CODE>, <CODE>HIDDEN</CODE>, <CODE>VISIBLE_BUT_DOES_NOT_PRINT</CODE>
            and <CODE>HIDDEN_BUT_PRINTABLE</CODE>.
            @param visibility field visibility flag
        </member>
        <member name="P:iTextSharp.text.pdf.BaseField.FieldName">
            Sets the field name.
            @param fieldName the field name. If <CODE>null</CODE> only the widget keys
            will be included in the field allowing it to be used as a kid field.
        </member>
        <member name="P:iTextSharp.text.pdf.BaseField.Options">
            Sets the option flags. The option flags can be a combination by oring of
            <CODE>READ_ONLY</CODE>, <CODE>REQUIRED</CODE>,
            <CODE>MULTILINE</CODE>, <CODE>DO_NOT_SCROLL</CODE>,
            <CODE>PASSWORD</CODE>, <CODE>FILE_SELECTION</CODE>,
            <CODE>DO_NOT_SPELL_CHECK</CODE> and <CODE>EDIT</CODE>.
            @param options the option flags
        </member>
        <member name="P:iTextSharp.text.pdf.BaseField.MaxCharacterLength">
            Sets the maximum length of the field’s text, in characters.
            It is only meaningful for text fields.
            @param maxCharacterLength the maximum length of the field’s text, in characters
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField.LAYOUT_LABEL_ONLY">
            A layout option 
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField.LAYOUT_ICON_ONLY">
            A layout option 
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField.LAYOUT_ICON_TOP_LABEL_BOTTOM">
            A layout option 
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField.LAYOUT_LABEL_TOP_ICON_BOTTOM">
            A layout option 
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField.LAYOUT_ICON_LEFT_LABEL_RIGHT">
            A layout option 
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField.LAYOUT_LABEL_LEFT_ICON_RIGHT">
            A layout option 
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField.LAYOUT_LABEL_OVER_ICON">
            A layout option 
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField.SCALE_ICON_ALWAYS">
            An icon scaling option 
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField.SCALE_ICON_NEVER">
            An icon scaling option 
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField.SCALE_ICON_IS_TOO_BIG">
            An icon scaling option 
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField.SCALE_ICON_IS_TOO_SMALL">
            An icon scaling option 
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField.layout">
            Holds value of property layout.
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField.image">
            Holds value of property image.
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField.template">
            Holds value of property template.
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField.scaleIcon">
            Holds value of property scaleIcon.
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField.proportionalIcon">
            Holds value of property proportionalIcon.
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField.iconVerticalAdjustment">
            Holds value of property iconVerticalAdjustment.
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField.iconHorizontalAdjustment">
            Holds value of property iconHorizontalAdjustment.
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField.iconFitToBounds">
            Holds value of property iconFitToBounds.
        </member>
        <member name="M:iTextSharp.text.pdf.PushbuttonField.#ctor(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Rectangle,System.String)">
            Creates a new instance of PushbuttonField
            @param writer the document <CODE>PdfWriter</CODE>
            @param box the field location and dimensions
            @param fieldName the field name. If <CODE>null</CODE> only the widget keys
            will be included in the field allowing it to be used as a kid field.
        </member>
        <member name="M:iTextSharp.text.pdf.PushbuttonField.GetAppearance">
            Gets the button appearance.
            @throws IOException on error
            @throws DocumentException on error
            @return the button appearance
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField.iconReference">
            Holds value of property iconReference.
        </member>
        <member name="P:iTextSharp.text.pdf.PushbuttonField.Layout">
            Sets the icon and label layout. Possible values are <CODE>LAYOUT_LABEL_ONLY</CODE>,
            <CODE>LAYOUT_ICON_ONLY</CODE>, <CODE>LAYOUT_ICON_TOP_LABEL_BOTTOM</CODE>,
            <CODE>LAYOUT_LABEL_TOP_ICON_BOTTOM</CODE>, <CODE>LAYOUT_ICON_LEFT_LABEL_RIGHT</CODE>,
            <CODE>LAYOUT_LABEL_LEFT_ICON_RIGHT</CODE> and <CODE>LAYOUT_LABEL_OVER_ICON</CODE>.
            The default is <CODE>LAYOUT_LABEL_ONLY</CODE>.
            @param layout New value of property layout.
        </member>
        <member name="P:iTextSharp.text.pdf.PushbuttonField.Image">
            Sets the icon as an image.
            @param image the image
        </member>
        <member name="P:iTextSharp.text.pdf.PushbuttonField.Template">
            Sets the icon as a template.
            @param template the template
        </member>
        <member name="P:iTextSharp.text.pdf.PushbuttonField.ScaleIcon">
            Sets the way the icon will be scaled. Possible values are
            <CODE>SCALE_ICON_ALWAYS</CODE>, <CODE>SCALE_ICON_NEVER</CODE>,
            <CODE>SCALE_ICON_IS_TOO_BIG</CODE> and <CODE>SCALE_ICON_IS_TOO_SMALL</CODE>.
            The default is <CODE>SCALE_ICON_ALWAYS</CODE>.
            @param scaleIcon the way the icon will be scaled
        </member>
        <member name="P:iTextSharp.text.pdf.PushbuttonField.ProportionalIcon">
            Sets the way the icon is scaled. If <CODE>true</CODE> the icon is scaled proportionally,
            if <CODE>false</CODE> the scaling is done anamorphicaly.
            @param proportionalIcon the way the icon is scaled
        </member>
        <member name="P:iTextSharp.text.pdf.PushbuttonField.IconVerticalAdjustment">
            A number between 0 and 1 indicating the fraction of leftover space to allocate at the bottom of the icon.
            A value of 0 positions the icon at the bottom of the annotation rectangle.
            A value of 0.5 centers it within the rectangle. The default is 0.5.
            @param iconVerticalAdjustment a number between 0 and 1 indicating the fraction of leftover space to allocate at the bottom of the icon
        </member>
        <member name="P:iTextSharp.text.pdf.PushbuttonField.IconHorizontalAdjustment">
            A number between 0 and 1 indicating the fraction of leftover space to allocate at the left of the icon.
            A value of 0 positions the icon at the left of the annotation rectangle.
            A value of 0.5 centers it within the rectangle. The default is 0.5.
            @param iconHorizontalAdjustment a number between 0 and 1 indicating the fraction of leftover space to allocate at the left of the icon
        </member>
        <member name="P:iTextSharp.text.pdf.PushbuttonField.Field">
            Gets the pushbutton field.
            @throws IOException on error
            @throws DocumentException on error
            @return the pushbutton field
        </member>
        <member name="P:iTextSharp.text.pdf.PushbuttonField.IconFitToBounds">
            If <CODE>true</CODE> the icon will be scaled to fit fully within the bounds of the annotation,
            if <CODE>false</CODE> the border width will be taken into account. The default
            is <CODE>false</CODE>.
            @param iconFitToBounds if <CODE>true</CODE> the icon will be scaled to fit fully within the bounds of the annotation,
            if <CODE>false</CODE> the border width will be taken into account
        </member>
        <member name="P:iTextSharp.text.pdf.PushbuttonField.IconReference">
            Sets the reference to an existing icon.
            @param iconReference the reference to an existing icon
        </member>
        <member name="T:iTextSharp.text.pdf.PdfShadingPattern">
            Implements the shading pattern dictionary.
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfShadingPattern.#ctor(iTextSharp.text.pdf.PdfShading)">
            Creates new PdfShadingPattern 
        </member>
        <member name="T:iTextSharp.text.pdf.PdfPattern">
             A <CODE>PdfPattern</CODE> defines a ColorSpace
            
             @see     PdfStream
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPattern.#ctor(iTextSharp.text.pdf.PdfPatternPainter)">
            Creates a PdfPattern object.
            @param   painter a pattern painter instance
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPattern.#ctor(iTextSharp.text.pdf.PdfPatternPainter,System.Int32)">
            Creates a PdfPattern object.
            @param   painter a pattern painter instance
            @param   compressionLevel the compressionLevel for the stream
            @since   2.1.3
        </member>
        <member name="T:iTextSharp.text.pdf.PdfBorderDictionary">
             A <CODE>PdfBorderDictionary</CODE> define the appearance of a Border (Annotations).
            
             @see     PdfDictionary
        </member>
        <member name="M:iTextSharp.text.pdf.PdfBorderDictionary.#ctor(System.Single,System.Int32,iTextSharp.text.pdf.PdfDashPattern)">
            Constructs a <CODE>PdfBorderDictionary</CODE>.
        </member>
        <member name="T:iTextSharp.text.pdf.PdfAppearance">
            Implements the appearance stream to be used with form fields..
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAppearance.#ctor">
            Creates a <CODE>PdfAppearance</CODE>.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAppearance.#ctor(iTextSharp.text.pdf.PdfWriter)">
             Creates new PdfTemplate
            
             @param wr the <CODE>PdfWriter</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAppearance.CreateAppearance(iTextSharp.text.pdf.PdfWriter,System.Single,System.Single)">
             Creates a new appearance to be used with form fields.
            
             @param width the bounding box width
             @param height the bounding box height
             @return the appearance created
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAppearance.SetFontAndSize(iTextSharp.text.pdf.BaseFont,System.Single)">
             Set the font and the size for the subsequent text writing.
            
             @param bf the font
             @param size the font size in points
        </member>
        <member name="T:iTextSharp.text.pdf.IPdfPTableEvent">
            An interface that can be used to retrieve the position of cells in <CODE>PdfPTable</CODE>.
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.IPdfPTableEvent.TableLayout(iTextSharp.text.pdf.PdfPTable,System.Single[][],System.Single[],System.Int32,System.Int32,iTextSharp.text.pdf.PdfContentByte[])" -->
        <member name="T:iTextSharp.text.pdf.IPdfOCG">
             The interface common to all layer types.
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="P:iTextSharp.text.pdf.IPdfOCG.Ref">
            Gets the <CODE>PdfIndirectReference</CODE> that represents this layer.
            @return the <CODE>PdfIndirectReference</CODE> that represents this layer
        </member>
        <member name="P:iTextSharp.text.pdf.IPdfOCG.PdfObject">
            Gets the object representing the layer.
            @return the object representing the layer
        </member>
        <member name="T:iTextSharp.text.pdf.intern.PdfViewerPreferencesImp">
            Stores the information concerning viewer preferences,
            and contains the business logic that allows you to set viewer preferences.
        </member>
        <member name="F:iTextSharp.text.pdf.intern.PdfViewerPreferencesImp.viewerPreferencesMask">
            The mask to decide if a ViewerPreferences dictionary is needed 
        </member>
        <member name="F:iTextSharp.text.pdf.intern.PdfViewerPreferencesImp.NONFULLSCREENPAGEMODE_PREFERENCES">
            A series of viewer preferences. 
        </member>
        <member name="F:iTextSharp.text.pdf.intern.PdfViewerPreferencesImp.DIRECTION_PREFERENCES">
            A series of viewer preferences. 
        </member>
        <member name="F:iTextSharp.text.pdf.intern.PdfViewerPreferencesImp.PAGE_BOUNDARIES">
            A series of viewer preferences. 
        </member>
        <member name="F:iTextSharp.text.pdf.intern.PdfViewerPreferencesImp.PRINTSCALING_PREFERENCES">
            A series of viewer preferences 
        </member>
        <member name="F:iTextSharp.text.pdf.intern.PdfViewerPreferencesImp.DUPLEX_PREFERENCES">
            A series of viewer preferences. 
        </member>
        <member name="F:iTextSharp.text.pdf.intern.PdfViewerPreferencesImp.pageLayoutAndMode">
            This value will hold the viewer preferences for the page layout and page mode. 
        </member>
        <member name="F:iTextSharp.text.pdf.intern.PdfViewerPreferencesImp.viewerPreferences">
            This dictionary holds the viewer preferences (other than page layout and page mode). 
        </member>
        <member name="M:iTextSharp.text.pdf.intern.PdfViewerPreferencesImp.GetViewerPreferences">
            Returns the viewer preferences.
        </member>
        <member name="M:iTextSharp.text.pdf.intern.PdfViewerPreferencesImp.GetIndex(iTextSharp.text.pdf.PdfName)">
            Given a key for a viewer preference (a PdfName object),
            this method returns the index in the VIEWER_PREFERENCES array.
            @param key    a PdfName referring to a viewer preference
            @return   an index in the VIEWER_PREFERENCES array
        </member>
        <member name="M:iTextSharp.text.pdf.intern.PdfViewerPreferencesImp.IsPossibleValue(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfName[])">
            Checks if some value is valid for a certain key.
        </member>
        <member name="M:iTextSharp.text.pdf.intern.PdfViewerPreferencesImp.AddViewerPreference(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfObject)">
            Sets the viewer preferences for printing.
        </member>
        <member name="M:iTextSharp.text.pdf.intern.PdfViewerPreferencesImp.AddToCatalog(iTextSharp.text.pdf.PdfDictionary)">
            Adds the viewer preferences defined in the preferences parameter to a
            PdfDictionary (more specifically the root or catalog of a PDF file).
            
            @param catalog
        </member>
        <member name="P:iTextSharp.text.pdf.intern.PdfViewerPreferencesImp.PageLayoutAndMode">
            Returns the page layout and page mode value.
        </member>
        <member name="P:iTextSharp.text.pdf.intern.PdfViewerPreferencesImp.ViewerPreferences">
            Sets the viewer preferences as the sum of several constants.
            
            @param preferences
                       the viewer preferences
            @see PdfWriter#setViewerPreferences
        </member>
        <member name="T:iTextSharp.text.pdf.FdfWriter">
            Writes an FDF form.
            @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.FdfWriter.file">
            The PDF file associated with the FDF. 
        </member>
        <member name="M:iTextSharp.text.pdf.FdfWriter.#ctor">
            Creates a new FdfWriter. 
        </member>
        <member name="M:iTextSharp.text.pdf.FdfWriter.WriteTo(System.IO.Stream)">
            Writes the content to a stream.
            @param os the stream
            @throws DocumentException on error
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.FdfWriter.RemoveField(System.String)">
            Removes the field value.
            @param field the field name
            @return <CODE>true</CODE> if the field was found and removed,
            <CODE>false</CODE> otherwise
        </member>
        <member name="M:iTextSharp.text.pdf.FdfWriter.GetFields">
            Gets all the fields. The map is keyed by the fully qualified
            field name and the values are <CODE>PdfObject</CODE>.
            @return a map with all the fields
        </member>
        <member name="M:iTextSharp.text.pdf.FdfWriter.GetField(System.String)">
            Gets the field value.
            @param field the field name
            @return the field value or <CODE>null</CODE> if not found
        </member>
        <member name="M:iTextSharp.text.pdf.FdfWriter.SetFieldAsName(System.String,System.String)">
            Sets the field value as a name.
            @param field the fully qualified field name
            @param value the value
            @return <CODE>true</CODE> if the value was inserted,
            <CODE>false</CODE> if the name is incompatible with
            an existing field
        </member>
        <member name="M:iTextSharp.text.pdf.FdfWriter.SetFieldAsString(System.String,System.String)">
            Sets the field value as a string.
            @param field the fully qualified field name
            @param value the value
            @return <CODE>true</CODE> if the value was inserted,
            <CODE>false</CODE> if the name is incompatible with
            an existing field
        </member>
        <member name="M:iTextSharp.text.pdf.FdfWriter.SetFieldAsAction(System.String,iTextSharp.text.pdf.PdfAction)">
            Sets the field value as a <CODE>PDFAction</CODE>. 
            For example, this method allows setting a form submit button action using {@link PdfAction#createSubmitForm(String, Object[], int)}.
            This method creates an <CODE>A</CODE> entry for the specified field in the underlying FDF file.
            Method contributed by Philippe Laflamme (plaflamme)
            @param field the fully qualified field name
            @param action the field's action
            @return <CODE>true</CODE> if the value was inserted,
            <CODE>false</CODE> if the name is incompatible with
            an existing field
            @since	2.1.5
        </member>
        <member name="M:iTextSharp.text.pdf.FdfWriter.SetFields(iTextSharp.text.pdf.FdfReader)">
            Sets all the fields from this <CODE>FdfReader</CODE>
            @param fdf the <CODE>FdfReader</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.FdfWriter.SetFields(iTextSharp.text.pdf.PdfReader)">
            Sets all the fields from this <CODE>PdfReader</CODE>
            @param pdf the <CODE>PdfReader</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.FdfWriter.SetFields(iTextSharp.text.pdf.AcroFields)">
            Sets all the fields from this <CODE>AcroFields</CODE>
            @param acro the <CODE>AcroFields</CODE>
        </member>
        <member name="P:iTextSharp.text.pdf.FdfWriter.File">
            Gets the PDF file name associated with the FDF.
            @return the PDF file name associated with the FDF
        </member>
        <member name="T:iTextSharp.text.pdf.events.FieldPositioningEvents">
            Class for an index.
            
            @author Michael Niedermair
        </member>
        <member name="T:iTextSharp.text.pdf.IPdfPCellEvent">
            <summary>
            Summary description for IPdfPCellEvent.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.IPdfPCellEvent.CellLayout(iTextSharp.text.pdf.PdfPCell,iTextSharp.text.Rectangle,iTextSharp.text.pdf.PdfContentByte[])" -->
        <member name="F:iTextSharp.text.pdf.events.FieldPositioningEvents.genericChunkFields">
            Keeps a map with fields that are to be positioned in inGenericTag.
        </member>
        <member name="F:iTextSharp.text.pdf.events.FieldPositioningEvents.cellField">
            Keeps the form field that is to be positioned in a cellLayout event.
        </member>
        <member name="F:iTextSharp.text.pdf.events.FieldPositioningEvents.fieldWriter">
            The PdfWriter to use when a field has to added in a cell event. 
        </member>
        <member name="F:iTextSharp.text.pdf.events.FieldPositioningEvents.parent">
            The PdfFormField that is the parent of the field added in a cell event. 
        </member>
        <member name="M:iTextSharp.text.pdf.events.FieldPositioningEvents.#ctor">
            Creates a new event. This constructor will be used if you need to position fields with Chunk objects. 
        </member>
        <member name="F:iTextSharp.text.pdf.events.FieldPositioningEvents.padding">
            Some extra padding that will be taken into account when defining the widget. 
        </member>
        <member name="M:iTextSharp.text.pdf.events.FieldPositioningEvents.AddField(System.String,iTextSharp.text.pdf.PdfFormField)">
            Add a PdfFormField that has to be tied to a generic Chunk.
        </member>
        <member name="M:iTextSharp.text.pdf.events.FieldPositioningEvents.#ctor(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.pdf.PdfFormField)">
            Creates a new event. This constructor will be used if you need to position fields with a Cell Event. 
        </member>
        <member name="M:iTextSharp.text.pdf.events.FieldPositioningEvents.#ctor(iTextSharp.text.pdf.PdfFormField,iTextSharp.text.pdf.PdfFormField)">
            Creates a new event. This constructor will be used if you need to position fields with a Cell Event. 
        </member>
        <member name="M:iTextSharp.text.pdf.events.FieldPositioningEvents.#ctor(iTextSharp.text.pdf.PdfWriter,System.String)">
            Creates a new event. This constructor will be used if you need to position fields with a Cell Event. 
            @throws DocumentException
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.pdf.events.FieldPositioningEvents.#ctor(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.pdf.PdfFormField,System.String)">
            Creates a new event. This constructor will be used if you need to position fields with a Cell Event. 
            @throws DocumentException
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.pdf.events.FieldPositioningEvents.OnGenericTag(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,iTextSharp.text.Rectangle,System.String)">
            @see com.lowagie.text.pdf.PdfPageEvent#onGenericTag(com.lowagie.text.pdf.PdfWriter, com.lowagie.text.Document, com.lowagie.text.Rectangle, java.lang.String)
        </member>
        <member name="M:iTextSharp.text.pdf.events.FieldPositioningEvents.CellLayout(iTextSharp.text.pdf.PdfPCell,iTextSharp.text.Rectangle,iTextSharp.text.pdf.PdfContentByte[])">
            @see com.lowagie.text.pdf.PdfPCellEvent#cellLayout(com.lowagie.text.pdf.PdfPCell, com.lowagie.text.Rectangle, com.lowagie.text.pdf.PdfContentByte[])
        </member>
        <member name="P:iTextSharp.text.pdf.events.FieldPositioningEvents.Padding">
            @param padding The padding to set.
        </member>
        <member name="P:iTextSharp.text.pdf.events.FieldPositioningEvents.Parent">
            @param parent The parent to set.
        </member>
        <member name="T:iTextSharp.text.pdf.ColorDetails">
            Each spotcolor in the document will have an instance of this class
            
             @author Phillip Pan (phillip@formstar.com)
        </member>
        <member name="F:iTextSharp.text.pdf.ColorDetails.indirectReference">
            The indirect reference to this color
        </member>
        <member name="F:iTextSharp.text.pdf.ColorDetails.colorName">
            The color name that appears in the document body stream
        </member>
        <member name="F:iTextSharp.text.pdf.ColorDetails.spotcolor">
            The color
        </member>
        <member name="M:iTextSharp.text.pdf.ColorDetails.#ctor(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfIndirectReference,iTextSharp.text.pdf.PdfSpotColor)">
            Each spot color used in a document has an instance of this class.
            @param colorName the color name
            @param indirectReference the indirect reference to the font
            @param scolor the <CODE>PDfSpotColor</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.ColorDetails.GetSpotColor(iTextSharp.text.pdf.PdfWriter)">
            Gets the <CODE>SpotColor</CODE> object.
            @return the <CODE>PdfSpotColor</CODE>
        </member>
        <member name="P:iTextSharp.text.pdf.ColorDetails.IndirectReference">
            Gets the indirect reference to this color.
            @return the indirect reference to this color
        </member>
        <member name="P:iTextSharp.text.pdf.ColorDetails.ColorName">
            Gets the color name as it appears in the document body.
            @return the color name
        </member>
        <member name="T:iTextSharp.text.pdf.codec.TiffImage">
            Reads TIFF images
            @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffImage.GetNumberOfPages(iTextSharp.text.pdf.RandomAccessFileOrArray)">
            Gets the number of pages the TIFF document has.
            @param s the file source
            @return the number of pages
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffImage.GetTiffImage(iTextSharp.text.pdf.RandomAccessFileOrArray,System.Int32)">
            Reads a page from a TIFF image. Direct mode is not used.
            @param s the file source
            @param page the page to get. The first page is 1
            @return the <CODE>Image</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffImage.GetTiffImage(iTextSharp.text.pdf.RandomAccessFileOrArray,System.Int32,System.Boolean)">
            Reads a page from a TIFF image.
            @param s the file source
            @param page the page to get. The first page is 1
            @param direct for single strip, CCITT images, generate the image
            by direct byte copying. It's faster but may not work
            every time
            @return the <CODE>Image</CODE>
        </member>
        <member name="T:iTextSharp.text.pdf.ByteBuffer">
            Acts like a <CODE>StringBuilder</CODE> but works with <CODE>byte</CODE> arrays.
            floating point is converted to a format suitable to the PDF.
            @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.ByteBuffer.count">
            The count of bytes in the buffer. 
        </member>
        <member name="F:iTextSharp.text.pdf.ByteBuffer.buf">
            The buffer where the bytes are stored. 
        </member>
        <member name="F:iTextSharp.text.pdf.ByteBuffer.HIGH_PRECISION">
            If <CODE>true</CODE> always output floating point numbers with 6 decimal digits.
            If <CODE>false</CODE> uses the faster, although less precise, representation.
        </member>
        <member name="M:iTextSharp.text.pdf.ByteBuffer.#ctor">
            Creates new ByteBuffer with capacity 128 
        </member>
        <member name="M:iTextSharp.text.pdf.ByteBuffer.#ctor(System.Int32)">
            Creates a byte buffer with a certain capacity.
            @param size the initial capacity
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.ByteBuffer.SetCacheSize(System.Int32)" -->
        <member name="M:iTextSharp.text.pdf.ByteBuffer.FillCache(System.Int32)">
             You can fill the cache in advance if you want to.
            
             @param   decimals
        </member>
        <member name="M:iTextSharp.text.pdf.ByteBuffer.ConvertToBytes(System.Int32)">
             Converts an double (multiplied by 100 and cast to an int) into an array of bytes.
            
             @param   i   the int
             @return  a bytearray
        </member>
        <member name="M:iTextSharp.text.pdf.ByteBuffer.Append_i(System.Int32)">
            Appends an <CODE>int</CODE>. The size of the array will grow by one.
            @param b the int to be appended
            @return a reference to this <CODE>ByteBuffer</CODE> object
        </member>
        <member name="M:iTextSharp.text.pdf.ByteBuffer.Append(System.Byte[],System.Int32,System.Int32)">
            Appends the subarray of the <CODE>byte</CODE> array. The buffer will grow by
            <CODE>len</CODE> bytes.
            @param b the array to be appended
            @param off the offset to the start of the array
            @param len the length of bytes to Append
            @return a reference to this <CODE>ByteBuffer</CODE> object
        </member>
        <member name="M:iTextSharp.text.pdf.ByteBuffer.Append(System.Byte[])">
            Appends an array of bytes.
            @param b the array to be appended
            @return a reference to this <CODE>ByteBuffer</CODE> object
        </member>
        <member name="M:iTextSharp.text.pdf.ByteBuffer.Append(System.String)">
            Appends a <CODE>string</CODE> to the buffer. The <CODE>string</CODE> is
            converted according to the encoding ISO-8859-1.
            @param str the <CODE>string</CODE> to be appended
            @return a reference to this <CODE>ByteBuffer</CODE> object
        </member>
        <member name="M:iTextSharp.text.pdf.ByteBuffer.Append(System.Char)">
            Appends a <CODE>char</CODE> to the buffer. The <CODE>char</CODE> is
            converted according to the encoding ISO-8859-1.
            @param c the <CODE>char</CODE> to be appended
            @return a reference to this <CODE>ByteBuffer</CODE> object
        </member>
        <member name="M:iTextSharp.text.pdf.ByteBuffer.Append(iTextSharp.text.pdf.ByteBuffer)">
            Appends another <CODE>ByteBuffer</CODE> to this buffer.
            @param buf the <CODE>ByteBuffer</CODE> to be appended
            @return a reference to this <CODE>ByteBuffer</CODE> object
        </member>
        <member name="M:iTextSharp.text.pdf.ByteBuffer.Append(System.Int32)">
            Appends the string representation of an <CODE>int</CODE>.
            @param i the <CODE>int</CODE> to be appended
            @return a reference to this <CODE>ByteBuffer</CODE> object
        </member>
        <member name="M:iTextSharp.text.pdf.ByteBuffer.Append(System.Single)">
            Appends a string representation of a <CODE>float</CODE> according
            to the Pdf conventions.
            @param i the <CODE>float</CODE> to be appended
            @return a reference to this <CODE>ByteBuffer</CODE> object
        </member>
        <member name="M:iTextSharp.text.pdf.ByteBuffer.Append(System.Double)">
            Appends a string representation of a <CODE>double</CODE> according
            to the Pdf conventions.
            @param d the <CODE>double</CODE> to be appended
            @return a reference to this <CODE>ByteBuffer</CODE> object
        </member>
        <member name="M:iTextSharp.text.pdf.ByteBuffer.FormatDouble(System.Double)">
            Outputs a <CODE>double</CODE> into a format suitable for the PDF.
            @param d a double
            @return the <CODE>string</CODE> representation of the <CODE>double</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.ByteBuffer.FormatDouble(System.Double,iTextSharp.text.pdf.ByteBuffer)">
            Outputs a <CODE>double</CODE> into a format suitable for the PDF.
            @param d a double
            @param buf a ByteBuffer
            @return the <CODE>String</CODE> representation of the <CODE>double</CODE> if
            <CODE>buf</CODE> is <CODE>null</CODE>. If <CODE>buf</CODE> is <B>not</B> <CODE>null</CODE>,
            then the double is appended directly to the buffer and this methods returns <CODE>null</CODE>.
        </member>
        <member name="M:iTextSharp.text.pdf.ByteBuffer.Reset">
            Sets the size to zero.
        </member>
        <member name="M:iTextSharp.text.pdf.ByteBuffer.ToByteArray">
             Creates a newly allocated byte array. Its size is the current
             size of this output stream and the valid contents of the buffer
             have been copied into it.
            
             @return  the current contents of this output stream, as a byte array.
        </member>
        <member name="M:iTextSharp.text.pdf.ByteBuffer.ToString">
             Converts the buffer's contents into a string, translating bytes into
             characters according to the platform's default character encoding.
            
             @return string translated from the buffer's contents.
        </member>
        <member name="M:iTextSharp.text.pdf.ByteBuffer.WriteTo(System.IO.Stream)">
             Writes the complete contents of this byte buffer output to
             the specified output stream argument, as if by calling the output
             stream's write method using <code>out.Write(buf, 0, count)</code>.
            
             @param      out   the output stream to which to write the data.
             @exception  IOException  if an I/O error occurs.
        </member>
        <member name="P:iTextSharp.text.pdf.ByteBuffer.Size">
             Returns the current size of the buffer.
            
             @return the value of the <code>count</code> field, which is the number of valid bytes in this byte buffer.
        </member>
        <member name="T:iTextSharp.text.html.WebColors">
            This class is a HashMap that contains the names of colors as a key and the
            corresponding Color as value. (Source: Wikipedia
            http://en.wikipedia.org/wiki/Web_colors )
            
            @author blowagie
        </member>
        <member name="M:iTextSharp.text.html.WebColors.GetRGBColor(System.String)">
            Gives you a Color based on a name.
            
            @param name
                       a name such as black, violet, cornflowerblue or #RGB or #RRGGBB
                       or rgb(R,G,B)
            @return the corresponding Color object
            @throws IllegalArgumentException
                        if the String isn't a know representation of a color.
        </member>
        <member name="M:iTextSharp.text.html.simpleparser.StyleSheet.#ctor">
            Creates a new instance of StyleSheet 
        </member>
        <member name="T:iTextSharp.text.Utilities">
            A collection of convenience methods that were present in many different iText
            classes.
        </member>
        <member name="M:iTextSharp.text.Utilities.GetKeySet(System.util.Properties)">
            <summary>
            
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.Utilities.AddToArray(System.Object[][],System.Object[])">
            Utility method to extend an array.
            @param original the original array or <CODE>null</CODE>
            @param item the item to be added to the array
            @return a new array with the item appended
        </member>
        <member name="M:iTextSharp.text.Utilities.CheckTrueOrFalse(System.util.Properties,System.String)">
            Checks for a true/false value of a key in a Properties object.
            @param attributes
            @param key
            @return
        </member>
        <member name="M:iTextSharp.text.Utilities.ToURL(System.String)">
            <summary>
            This method makes a valid URL from a given filename.
            </summary>
            <remarks>
            
            </remarks>
            <param name="filename">a given filename</param>
            <returns>a valid URL</returns>
        </member>
        <member name="M:iTextSharp.text.Utilities.UnEscapeURL(System.String)">
            Unescapes an URL. All the "%xx" are replaced by the 'xx' hex char value.
            @param src the url to unescape
            @return the eunescaped value
        </member>
        <member name="M:iTextSharp.text.Utilities.Skip(System.IO.Stream,System.Int32)">
            <summary>
            This method is an alternative for the Stream.Skip()-method
            that doesn't seem to work properly for big values of size.
            </summary>
            <param name="istr">the stream</param>
            <param name="size">the number of bytes to skip</param>
        </member>
        <member name="M:iTextSharp.text.Utilities.MillimetersToPoints(System.Single)">
            Measurement conversion from millimeters to points.
            @param    value   a value in millimeters
            @return   a value in points
            @since    2.1.2
        </member>
        <member name="M:iTextSharp.text.Utilities.MillimetersToInches(System.Single)">
            Measurement conversion from millimeters to inches.
            @param    value   a value in millimeters
            @return   a value in inches
            @since    2.1.2
        </member>
        <member name="M:iTextSharp.text.Utilities.PointsToMillimeters(System.Single)">
            Measurement conversion from points to millimeters.
            @param    value   a value in points
            @return   a value in millimeters
            @since    2.1.2
        </member>
        <member name="M:iTextSharp.text.Utilities.PointsToInches(System.Single)">
            Measurement conversion from points to inches.
            @param    value   a value in points
            @return   a value in inches
            @since    2.1.2
        </member>
        <member name="M:iTextSharp.text.Utilities.InchesToMillimeters(System.Single)">
            Measurement conversion from inches to millimeters.
            @param    value   a value in inches
            @return   a value in millimeters
            @since    2.1.2
        </member>
        <member name="M:iTextSharp.text.Utilities.InchesToPoints(System.Single)">
            Measurement conversion from inches to points.
            @param    value   a value in inches
            @return   a value in points
            @since    2.1.2
        </member>
        <member name="T:iTextSharp.text.rtf.style.RtfColor">
            The RtfColor stores one rtf color value for a rtf document
            
            @version $Version:$
            @author Mark Hall (Mark.Hall@mail.room3b.eu)
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfColor.COLON">
            Constant for the end of one color entry
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfColor.COLOR_RED">
            Constant for RED value
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfColor.COLOR_GREEN">
            Constant for GREEN value
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfColor.COLOR_BLUE">
            Constant for BLUE value
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfColor.COLOR_NUMBER">
            Constant for the number of the colour in the list of colours
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfColor.colorNumber">
            The number of the colour in the list of colours
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfColor.red">
            The red value
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfColor.green">
            The green value
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfColor.blue">
            The blue value
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfColor.#ctor(iTextSharp.text.rtf.document.RtfDocument,System.Int32,System.Int32,System.Int32,System.Int32)">
            Constructor only for use when initializing the RtfColorList
            
            @param doc The RtfDocument this RtfColor belongs to
            @param red The red value to use
            @param green The green value to use
            @param blue The blue value to use
            @param colorNumber The number of the colour in the colour list
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfColor.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.rtf.style.RtfColor)">
            Constructs a RtfColor as a clone of an existing RtfColor
            
            @param doc The RtfDocument this RtfColor belongs to
            @param col The RtfColor to use as a base
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfColor.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.Color)">
            Constructs a RtfColor based on the Color
            
            @param doc The RtfDocument this RtfColor belongs to
            @param col The Color to base this RtfColor on
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfColor.#ctor(iTextSharp.text.rtf.document.RtfDocument,System.Int32,System.Int32,System.Int32)">
            Constructs a RtfColor based on the red/green/blue values
            
            @param doc The RtfDocument this RtfColor belongs to
            @param red The red value to use
            @param green The green value to use
            @param blue The blue value to use
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfColor.WriteContent(System.IO.Stream)">
            unused
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfColor.WriteDefinition(System.IO.Stream)">
            Write the definition part of this RtfColor.
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfColor.WriteBegin(System.IO.Stream)">
            Writes the beginning of this RtfColor
            
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfColor.WriteEnd(System.IO.Stream)">
            Unused
            
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfColor.Equals(System.Object)">
            Tests if this RtfColor is equal to another RtfColor.
            
            @param obj another RtfColor
            @return <code>True</code> if red, green and blue values of the two colours match,
              <code>false</code> otherwise.
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfColor.GetHashCode">
            Returns the hash code of this RtfColor. The hash code is
            an integer with the lowest three bytes containing the values
            of red, green and blue.
            
            @return The hash code of this RtfColor
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfColor.GetBlue">
            Get the blue value of this RtfColor
            
            @return The blue value
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfColor.GetGreen">
            Get the green value of this RtfColor
            
            @return The green value
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfColor.GetRed">
            Get the red value of this RtfColor
            
            @return The red value
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfColor.GetColorNumber">
            Gets the number of this RtfColor in the list of colours
            
            @return Returns the colorNumber.
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfColor.SetRtfDocument(iTextSharp.text.rtf.document.RtfDocument)">
            Sets the RtfDocument this RtfColor belongs to
            
            @param doc The RtfDocument to use
        </member>
        <member name="T:iTextSharp.text.rtf.parser.RtfParserState">
            The <code>RtfParserState</code> contains the state information
            for the parser. The current state object is pushed/popped in a stack
            when a group change is made.
            
            When an open group is encountered, the current state is copied and 
            then pushed on the top of the stack
            When a close group is encountered, the current state is overwritten with
            the popped value from the top of the stack 
            
            @author Howard Shank (hgshank@yahoo.com)
            @since 2.0.8
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParserState.parserState">
            The parser state.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParserState.tokeniserState">
            The tokeniser state.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParserState.groupHandler">
            The control word set as the group handler. 
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParserState.text">
            The parsed value for the current group/control word.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParserState.ctrlWordHandlers">
            Stack containing control word handlers. There could be multiple
            control words in a group.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParserState.ctrlWordHandler">
            The current control word handler.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParserState.destination">
            The current destination.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParserState.isExtendedDestination">
            Flag indicating if this is an extended destination \* control word
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParserState.newGroup">
            Flag to indicate if last token was an open group token '{'
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParserState.#ctor">
             Default constructor
            
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParserState.#ctor(iTextSharp.text.rtf.parser.RtfParserState)">
            Copy constructor
            @param orig The object to copy
        </member>
        <member name="F:iTextSharp.text.rtf.document.output.RtfDataCache.CACHE_MEMORY_EFFICIENT">
            Constant for caching efficently into memory.
        </member>
        <member name="F:iTextSharp.text.rtf.document.output.RtfDataCache.CACHE_MEMORY">
            Constant for caching into memory.
        </member>
        <member name="F:iTextSharp.text.rtf.document.output.RtfDataCache.CACHE_DISK">
            Constant for caching to the disk.
        </member>
        <member name="T:iTextSharp.text.pdf.Type1Font">
            Reads a Type1 font
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font.pfb">
            The PFB file if the input was made with a <CODE>byte</CODE> array.
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font.FontName">
            The Postscript font name.
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font.FullName">
            The full name of the font.
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font.FamilyName">
            The family name of the font.
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font.Weight">
            The weight of the font: normal, bold, etc.
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font.ItalicAngle">
            The italic angle of the font, usually 0.0 or negative.
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font.IsFixedPitch">
            <CODE>true</CODE> if all the characters have the same
            width.
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font.CharacterSet">
            The character set of the font.
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font.llx">
            The llx of the FontBox.
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font.lly">
            The lly of the FontBox.
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font.urx">
            The lurx of the FontBox.
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font.ury">
            The ury of the FontBox.
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font.UnderlinePosition">
            The underline position.
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font.UnderlineThickness">
            The underline thickness.
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font.EncodingScheme">
            The font's encoding name. This encoding is 'StandardEncoding' or
            'AdobeStandardEncoding' for a font that can be totally encoded
            according to the characters names. For all other names the
            font is treated as symbolic.
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font.CapHeight">
            A variable.
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font.XHeight">
            A variable.
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font.Ascender">
            A variable.
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font.Descender">
            A variable.
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font.StdHW">
            A variable.
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font.StdVW">
            A variable.
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font.CharMetrics">
            Represents the section CharMetrics in the AFM file. Each
            value of this array contains a <CODE>Object[4]</CODE> with an
            Integer, Integer, String and int[]. This is the code, width, name and char bbox.
            The key is the name of the char and also an Integer with the char number.
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font.KernPairs">
            Represents the section KernPairs in the AFM file. The key is
            the name of the first character and the value is a <CODE>Object[]</CODE>
            with 2 elements for each kern pair. Position 0 is the name of
            the second character and position 1 is the kerning distance. This is
            repeated for all the pairs.
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font.fileName">
            The file in use.
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font.builtinFont">
            <CODE>true</CODE> if this font is one of the 14 built in fonts.
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font.PFB_TYPES">
            Types of records in a PFB file. ASCII is 1 and BINARY is 2.
            They have to appear in the PFB file in this sequence.
        </member>
        <member name="M:iTextSharp.text.pdf.Type1Font.#ctor(System.String,System.String,System.Boolean,System.Byte[],System.Byte[],System.Boolean)">
            Creates a new Type1 font.
            @param ttfAfm the AFM file if the input is made with a <CODE>byte</CODE> array
            @param pfb the PFB file if the input is made with a <CODE>byte</CODE> array
            @param afmFile the name of one of the 14 built-in fonts or the location of an AFM file. The file must end in '.afm'
            @param enc the encoding to be applied to this font
            @param emb true if the font is to be embedded in the PDF
            @throws DocumentException the AFM file is invalid
            @throws IOException the AFM file could not be read
        </member>
        <member name="M:iTextSharp.text.pdf.Type1Font.GetRawWidth(System.Int32,System.String)">
            Gets the width from the font according to the <CODE>name</CODE> or,
            if the <CODE>name</CODE> is null, meaning it is a symbolic font,
            the char <CODE>c</CODE>.
            @param c the char if the font is symbolic
            @param name the glyph name
            @return the width of the char
        </member>
        <member name="M:iTextSharp.text.pdf.Type1Font.GetKerning(System.Int32,System.Int32)">
            Gets the kerning between two Unicode characters. The characters
            are converted to names and this names are used to find the kerning
            pairs in the <CODE>Hashtable</CODE> <CODE>KernPairs</CODE>.
            @param char1 the first char
            @param char2 the second char
            @return the kerning to be applied
        </member>
        <member name="M:iTextSharp.text.pdf.Type1Font.Process(iTextSharp.text.pdf.RandomAccessFileOrArray)">
            Reads the font metrics
            @param rf the AFM file
            @throws DocumentException the AFM file is invalid
            @throws IOException the AFM file could not be read
        </member>
        <member name="M:iTextSharp.text.pdf.Type1Font.GetFullFontStream">
            If the embedded flag is <CODE>false</CODE> or if the font is
             one of the 14 built in types, it returns <CODE>null</CODE>,
            otherwise the font is read and output in a PdfStream object.
            @return the PdfStream containing the font or <CODE>null</CODE>
            @throws DocumentException if there is an error reading the font
        </member>
        <member name="M:iTextSharp.text.pdf.Type1Font.GetFontDescriptor(iTextSharp.text.pdf.PdfIndirectReference)">
            Generates the font descriptor for this font or <CODE>null</CODE> if it is
            one of the 14 built in fonts.
            @param fontStream the indirect reference to a PdfStream containing the font or <CODE>null</CODE>
            @return the PdfDictionary containing the font descriptor or <CODE>null</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.Type1Font.GetFontBaseType(iTextSharp.text.pdf.PdfIndirectReference,System.Int32,System.Int32,System.Byte[])">
            Generates the font dictionary for this font.
            @return the PdfDictionary containing the font dictionary
            @param firstChar the first valid character
            @param lastChar the last valid character
            @param shortTag a 256 bytes long <CODE>byte</CODE> array where each unused byte is represented by 0
            @param fontDescriptor the indirect reference to a PdfDictionary containing the font descriptor or <CODE>null</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.Type1Font.WriteFont(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.pdf.PdfIndirectReference,System.Object[])">
            Outputs to the writer the font dictionaries and streams.
            @param writer the writer for this document
            @param ref the font indirect reference
            @param parms several parameters that depend on the font type
            @throws IOException on error
            @throws DocumentException error in generating the object
        </member>
        <member name="M:iTextSharp.text.pdf.Type1Font.GetFontDescriptor(System.Int32,System.Single)">
            Gets the font parameter identified by <CODE>key</CODE>. Valid values
            for <CODE>key</CODE> are <CODE>ASCENT</CODE>, <CODE>CAPHEIGHT</CODE>, <CODE>DESCENT</CODE>,
            <CODE>ITALICANGLE</CODE>, <CODE>BBOXLLX</CODE>, <CODE>BBOXLLY</CODE>, <CODE>BBOXURX</CODE>
            and <CODE>BBOXURY</CODE>.
            @param key the parameter to be extracted
            @param fontSize the font size in points
            @return the parameter in points
        </member>
        <member name="M:iTextSharp.text.pdf.Type1Font.HasKernPairs">
            Checks if the font has any kerning pairs.
            @return <CODE>true</CODE> if the font has any kerning pairs
        </member>
        <member name="M:iTextSharp.text.pdf.Type1Font.SetKerning(System.Int32,System.Int32,System.Int32)">
            Sets the kerning between two Unicode chars.
            @param char1 the first char
            @param char2 the second char
            @param kern the kerning to apply in normalized 1000 units
            @return <code>true</code> if the kerning was applied, <code>false</code> otherwise
        </member>
        <member name="P:iTextSharp.text.pdf.Type1Font.PostscriptFontName">
            Gets the postscript font name.
            @return the postscript font name
        </member>
        <!-- Badly formed XML comment ignored for member "P:iTextSharp.text.pdf.Type1Font.FullFontName" -->
        <!-- Badly formed XML comment ignored for member "P:iTextSharp.text.pdf.Type1Font.AllNameEntries" -->
        <!-- Badly formed XML comment ignored for member "P:iTextSharp.text.pdf.Type1Font.FamilyFontName" -->
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.pdf.RadioCheckField" -->
        <member name="F:iTextSharp.text.pdf.RadioCheckField.TYPE_CHECK">
            A field with the symbol check 
        </member>
        <member name="F:iTextSharp.text.pdf.RadioCheckField.TYPE_CIRCLE">
            A field with the symbol circle 
        </member>
        <member name="F:iTextSharp.text.pdf.RadioCheckField.TYPE_CROSS">
            A field with the symbol cross 
        </member>
        <member name="F:iTextSharp.text.pdf.RadioCheckField.TYPE_DIAMOND">
            A field with the symbol diamond 
        </member>
        <member name="F:iTextSharp.text.pdf.RadioCheckField.TYPE_SQUARE">
            A field with the symbol square 
        </member>
        <member name="F:iTextSharp.text.pdf.RadioCheckField.TYPE_STAR">
            A field with the symbol star 
        </member>
        <member name="F:iTextSharp.text.pdf.RadioCheckField.checkType">
            Holds value of property checkType.
        </member>
        <member name="F:iTextSharp.text.pdf.RadioCheckField.onValue">
            Holds value of property onValue.
        </member>
        <member name="F:iTextSharp.text.pdf.RadioCheckField.vchecked">
            Holds value of property checked.
        </member>
        <member name="M:iTextSharp.text.pdf.RadioCheckField.#ctor(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Rectangle,System.String,System.String)">
            Creates a new instance of RadioCheckField
            @param writer the document <CODE>PdfWriter</CODE>
            @param box the field location and dimensions
            @param fieldName the field name. It must not be <CODE>null</CODE>
            @param onValue the value when the field is checked
        </member>
        <member name="M:iTextSharp.text.pdf.RadioCheckField.GetAppearance(System.Boolean,System.Boolean)">
            Gets the field appearance.
            @param isRadio <CODE>true</CODE> for a radio field and <CODE>false</CODE>
            for a check field
            @param on <CODE>true</CODE> for the checked state, <CODE>false</CODE>
            otherwise
            @throws IOException on error
            @throws DocumentException on error
            @return the appearance
        </member>
        <member name="M:iTextSharp.text.pdf.RadioCheckField.GetAppearanceRadioCircle(System.Boolean)">
            Gets the special field appearance for the radio circle.
            @param on <CODE>true</CODE> for the checked state, <CODE>false</CODE>
            otherwise
            @return the appearance
        </member>
        <member name="M:iTextSharp.text.pdf.RadioCheckField.GetRadioGroup(System.Boolean,System.Boolean)">
            Gets a radio group. It's composed of the field specific keys, without the widget
            ones. This field is to be used as a field aggregator with {@link PdfFormField#addKid(PdfFormField) AddKid()}.
            @param noToggleToOff if <CODE>true</CODE>, exactly one radio button must be selected at all
            times; clicking the currently selected button has no effect.
            If <CODE>false</CODE>, clicking
            the selected button deselects it, leaving no button selected.
            @param radiosInUnison if <CODE>true</CODE>, a group of radio buttons within a radio button field that
            use the same value for the on state will turn on and off in unison; that is if
            one is checked, they are all checked. If <CODE>false</CODE>, the buttons are mutually exclusive
            (the same behavior as HTML radio buttons)
            @return the radio group
        </member>
        <member name="M:iTextSharp.text.pdf.RadioCheckField.GetField(System.Boolean)">
            Gets a radio or check field.
            @param isRadio <CODE>true</CODE> to get a radio field, <CODE>false</CODE> to get
            a check field
            @throws IOException on error
            @throws DocumentException on error
            @return the field
        </member>
        <member name="P:iTextSharp.text.pdf.RadioCheckField.CheckType">
            Sets the checked symbol. It can be
            <CODE>TYPE_CHECK</CODE>,
            <CODE>TYPE_CIRCLE</CODE>,
            <CODE>TYPE_CROSS</CODE>,
            <CODE>TYPE_DIAMOND</CODE>,
            <CODE>TYPE_SQUARE</CODE> and
            <CODE>TYPE_STAR</CODE>.
            @param checkType the checked symbol
        </member>
        <member name="P:iTextSharp.text.pdf.RadioCheckField.OnValue">
            Sets the value when the field is checked.
            @param onValue the value when the field is checked
        </member>
        <member name="P:iTextSharp.text.pdf.RadioCheckField.Checked">
            Sets the state of the field to checked or unchecked.
            @param checked the state of the field, <CODE>true</CODE> for checked
            and <CODE>false</CODE> for unchecked
        </member>
        <member name="P:iTextSharp.text.pdf.RadioCheckField.RadioField">
            Gets the radio field. It's only composed of the widget keys and must be used
            with {@link #getRadioGroup(bool,bool)}.
            @return the radio field
            @throws IOException on error
            @throws DocumentException on error
        </member>
        <member name="P:iTextSharp.text.pdf.RadioCheckField.CheckField">
            Gets the check field.
            @return the check field
            @throws IOException on error
            @throws DocumentException on error
        </member>
        <member name="T:iTextSharp.text.pdf.PdfXConformanceException">
            
             @author  psoares
        </member>
        <member name="M:iTextSharp.text.pdf.PdfXConformanceException.#ctor">
            Creates a new instance of PdfXConformanceException. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfXConformanceException.#ctor(System.String)">
            Creates a new instance of PdfXConformanceException.
            @param s
        </member>
        <member name="T:iTextSharp.text.pdf.PdfStructureElement">
            This is a node in a document logical structure. It may contain a mark point or it may contain
            other nodes.
            @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.PdfStructureElement.parent">
            Holds value of property kids.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfStructureElement.reference">
            Holds value of property reference.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStructureElement.#ctor(iTextSharp.text.pdf.PdfStructureElement,iTextSharp.text.pdf.PdfName)">
            Creates a new instance of PdfStructureElement.
            @param parent the parent of this node
            @param structureType the type of structure. It may be a standard type or a user type mapped by the role map
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStructureElement.#ctor(iTextSharp.text.pdf.PdfStructureTreeRoot,iTextSharp.text.pdf.PdfName)">
            Creates a new instance of PdfStructureElement.
            @param parent the parent of this node
            @param structureType the type of structure. It may be a standard type or a user type mapped by the role map
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStructureElement.Parent">
            Gets the parent of this node.
            @return the parent of this node
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStructureElement.Reference">
            Gets the reference this object will be written to.
            @return the reference this object will be written to
        </member>
        <member name="T:iTextSharp.text.pdf.PdfSignatureAppearance">
            This class takes care of the cryptographic options and appearances that form a signature.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfSignatureAppearance.questionMark">
            Commands to draw a yellow question mark in a stream content
        </member>
        <member name="F:iTextSharp.text.pdf.PdfSignatureAppearance.SELF_SIGNED">
            The self signed filter.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfSignatureAppearance.VERISIGN_SIGNED">
            The VeriSign filter.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfSignatureAppearance.WINCER_SIGNED">
            The Windows Certificate Security.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfSignatureAppearance.render">
            Gets the rendering mode for this signature .
            @return the rectangle rendering mode for this signature. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfSignatureAppearance.signatureGraphic">
            Sets the Image object to render when Render is set to SignatureRender.GraphicAndDescription
            @param image rendered. If <CODE>null</CODE> the mode is defaulted
            to SignatureRender.Description
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSignatureAppearance.IsInvisible">
            Gets the visibility status of the signature.
            @return the visibility status of the signature
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSignatureAppearance.SetCrypto(Org.BouncyCastle.Crypto.ICipherParameters,Org.BouncyCastle.X509.X509Certificate[],System.Object[],iTextSharp.text.pdf.PdfName)">
            Sets the cryptographic parameters.
            @param privKey the private key
            @param certChain the certificate chain
            @param crlList the certificate revocation list. It may be <CODE>null</CODE>
            @param filter the crytographic filter type. It can be SELF_SIGNED, VERISIGN_SIGNED or WINCER_SIGNED
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSignatureAppearance.SetVisibleSignature(iTextSharp.text.Rectangle,System.Int32,System.String)">
            Sets the signature to be visible. It creates a new visible signature field.
            @param pageRect the position and dimension of the field in the page
            @param page the page to place the field. The fist page is 1
            @param fieldName the field name or <CODE>null</CODE> to generate automatically a new field name
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSignatureAppearance.SetVisibleSignature(System.String)">
            Sets the signature to be visible. An empty signature field with the same name must already exist.
            @param fieldName the existing empty signature field name
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfSignatureAppearance.GetLayer(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfSignatureAppearance.GetTopLayer" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfSignatureAppearance.GetAppearance" -->
        <member name="M:iTextSharp.text.pdf.PdfSignatureAppearance.FitText(iTextSharp.text.Font,System.String,iTextSharp.text.Rectangle,System.Single,System.Int32)">
            Fits the text to some rectangle adjusting the font size as needed.
            @param font the font to use
            @param text the text
            @param rect the rectangle where the text must fit
            @param maxFontSize the maximum font size
            @param runDirection the run direction
            @return the calculated font size that makes the text fit
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSignatureAppearance.SetExternalDigest(System.Byte[],System.Byte[],System.String)">
            Sets the digest/signature to an external calculated value.
            @param digest the digest. This is the actual signature
            @param RSAdata the extra data that goes into the data tag in PKCS#7
            @param digestEncryptionAlgorithm the encryption algorithm. It may must be <CODE>null</CODE> if the <CODE>digest</CODE>
            is also <CODE>null</CODE>. If the <CODE>digest</CODE> is not <CODE>null</CODE>
            then it may be "RSA" or "DSA"
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSignatureAppearance.IsNewField">
            Checks if a new field was created.
            @return <CODE>true</CODE> if a new field was created, <CODE>false</CODE> if signing
            an existing field or if the signature is invisible
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSignatureAppearance.GetNewSigName">
            Gets a new signature fied name that doesn't clash with any existing name.
            @return a new signature fied name
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfSignatureAppearance.PreClose" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfSignatureAppearance.PreClose(System.Collections.Hashtable)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfSignatureAppearance.Close(iTextSharp.text.pdf.PdfDictionary)" -->
        <member name="M:iTextSharp.text.pdf.PdfSignatureAppearance.IsPreClosed">
            Checks if the document is in the process of closing.
            @return <CODE>true</CODE> if the document is in the process of closing,
            <CODE>false</CODE> otherwise
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSignatureAppearance.GetImage">
            Gets the background image for the layer 2.
            @return the background image for the layer 2
        </member>
        <member name="F:iTextSharp.text.pdf.PdfSignatureAppearance.contact">
            Holds value of property contact.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfSignatureAppearance.layer2Font">
            Holds value of property layer2Font.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfSignatureAppearance.layer4Text">
            Holds value of property layer4Text.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfSignatureAppearance.acro6Layers">
            Holds value of property acro6Layers.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfSignatureAppearance.runDirection">
            Holds value of property runDirection.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfSignatureAppearance.signatureEvent">
            Holds value of property signatureEvent.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfSignatureAppearance.image">
            Holds value of property image.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfSignatureAppearance.imageScale">
            Holds value of property imageScale.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.Layer2Text">
            Sets the signature text identifying the signer.
            @param text the signature text identifying the signer. If <CODE>null</CODE> or not set
            a standard description will be used
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.Layer4Text">
            Sets the text identifying the signature status.
            @param text the text identifying the signature status. If <CODE>null</CODE> or not set
            the description "Signature Not Verified" will be used
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.Rect">
            Gets the rectangle representing the signature dimensions.
            @return the rectangle representing the signature dimensions. It may be <CODE>null</CODE>
            or have zero width or height for invisible signatures
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.Reason">
            Sets the signing reason.
            @param reason the signing reason
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.Location">
            Sets the signing location.
            @param location the signing location
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.PrivKey">
            Gets the private key.
            @return the private key
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.CertChain">
            Gets the certificate chain.
            @return the certificate chain
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.CrlList">
            Gets the certificate revocation list.
            @return the certificate revocation list
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.Filter">
            Gets the filter used to sign the document.
            @return the filter used to sign the document
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.Page">
            Gets the page number of the field.
            @return the page number of the field
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.FieldName">
            Gets the field name.
            @return the field name
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.PageRect">
            Gets the rectangle that represent the position and dimension of the signature in the page.
            @return the rectangle that represent the position and dimension of the signature in the page
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.SignDate">
            Gets the signature date.
            @return the signature date
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.TempFile">
            Gets the temporary file.
            @return the temporary file or <CODE>null</CODE> is the document is created in memory
        </member>
        <!-- Badly formed XML comment ignored for member "P:iTextSharp.text.pdf.PdfSignatureAppearance.RangeStream" -->
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.CryptoDictionary">
            Gets the user made signature dictionary. This is the dictionary at the /V key.
            @return the user made signature dictionary
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.Stamper">
            Gets the <CODE>PdfStamper</CODE> associated with this instance.
            @return the <CODE>PdfStamper</CODE> associated with this instance
        </member>
        <!-- Badly formed XML comment ignored for member "P:iTextSharp.text.pdf.PdfSignatureAppearance.SigStandard" -->
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.Contact">
            Sets the signing contact.
            @param contact the signing contact
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.Layer2Font">
            Sets the n2 and n4 layer font. If the font size is zero, auto-fit will be used.
            @param layer2Font the n2 and n4 font
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.Acro6Layers">
            Acrobat 6.0 and higher recomends that only layer n2 and n4 be present. This method sets that mode.
            @param acro6Layers if <code>true</code> only the layers n2 and n4 will be present
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.RunDirection">
            Sets the run direction in the n2 and n4 layer. 
            @param runDirection the run direction
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.SignatureEvent">
            Sets the signature event to allow modification of the signature dictionary.
            @param signatureEvent the signature event
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.Image">
            Sets the background image for the layer 2.
            @param image the background image for the layer 2
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.ImageScale">
            Sets the scaling to be applied to the background image. If it's zero the image
            will fully fill the rectangle. If it's less than zero the image will fill the rectangle but
            will keep the proportions. If it's greater than zero that scaling will be applied.
            In any of the cases the image will always be centered. It's zero by default.
            @param imageScale the scaling to be applied to the background image
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.CertificationLevel">
            Sets the document type to certified instead of simply signed.
            @param certificationLevel the values can be: <code>NOT_CERTIFIED</code>, <code>CERTIFIED_NO_CHANGES_ALLOWED</code>,
            <code>CERTIFIED_FORM_FILLING</code> and <code>CERTIFIED_FORM_FILLING_AND_ANNOTATIONS</code>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfSignatureAppearance.SignatureRender">
            Enumeration representing the different rendering options of a signature
        </member>
        <member name="T:iTextSharp.text.pdf.PdfSignatureAppearance.FRangeStream">
            
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSignatureAppearance.FRangeStream.ReadByte">
            @see java.io.Stream#read()
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSignatureAppearance.FRangeStream.Read(System.Byte[],System.Int32,System.Int32)">
            @see java.io.Stream#read(byte[], int, int)
        </member>
        <member name="T:iTextSharp.text.pdf.PdfSignatureAppearance.ISignatureEvent">
            An interface to retrieve the signature dictionary for modification.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSignatureAppearance.ISignatureEvent.GetSignatureDictionary(iTextSharp.text.pdf.PdfDictionary)">
            Allows modification of the signature dictionary.
            @param sig the signature dictionary
        </member>
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.pdf.PdfName" -->
        <member name="F:iTextSharp.text.pdf.PdfName._3D">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.A">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.AA">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ABSOLUTECOLORIMETRIC">
            A name
            @since 2.1.5 renamed from ABSOLUTECALORIMETRIC
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.AC">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ACROFORM">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ACTION">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ACTIVATION">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ADBE">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ACTUALTEXT">
            a name used in PDF structure
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ADBE_PKCS7_DETACHED">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ADBE_PKCS7_S4">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ADBE_PKCS7_S5">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ADBE_PKCS7_SHA1">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ADBE_X509_RSA_SHA1">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ADOBE_PPKLITE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ADOBE_PPKMS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.AESV2">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.AIS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ALLPAGES">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ALT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ALTERNATE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ANIMATION">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ANNOT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ANNOTS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ANTIALIAS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.AP">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.APPDEFAULT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ART">
            A name
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ARTBOX">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ASCENT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.AS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ASCII85DECODE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ASCIIHEXDECODE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ASSET">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ASSETS">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.AUTHEVENT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.AUTHOR">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.B">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.BACKGROUND">
            A name
            @since	2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.BASEENCODING">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.BASEFONT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.BASEVERSION">
            A name
            @since	2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.BBOX">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.BC">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.BG">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.BIBENTRY">
            A name
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.BIGFIVE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.BINDING">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.BINDINGMATERIALNAME">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.BITSPERCOMPONENT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.BITSPERSAMPLE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.BL">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.BLACKIS1">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.BLACKPOINT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.BLOCKQUOTE">
            A name
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.BLEEDBOX">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.BLINDS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.BM">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.BORDER">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.BOUNDS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.BOX">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.BS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.BTN">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.BYTERANGE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.C">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.C0">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.C1">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CA">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ca_">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CALGRAY">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CALRGB">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CAPHEIGHT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CAPTION">
            A name
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CATALOG">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CATEGORY">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CCITTFAXDECODE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CENTER">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CENTERWINDOW">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CERT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CF">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CFM">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CH">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CHARPROCS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CI">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CIDFONTTYPE0">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CIDFONTTYPE2">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CIDSET">
            A name
            @since 2.0.7
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CIDSYSTEMINFO">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CIDTOGIDMAP">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CIRCLE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CMD">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CO">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CODE">
            A name
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.COLORS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.COLORSPACE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.COLLECTION">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.COLLECTIONFIELD">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.COLLECTIONITEM">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.COLLECTIONSCHEMA">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.COLLECTIONSORT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.COLLECTIONSUBITEM">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.COLUMNS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CONDITION">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CONFIGURATION">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CONFIGURATIONS">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CONTACTINFO">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CONTENT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CONTENTS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.COORDS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.COUNT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.COURIER">
            A name of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.COURIER_BOLD">
            A name of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.COURIER_OBLIQUE">
            A name of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.COURIER_BOLDOBLIQUE">
            A name of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CREATIONDATE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CREATOR">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CREATORINFO">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CROPBOX">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CRYPT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CUEPOINT">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CUEPOINTS">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.D">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DA">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DATA">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DC">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DCTDECODE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DEACTIVATION">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DECODE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DECODEPARMS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DEFAULT">
            A name
            @since	2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DEFAULTCRYPTFILTER">
            A name
            @since	2.1.5 renamed from DEFAULTCRYPTFILER
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DEFAULTCMYK">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DEFAULTGRAY">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DEFAULTRGB">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DESC">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DESCENDANTFONTS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DESCENT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DEST">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DESTOUTPUTPROFILE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DESTS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DEVICEGRAY">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DEVICERGB">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DEVICECMYK">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DI">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DIFFERENCES">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DISSOLVE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DIRECTION">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DISPLAYDOCTITLE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DIV">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DM">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DOCMDP">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DOCOPEN">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DOCUMENT">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DOMAIN">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DP">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DR">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DUR">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DUPLEX">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DUPLEXFLIPSHORTEDGE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DUPLEXFLIPLONGEDGE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DV">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DW">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.E">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.EARLYCHANGE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.EF">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.EFF">
            A name
            @since	2.1.3
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.EFOPEN">
            A name
            @since	2.1.3
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.EMBEDDED">
            A name
            @since	2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.EMBEDDEDFILE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.EMBEDDEDFILES">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ENCODE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ENCODEDBYTEALIGN">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ENCODING">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ENCRYPT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ENCRYPTMETADATA">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ENDOFBLOCK">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ENDOFLINE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.EXTEND">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.EXTENSIONS">
            A name
            @since	2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.EXTENSIONLEVEL">
            A name
            @since	2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.EXTGSTATE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.EXPORT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.EXPORTSTATE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.EVENT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.F">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FAR">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FB">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FDECODEPARMS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FDF">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FF">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FFILTER">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FIELDS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FIGURE">
            A name
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FILEATTACHMENT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FILESPEC">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FILTER">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FIRST">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FIRSTCHAR">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FIRSTPAGE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FIT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FITH">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FITV">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FITR">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FITB">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FITBH">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FITBV">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FITWINDOW">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FLAGS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FLASH">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FLASHVARS">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FLATEDECODE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FO">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FONT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FONTBBOX">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FONTDESCRIPTOR">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FONTFILE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FONTFILE2">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FONTFILE3">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FONTMATRIX">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FONTNAME">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FOREGROUND">
            A name
            @since	2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FORM">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FORMTYPE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FORMULA">
            A name
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FREETEXT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FRM">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FULLSCREEN">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FUNCTION">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FUNCTIONS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FUNCTIONTYPE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.GAMMA">
            A name of an attribute. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.GBK">
            A name of an attribute. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.GLITTER">
            A name of an attribute. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.GOTO">
            A name of an attribute. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.GOTOE">
            A name of an attribute. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.GOTOR">
            A name of an attribute. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.GROUP">
            A name of an attribute. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.GTS_PDFA1">
            A name of an attribute. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.GTS_PDFX">
            A name of an attribute. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.GTS_PDFXVERSION">
            A name of an attribute. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.H">
            A name of an attribute. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.H1">
            A name
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.H2">
            A name
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.H3">
            A name
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.H4">
            A name
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.H5">
            A name
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.H6">
            A name
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.HALIGN">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.HEIGHT">
            A name of an attribute. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.HELV">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.HELVETICA">
            A name of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.HELVETICA_BOLD">
            A name of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.HELVETICA_OBLIQUE">
            A name of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.HELVETICA_BOLDOBLIQUE">
            A name of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.HID">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.HIDE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.HIDEMENUBAR">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.HIDETOOLBAR">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.HIDEWINDOWUI">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.HIGHLIGHT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.HOFFSET">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.I">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ICCBASED">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ID">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.IDENTITY">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.IF">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.IMAGE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.IMAGEB">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.IMAGEC">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.IMAGEI">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.IMAGEMASK">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.INDEX">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.INDEXED">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.INFO">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.INK">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.INKLIST">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.INSTANCES">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.IMPORTDATA">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.INTENT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.INTERPOLATE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ISMAP">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.IRT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ITALICANGLE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ITXT">
            A name
            @since	2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.IX">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.JAVASCRIPT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.JBIG2DECODE">
            A name
            @since	2.1.5
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.JBIG2GLOBALS">
            A name
            @since	2.1.5
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.JPXDECODE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.JS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.K">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.KEYWORDS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.KIDS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.L">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.L2R">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.LANG">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.LANGUAGE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.LAST">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.LASTCHAR">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.LASTPAGE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.LAUNCH">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.LBL">
            A name
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.LBODY">
            A name
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.LENGTH">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.LENGTH1">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.LI">
            A name
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.LIMITS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.LINE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.LINEAR">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.LINK">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.LISTMODE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.LOCATION">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.LOCK">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.LOCKED">
            A name
            @since	2.1.2
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.LZWDECODE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.M">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.MATERIAL">
            A name
            @since	2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.MATRIX">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.MAC_EXPERT_ENCODING">
            A name of an encoding 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.MAC_ROMAN_ENCODING">
            A name of an encoding 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.MARKED">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.MARKINFO">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.MASK">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.MAX_LOWER_CASE">
            A name
            @since	2.1.6 renamed from MAX
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.MAX_CAMEL_CASE">
            A name
            @since	2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.MAXLEN">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.MEDIABOX">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.MCID">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.MCR">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.METADATA">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.MIN_LOWER_CASE">
            A name
            @since	2.1.6 renamed from MIN
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.MIN_CAMEL_CASE">
            A name
            @since	2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.MK">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.MMTYPE1">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.MODDATE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.N">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.N0">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.N1">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.N2">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.N3">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.N4">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.NAME">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.NAMED">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.NAMES">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.NAVIGATION">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.NAVIGATIONPANE">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.NEAR">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.NEEDAPPEARANCES">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.NEWWINDOW">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.NEXT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.NEXTPAGE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.NM">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.NONE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.NONFULLSCREENPAGEMODE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.NONSTRUCT">
            A name
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.NOTE">
            A name
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.NUMCOPIES">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.NUMS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.O">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.OBJ">
            A name used with Document Structure
            @since 2.1.5
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.OBJR">
            a name used with Doucment Structure
            @since 2.1.5
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.OBJSTM">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.OC">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.OCG">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.OCGS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.OCMD">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.OCPROPERTIES">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Off_">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.OFF">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ON">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ONECOLUMN">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.OPEN">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.OPENACTION">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.OP">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.op_">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.OPM">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.OPT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ORDER">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ORDERING">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.OSCILLATING">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.OUTLINES">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.OUTPUTCONDITION">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.OUTPUTCONDITIONIDENTIFIER">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.OUTPUTINTENT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.OUTPUTINTENTS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.P">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PAGE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PAGELABELS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PAGELAYOUT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PAGEMODE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PAGES">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PAINTTYPE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PANOSE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PARAMS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PARENT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PARENTTREE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PARENTTREENEXTKEY">
            A name used in defining Document Structure.
            @since 2.1.5
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PART">
            A name
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PASSCONTEXTCLICK">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PATTERN">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PATTERNTYPE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PC">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PDF">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PDFDOCENCODING">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PERCEPTUAL">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PERMS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PG">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PI">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PICKTRAYBYPDFSIZE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PLAYCOUNT">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PO">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.POPUP">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.POSITION">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PREDICTOR">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PREFERRED">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PRESENTATION">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PRESERVERB">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PREV">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PREVPAGE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PRINT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PRINTAREA">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PRINTCLIP">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PRINTPAGERANGE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PRINTSCALING">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PRINTSTATE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PRIVATE">
            A name
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PROCSET">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PRODUCER">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PROPERTIES">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PUBSEC">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PV">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Q">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.QUADPOINTS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.QUOTE">
            A name
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.R">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.R2L">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.RANGE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.RC">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.RBGROUPS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.REASON">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.RECIPIENTS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.RECT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.REFERENCE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.REGISTRY">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.REGISTRYNAME">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.RELATIVECOLORIMETRIC">
            A name
            @since	2.1.5 renamed from RELATIVECALORIMETRIC
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.RENDITION">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.RESETFORM">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.RESOURCES">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.RI">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.RICHMEDIA">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.RICHMEDIAACTIVATION">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.RICHMEDIAANIMATION">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.RICHMEDIACOMMAND">
            A name
            @since	2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.RICHMEDIACONFIGURATION">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.RICHMEDIACONTENT">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.RICHMEDIADEACTIVATION">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.RICHMEDIAEXECUTE">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.RICHMEDIAINSTANCE">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.RICHMEDIAPARAMS">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.RICHMEDIAPOSITION">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.RICHMEDIAPRESENTATION">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.RICHMEDIASETTINGS">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.RICHMEDIAWINDOW">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ROLEMAP">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ROOT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ROTATE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ROWS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.RUBY">
            A name
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.RUNLENGTHDECODE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.RV">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.S">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.SATURATION">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.SCHEMA">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.SCREEN">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.SCRIPTS">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.SECT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.SEPARATION">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.SETOCGSTATE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.SETTINGS">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.SHADING">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.SHADINGTYPE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.SHIFT_JIS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.SIG">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.SIGFLAGS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.SIGREF">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.SIMPLEX">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.SINGLEPAGE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.SIZE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.SMASK">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.SORT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.SOUND">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.SPAN">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.SPEED">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.SPLIT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.SQUARE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.SQUIGGLY">
            A name
            @since 2.1.3
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ST">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.STAMP">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.STANDARD">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.STATE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.STDCF">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.STEMV">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.STMF">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.STRF">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.STRIKEOUT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.STRUCTPARENT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.STRUCTPARENTS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.STRUCTTREEROOT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.STYLE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.SUBFILTER">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.SUBJECT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.SUBMITFORM">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.SUBTYPE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.SUPPLEMENT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.SV">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.SW">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.SYMBOL">
            A name of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.T">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TA">
            A name
            @since	2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TABLE">
            A name
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TABS">
            A name
            @since	2.1.5
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TBODY">
            A name
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TD">
            A name
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TEXT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TFOOT">
            A name
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TH">
            A name
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.THEAD">
            A name
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.THUMB">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.THREADS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TI">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TIME">
            A name
            @since	2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TILINGTYPE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TIMES_ROMAN">
            A name of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TIMES_BOLD">
            A name of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TIMES_ITALIC">
            A name of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TIMES_BOLDITALIC">
            A name of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TITLE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TK">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TM">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TOC">
            A name
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TOCI">
            A name
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TOGGLE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TOOLBAR">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TOUNICODE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TP">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TABLEROW">
            A name
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TRANS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TRANSFORMPARAMS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TRANSFORMMETHOD">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TRANSPARENCY">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TRANSPARENT">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TRAPPED">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TRIMBOX">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TRUETYPE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TU">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TWOCOLUMNLEFT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TWOCOLUMNRIGHT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TWOPAGELEFT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TWOPAGERIGHT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TX">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TYPE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TYPE0">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TYPE1">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TYPE3">
            A name of an attribute. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.U">
            A name of an attribute. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.UF">
            A name of an attribute. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.UHC">
            A name of an attribute. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.UNDERLINE">
            A name of an attribute. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.UR">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.UR3">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.URI">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.URL">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.USAGE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.USEATTACHMENTS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.USENONE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.USEOC">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.USEOUTLINES">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.USER">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.USERPROPERTIES">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.USERUNIT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.USETHUMBS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.V">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.V2">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.VALIGN">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.VERISIGN_PPKVS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.VERSION">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.VIDEO">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.VIEW">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.VIEWS">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.VIEWAREA">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.VIEWCLIP">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.VIEWERPREFERENCES">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.VIEWSTATE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.VISIBLEPAGES">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.VOFFSET">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.W">
            A name of an attribute. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.W2">
            A name of an attribute. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.WARICHU">
            A name
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.WC">
            A name of an attribute. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.WIDGET">
            A name of an attribute. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.WIDTH">
            A name of an attribute. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.WIDTHS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.WIN">
            A name of an encoding 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.WIN_ANSI_ENCODING">
            A name of an encoding 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.WINDOW">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.WINDOWED">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.WIPE">
            A name of an encoding 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.WHITEPOINT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.WP">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.WS">
            A name of an encoding 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.X">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.XA">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.XD">
            A name.
            @since 2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.XFA">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.XML">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.XOBJECT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.XSTEP">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.XREF">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.XREFSTM">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.XYZ">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.YSTEP">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ZADB">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ZAPFDINGBATS">
            A name of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ZOOM">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.staticNames">
            map strings to all known static names
            @since 2.1.6
        </member>
        <member name="M:iTextSharp.text.pdf.PdfName.#cctor">
            Use reflection to cache all the static public final names so
            future <code>PdfName</code> additions don't have to be "added twice".
            A bit less efficient (around 50ms spent here on a 2.2ghz machine),
             but Much Less error prone.
            @since 2.1.6
        </member>
        <member name="M:iTextSharp.text.pdf.PdfName.#ctor(System.String)">
            Constructs a new <CODE>PdfName</CODE>. The name length will be checked.
            @param name the new name
        </member>
        <member name="M:iTextSharp.text.pdf.PdfName.#ctor(System.String,System.Boolean)">
            Constructs a new <CODE>PdfName</CODE>.
            @param name the new name
            @param lengthCheck if <CODE>true</CODE> check the lenght validity, if <CODE>false</CODE> the name can
            have any length
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfName.CompareTo(System.Object)" -->
        <member name="M:iTextSharp.text.pdf.PdfName.Equals(System.Object)">
             Indicates whether some other object is "equal to" this one.
            
             @param   obj   the reference object with which to compare.
             @return  <code>true</code> if this object is the same as the obj
                      argument; <code>false</code> otherwise.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfName.GetHashCode">
             Returns a hash code value for the object. This method is
             supported for the benefit of hashtables such as those provided by
             <code>java.util.Hashtable</code>.
            
             @return  a hash code value for this object.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfName.EncodeName(System.String)">
             Encodes a plain name given in the unescaped form "AB CD" into "/AB#20CD".
            
             @param name the name to encode
             @return the encoded name
             @since	2.1.5
        </member>
        <member name="M:iTextSharp.text.pdf.PdfName.DecodeName(System.String)">
            Decodes an escaped name in the form "/AB#20CD" into "AB CD".
            @param name the name to decode
            @return the decoded name
        </member>
        <member name="T:iTextSharp.text.pdf.PdfICCBased">
             A <CODE>PdfICCBased</CODE> defines a ColorSpace
            
             @see        PdfStream
        </member>
        <member name="M:iTextSharp.text.pdf.PdfICCBased.#ctor(iTextSharp.text.pdf.ICC_Profile)">
            Creates an ICC stream.
            @param   profile an ICC profile
        </member>
        <member name="M:iTextSharp.text.pdf.PdfICCBased.#ctor(iTextSharp.text.pdf.ICC_Profile,System.Int32)">
             Creates an ICC stream.
            
             @param   compressionLevel    the compressionLevel
            
             @param   profile an ICC profile
             @since   2.1.3   (replacing the constructor without param compressionLevel)
        </member>
        <member name="T:iTextSharp.text.pdf.PdfEncodings">
            Supports fast encodings for winansi and PDFDocEncoding.
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfEncodings.ConvertToBytes(System.String,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfEncodings.ConvertToBytes(System.Char,System.String)" -->
        <member name="M:iTextSharp.text.pdf.PdfEncodings.IsPdfDocEncoding(System.String)">
            Checks is <CODE>text</CODE> only has PdfDocEncoding characters.
            @param text the <CODE>String</CODE> to test
            @return <CODE>true</CODE> if only PdfDocEncoding characters are present
        </member>
        <member name="F:iTextSharp.text.pdf.PdfEncodings.CRLF_CID_NEWLINE">
            Assumes that '\\n' and '\\r\\n' are the newline sequences. It may not work for
            all CJK encodings. To be used with LoadCmap().
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncodings.ClearCmap(System.String)">
            Clears the CJK cmaps from the cache. If <CODE>name</CODE> is the
            empty string then all the cache is cleared. Calling this method
            has no consequences other than the need to reload the cmap
            if needed.
            @param name the name of the cmap to clear or all the cmaps if the empty string
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncodings.LoadCmap(System.String,System.Byte[][])">
            Loads a CJK cmap to the cache with the option of associating
            sequences to the newline.
            @param name the CJK cmap name
            @param newline the sequences to be replaced bi a newline in the resulting CID. See <CODE>CRLF_CID_NEWLINE</CODE>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfEncodings.ConvertCmap(System.String,System.Byte[])" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfEncodings.ConvertCmap(System.String,System.Byte[],System.Int32,System.Int32)" -->
        <member name="M:iTextSharp.text.pdf.PdfEncodings.AddExtraEncoding(System.String,iTextSharp.text.pdf.IExtraEncoding)">
            Adds an extra encoding.
            @param name the name of the encoding. The encoding recognition is case insensitive
            @param enc the conversion class
        </member>
        <member name="T:iTextSharp.text.pdf.IExtraEncoding">
            Classes implementing this interface can create custom encodings or
            replace existing ones. It is used in the context of <code>PdfEncoding</code>.
            @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="M:iTextSharp.text.pdf.IExtraEncoding.CharToByte(System.String,System.String)">
            Converts an Unicode string to a byte array according to some encoding.
            @param text the Unicode string
            @param encoding the requested encoding. It's mainly of use if the same class
            supports more than one encoding.
            @return the conversion or <CODE>null</CODE> if no conversion is supported
        </member>
        <member name="M:iTextSharp.text.pdf.IExtraEncoding.CharToByte(System.Char,System.String)">
            Converts an Unicode char to a byte array according to some encoding.
            @param char1 the Unicode char
            @param encoding the requested encoding. It's mainly of use if the same class
            supports more than one encoding.
            @return the conversion or <CODE>null</CODE> if no conversion is supported
        </member>
        <member name="M:iTextSharp.text.pdf.IExtraEncoding.ByteToChar(System.Byte[],System.String)">
            Converts a byte array to an Unicode string according to some encoding.
            @param b the input byte array
            @param encoding the requested encoding. It's mainly of use if the same class
            supports more than one encoding.
            @return the conversion or <CODE>null</CODE> if no conversion is supported
        </member>
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.pdf.PdfDate" -->
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.pdf.PdfString" -->
        <member name="F:iTextSharp.text.pdf.PdfString.value">
            The value of this object. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfString.encoding">
            The encoding. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfString.#ctor">
            Constructs an empty <CODE>PdfString</CODE>-object.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfString.#ctor(System.String)">
             Constructs a <CODE>PdfString</CODE>-object.
            
             @param        value        the content of the string
        </member>
        <member name="M:iTextSharp.text.pdf.PdfString.#ctor(System.String,System.String)">
             Constructs a <CODE>PdfString</CODE>-object.
            
             @param        value        the content of the string
             @param        encoding    an encoding
        </member>
        <member name="M:iTextSharp.text.pdf.PdfString.#ctor(System.Byte[])">
             Constructs a <CODE>PdfString</CODE>-object.
            
             @param        bytes    an array of <CODE>byte</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfString.ToPdf(iTextSharp.text.pdf.PdfWriter,System.IO.Stream)">
             Returns the PDF representation of this <CODE>PdfString</CODE>.
            
             @return        an array of <CODE>byte</CODE>s
        </member>
        <member name="M:iTextSharp.text.pdf.PdfString.ToString">
             Returns the <CODE>string</CODE> value of the <CODE>PdfString</CODE>-object.
            
             @return        a <CODE>string</CODE>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfString.Encoding">
             Gets the encoding of this string.
            
             @return        a <CODE>string</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDate.#ctor(System.DateTime)">
             Constructs a <CODE>PdfDate</CODE>-object.
            
             @param       d           the date that has to be turned into a <CODE>PdfDate</CODE>-object
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDate.#ctor">
            Constructs a <CODE>PdfDate</CODE>-object, representing the current day and time.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDate.SetLength(System.Int32,System.Int32)">
             Adds a number of leading zeros to a given <CODE>string</CODE> in order to get a <CODE>string</CODE>
             of a certain length.
            
             @param       i           a given number
             @param       length      the length of the resulting <CODE>string</CODE>
             @return      the resulting <CODE>string</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDate.GetW3CDate">
            Gives the W3C format of the PdfDate.
            @return a formatted date
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDate.GetW3CDate(System.String)">
            Gives the W3C format of the PdfDate.
            @param d the date in the format D:YYYYMMDDHHmmSSOHH'mm'
            @return a formatted date
        </member>
        <member name="T:iTextSharp.text.pdf.PdfCopyForms">
            Allows you to add one (or more) existing PDF document(s) to
            create a new PDF and add the form of another PDF document to
            this new PDF.
            @since 2.1.5
        </member>
        <member name="F:iTextSharp.text.pdf.PdfCopyForms.fc">
            The class with the actual implementations. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyForms.#ctor(System.IO.Stream)">
            Creates a new instance.
            @param os the output stream
            @throws DocumentException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyForms.AddDocument(iTextSharp.text.pdf.PdfReader)">
            Concatenates a PDF document.
            @param reader the PDF document
            @throws DocumentException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyForms.AddDocument(iTextSharp.text.pdf.PdfReader,System.Collections.ArrayList)">
            Concatenates a PDF document selecting the pages to keep. The pages are described as a
            <CODE>List</CODE> of <CODE>Integer</CODE>. The page ordering can be changed but
            no page repetitions are allowed.
            @param reader the PDF document
            @param pagesToKeep the pages to keep
            @throws DocumentException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyForms.AddDocument(iTextSharp.text.pdf.PdfReader,System.String)">
            Concatenates a PDF document selecting the pages to keep. The pages are described as
            ranges. The page ordering can be changed but
            no page repetitions are allowed.
            @param reader the PDF document
            @param ranges the comma separated ranges as described in {@link SequenceList}
            @throws DocumentException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyForms.CopyDocumentFields(iTextSharp.text.pdf.PdfReader)">
            Copies the form fields of this PDFDocument onto the PDF-Document which was added
             @param reader the PDF document
             @throws DocumentException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyForms.SetEncryption(System.Byte[],System.Byte[],System.Int32,System.Boolean)">
            Sets the encryption options for this document. The userPassword and the
             ownerPassword can be null or have zero length. In this case the ownerPassword
             is replaced by a random string. The open permissions for the document can be
             AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
             AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
             The permissions can be combined by ORing them.
            @param userPassword the user password. Can be null or empty
            @param ownerPassword the owner password. Can be null or empty
            @param permissions the user permissions
            @param strength128Bits <code>true</code> for 128 bit key length, <code>false</code> for 40 bit key length
            @throws DocumentException if the document is already open
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyForms.SetEncryption(System.Boolean,System.String,System.String,System.Int32)">
            Sets the encryption options for this document. The userPassword and the
             ownerPassword can be null or have zero length. In this case the ownerPassword
             is replaced by a random string. The open permissions for the document can be
             AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
             AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
             The permissions can be combined by ORing them.
            @param strength true for 128 bit key length. false for 40 bit key length
            @param userPassword the user password. Can be null or empty
            @param ownerPassword the owner password. Can be null or empty
            @param permissions the user permissions
            @throws DocumentException if the document is already open
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyForms.Close">
            Closes the output document.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyForms.Open">
            Opens the document. This is usually not needed as addDocument() will do it
            automatically.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyForms.AddJavaScript(System.String)">
            Adds JavaScript to the global document
            @param js the JavaScript
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfCopyForms.SetFullCompression" -->
        <member name="M:iTextSharp.text.pdf.PdfCopyForms.SetEncryption(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            @see com.lowagie.text.pdf.interfaces.PdfEncryptionSettings#setEncryption(byte[], byte[], int, int)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyForms.AddViewerPreference(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfObject)">
            @see com.lowagie.text.pdf.interfaces.PdfViewerPreferences#addViewerPreference(com.lowagie.text.pdf.PdfName, com.lowagie.text.pdf.PdfObject)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyForms.SetEncryption(Org.BouncyCastle.X509.X509Certificate[],System.Int32[],System.Int32)">
            @see com.lowagie.text.pdf.interfaces.PdfEncryptionSettings#setEncryption(java.security.cert.Certificate[], int[], int)
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCopyForms.Outlines">
            Sets the bookmarks. The list structure is defined in
            <CODE>SimpleBookmark#</CODE>.
            @param outlines the bookmarks or <CODE>null</CODE> to remove any
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCopyForms.Writer">
            Gets the underlying PdfWriter.
            @return the underlying PdfWriter
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCopyForms.FullCompression">
            Gets the 1.5 compression status.
            @return <code>true</code> if the 1.5 compression is on
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCopyForms.ViewerPreferences">
            @see com.lowagie.text.pdf.interfaces.PdfViewerPreferences#setViewerPreferences(int)
        </member>
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.pdf.hyphenation.Hyphenation" -->
        <member name="F:iTextSharp.text.pdf.hyphenation.Hyphenation.len">
            number of hyphenation points in word
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.Hyphenation.#ctor(System.String,System.Int32[])">
            rawWord as made of alternating strings and {@link Hyphen Hyphen}
            instances
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.Hyphenation.GetPreHyphenText(System.Int32)">
            @return the pre-break text, not including the hyphen character
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.Hyphenation.GetPostHyphenText(System.Int32)">
            @return the post-break text
        </member>
        <member name="P:iTextSharp.text.pdf.hyphenation.Hyphenation.Length">
            @return the number of hyphenation points in the word
        </member>
        <member name="P:iTextSharp.text.pdf.hyphenation.Hyphenation.HyphenationPoints">
            @return the hyphenation points
        </member>
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.pdf.Barcode128" -->
        <member name="F:iTextSharp.text.pdf.Barcode128.CODE_AB_TO_C">
            The charset code change.
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode128.CODE_AC_TO_B">
            The charset code change.
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode128.CODE_BC_TO_A">
            The charset code change.
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode128.FNC1_INDEX">
            The code for UCC/EAN-128.
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode128.START_A">
            The start code.
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode128.START_B">
            The start code.
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode128.START_C">
            The start code.
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode128.BARS">
            The bars to generate the code.
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode128.BARS_STOP">
            The stop bars.
        </member>
        <member name="M:iTextSharp.text.pdf.Barcode128.#ctor">
            Creates new Barcode128 
        </member>
        <member name="M:iTextSharp.text.pdf.Barcode128.RemoveFNC1(System.String)">
            Removes the FNC1 codes in the text.
            @param code the text to clean
            @return the cleaned text
        </member>
        <member name="M:iTextSharp.text.pdf.Barcode128.GetHumanReadableUCCEAN(System.String)">
            Gets the human readable text of a sequence of AI.
            @param code the text
            @return the human readable text
        </member>
        <member name="M:iTextSharp.text.pdf.Barcode128.IsNextDigits(System.String,System.Int32,System.Int32)">
            Returns <CODE>true</CODE> if the next <CODE>numDigits</CODE>
            starting from index <CODE>textIndex</CODE> are numeric skipping any FNC1.
            @param text the text to check
            @param textIndex where to check from
            @param numDigits the number of digits to check
            @return the check result
        </member>
        <member name="M:iTextSharp.text.pdf.Barcode128.GetPackedRawDigits(System.String,System.Int32,System.Int32)">
            Packs the digits for charset C also considering FNC1. It assumes that all the parameters
            are valid.
            @param text the text to pack
            @param textIndex where to pack from
            @param numDigits the number of digits to pack. It is always an even number
            @return the packed digits, two digits per character
        </member>
        <member name="M:iTextSharp.text.pdf.Barcode128.GetRawText(System.String,System.Boolean)">
            Converts the human readable text to the characters needed to
            create a barcode. Some optimization is done to get the shortest code.
            @param text the text to convert
            @param ucc <CODE>true</CODE> if it is an UCC/EAN-128. In this case
            the character FNC1 is added
            @return the code ready to be fed to GetBarsCode128Raw()
        </member>
        <member name="M:iTextSharp.text.pdf.Barcode128.GetBarsCode128Raw(System.String)">
            Generates the bars. The input has the actual barcodes, not
            the human readable text.
            @param text the barcode
            @return the bars
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.Barcode128.PlaceBarcode(iTextSharp.text.pdf.PdfContentByte,iTextSharp.text.Color,iTextSharp.text.Color)" -->
        <member name="P:iTextSharp.text.pdf.Barcode128.BarcodeSize">
            Gets the maximum area that the barcode and the text, if
            any, will occupy. The lower left corner is always (0, 0).
            @return the size the barcode occupies.
        </member>
        <!-- Badly formed XML comment ignored for member "P:iTextSharp.text.pdf.Barcode128.Code" -->
        <member name="T:iTextSharp.text.pdf.BadPdfFormatException">
             Signals that a bad PDF format has been used to construct a <CODE>PdfObject</CODE>.
            
             @see        PdfException
             @see        PdfBoolean
             @see        PdfNumber
             @see        PdfString
             @see        PdfName
             @see        PdfDictionary
             @see        PdfFont
        </member>
        <member name="T:iTextSharp.text.ImgWMF">
             An ImgWMF is the representation of a windows metafile
             that has to be inserted into the document
            
             @see        Element
             @see        Image
             @see        Gif
             @see        Png
            <summary>
            An ImgWMF is the representation of a windows metafile
            that has to be inserted into the document
            </summary>
        </member>
        <member name="M:iTextSharp.text.ImgWMF.#ctor(iTextSharp.text.Image)">
            <summary>
            Constructs an ImgWMF-object
            </summary>
            <param name="image">a Image</param>
        </member>
        <member name="M:iTextSharp.text.ImgWMF.#ctor(System.Uri)">
            <summary>
            Constructs an ImgWMF-object, using an url.
            </summary>
            <param name="url">the URL where the image can be found</param>
        </member>
        <member name="M:iTextSharp.text.ImgWMF.#ctor(System.String)">
            <summary>
            Constructs an ImgWMF-object, using a filename.
            </summary>
            <param name="filename">a string-representation of the file that contains the image.</param>
        </member>
        <member name="M:iTextSharp.text.ImgWMF.#ctor(System.Byte[])">
            <summary>
            Constructs an ImgWMF-object from memory.
            </summary>
            <param name="img">the memory image</param>
        </member>
        <member name="M:iTextSharp.text.ImgWMF.ProcessParameters">
            <summary>
            This method checks if the image is a valid WMF and processes some parameters.
            </summary>
        </member>
        <member name="M:iTextSharp.text.ImgWMF.ReadWMF(iTextSharp.text.pdf.PdfTemplate)">
            <summary>
            Reads the WMF into a template.
            </summary>
            <param name="template">the template to read to</param>
        </member>
        <member name="M:iTextSharp.text.html.simpleparser.ChainedProperties.#ctor">
            Creates a new instance of ChainedProperties 
        </member>
        <member name="T:iTextSharp.text.Header">
            <summary>
            This is an Element that contains
            some userdefined meta information about the document.
            </summary>
            <example>
            <code>
            <strong>Header header = new Header("inspired by", "William Shakespeare");</strong>
            </code>
            </example>
        </member>
        <member name="F:iTextSharp.text.Header.name">
            <summary> This is the content of this chunk of text. </summary>
        </member>
        <member name="M:iTextSharp.text.Header.#ctor(System.String,System.String)">
            <summary>
            Constructs a Header.
            </summary>
            <param name="name">the name of the meta-information</param>
            <param name="content">the content</param>
        </member>
        <member name="P:iTextSharp.text.Header.Name">
            <summary>
            Returns the name of the meta information.
            </summary>
            <value>a string</value>
        </member>
        <member name="T:iTextSharp.text.factories.RomanNumberFactory">
            This class can produce String combinations representing a roman number.
        </member>
        <member name="F:iTextSharp.text.factories.RomanNumberFactory.roman">
            Array with Roman digits.
        </member>
        <member name="M:iTextSharp.text.factories.RomanNumberFactory.GetString(System.Int32)">
            Changes an int into a lower case roman number.
            @param index the original number
            @return the roman number (lower case)
        </member>
        <member name="M:iTextSharp.text.factories.RomanNumberFactory.GetLowerCaseString(System.Int32)">
            Changes an int into a lower case roman number.
            @param index the original number
            @return the roman number (lower case)
        </member>
        <member name="M:iTextSharp.text.factories.RomanNumberFactory.GetUpperCaseString(System.Int32)">
            Changes an int into an upper case roman number.
            @param index the original number
            @return the roman number (lower case)
        </member>
        <member name="M:iTextSharp.text.factories.RomanNumberFactory.GetString(System.Int32,System.Boolean)">
            Changes an int into a roman number.
            @param index the original number
            @return the roman number (lower case)
        </member>
        <member name="T:iTextSharp.text.factories.RomanNumberFactory.RomanDigit">
            Helper class for Roman Digits
        </member>
        <member name="F:iTextSharp.text.factories.RomanNumberFactory.RomanDigit.digit">
            part of a roman number 
        </member>
        <member name="F:iTextSharp.text.factories.RomanNumberFactory.RomanDigit.value">
            value of the roman digit 
        </member>
        <member name="F:iTextSharp.text.factories.RomanNumberFactory.RomanDigit.pre">
            can the digit be used as a prefix 
        </member>
        <member name="M:iTextSharp.text.factories.RomanNumberFactory.RomanDigit.#ctor(System.Char,System.Int32,System.Boolean)">
            Constructs a roman digit
            @param digit the roman digit
            @param value the value
            @param pre can it be used as a prefix
        </member>
        <member name="T:iTextSharp.text.Cell">
            <summary>
            A Cell is a Rectangle containing other Elements.
            </summary>
            <remarks>
            A Cell is a Rectangle containing other
            Elements.
            <p/>
            A Cell must be added to a Table.
            The Table will place the Cell in
            a Row.
            </remarks>
            <example>
            <code>
            Table table = new Table(3);
            table.SetBorderWidth(1);
            table.SetBorderColor(new Color(0, 0, 255));
            table.SetCellpadding(5);
            table.SetCellspacing(5);
            <strong>Cell cell = new Cell("header");
            cell.SetHeader(true);
            cell.SetColspan(3);</strong>
            table.AddCell(cell);
            <strong>cell = new Cell("example cell with colspan 1 and rowspan 2");
            cell.SetRowspan(2);
            cell.SetBorderColor(new Color(255, 0, 0));</strong>
            table.AddCell(cell);
            table.AddCell("1.1");
            table.AddCell("2.1");
            table.AddCell("1.2");
            table.AddCell("2.2");
            </code>
            </example>
            <seealso cref="T:iTextSharp.text.Rectangle"/>
            <seealso cref="T:iTextSharp.text.Element"/>
            <seealso cref="T:iTextSharp.text.Table"/>
            <seealso cref="T:iTextSharp.text.Row"/>
        </member>
        <member name="F:iTextSharp.text.Cell.arrayList">
            <summary> This is the ArrayList of Elements. </summary>
        </member>
        <member name="F:iTextSharp.text.Cell.horizontalAlignment">
            <summary> This is the horizontal Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Cell.verticalAlignment">
            <summary> This is the vertical Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Cell.width">
            <summary> This is the vertical Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Cell.colspan">
            <summary> This is the colspan. </summary>
        </member>
        <member name="F:iTextSharp.text.Cell.rowspan">
            <summary> This is the rowspan. </summary>
        </member>
        <member name="F:iTextSharp.text.Cell.leading">
            <summary> This is the leading. </summary>
        </member>
        <member name="F:iTextSharp.text.Cell.header">
            <summary> Is this Cell a header? </summary>
        </member>
        <member name="F:iTextSharp.text.Cell.useAscender">
            <summary>
            Indicates that the largest ascender height should be used to determine the
            height of the first line.  Note that this only has an effect when rendered
            to PDF.  Setting this to true can help with vertical alignment problems.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Cell.useDescender">
            <summary>
            Indicates that the largest descender height should be added to the height of
            the last line (so characters like y don't dip into the border).   Note that
            this only has an effect when rendered to PDF.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Cell.useBorderPadding">
            <summary>
            Adjusts the cell contents to compensate for border widths.  Note that
            this only has an effect when rendered to PDF.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Cell.noWrap">
            <summary> Will the element have to be wrapped? </summary>
        </member>
        <member name="M:iTextSharp.text.Cell.#ctor">
            Constructs an empty Cell.
            <summary>
            Constructs an empty Cell.
            </summary>
            <overloads>
            Has five overloads.
            </overloads>
        </member>
        <member name="M:iTextSharp.text.Cell.#ctor(System.Boolean)">
            <summary>
            Constructs an empty Cell (for internal use only).
            </summary>
            <param name="dummy">a dummy value</param>
        </member>
        <member name="M:iTextSharp.text.Cell.#ctor(System.String)">
            <summary>
            Constructs a Cell with a certain content.
            </summary>
            <remarks>
            The string will be converted into a Paragraph.
            </remarks>
            <param name="content">a string</param>
        </member>
        <member name="M:iTextSharp.text.Cell.#ctor(iTextSharp.text.IElement)">
            <summary>
            Constructs a Cell with a certain Element.
            </summary>
            <remarks>
            if the element is a ListItem, Row or
            Cell, an exception will be thrown.
            </remarks>
            <param name="element">the element</param>
        </member>
        <member name="M:iTextSharp.text.Cell.Process(iTextSharp.text.IElementListener)">
            <summary>
            Processes the element by adding it (or the different parts) to an
            IElementListener.
            </summary>
            <param name="listener">an IElementListener</param>
            <returns>true if the element was processed successfully</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.Cell.AddElement(iTextSharp.text.IElement)" -->
        <member name="M:iTextSharp.text.Cell.Add(System.Object)">
            <summary>
            Add an Object to this cell.
            </summary>
            <param name="o">the object to add</param>
            <returns>always true</returns>
        </member>
        <member name="M:iTextSharp.text.Cell.SetHorizontalAlignment(System.String)">
            <summary>
            Sets the alignment of this cell.
            </summary>
            <param name="alignment">the new alignment as a string</param>
        </member>
        <member name="M:iTextSharp.text.Cell.SetVerticalAlignment(System.String)">
            <summary>
            Sets the alignment of this paragraph.
            </summary>
            <param name="alignment">the new alignment as a string</param>
        </member>
        <member name="M:iTextSharp.text.Cell.SetWidth(System.String)">
             Sets the width.
             It can be an absolute value "100" or a percentage "20%"
            
             @param   value   the new value
        </member>
        <member name="M:iTextSharp.text.Cell.GetWidthAsString">
             Gets the width as a String.
            
             @return  a value
        </member>
        <member name="M:iTextSharp.text.Cell.IsEmpty">
            <summary>
            Checks if the Cell is empty.
            </summary>
            <returns>false if there are non-empty Elements in the Cell.</returns>
        </member>
        <member name="M:iTextSharp.text.Cell.Fill">
            <summary>
            Makes sure there is at least 1 object in the Cell.
            Otherwise it might not be shown in the table.
            </summary>
        </member>
        <member name="M:iTextSharp.text.Cell.IsTable">
            <summary>
            Checks if the Cell is empty.
            </summary>
            <returns>false if there are non-empty Elements in the Cell.</returns>
        </member>
        <member name="M:iTextSharp.text.Cell.Clear">
            <summary>
            Clears all the Elements of this Cell.
            </summary>
        </member>
        <member name="M:iTextSharp.text.Cell.GetTop(System.Int32)">
            <summary>
            This method throws an Exception.
            </summary>
            <param name="margin">new value</param>
            <returns>none</returns>
        </member>
        <member name="M:iTextSharp.text.Cell.GetBottom(System.Int32)">
            <summary>
            This method throws an Exception.
            </summary>
            <param name="margin">new value</param>
            <returns>none</returns>
        </member>
        <member name="M:iTextSharp.text.Cell.GetLeft(System.Int32)">
            <summary>
            This method throws an Exception.
            </summary>
            <param name="margin">new value</param>
            <returns>none</returns>
        </member>
        <member name="M:iTextSharp.text.Cell.GetRight(System.Int32)">
            <summary>
            This method throws an Exception.
            </summary>
            <param name="margin">new value</param>
            <returns>none</returns>
        </member>
        <member name="M:iTextSharp.text.Cell.IsTag(System.String)">
            <summary>
            Checks if a given tag corresponds with this object.
            </summary>
            <param name="tag">the given tag</param>
            <returns>true if the tag corresponds</returns>
        </member>
        <member name="F:iTextSharp.text.Cell.groupChange">
            <summary>Does this <CODE>Cell</CODE> force a group change? </summary>
        </member>
        <member name="F:iTextSharp.text.Cell.maxLines">
            <summary>
            Maximum number of lines allowed in the cell.  
            The default value of this property is not to limit the maximum number of lines
            (contributed by dperezcar@fcc.es)
            </summary>
        </member>
        <member name="F:iTextSharp.text.Cell.showTruncation">
            <summary>
            If a truncation happens due to the {@link #maxLines} property, then this text will 
            be added to indicate a truncation has happened.
            Default value is null, and means avoiding marking the truncation.  
            A useful value of this property could be e.g. "..."
            (contributed by dperezcar@fcc.es)
            </summary>
        </member>
        <member name="M:iTextSharp.text.Cell.CreatePdfPCell">
            Creates a PdfPCell based on this Cell object.
            @return a PdfPCell
            @throws BadElementException
        </member>
        <member name="P:iTextSharp.text.Cell.Type">
            <summary>
            Gets the type of the text element.
            </summary>
            <value>a type</value>
        </member>
        <member name="P:iTextSharp.text.Cell.Chunks">
            <summary>
            Gets all the chunks in this element.
            </summary>
            <value>an ArrayList</value>
        </member>
        <member name="P:iTextSharp.text.Cell.Width">
            <summary>
            Sets the width.
            </summary>
            <value>the new value</value>
        </member>
        <member name="P:iTextSharp.text.Cell.Size">
            <summary>
            Gets the number of Elements in the Cell.
            </summary>
            <value>a size</value>
        </member>
        <member name="P:iTextSharp.text.Cell.Elements">
            <summary>
            Gets Elements.
            </summary>
            <value>an ArrayList</value>
        </member>
        <member name="P:iTextSharp.text.Cell.HorizontalAlignment">
            <summary>
            Gets/Sets the horizontal Element.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Cell.VerticalAlignment">
            <summary>
            Gets/sets the vertical Element.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Cell.Colspan">
             Gets the colspan.
            
             @return    a value
            <summary>
            Gets/sets the colspan.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Cell.Rowspan">
            <summary>
            Gets/sets the rowspan.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Cell.Leading">
            <summary>
            Gets/sets the leading.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Cell.Header">
            <summary>
            Gets/sets header
            </summary>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Cell.NoWrap">
             Get nowrap.
            
             @return    a value
            <summary>
            Get/set nowrap.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Cell.Top">
            <summary>
            This property throws an Exception.
            </summary>
            <value>none</value>
        </member>
        <member name="P:iTextSharp.text.Cell.Bottom">
            <summary>
            This property throws an Exception.
            </summary>
            <value>none</value>
        </member>
        <member name="P:iTextSharp.text.Cell.Left">
            <summary>
            This property throws an Exception.
            </summary>
            <value>none</value>
        </member>
        <member name="P:iTextSharp.text.Cell.Right">
            <summary>
            This property throws an Exception.
            </summary>
            <value>none</value>
        </member>
        <member name="P:iTextSharp.text.Cell.GroupChange">
            <summary>
            Does this <CODE>Cell</CODE> force a group change?
            </summary>
        </member>
        <member name="P:iTextSharp.text.Cell.MaxLines">
            <summary>
            get/set maxLines value
            </summary>
        </member>
        <member name="P:iTextSharp.text.Cell.ShowTruncation">
            <summary>
            get/set showTruncation value
            </summary>
        </member>
        <member name="P:iTextSharp.text.Cell.UseAscender">
            <summary>
            get/set useAscender value
            </summary>
        </member>
        <member name="P:iTextSharp.text.Cell.UseDescender">
            <summary>
            get/set useDescender value
            </summary>
        </member>
        <member name="P:iTextSharp.text.Cell.UseBorderPadding">
            <summary>
            get/set useBorderPadding value
            </summary>
        </member>
        <member name="T:iTextSharp.text.xml.xmp.XmpMMSchema">
            An implementation of an XmpSchema.
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpMMSchema.DEFAULT_XPATH_ID">
            default namespace identifier
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpMMSchema.DEFAULT_XPATH_URI">
            default namespace uri
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpMMSchema.DERIVEDFROM">
            A reference to the original document from which this one is derived. It is a minimal reference; missing components can be assumed to be unchanged. For example, a new version might only need to specify the instance ID and version number of the previous version, or a rendition might only need to specify the instance ID and rendition class of the original. 
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpMMSchema.DOCUMENTID">
            The common identifier for all versions and renditions of a document. 
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpMMSchema.HISTORY">
            An ordered array of high-level user actions that resulted in this resource. It is intended to give human readers a general indication of the steps taken to make the changes from the previous version to this one. The list should be at an abstract level; it is not intended to be an exhaustive keystroke or other detailed history. 
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpMMSchema.MANAGEDFROM">
            A reference to the document as it was prior to becoming managed. It is set when a managed document is introduced to an asset management system that does not currently own it. It may or may not include references to different management systems. 
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpMMSchema.MANAGER">
            The name of the asset management system that manages this resource. 
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpMMSchema.MANAGETO">
            A URI identifying the managed resource to the asset management system; the presence of this property is the formal indication that this resource is managed. The form and content of this URI is private to the asset management system. 
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpMMSchema.MANAGEUI">
            A URI that can be used to access information about the managed resource through a web browser. It might require a custom browser plugin. 
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpMMSchema.MANAGERVARIANT">
            Specifies a particular variant of the asset management system. The format of this property is private to the specific asset management system. 
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpMMSchema.RENDITIONCLASS">
            The rendition class name for this resource.
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpMMSchema.RENDITIONPARAMS">
             Can be used to provide additional rendition parameters that are too complex or verbose to encode in xmpMM: RenditionClass. 
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpMMSchema.VERSIONID">
            The document version identifier for this resource. 
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpMMSchema.VERSIONS">
            The version history associated with this resource.
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpMMSchema.#ctor">
            @throws IOException
        </member>
        <member name="T:iTextSharp.text.rtf.text.RtfChunk">
            The RtfChunk contains one piece of text. The smallest text element available
            in iText.
            
            @version $Version:$
            @author Mark Hall (Mark.Hall@mail.room3b.eu)
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfChunk.FONT_SUBSCRIPT">
            Constant for the subscript flag
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfChunk.FONT_SUPERSCRIPT">
            Constant for the superscript flag
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfChunk.FONT_END_SUPER_SUBSCRIPT">
            Constant for the end of sub / superscript flag
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfChunk.BACKGROUND_COLOR">
            Constant for background colour.
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfChunk.font">
            The font of this RtfChunk
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfChunk.content">
            The actual content of this RtfChunk
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfChunk.softLineBreaks">
            Whether to use soft line breaks instead of hard ones.
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfChunk.superSubScript">
            The super / subscript of this RtfChunk
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfChunk.background">
            An optional background colour.
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfChunk.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.Chunk)">
            Constructs a RtfChunk based on the content of a Chunk
            
            @param doc The RtfDocument that this Chunk belongs to
            @param chunk The Chunk that this RtfChunk is based on
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfChunk.WriteContent(System.IO.Stream)">
            Writes the content of this RtfChunk. First the font information
            is written, then the content, and then more font information
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfChunk.SetRtfDocument(iTextSharp.text.rtf.document.RtfDocument)">
            Sets the RtfDocument this RtfChunk belongs to.
            
            @param doc The RtfDocument to use
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfChunk.SetSoftLineBreaks(System.Boolean)">
            Sets whether to use soft line breaks instead of default hard ones.
            
            @param softLineBreaks whether to use soft line breaks instead of default hard ones.
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfChunk.GetSoftLineBreaks">
            Gets whether to use soft line breaks instead of default hard ones.
            
            @return whether to use soft line breaks instead of default hard ones.
        </member>
        <member name="T:iTextSharp.text.rtf.table.RtfBorderGroup">
            The RtfBorderGroup represents a collection of RtfBorders to use in a RtfCell
            or RtfTable.
            
            @version $Version:$
            @author Mark Hall (Mark.Hall@mail.room3b.eu)
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorderGroup.borderType">
            The type of borders this RtfBorderGroup contains.
            RtfBorder.ROW_BORDER or RtfBorder.CELL_BORDER
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorderGroup.borders">
            The borders in this RtfBorderGroup
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfBorderGroup.#ctor">
            Constructs an empty RtfBorderGroup.
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfBorderGroup.#ctor(System.Int32,System.Int32,System.Single,iTextSharp.text.Color)">
            Constructs a RtfBorderGroup with on border style for multiple borders.
            
            @param bordersToAdd The borders to add (Rectangle.LEFT, Rectangle.RIGHT, Rectangle.TOP, Rectangle.BOTTOM, Rectangle.BOX)
            @param borderStyle The style of border to add (from RtfBorder)
            @param borderWidth The border width to use
            @param borderColor The border color to use
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfBorderGroup.#ctor(iTextSharp.text.rtf.document.RtfDocument,System.Int32,iTextSharp.text.rtf.table.RtfBorderGroup)">
            Constructs a RtfBorderGroup based on another RtfBorderGroup.
            
            @param doc The RtfDocument this RtfBorderGroup belongs to
            @param borderType The type of borders this RtfBorderGroup contains
            @param borderGroup The RtfBorderGroup to use as a base
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfBorderGroup.#ctor(iTextSharp.text.rtf.document.RtfDocument,System.Int32,System.Int32,System.Single,iTextSharp.text.Color)">
            Constructs a RtfBorderGroup with certain borders
            
            @param doc The RtfDocument this RtfBorderGroup belongs to
            @param borderType The type of borders this RtfBorderGroup contains
            @param bordersToUse The borders to add (Rectangle.LEFT, Rectangle.RIGHT, Rectangle.TOP, Rectangle.BOTTOM, Rectangle.BOX)
            @param borderWidth The border width to use
            @param borderColor The border color to use
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfBorderGroup.SetBorder(System.Int32,System.Int32,System.Single,iTextSharp.text.Color)">
            Sets a border in the Hashtable of borders
            
            @param borderPosition The position of this RtfBorder
            @param borderStyle The type of borders this RtfBorderGroup contains
            @param borderWidth The border width to use
            @param borderColor The border color to use
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfBorderGroup.AddBorder(System.Int32,System.Int32,System.Single,iTextSharp.text.Color)">
            Adds borders to the RtfBorderGroup
            
            @param bordersToAdd The borders to add (Rectangle.LEFT, Rectangle.RIGHT, Rectangle.TOP, Rectangle.BOTTOM, Rectangle.BOX)
            @param borderStyle The style of border to add (from RtfBorder)
            @param borderWidth The border width to use
            @param borderColor The border color to use
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfBorderGroup.RemoveBorder(System.Int32)">
            Removes borders from the list of borders
            
            @param bordersToRemove The borders to remove (from Rectangle)
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfBorderGroup.WriteContent(System.IO.Stream)">
            Writes the borders of this RtfBorderGroup
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfBorderGroup.GetBorders">
            Gets the RtfBorders of this RtfBorderGroup
            
            @return The RtfBorders of this RtfBorderGroup
        </member>
        <member name="T:iTextSharp.text.rtf.style.RtfFontList">
             The RtfFontList stores the list of fonts used in the rtf document. It also
             has methods for writing this list to the document
            
             Version: $Id: RtfFontList.cs,v 1.6 2008/05/16 19:31:12 psoares33 Exp $
             @author Mark Hall (Mark.Hall@mail.room3b.eu)
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFontList.DEFAULT_FONT">
            Constant for the default font
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFontList.FONT_TABLE">
            Constant for the font table
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFontList.FONT_NUMBER">
            Constant for the font number
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFontList.fontList">
            The list of fonts
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFontList.#ctor(iTextSharp.text.rtf.document.RtfDocument)">
             Creates a RtfFontList
            
             @param doc The RtfDocument this RtfFontList belongs to
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFontList.WriteContent(System.IO.Stream)">
            unused
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFontList.GetFontNumber(iTextSharp.text.rtf.style.RtfFont)">
             Gets the index of the font in the list of fonts. If the font does not
             exist in the list, it is added.
            
             @param font The font to get the id for
             @return The index of the font
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFontList.WriteDefinition(System.IO.Stream)">
            Writes the definition of the font list
        </member>
        <member name="T:iTextSharp.text.rtf.style.RtfColorList">
            The RtfColorList stores all colours that appear in the document. Black
            and White are always added
            
            @version $Version:$
            @author Mark Hall (Mark.Hall@mail.room3b.eu)
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfColorList.COLOR_TABLE">
            Constant for the beginning of the colour table
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfColorList.colorList">
            ArrayList containing all colours of this RtfColorList
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfColorList.#ctor(iTextSharp.text.rtf.document.RtfDocument)">
            Constructs a new RtfColorList for the RtfDocument. Will add the default
            black and white colours.
            
            @param doc The RtfDocument this RtfColorList belongs to
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfColorList.GetColorNumber(iTextSharp.text.rtf.style.RtfColor)">
            Returns the index of the given RtfColor in the colour list. If the RtfColor
            is not in the list of colours, then it is added.
            
            @param color The RtfColor for which to get the index
            @return The index of the RtfColor
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfColorList.WriteContent(System.IO.Stream)">
            unused
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfColorList.WriteDefinition(System.IO.Stream)">
            Write the definition part of the colour list. Calls the writeDefinition
            methods of the RtfColors in the colour list. 
        </member>
        <member name="T:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup">
            The RtfHeaderFooterGroup holds 0 - 3 RtfHeaderFooters that create a group
            of headers or footers.
            
            @version $Version:$
            @author Mark Hall (Mark.Hall@mail.room3b.eu)
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.MODE_NONE">
            This RtfHeaderFooterGroup contains no RtfHeaderFooter objects
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.MODE_SINGLE">
            This RtfHeaderFooterGroup contains one RtfHeaderFooter object
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.MODE_MULTIPLE">
            This RtfHeaderFooterGroup contains two or three RtfHeaderFooter objects
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.mode">
            The current mode of this RtfHeaderFooterGroup. Defaults to MODE_NONE
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.type">
            The current type of this RtfHeaderFooterGroup. Defaults to RtfHeaderFooter.TYPE_HEADER
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.headerAll">
            The RtfHeaderFooter for all pages
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.headerFirst">
            The RtfHeaderFooter for the first page
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.headerLeft">
            The RtfHeaderFooter for the left hand pages
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.headerRight">
            The RtfHeaderFooter for the right hand pages
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.document">
            The RtfDocument this RtfHeaderFooterGroup belongs to
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.#ctor">
             Constructs a RtfHeaderGroup to which you add headers/footers using 
             via the setHeaderFooter method.
            
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.#ctor(iTextSharp.text.rtf.document.RtfDocument,System.Int32)">
            Constructs a certain type of RtfHeaderFooterGroup. RtfHeaderFooter.TYPE_HEADER
            and RtfHeaderFooter.TYPE_FOOTER are valid values for type.
            
            @param doc The RtfDocument this RtfHeaderFooter belongs to
            @param type The type of RtfHeaderFooterGroup to create
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup,System.Int32)">
            Constructs a RtfHeaderFooterGroup by copying the content of the original
            RtfHeaderFooterGroup
            
            @param doc The RtfDocument this RtfHeaderFooter belongs to
            @param headerFooter The RtfHeaderFooterGroup to copy
            @param type The type of RtfHeaderFooterGroup to create
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.rtf.headerfooter.RtfHeaderFooter,System.Int32)">
            Constructs a RtfHeaderFooterGroup for a certain RtfHeaderFooter.
            
            @param doc The RtfDocument this RtfHeaderFooter belongs to
            @param headerFooter The RtfHeaderFooter to display
            @param type The typ of RtfHeaderFooterGroup to create
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.HeaderFooter,System.Int32)">
            Constructs a RtfHeaderGroup for a certain HeaderFooter
            
            @param doc The RtfDocument this RtfHeaderFooter belongs to
            @param headerFooter The HeaderFooter to display
            @param type The typ of RtfHeaderFooterGroup to create
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.SetRtfDocument(iTextSharp.text.rtf.document.RtfDocument)">
            Sets the RtfDocument this RtfElement belongs to
            
            @param doc The RtfDocument to use
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.WriteContent(System.IO.Stream)">
            Write the content of this RtfHeaderFooterGroup.
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.SetHeaderFooter(iTextSharp.text.rtf.headerfooter.RtfHeaderFooter,System.Int32)">
            Set a RtfHeaderFooter to be displayed at a certain position
            
            @param headerFooter The RtfHeaderFooter to display
            @param displayAt The display location to use
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.SetHeaderFooter(iTextSharp.text.HeaderFooter,System.Int32)">
            Set a HeaderFooter to be displayed at a certain position
            
            @param headerFooter The HeaderFooter to set
            @param displayAt The display location to use
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.SetHasTitlePage">
            Set that this RtfHeaderFooterGroup should have a title page. If only
            a header / footer for all pages exists, then it will be copied to the
            first page aswell.
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.SetHasFacingPages">
            Set that this RtfHeaderFooterGroup should have facing pages. If only
            a header / footer for all pages exists, then it will be copied to the left
            and right pages aswell.
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.HasTitlePage">
            Get whether this RtfHeaderFooterGroup has a titlepage
            
            @return Whether this RtfHeaderFooterGroup has a titlepage
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.HasFacingPages">
            Get whether this RtfHeaderFooterGroup has facing pages
            
            @return Whether this RtfHeaderFooterGroup has facing pages
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.SetInTable(System.Boolean)">
            Unused
            @param inTable
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.SetInHeader(System.Boolean)">
            Unused
            @param inHeader
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.SetType(System.Int32)">
            Set the type of this RtfHeaderFooterGroup. RtfHeaderFooter.TYPE_HEADER
            or RtfHeaderFooter.TYPE_FOOTER. Also sets the type for all RtfHeaderFooters
            of this RtfHeaderFooterGroup.
            
            @param type The type to use
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.GetMode">
            Gets the mode of this RtfHeaderFooterGroup
            
            @return The mode of this RtfHeaderFooterGroup
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.GetHeaderAll">
            Gets the RtfHeaderFooter for all pages
            
            @return The RtfHeaderFooter for all pages 
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.GetHeaderFirst">
            Gets the RtfHeaderFooter for the title page
            
            @return The RtfHeaderFooter for the title page 
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.GetHeaderLeft">
            Gets the RtfHeaderFooter for all left hand pages
            
            @return The RtfHeaderFooter for all left hand pages 
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.GetHeaderRight">
            Gets the RtfHeaderFooter for all right hand pages
            
            @return The RtfHeaderFooter for all right hand pages 
        </member>
        <member name="T:iTextSharp.text.rtf.graphic.RtfShapeProperty">
            The RtfShapeProperty stores all shape properties that are
            not handled by the RtfShape and RtfShapePosition.<br /><br />
            
            There is a huge selection of properties that can be set. For
            the most important properites there are constants for the
            property name, for all others you must find the correct
            property name in the RTF specification (version 1.6).<br /><br />
            
            The following types of property values are supported:
            <ul>
              <li>long</li>
              <li>double</li>
              <li>bool</li>
              <li>Color</li>
              <li>int[]</li>
              <li>Point[]</li>
            </ul>
            
            @version $Revision: 1.8 $
            @author Mark Hall (Mark.Hall@mail.room3b.eu)
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapeProperty.PROPERTY_IMAGE">
            Property for defining an image.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapeProperty.PROPERTY_VERTICIES">
            Property for defining vertices in freeform shapes. Requires a
            Point array as the value.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapeProperty.PROPERTY_GEO_TOP">
            Property for defining the minimum vertical coordinate that is
            visible. Requires a long value.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapeProperty.PROPERTY_GEO_LEFT">
            Property for defining the minimum horizontal coordinate that is
            visible. Requires a long value.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapeProperty.PROPERTY_GEO_RIGHT">
            Property for defining the maximum horizontal coordinate that is
            visible. Requires a long value.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapeProperty.PROPERTY_GEO_BOTTOM">
            Property for defining the maximum vertical coordinate that is
            visible. Requires a long value.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapeProperty.PROPERTY_LAYOUT_IN_CELL">
            Property for defining that the shape is in a table cell. Requires
            a bool value.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapeProperty.PROPERTY_FLIP_V">
            Property for signalling a vertical flip of the shape. Requires a
            bool value.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapeProperty.PROPERTY_FLIP_H">
            Property for signalling a horizontal flip of the shape. Requires a
            bool value.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapeProperty.PROPERTY_FILL_COLOR">
            Property for defining the fill color of the shape. Requires a
            Color value.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapeProperty.PROPERTY_LINE_COLOR">
            Property for defining the line color of the shape. Requires a
            Color value.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapeProperty.PROPERTY_ADJUST_VALUE">
            Property for defining the first adjust handle for shapes. Used
            with the rounded rectangle. Requires a long value.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapeProperty.PROPERTY_TYPE_LONG">
            The stored value is a long.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapeProperty.PROPERTY_TYPE_BOOLEAN">
            The stored value is bool.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapeProperty.PROPERTY_TYPE_DOUBLE">
            The stored value is a double.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapeProperty.PROPERTY_TYPE_COLOR">
            The stored value is a Color.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapeProperty.PROPERTY_TYPE_ARRAY">
            The stored value is either an int or a Point array.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapeProperty.PROPERTY_TYPE_IMAGE">
            The stored value is an Image.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapeProperty.type">
            The value type.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapeProperty.name">
            The RtfShapeProperty name.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapeProperty.value">
            The RtfShapeProperty value.
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfShapeProperty.#ctor(System.String,System.Object)">
            Internaly used to create the RtfShape.
            
            @param name The property name to use.
            @param value The property value to use.
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfShapeProperty.#ctor(System.String,System.Int64)">
            Constructs a RtfShapeProperty with a long value.
            
            @param name The property name to use.
            @param value The long value to use.
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfShapeProperty.#ctor(System.String,System.Double)">
            Constructs a RtfShapeProperty with a double value.
            
            @param name The property name to use.
            @param value The double value to use.
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfShapeProperty.#ctor(System.String,System.Boolean)">
            Constructs a RtfShapeProperty with a bool value.
            
            @param name The property name to use.
            @param value The bool value to use.
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfShapeProperty.#ctor(System.String,iTextSharp.text.Color)">
            Constructs a RtfShapeProperty with a Color value.
            
            @param name The property name to use.
            @param value The Color value to use.
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfShapeProperty.#ctor(System.String,System.Int32[])">
            Constructs a RtfShapeProperty with an int array value.
            
            @param name The property name to use.
            @param value The int array to use.
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfShapeProperty.#ctor(System.String,System.Drawing.Point[])">
            Constructs a RtfShapeProperty with a Point array value.
            
            @param name The property name to use.
            @param value The Point array to use.
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfShapeProperty.#ctor(System.String,iTextSharp.text.Image)">
            Constructs a RtfShapeProperty with an Image value.
            
            @param name The property name to use.
            @param value The Image to use.
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfShapeProperty.GetName">
            Gets the name of this RtfShapeProperty.
            
            @return The name of this RtfShapeProperty.
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfShapeProperty.WriteContent(System.IO.Stream)">
            Write this RtfShapePosition.
        </member>
        <member name="M:iTextSharp.text.pdf.StampContent.#ctor(iTextSharp.text.pdf.PdfStamperImp,iTextSharp.text.pdf.PdfStamperImp.PageStamp)">
            Creates a new instance of StampContent 
        </member>
        <member name="P:iTextSharp.text.pdf.StampContent.Duplicate">
             Gets a duplicate of this <CODE>PdfContentByte</CODE>. All
             the members are copied by reference but the buffer stays different.
            
             @return a copy of this <CODE>PdfContentByte</CODE>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfLayer">
             An optional content group is a dictionary representing a collection of graphics
             that can be made visible or invisible dynamically by users of viewer applications.
             In iText they are referenced as layers.
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.PdfLayer.on">
            Holds value of property on.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfLayer.onPanel">
            Holds value of property onPanel.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfLayer.CreateTitle(System.String,iTextSharp.text.pdf.PdfWriter)">
            Creates a title layer. A title layer is not really a layer but a collection of layers
            under the same title heading.
            @param title the title text
            @param writer the <CODE>PdfWriter</CODE>
            @return the title layer
        </member>
        <member name="M:iTextSharp.text.pdf.PdfLayer.#ctor(System.String,iTextSharp.text.pdf.PdfWriter)">
            Creates a new layer.
            @param name the name of the layer
            @param writer the writer
        </member>
        <member name="M:iTextSharp.text.pdf.PdfLayer.AddChild(iTextSharp.text.pdf.PdfLayer)">
            Adds a child layer. Nested layers can only have one parent.
            @param child the child layer
        </member>
        <member name="M:iTextSharp.text.pdf.PdfLayer.SetCreatorInfo(System.String,System.String)">
            Used by the creating application to store application-specific
            data associated with this optional content group.
            @param creator a text string specifying the application that created the group
            @param subtype a string defining the type of content controlled by the group. Suggested
            values include but are not limited to <B>Artwork</B>, for graphic-design or publishing
            applications, and <B>Technical</B>, for technical designs such as building plans or
            schematics
        </member>
        <member name="M:iTextSharp.text.pdf.PdfLayer.SetLanguage(System.String,System.Boolean)">
            Specifies the language of the content controlled by this
            optional content group
            @param lang a language string which specifies a language and possibly a locale
            (for example, <B>es-MX</B> represents Mexican Spanish)
            @param preferred used by viewer applications when there is a partial match but no exact
            match between the system language and the language strings in all usage dictionaries
        </member>
        <member name="M:iTextSharp.text.pdf.PdfLayer.SetZoom(System.Single,System.Single)">
            Specifies a range of magnifications at which the content
            in this optional content group is best viewed.
            @param min the minimum recommended magnification factors at which the group
            should be ON. A negative value will set the default to 0
            @param max the maximum recommended magnification factor at which the group
            should be ON. A negative value will set the largest possible magnification supported by the
            viewer application
        </member>
        <member name="M:iTextSharp.text.pdf.PdfLayer.SetPrint(System.String,System.Boolean)">
            Specifies that the content in this group is intended for
            use in printing
            @param subtype a name specifying the kind of content controlled by the group;
            for example, <B>Trapping</B>, <B>PrintersMarks</B> and <B>Watermark</B>
            @param printstate indicates that the group should be
            set to that state when the document is printed from a viewer application
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLayer.Parent">
            Gets the parent layer.
            @return the parent layer or <CODE>null</CODE> if the layer has no parent
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLayer.Children">
            Gets the children layers.
            @return the children layers or <CODE>null</CODE> if the layer has no children
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLayer.Ref">
            Gets the <CODE>PdfIndirectReference</CODE> that represents this layer.
            @return the <CODE>PdfIndirectReference</CODE> that represents this layer
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLayer.Name">
            Sets the name of this layer.
            @param name the name of this layer
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLayer.PdfObject">
            Gets the dictionary representing the layer. It just returns <CODE>this</CODE>.
            @return the dictionary representing the layer
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLayer.On">
            Gets the initial visibility of the layer.
            @return the initial visibility of the layer
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLayer.Export">
            Specifies the recommended state for content in this
            group when the document (or part of it) is saved by a viewer application to a format
            that does not support optional content (for example, an earlier version of
            PDF or a raster image format).
            @param export the export state
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLayer.View">
            Indicates that the group should be set to that state when the
            document is opened in a viewer application.
            @param view the view state
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLayer.OnPanel">
            Gets the layer visibility in Acrobat's layer panel
            @return the layer visibility in Acrobat's layer panel
            Sets the visibility of the layer in Acrobat's layer panel. If <CODE>false</CODE>
            the layer cannot be directly manipulated by the user. Note that any children layers will
            also be absent from the panel.
            @param onPanel the visibility of the layer in Acrobat's layer panel
        </member>
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.pdf.PdfFont" -->
        <member name="F:iTextSharp.text.pdf.PdfFont.font">
            the font metrics. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfFont.size">
            the size. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfFont.image">
            an image. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfFont.CompareTo(System.Object)">
             Compares this <CODE>PdfFont</CODE> with another
            
             @param    object    the other <CODE>PdfFont</CODE>
             @return    a value
        </member>
        <member name="M:iTextSharp.text.pdf.PdfFont.Width">
             Returns the approximative width of 1 character of this font.
            
             @return        a width in Text Space
        </member>
        <member name="M:iTextSharp.text.pdf.PdfFont.Width(System.Int32)">
             Returns the width of a certain character of this font.
            
             @param        character    a certain character
             @return        a width in Text Space
        </member>
        <member name="P:iTextSharp.text.pdf.PdfFont.Size">
             Returns the size of this font.
            
             @return        a size
        </member>
        <member name="T:iTextSharp.text.pdf.intern.PdfVersionImp">
            Stores the PDF version information,
            knows how to write a PDF Header,
            and how to add the version to the catalog (if necessary).
        </member>
        <member name="F:iTextSharp.text.pdf.intern.PdfVersionImp.HEADER">
            Contains different strings that are part of the header. 
        </member>
        <member name="F:iTextSharp.text.pdf.intern.PdfVersionImp.headerWasWritten">
            Indicates if the header was already written. 
        </member>
        <member name="F:iTextSharp.text.pdf.intern.PdfVersionImp.appendmode">
            Indicates if we are working in append mode. 
        </member>
        <member name="F:iTextSharp.text.pdf.intern.PdfVersionImp.header_version">
            The version that was or will be written to the header. 
        </member>
        <member name="F:iTextSharp.text.pdf.intern.PdfVersionImp.catalog_version">
            The version that will be written to the catalog. 
        </member>
        <member name="F:iTextSharp.text.pdf.intern.PdfVersionImp.extensions">
            The extensions dictionary.
            @since	2.1.6
        </member>
        <member name="M:iTextSharp.text.pdf.intern.PdfVersionImp.SetAtLeastPdfVersion(System.Char)">
            @see com.lowagie.text.pdf.interfaces.PdfVersion#setAtLeastPdfVersion(char)
        </member>
        <member name="M:iTextSharp.text.pdf.intern.PdfVersionImp.SetPdfVersion(iTextSharp.text.pdf.PdfName)">
            @see com.lowagie.text.pdf.interfaces.PdfVersion#setPdfVersion(com.lowagie.text.pdf.PdfName)
        </member>
        <member name="M:iTextSharp.text.pdf.intern.PdfVersionImp.SetAppendmode(System.Boolean)">
            Sets the append mode.
        </member>
        <member name="M:iTextSharp.text.pdf.intern.PdfVersionImp.WriteHeader(iTextSharp.text.pdf.OutputStreamCounter)">
            Writes the header to the OutputStreamCounter.
            @throws IOException 
        </member>
        <member name="M:iTextSharp.text.pdf.intern.PdfVersionImp.GetVersionAsName(System.Char)">
            Returns the PDF version as a name.
            @param version    the version character.
        </member>
        <member name="M:iTextSharp.text.pdf.intern.PdfVersionImp.GetVersionAsByteArray(System.Char)">
            Returns the version as a byte[].
            @param version the version character
        </member>
        <member name="M:iTextSharp.text.pdf.intern.PdfVersionImp.AddToCatalog(iTextSharp.text.pdf.PdfDictionary)">
            Adds the version to the Catalog dictionary. 
        </member>
        <member name="M:iTextSharp.text.pdf.intern.PdfVersionImp.AddDeveloperExtension(iTextSharp.text.pdf.PdfDeveloperExtension)">
            @see com.lowagie.text.pdf.interfaces.PdfVersion#addDeveloperExtension(com.lowagie.text.pdf.PdfDeveloperExtension)
            @since   2.1.6
        </member>
        <member name="P:iTextSharp.text.pdf.intern.PdfVersionImp.PdfVersion">
            @see com.lowagie.text.pdf.interfaces.PdfVersion#setPdfVersion(char)
        </member>
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.pdf.hyphenation.Hyphenator" -->
        <member name="F:iTextSharp.text.pdf.hyphenation.Hyphenator.hyphenTrees">
            TODO: Don't use statics 
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.Hyphenator.#ctor(System.String,System.String,System.Int32,System.Int32)">
            @param lang
            @param country
            @param leftMin
            @param rightMin
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.Hyphenator.GetHyphenationTree(System.String,System.String)">
            @param lang
            @param country
            @return the hyphenation tree
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.Hyphenator.GetResourceHyphenationTree(System.String)">
            @param key
            @return a hyphenation tree
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.Hyphenator.Hyphenate(System.String,System.String,System.String,System.Int32,System.Int32)">
            @param lang
            @param country
            @param word
            @param leftMin
            @param rightMin
            @return a hyphenation object
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.Hyphenator.Hyphenate(System.String,System.String,System.Char[],System.Int32,System.Int32,System.Int32,System.Int32)">
            @param lang
            @param country
            @param word
            @param offset
            @param len
            @param leftMin
            @param rightMin
            @return a hyphenation object
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.Hyphenator.SetMinRemainCharCount(System.Int32)">
            @param min
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.Hyphenator.SetMinPushCharCount(System.Int32)">
            @param min
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.Hyphenator.SetLanguage(System.String,System.String)">
            @param lang
            @param country
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.Hyphenator.Hyphenate(System.Char[],System.Int32,System.Int32)">
            @param word
            @param offset
            @param len
            @return a hyphenation object
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.Hyphenator.Hyphenate(System.String)">
            @param word
            @return a hyphenation object
        </member>
        <member name="T:iTextSharp.text.pdf.events.PdfPTableEventForwarder">
            If you want to add more than one page event to a PdfPTable,
            you have to construct a PdfPTableEventForwarder, add the
            different events to this object and add the forwarder to
            the PdfWriter.
        </member>
        <member name="F:iTextSharp.text.pdf.events.PdfPTableEventForwarder.events">
            ArrayList containing all the PageEvents that have to be executed. 
        </member>
        <member name="M:iTextSharp.text.pdf.events.PdfPTableEventForwarder.AddTableEvent(iTextSharp.text.pdf.IPdfPTableEvent)">
            Add a page event to the forwarder.
            @param event an event that has to be added to the forwarder.
        </member>
        <member name="M:iTextSharp.text.pdf.events.PdfPTableEventForwarder.TableLayout(iTextSharp.text.pdf.PdfPTable,System.Single[][],System.Single[],System.Int32,System.Int32,iTextSharp.text.pdf.PdfContentByte[])">
            @see com.lowagie.text.pdf.PdfPTableEvent#tableLayout(com.lowagie.text.pdf.PdfPTable, float[][], float[], int, int, com.lowagie.text.pdf.PdfContentByte[])
        </member>
        <member name="T:iTextSharp.text.pdf.events.PdfPageEventForwarder">
            If you want to add more than one page eventa to a PdfWriter,
            you have to construct a PdfPageEventForwarder, add the
            different events to this object and add the forwarder to
            the PdfWriter.
        </member>
        <member name="F:iTextSharp.text.pdf.events.PdfPageEventForwarder.events">
            ArrayList containing all the PageEvents that have to be executed. 
        </member>
        <member name="M:iTextSharp.text.pdf.events.PdfPageEventForwarder.AddPageEvent(iTextSharp.text.pdf.IPdfPageEvent)">
            Add a page eventa to the forwarder.
            @param eventa an eventa that has to be added to the forwarder.
        </member>
        <member name="M:iTextSharp.text.pdf.events.PdfPageEventForwarder.OnOpenDocument(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document)">
            Called when the document is opened.
            
            @param writer
                       the <CODE>PdfWriter</CODE> for this document
            @param document
                       the document
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.events.PdfPageEventForwarder.OnStartPage(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document)" -->
        <member name="M:iTextSharp.text.pdf.events.PdfPageEventForwarder.OnEndPage(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document)">
            Called when a page is finished, just before being written to the
            document.
            
            @param writer
                       the <CODE>PdfWriter</CODE> for this document
            @param document
                       the document
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.events.PdfPageEventForwarder.OnCloseDocument(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.events.PdfPageEventForwarder.OnParagraph(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.events.PdfPageEventForwarder.OnParagraphEnd(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.events.PdfPageEventForwarder.OnChapter(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Single,iTextSharp.text.Paragraph)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.events.PdfPageEventForwarder.OnChapterEnd(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.events.PdfPageEventForwarder.OnSection(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Single,System.Int32,iTextSharp.text.Paragraph)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.events.PdfPageEventForwarder.OnSectionEnd(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.events.PdfPageEventForwarder.OnGenericTag(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,iTextSharp.text.Rectangle,System.String)" -->
        <member name="M:iTextSharp.text.pdf.collection.PdfTargetDictionary.#ctor(iTextSharp.text.pdf.collection.PdfTargetDictionary)">
            Creates dictionary referring to a target document that is the parent of the current document.
            @param nested    null if this is the actual target, another target if this is only an intermediate target.
        </member>
        <member name="M:iTextSharp.text.pdf.collection.PdfTargetDictionary.#ctor(System.Boolean)">
            Creates a dictionary referring to a target document.
            @param child if false, this refers to the parent document; if true, this refers to a child document, and you'll have to specify where to find the child using the other methods of this class
        </member>
        <member name="P:iTextSharp.text.pdf.collection.PdfTargetDictionary.EmbeddedFileName">
            If this dictionary refers to a child that is a document level attachment,
            you need to specify the name that was used to attach the document.
            @param   name    the name in the EmbeddedFiles name tree
        </member>
        <member name="P:iTextSharp.text.pdf.collection.PdfTargetDictionary.FileAttachmentPagename">
            If this dictionary refers to a child that is a file attachment added to a page,
            you need to specify the name of the page (or use setFileAttachmentPage to specify the page number).
            Once you have specified the page, you still need to specify the attachment using another method.
            @param name  the named destination referring to the page with the file attachment.
        </member>
        <member name="P:iTextSharp.text.pdf.collection.PdfTargetDictionary.FileAttachmentPage">
            If this dictionary refers to a child that is a file attachment added to a page,
            you need to specify the page number (or use setFileAttachmentPagename to specify a named destination).
            Once you have specified the page, you still need to specify the attachment using another method.
            @param page  the page number of the page with the file attachment.
        </member>
        <member name="P:iTextSharp.text.pdf.collection.PdfTargetDictionary.FileAttachmentName">
            If this dictionary refers to a child that is a file attachment added to a page,
            you need to specify the page with setFileAttachmentPage or setFileAttachmentPageName,
            and then specify the name of the attachment added to this page (or use setFileAttachmentIndex).
            @param name      the name of the attachment
        </member>
        <member name="P:iTextSharp.text.pdf.collection.PdfTargetDictionary.FileAttachmentIndex">
            If this dictionary refers to a child that is a file attachment added to a page,
            you need to specify the page with setFileAttachmentPage or setFileAttachmentPageName,
            and then specify the index of the attachment added to this page (or use setFileAttachmentName).
            @param name      the name of the attachment
        </member>
        <member name="P:iTextSharp.text.pdf.collection.PdfTargetDictionary.AdditionalPath">
            If this dictionary refers to an intermediate target, you can
            add the next target in the sequence.
            @param nested    the next target in the sequence
        </member>
        <member name="T:iTextSharp.text.pdf.codec.TIFFConstants">
            A list of constants used in class TIFFImage.
        </member>
        <member name="T:iTextSharp.text.pdf.codec.GifImage">
            Reads gif images of all types. All the images in a gif are read in the constructors
            and can be retrieved with other methods.
            @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="M:iTextSharp.text.pdf.codec.GifImage.#ctor(System.Uri)">
            Reads gif images from an URL.
            @param url the URL
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.codec.GifImage.#ctor(System.String)">
            Reads gif images from a file.
            @param file the file
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.codec.GifImage.#ctor(System.Byte[])">
            Reads gif images from a byte array.
            @param data the byte array
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.codec.GifImage.#ctor(System.IO.Stream)">
            Reads gif images from a stream. The stream isp not closed.
            @param isp the stream
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.codec.GifImage.GetFrameCount">
            Gets the number of frames the gif has.
            @return the number of frames the gif has
        </member>
        <member name="M:iTextSharp.text.pdf.codec.GifImage.GetImage(System.Int32)">
            Gets the image from a frame. The first frame isp 1.
            @param frame the frame to get the image from
            @return the image
        </member>
        <member name="M:iTextSharp.text.pdf.codec.GifImage.GetFramePosition(System.Int32)">
            Gets the [x,y] position of the frame in reference to the
            logical screen.
            @param frame the frame
            @return the [x,y] position of the frame
        </member>
        <member name="M:iTextSharp.text.pdf.codec.GifImage.GetLogicalScreen">
            Gets the logical screen. The images may be smaller and placed
            in some position in this screen to playback some animation.
            No image will be be bigger that this.
            @return the logical screen dimensions as [x,y]
        </member>
        <member name="M:iTextSharp.text.pdf.codec.GifImage.ReadHeader">
            Reads GIF file header information.
        </member>
        <member name="M:iTextSharp.text.pdf.codec.GifImage.ReadLSD">
            Reads Logical Screen Descriptor
        </member>
        <member name="M:iTextSharp.text.pdf.codec.GifImage.ReadShort">
            Reads next 16-bit value, LSB first
        </member>
        <member name="M:iTextSharp.text.pdf.codec.GifImage.ReadBlock">
             Reads next variable length block from input.
            
             @return number of bytes stored in "buffer"
        </member>
        <member name="M:iTextSharp.text.pdf.codec.GifImage.ReadImage">
            Reads next frame image
        </member>
        <member name="M:iTextSharp.text.pdf.codec.GifImage.ResetFrame">
            Resets frame state for reading next image.
        </member>
        <member name="M:iTextSharp.text.pdf.codec.GifImage.ReadGraphicControlExt">
            Reads Graphics Control Extension values
        </member>
        <member name="M:iTextSharp.text.pdf.codec.GifImage.Skip">
            Skips variable length blocks up to and including
            next zero length block.
        </member>
        <member name="T:iTextSharp.text.MarkedSection">
            Wrapper that allows to add properties to a Chapter/Section object.
            Before iText 1.5 every 'basic building block' implemented the MarkupAttributes interface.
            By setting attributes, you could add markup to the corresponding XML and/or HTML tag.
            This functionality was hardly used by anyone, so it was removed, and replaced by
            the MarkedObject functionality.
        </member>
        <member name="T:iTextSharp.text.MarkedObject">
            Wrapper that allows to add properties to 'basic building block' objects.
            Before iText 1.5 every 'basic building block' implemented the MarkupAttributes interface.
            By setting attributes, you could add markup to the corresponding XML and/or HTML tag.
            This functionality was hardly used by anyone, so it was removed, and replaced by
            the MarkedObject functionality.
        </member>
        <member name="F:iTextSharp.text.MarkedObject.element">
            The element that is wrapped in a MarkedObject. 
        </member>
        <member name="F:iTextSharp.text.MarkedObject.markupAttributes">
            Contains extra markupAttributes 
        </member>
        <member name="M:iTextSharp.text.MarkedObject.#ctor">
            This constructor is for internal use only.
        </member>
        <member name="M:iTextSharp.text.MarkedObject.#ctor(iTextSharp.text.IElement)">
            Creates a MarkedObject.
        </member>
        <member name="M:iTextSharp.text.MarkedObject.Process(iTextSharp.text.IElementListener)">
             Processes the element by adding it (or the different parts) to an
             <CODE>ElementListener</CODE>.
            
             @param       listener        an <CODE>ElementListener</CODE>
             @return <CODE>true</CODE> if the element was processed successfully
        </member>
        <member name="M:iTextSharp.text.MarkedObject.IsContent">
            @see com.lowagie.text.Element#isContent()
            @since   iText 2.0.8
        </member>
        <member name="M:iTextSharp.text.MarkedObject.IsNestable">
            @see com.lowagie.text.Element#isNestable()
            @since   iText 2.0.8
        </member>
        <member name="P:iTextSharp.text.MarkedObject.Chunks">
             Gets all the chunks in this element.
            
             @return  an <CODE>ArrayList</CODE>
        </member>
        <member name="P:iTextSharp.text.MarkedObject.Type">
             Gets the type of the text element.
            
             @return  a type
        </member>
        <member name="P:iTextSharp.text.MarkedObject.MarkupAttributes">
            @return the markupAttributes
        </member>
        <member name="F:iTextSharp.text.MarkedSection.title">
            This is the title of this section. 
        </member>
        <member name="M:iTextSharp.text.MarkedSection.#ctor(iTextSharp.text.Section)">
            Creates a MarkedObject with a Section or Chapter object.
            @param section   the marked section
        </member>
        <member name="M:iTextSharp.text.MarkedSection.Add(System.Int32,System.Object)">
             Adds a <CODE>Paragraph</CODE>, <CODE>List</CODE> or <CODE>Table</CODE>
             to this <CODE>Section</CODE>.
            
             @param   index   index at which the specified element is to be inserted
             @param   o       an object of type <CODE>Paragraph</CODE>, <CODE>List</CODE> or <CODE>Table</CODE>=
             @throws  ClassCastException if the object is not a <CODE>Paragraph</CODE>, <CODE>List</CODE> or <CODE>Table</CODE>
        </member>
        <member name="M:iTextSharp.text.MarkedSection.Add(System.Object)">
             Adds a <CODE>Paragraph</CODE>, <CODE>List</CODE>, <CODE>Table</CODE> or another <CODE>Section</CODE>
             to this <CODE>Section</CODE>.
            
             @param   o       an object of type <CODE>Paragraph</CODE>, <CODE>List</CODE>, <CODE>Table</CODE> or another <CODE>Section</CODE>
             @return  a bool
             @throws  ClassCastException if the object is not a <CODE>Paragraph</CODE>, <CODE>List</CODE>, <CODE>Table</CODE> or <CODE>Section</CODE>
        </member>
        <member name="M:iTextSharp.text.MarkedSection.Process(iTextSharp.text.IElementListener)">
             Processes the element by adding it (or the different parts) to an
             <CODE>ElementListener</CODE>.
            
             @param       listener        an <CODE>ElementListener</CODE>
             @return <CODE>true</CODE> if the element was processed successfully
        </member>
        <member name="M:iTextSharp.text.MarkedSection.AddAll(System.Collections.ICollection)">
             Adds a collection of <CODE>Element</CODE>s
             to this <CODE>Section</CODE>.
            
             @param   collection  a collection of <CODE>Paragraph</CODE>s, <CODE>List</CODE>s and/or <CODE>Table</CODE>s
             @return  <CODE>true</CODE> if the action succeeded, <CODE>false</CODE> if not.
             @throws  ClassCastException if one of the objects isn't a <CODE>Paragraph</CODE>, <CODE>List</CODE>, <CODE>Table</CODE>
        </member>
        <member name="M:iTextSharp.text.MarkedSection.AddSection(System.Single,System.Int32)">
             Creates a <CODE>Section</CODE>, adds it to this <CODE>Section</CODE> and returns it.
            
             @param   indentation the indentation of the new section
             @param   numberDepth the numberDepth of the section
             @return  a new Section object
        </member>
        <member name="M:iTextSharp.text.MarkedSection.AddSection(System.Single)">
             Creates a <CODE>Section</CODE>, adds it to this <CODE>Section</CODE> and returns it.
            
             @param   indentation the indentation of the new section
             @return  a new Section object
        </member>
        <member name="M:iTextSharp.text.MarkedSection.AddSection(System.Int32)">
             Creates a <CODE>Section</CODE>, add it to this <CODE>Section</CODE> and returns it.
            
             @param   numberDepth the numberDepth of the section
             @return  a new Section object
        </member>
        <member name="M:iTextSharp.text.MarkedSection.AddSection">
             Creates a <CODE>Section</CODE>, adds it to this <CODE>Section</CODE> and returns it.
            
             @return  a new Section object
        </member>
        <member name="M:iTextSharp.text.MarkedSection.NewPage">
            Adds a new page to the section.
            @since    2.1.1
        </member>
        <member name="P:iTextSharp.text.MarkedSection.Title">
             Sets the title of this section.
            
             @param   title   the new title
        </member>
        <!-- Badly formed XML comment ignored for member "P:iTextSharp.text.MarkedSection.NumberDepth" -->
        <member name="P:iTextSharp.text.MarkedSection.IndentationLeft">
             Sets the indentation of this <CODE>Section</CODE> on the left side.
            
             @param   indentation     the indentation
        </member>
        <member name="P:iTextSharp.text.MarkedSection.IndentationRight">
             Sets the indentation of this <CODE>Section</CODE> on the right side.
            
             @param   indentation     the indentation
        </member>
        <member name="P:iTextSharp.text.MarkedSection.Indentation">
             Sets the indentation of the content of this <CODE>Section</CODE>.
            
             @param   indentation     the indentation
        </member>
        <member name="P:iTextSharp.text.MarkedSection.BookmarkOpen">
            Setter for property bookmarkOpen.
            @param bookmarkOpen false if the bookmark children are not
            visible.
        </member>
        <member name="P:iTextSharp.text.MarkedSection.TriggerNewPage">
            Setter for property triggerNewPage.
            @param triggerNewPage true if a new page has to be triggered.
        </member>
        <member name="P:iTextSharp.text.MarkedSection.BookmarkTitle">
            Sets the bookmark title. The bookmark title is the same as the section title but
            can be changed with this method.
            @param bookmarkTitle the bookmark title
        </member>
        <member name="T:iTextSharp.text.List">
            <summary>
            A List contains several ListItems.
            </summary>
            <example>
            <B>Example 1:</B>
            <code>
            <strong>List list = new List(true, 20);
            list.Add(new ListItem("First line"));
            list.Add(new ListItem("The second line is longer to see what happens once the end of the line is reached. Will it start on a new line?"));
            list.Add(new ListItem("Third line"));</strong>
            </code>
            
            The result of this code looks like this:
            <OL>
                <LI>
                    First line
                </LI>
                <LI>
                    The second line is longer to see what happens once the end of the line is reached. Will it start on a new line?
                </LI>
                <LI>
                    Third line
                </LI>
            </OL>
            
            <B>Example 2:</B>
            <code>
            <strong>List overview = new List(false, 10);
            overview.Add(new ListItem("This is an item"));
            overview.Add("This is another item");</strong>
            </code>
            
            The result of this code looks like this:
            <UL>
                   <LI>
                       This is an item
                   </LI>
                   <LI>
                       This is another item
                   </LI>
               </UL>
            </example>
            <seealso cref="T:iTextSharp.text.Element"/>
            <seealso cref="T:iTextSharp.text.ListItem"/>
        </member>
        <member name="F:iTextSharp.text.List.ORDERED">
            a possible value for the numbered parameter 
        </member>
        <member name="F:iTextSharp.text.List.UNORDERED">
            a possible value for the numbered parameter 
        </member>
        <member name="F:iTextSharp.text.List.NUMERICAL">
            a possible value for the lettered parameter 
        </member>
        <member name="F:iTextSharp.text.List.ALPHABETICAL">
            a possible value for the lettered parameter 
        </member>
        <member name="F:iTextSharp.text.List.UPPERCASE">
            a possible value for the lettered parameter 
        </member>
        <member name="F:iTextSharp.text.List.LOWERCASE">
            a possible value for the lettered parameter 
        </member>
        <member name="F:iTextSharp.text.List.list">
            <summary> This is the ArrayList containing the different ListItems. </summary>
        </member>
        <member name="F:iTextSharp.text.List.numbered">
            Indicates if the list has to be numbered. 
        </member>
        <member name="F:iTextSharp.text.List.lettered">
            Indicates if the listsymbols are numerical or alphabetical. 
        </member>
        <member name="F:iTextSharp.text.List.lowercase">
            Indicates if the listsymbols are lowercase or uppercase. 
        </member>
        <member name="F:iTextSharp.text.List.autoindent">
            Indicates if the indentation has to be set automatically. 
        </member>
        <member name="F:iTextSharp.text.List.alignindent">
            Indicates if the indentation of all the items has to be aligned. 
        </member>
        <member name="F:iTextSharp.text.List.first">
            <summary> This variable indicates the first number of a numbered list. </summary>
        </member>
        <member name="F:iTextSharp.text.List.symbol">
            <summary> This is the listsymbol of a list that is not numbered. </summary>
        </member>
        <member name="F:iTextSharp.text.List.preSymbol">
            In case you are using numbered/lettered lists, this String is added before the number/letter.
            @since   iText 2.1.1
        </member>
        <member name="F:iTextSharp.text.List.postSymbol">
            In case you are using numbered/lettered lists, this String is added after the number/letter. 
            @since   iText 2.1.1
        </member>
        <member name="F:iTextSharp.text.List.indentationLeft">
            <summary> The indentation of this list on the left side. </summary>
        </member>
        <member name="F:iTextSharp.text.List.indentationRight">
            <summary> The indentation of this list on the right side. </summary>
        </member>
        <member name="F:iTextSharp.text.List.symbolIndent">
            <summary> The indentation of the listitems. </summary>
        </member>
        <member name="M:iTextSharp.text.List.#ctor">
            Constructs a <CODE>List</CODE>.
        </member>
        <member name="M:iTextSharp.text.List.#ctor(System.Single)">
            Constructs a <CODE>List</CODE> with a specific symbol indentation.
            @param   symbolIndent    the symbol indentation
            @since   iText 2.0.8
        </member>
        <member name="M:iTextSharp.text.List.#ctor(System.Boolean)">
             Constructs a <CODE>List</CODE>.
            
             @param    numbered        a bool
        </member>
        <member name="M:iTextSharp.text.List.#ctor(System.Boolean,System.Boolean)">
             Constructs a <CODE>List</CODE>.
            
             @param    numbered        a bool
             @param lettered has the list to be 'numbered' with letters
        </member>
        <member name="M:iTextSharp.text.List.#ctor(System.Boolean,System.Single)">
            <summary>
            Constructs a List.
            </summary>
            <remarks>
            the parameter symbolIndent is important for instance when
            generating PDF-documents; it indicates the indentation of the listsymbol.
            </remarks>
            <param name="numbered">a bool</param>
            <param name="symbolIndent">the indentation that has to be used for the listsymbol</param>
        </member>
        <member name="M:iTextSharp.text.List.#ctor(System.Boolean,System.Boolean,System.Single)">
            <summary>
            Constructs a List.
            </summary>
            <param name="numbered">a bool</param>
            <param name="lettered">a bool</param>
            <param name="symbolIndent">the indentation that has to be used for the listsymbol</param>
        </member>
        <member name="M:iTextSharp.text.List.Process(iTextSharp.text.IElementListener)">
            <summary>
            Processes the element by adding it (or the different parts) to an
            IElementListener.
            </summary>
            <param name="listener">an IElementListener</param>
            <returns>true if the element was processed successfully</returns>
        </member>
        <member name="M:iTextSharp.text.List.Add(System.Object)">
            <summary>
            Adds an Object to the List.
            </summary>
            <param name="o">the object to add</param>
            <returns>true is successful</returns>
        </member>
        <member name="M:iTextSharp.text.List.NormalizeIndentation">
            Makes sure all the items in the list have the same indentation. 
        </member>
        <member name="M:iTextSharp.text.List.SetListSymbol(System.String)">
            <summary>
            Sets the listsymbol.
            </summary>
            <remarks>
            This is a shortcut for SetListSymbol(Chunk symbol).
            </remarks>
            <param name="symbol">a string</param>
        </member>
        <member name="M:iTextSharp.text.List.IsContent">
            @see com.lowagie.text.Element#isContent()
            @since   iText 2.0.8
        </member>
        <member name="M:iTextSharp.text.List.IsNestable">
            @see com.lowagie.text.Element#isNestable()
            @since   iText 2.0.8
        </member>
        <member name="M:iTextSharp.text.List.IsEmpty">
            Returns <CODE>true</CODE> if the list is empty.
            
            @return <CODE>true</CODE> if the list is empty
        </member>
        <member name="M:iTextSharp.text.List.getPostSymbol">
            Returns the String that is after a number or letter in the list symbol.
            @return	the String that is after a number or letter in the list symbol
            @since	iText 2.1.1
        </member>
        <member name="P:iTextSharp.text.List.Type">
            <summary>
            Gets the type of the text element.
            </summary>
            <value>a type</value>
        </member>
        <member name="P:iTextSharp.text.List.Chunks">
            <summary>
            Gets all the chunks in this element.
            </summary>
            <value>an ArrayList</value>
        </member>
        <member name="P:iTextSharp.text.List.First">
            <summary>
            Get/set the first number
            </summary>
            <value>an int</value>
        </member>
        <member name="P:iTextSharp.text.List.ListSymbol">
            <summary>
            Sets the symbol
            </summary>
            <value>a Chunk</value>
        </member>
        <member name="P:iTextSharp.text.List.IndentationLeft">
            <summary>
            Get/set the indentation of this paragraph on the left side.
            </summary>
            <value>the indentation</value>
        </member>
        <member name="P:iTextSharp.text.List.IndentationRight">
            <summary>
            Get/set the indentation of this paragraph on the right side.
            </summary>
            <value>the indentation</value>
        </member>
        <member name="P:iTextSharp.text.List.SymbolIndent">
            <summary>
            Gets the symbol indentation.
            </summary>
            <value>the symbol indentation</value>
        </member>
        <member name="P:iTextSharp.text.List.Items">
            <summary>
            Gets all the items in the list.
            </summary>
            <value>an ArrayList containing ListItems</value>
        </member>
        <member name="P:iTextSharp.text.List.Size">
            <summary>
            Gets the size of the list.
            </summary>
            <value>a size</value>
        </member>
        <member name="P:iTextSharp.text.List.TotalLeading">
            <summary>
            Gets the leading of the first listitem.
            </summary>
            <value>a leading</value>
        </member>
        <member name="P:iTextSharp.text.List.Symbol">
            <summary>
            Get/set the symbol indentation.
            </summary>
            <value>a Chunk</value>
        </member>
        <member name="P:iTextSharp.text.List.PostSymbol">
            Sets the String that has to be added after a number or letter in the list symbol.
            @since	iText 2.1.1
            @param	postSymbol the String that has to be added after a number or letter in the list symbol.
        </member>
        <member name="P:iTextSharp.text.List.PreSymbol">
            Sets the String that has to be added before a number or letter in the list symbol.
            @since	iText 2.1.1
            @param	preSymbol the String that has to be added before a number or letter in the list symbol.
        </member>
        <member name="T:iTextSharp.text.ImgTemplate">
            <summary>
            PdfTemplate that has to be inserted into the document
            </summary>
            <seealso cref="T:iTextSharp.text.Element"/>
            <seealso cref="T:iTextSharp.text.Image"/>
        </member>
        <member name="M:iTextSharp.text.ImgTemplate.#ctor(iTextSharp.text.Image)">
            <summary>
            Creats an Image from a PdfTemplate.
            </summary>
            <param name="image">the Image</param>
        </member>
        <member name="M:iTextSharp.text.ImgTemplate.#ctor(iTextSharp.text.pdf.PdfTemplate)">
            <summary>
            Creats an Image from a PdfTemplate.
            </summary>
            <param name="template">the PdfTemplate</param>
        </member>
        <member name="T:iTextSharp.text.GreekList">
            
            A special-version of <CODE>LIST</CODE> whitch use greek-letters.
            
            @see com.lowagie.text.List
        </member>
        <member name="M:iTextSharp.text.GreekList.#ctor">
            Initialization
            
            @param symbolIndent   indent
        </member>
        <member name="M:iTextSharp.text.GreekList.#ctor(System.Int32)">
            Initialisierung
            
            @param symbolIndent   indent
        </member>
        <member name="M:iTextSharp.text.GreekList.#ctor(System.Boolean,System.Int32)">
            Initialisierung 
            @param    greeklower      greek-char in lowercase   
            @param    symbolIndent    indent
        </member>
        <member name="M:iTextSharp.text.GreekList.SetGreekFont">
            change the font to SYMBOL
        </member>
        <member name="M:iTextSharp.text.GreekList.Add(System.Object)">
             Adds an <CODE>Object</CODE> to the <CODE>List</CODE>.
            
             @param    o   the object to add.
             @return true if adding the object succeeded
        </member>
        <member name="T:iTextSharp.text.factories.ElementFactory">
            This class is able to create Element objects based on a list of properties.
        </member>
        <member name="M:iTextSharp.text.factories.ElementFactory.GetTable(System.util.Properties)">
            Creates an Table object based on a list of properties.
            @param attributes
            @return a Table
        </member>
        <member name="M:iTextSharp.text.factories.ElementFactory.SetRectangleProperties(iTextSharp.text.Rectangle,System.util.Properties)">
            Sets some Rectangle properties (for a Cell, Table,...).
        </member>
        <member name="M:iTextSharp.text.factories.ElementFactory.GetImage(System.util.Properties)">
            <summary>
            Returns an Image that has been constructed taking in account
            the value of some attributes.
            </summary>
            <param name="attributes">Some attributes</param>
            <returns>an Image</returns>
        </member>
        <member name="M:iTextSharp.text.factories.ElementFactory.GetAnnotation(System.util.Properties)">
            Creates an Annotation object based on a list of properties.
            @param attributes
            @return an Annotation
        </member>
        <member name="T:iTextSharp.text.exceptions.InvalidPdfException">
            Typed exception used when opening an existing PDF document.
            Gets thrown when the document isn't a valid PDF document.
            @since 2.1.5
        </member>
        <member name="M:iTextSharp.text.exceptions.InvalidPdfException.#ctor(System.String)">
            Creates an instance of a NoPdfException.
            @param	message	the reason why the document isn't a PDF document according to iText.
        </member>
        <member name="T:iTextSharp.text.ZapfDingbatsNumberList">
            
            A special-version of <CODE>LIST</CODE> whitch use zapfdingbats-numbers (1..10).
            
            @see com.lowagie.text.List
            @version 2003-06-22
            @author Michael Niedermair
        </member>
        <member name="F:iTextSharp.text.ZapfDingbatsNumberList.type">
            which type
        </member>
        <member name="M:iTextSharp.text.ZapfDingbatsNumberList.#ctor(System.Int32)">
            Creates a ZapdDingbatsNumberList
            @param type the type of list
            @param symbolIndent  indent
        </member>
        <member name="M:iTextSharp.text.ZapfDingbatsNumberList.#ctor(System.Int32,System.Int32)">
            Creates a ZapdDingbatsNumberList
            @param type the type of list
            @param symbolIndent    indent
        </member>
        <member name="M:iTextSharp.text.ZapfDingbatsNumberList.Add(System.Object)">
             Adds an <CODE>Object</CODE> to the <CODE>List</CODE>.
            
             @param    o    the object to add.
             @return true if adding the object succeeded
        </member>
        <member name="P:iTextSharp.text.ZapfDingbatsNumberList.NumberType">
             get the type
            
             @return    char-number
        </member>
        <member name="T:iTextSharp.text.xml.xmp.PdfA1Schema">
            An implementation of an XmpSchema.
        </member>
        <member name="F:iTextSharp.text.xml.xmp.PdfA1Schema.DEFAULT_XPATH_ID">
            default namespace identifier
        </member>
        <member name="F:iTextSharp.text.xml.xmp.PdfA1Schema.DEFAULT_XPATH_URI">
            default namespace uri
        </member>
        <member name="F:iTextSharp.text.xml.xmp.PdfA1Schema.PART">
            Part, always 1. 
        </member>
        <member name="F:iTextSharp.text.xml.xmp.PdfA1Schema.CONFORMANCE">
            Conformance, A or B. 
        </member>
        <member name="M:iTextSharp.text.xml.xmp.PdfA1Schema.#ctor">
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.xml.xmp.PdfA1Schema.AddPart(System.String)">
            Adds part.
            @param part
        </member>
        <member name="M:iTextSharp.text.xml.xmp.PdfA1Schema.AddConformance(System.String)">
            Adds the conformance.
            @param conformance
        </member>
        <member name="T:iTextSharp.text.rtf.style.RtfStyleTypes">
            <code>RtfStyleTypes</code> contains the different types of Stylesheet entries
            that exist in RTF.
            
            @author Howard Shank (hgshank@yahoo.com)
            @since 2.0.8
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfStyleTypes.PARAGRAPH">
            Indicates paragraph style.
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfStyleTypes.CHARACTER">
            Indicates character style.
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfStyleTypes.SECTION">
            Indicates section style.
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfStyleTypes.TABLE">
            Indicates Table style.
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfStyleTypes.TABLE_STYLE_DEFINITION">
            Indicates table definition style.
        </member>
        <member name="T:iTextSharp.text.rtf.style.RtfStylesheetList">
            The RtfStylesheetList stores the RtfParagraphStyles that are used in the document.
            
            @version $Revision: 1.5 $
            @author Mark Hall (Mark.Hall@mail.room3b.eu)
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfStylesheetList.styleMap">
            The Hashtable containing the RtfParagraphStyles.
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfStylesheetList.defaultsLoaded">
            Whether the default settings have been loaded.
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfStylesheetList.#ctor(iTextSharp.text.rtf.document.RtfDocument)">
            Constructs a new RtfStylesheetList for the RtfDocument.
            
            @param doc The RtfDocument this RtfStylesheetList belongs to.
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfStylesheetList.WriteContent(System.IO.Stream)">
            unused
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfStylesheetList.RegisterParagraphStyle(iTextSharp.text.rtf.style.RtfParagraphStyle)">
            Register a RtfParagraphStyle with this RtfStylesheetList.
            
            @param rtfParagraphStyle The RtfParagraphStyle to add.
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfStylesheetList.RegisterDefaultStyles">
            Registers all default styles. If styles with the given name have already been registered,
            then they are NOT overwritten.
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfStylesheetList.GetRtfParagraphStyle(System.String)">
            Gets the RtfParagraphStyle with the given name. Makes sure that the defaults
            have been loaded.
            
            @param styleName The name of the RtfParagraphStyle to get.
            @return The RtfParagraphStyle with the given name or null.
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfStylesheetList.WriteDefinition(System.IO.Stream)">
            Writes the definition of the stylesheet list.
        </member>
        <member name="T:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordMgr">
            <code>RtfCtrlWordMgr</code> handles the dispatching of control words from
            the table of known control words.
            
            @author Howard Shank (hgshank@yahoo.com)
            @since 2.0.8
        </member>
        <member name="F:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordMgr.listeners">
            The <code>RtfCtrlWordListener</code>. 
        </member>
        <member name="M:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordMgr.#ctor(iTextSharp.text.rtf.parser.RtfParser,iTextSharp.text.rtf.parser.PushbackStream)">
            Constructor
            @param rtfParser The parser object this manager works with.
            @param reader the PushbackReader from the tokeniser.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordMgr.HandleKeyword(iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordData,System.Int32)">
            Internal to control word manager class.
            
            @param ctrlWordData The <code>RtfCtrlWordData</code> object with control word and param
            @param groupLevel The current document group parsing level
            @return errOK if ok, otherwise an error code.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordMgr.DispatchKeyword(iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordData,System.Int32)">
            Dispatch the token to the correct control word handling object.
             
            @param ctrlWordData The <code>RtfCtrlWordData</code> object with control word and param
            @param groupLevel The current document group parsing level
            @return errOK if ok, otherwise an error code.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordMgr.AddRtfCtrlWordListener(iTextSharp.text.rtf.parser.ctrlwords.IRtfCtrlWordListener)">
             Adds a <CODE>RtfCtrlWordListener</CODE> to the <CODE>RtfCtrlWordMgr</CODE>.
            
             @param listener
                        the new RtfCtrlWordListener.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordMgr.RemoveRtfCtrlWordListener(iTextSharp.text.rtf.parser.ctrlwords.IRtfCtrlWordListener)">
             Removes a <CODE>RtfCtrlWordListener</CODE> from the <CODE>RtfCtrlWordMgr</CODE>.
            
             @param listener
                        the RtfCtrlWordListener that has to be removed.
        </member>
        <member name="T:iTextSharp.text.rtf.field.RtfTotalPageNumber">
            The RtfTotalPageNumber provides the total number of pages field in rtf documents.
            
            @version $Version:$
            @author Jose Hurtado (jose.hurtado@gft.com)
            @author Mark Hall (Mark.Hall@mail.room3b.eu)
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfTotalPageNumber.ARABIC_TOTAL_PAGES">
            Constant for arabic total page numbers.
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfTotalPageNumber.#ctor">
            Constructs a RtfTotalPageNumber. This can be added anywhere to add a total number of pages field.
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfTotalPageNumber.#ctor(iTextSharp.text.Font)">
            Constructs a RtfTotalPageNumber with a specified Font. This can be added anywhere
            to add a total number of pages field.
            @param font
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfTotalPageNumber.#ctor(iTextSharp.text.rtf.document.RtfDocument)">
            Constructs a RtfTotalPageNumber object.
            
            @param doc The RtfDocument this RtfTotalPageNumber belongs to
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfTotalPageNumber.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.Font)">
            Constructs a RtfTotalPageNumber object with a specific font.
            
            @param doc The RtfDocument this RtfTotalPageNumber belongs to
            @param font The Font to use
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfTotalPageNumber.WriteFieldInstContent(System.IO.Stream)">
            Writes the field NUMPAGES instruction with Arabic format: "NUMPAGES \\\\* Arabic".
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfTotalPageNumber.WriteFieldResultContent(System.IO.Stream)">
            Writes the field result content "1"
        </member>
        <member name="T:iTextSharp.text.rtf.document.RtfDocument">
             The RtfDocument stores all document related data and also the main data stream.
             INTERNAL CLASS - NOT TO BE USED DIRECTLY
            
             Version: $Id: RtfDocument.cs,v 1.12 2008/05/16 19:30:50 psoares33 Exp $
             @author Mark Hall (Mark.Hall@mail.room3b.eu)
             @author Todd Bush (Todd.Bush@canopysystems.com) [Tab support]
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocument.data">
            Stores the actual document data
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocument.mapper">
            The RtfMapper to use in this RtfDocument
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocument.documentHeader">
            The RtfDocumentHeader that handles all document header methods
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocument.previousRandomInts">
            Stores integers that have been generated as unique random numbers
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocument.autogenerateTOCEntries">
            Whether to automatically generate TOC entries for Chapters and Sections. Defaults to false
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocument.documentSettings">
            The RtfDocumentSettings for this RtfDocument.
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocument.lastElementWritten">
            The last RtfBasicElement that was added directly to the RtfDocument.
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocument.RTF_DOCUMENT">
            Constant for the Rtf document start
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocument.#ctor">
            The default constructor for a RtfDocument
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocument.WriteContent(System.IO.Stream)">
            unused
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocument.WriteDocument(System.IO.Stream)">
             Writes the document
            
             @param outs The <code>Stream</code> to write the RTF document to.
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocument.Open">
            Opens the RtfDocument and initialises the data cache. If the data cache is
            set to CACHE_DISK, but the cache cannot be initialised then the memory cache
            is used.
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocument.Add(iTextSharp.text.rtf.IRtfBasicElement)">
            Adds an element to the rtf document
            
            @param element The element to add
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocument.GetMapper">
            Gets the RtfMapper object of this RtfDocument
            
            @return The RtfMapper
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocument.GetRandomInt">
            Generates a random integer that is unique with respect to the document.
            
            @return A random int
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocument.GetDocumentHeader">
            Gets the RtfDocumentHeader of this RtfDocument
            
            @return The RtfDocumentHeader of this RtfDocument
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocument.FilterSpecialChar(System.IO.Stream,System.String,System.Boolean,System.Boolean)">
            Writes the given string to the given {@link Stream} encoding the string characters.
            
            @param outp destination Stream
            @param str string to write
            @param useHex if <code>true</code> hex encoding characters is preferred to unicode encoding if possible
            @param softLineBreaks if <code>true</code> return characters are written as soft line breaks
            
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocument.SubMatch(System.String,System.Int32,System.Byte[])">
            Returns <code>true</code> if <tt>m.length</tt> characters in <tt>str</tt>, starting at offset <tt>soff</tt>
            match the bytes in the given array <tt>m</tt>.
            
            @param str the string to search for a match
            @param soff the starting offset in str
            @param m the array to match
            @return <code>true</code> if there is match
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocument.SetAutogenerateTOCEntries(System.Boolean)">
            Whether to automagically generate table of contents entries when
            adding Chapters or Sections.
            
            @param autogenerate Whether to automatically generate TOC entries
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocument.GetAutogenerateTOCEntries">
            Get whether to autmatically generate table of contents entries
            
            @return Wheter to automatically generate TOC entries
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocument.GetDocumentSettings">
            Gets the RtfDocumentSettings that specify how the rtf document is generated.
            
            @return The current RtfDocumentSettings.
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocument.GetLastElementWritten">
            Gets the last RtfBasicElement that was directly added to the RtfDocument.
             
            @return The last RtfBasicElement that was directly added to the RtfDocument.
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocument.OutputDebugLinebreak(System.IO.Stream)">
            Helper method outputs linebreak in document if debugging is turned on.
            @param result the OutputStream to write the linebreak to.
            @throws IOException
            @since 2.1.3
        </member>
        <member name="T:iTextSharp.text.RectangleReadOnly">
            <summary>
            A RectangleReadOnly is the representation of a geometric figure.
            It's the same as a Rectangle but immutable.
            </summary>
            <seealso cref="T:iTextSharp.text.Element"/>
            <seealso cref="T:iTextSharp.text.Table"/>
            <seealso cref="T:iTextSharp.text.Cell"/>
            <seealso cref="T:iTextSharp.text.HeaderFooter"/>
        </member>
        <member name="M:iTextSharp.text.RectangleReadOnly.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a RectangleReadOnly-object.
            </summary>
            <param name="llx">lower left x</param>
            <param name="lly">lower left y</param>
            <param name="urx">upper right x</param>
            <param name="ury">upper right y</param>
        </member>
        <member name="M:iTextSharp.text.RectangleReadOnly.#ctor(System.Single,System.Single)">
            <summary>
            Constructs a RectangleReadOnly-object starting from the origin (0, 0).
            </summary>
            <param name="urx">upper right x</param>
            <param name="ury">upper right y</param>
        </member>
        <member name="M:iTextSharp.text.RectangleReadOnly.#ctor(iTextSharp.text.Rectangle)">
            <summary>
            Constructs a RectangleReadOnly-object.
            </summary>
            <param name="rect">another Rectangle</param>
        </member>
        <member name="M:iTextSharp.text.RectangleReadOnly.CloneNonPositionParameters(iTextSharp.text.Rectangle)">
            Copies all of the parameters from a <CODE>Rectangle</CODE> object
            except the position.
            
            @param rect
                       <CODE>Rectangle</CODE> to copy from
        </member>
        <member name="M:iTextSharp.text.RectangleReadOnly.SoftCloneNonPositionParameters(iTextSharp.text.Rectangle)">
            Copies all of the parameters from a <CODE>Rectangle</CODE> object
            except the position.
            
            @param rect
                       <CODE>Rectangle</CODE> to copy from
        </member>
        <member name="M:iTextSharp.text.RectangleReadOnly.Normalize">
            Switches lowerleft with upperright
        </member>
        <member name="M:iTextSharp.text.RectangleReadOnly.EnableBorderSide(System.Int32)">
            Enables the border on the specified side.
            
            @param side
                       the side to enable. One of <CODE>LEFT, RIGHT, TOP, BOTTOM
                       </CODE>
        </member>
        <member name="M:iTextSharp.text.RectangleReadOnly.DisableBorderSide(System.Int32)">
            Disables the border on the specified side.
            
            @param side
                       the side to disable. One of <CODE>LEFT, RIGHT, TOP, BOTTOM
                       </CODE>
        </member>
        <member name="P:iTextSharp.text.RectangleReadOnly.Top">
            <summary>
            Get/set the upper right y-coordinate. 
            </summary>
            <value>a float</value>
        </member>
        <member name="P:iTextSharp.text.RectangleReadOnly.Border">
            <summary>
            Get/set the border
            </summary>
            <value>a int</value>
        </member>
        <member name="P:iTextSharp.text.RectangleReadOnly.GrayFill">
            <summary>
            Get/set the grayscale of the rectangle.
            </summary>
            <value>a float</value>
        </member>
        <member name="P:iTextSharp.text.RectangleReadOnly.Left">
            <summary>
            Get/set the lower left x-coordinate.
            </summary>
            <value>a float</value>
        </member>
        <member name="P:iTextSharp.text.RectangleReadOnly.Right">
            <summary>
            Get/set the upper right x-coordinate.
            </summary>
            <value>a float</value>
        </member>
        <member name="P:iTextSharp.text.RectangleReadOnly.Bottom">
            <summary>
            Get/set the lower left y-coordinate.
            </summary>
            <value>a float</value>
        </member>
        <member name="P:iTextSharp.text.RectangleReadOnly.BorderWidth">
            <summary>
            Get/set the borderwidth.
            </summary>
            <value>a float</value>
        </member>
        <member name="P:iTextSharp.text.RectangleReadOnly.BorderColor">
             Gets the color of the border.
            
             @return    a value
            <summary>
            Get/set the color of the border.
            </summary>
            <value>a Color</value>
        </member>
        <member name="P:iTextSharp.text.RectangleReadOnly.BackgroundColor">
             Gets the backgroundcolor.
            
             @return    a value
            <summary>
            Get/set the backgroundcolor.
            </summary>
            <value>a Color</value>
        </member>
        <member name="P:iTextSharp.text.RectangleReadOnly.UseVariableBorders">
            Sets a parameter indicating if the rectangle has variable borders
            
            @param useVariableBorders
                       indication if the rectangle has variable borders
        </member>
        <member name="T:iTextSharp.text.pdf.Type3Glyph">
            The content where Type3 glyphs are written to.
        </member>
        <member name="T:iTextSharp.text.pdf.TSAClientBouncyCastle">
            Time Stamp Authority Client interface implementation using Bouncy Castle
            org.bouncycastle.tsp package.
            <p>
            Created by Aiken Sam, 2006-11-15, refactored by Martin Brunecky, 07/15/2007
            for ease of subclassing.
            </p>
            @since	2.1.6
        </member>
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.pdf.ITSAClient" -->
        <member name="M:iTextSharp.text.pdf.ITSAClient.GetTokenSizeEstimate">
            Get the time stamp token size estimate.
            Implementation must return value large enough to accomodate the entire token
            returned by getTimeStampToken() _prior_ to actual getTimeStampToken() call.
            @return   an estimate of the token size
        </member>
        <member name="M:iTextSharp.text.pdf.ITSAClient.GetTimeStampToken(iTextSharp.text.pdf.PdfPKCS7,System.Byte[])">
            Get RFC 3161 timeStampToken.
            Method may return null indicating that timestamp should be skipped.
            @param caller PdfPKCS7 - calling PdfPKCS7 instance (in case caller needs it)
            @param imprint byte[] - data imprint to be time-stamped
            @return byte[] - encoded, TSA signed data of the timeStampToken
            @throws Exception - TSA request failed
        </member>
        <member name="F:iTextSharp.text.pdf.TSAClientBouncyCastle.tsaURL">
            URL of the Time Stamp Authority 
        </member>
        <member name="F:iTextSharp.text.pdf.TSAClientBouncyCastle.tsaUsername">
            TSA Username 
        </member>
        <member name="F:iTextSharp.text.pdf.TSAClientBouncyCastle.tsaPassword">
            TSA password 
        </member>
        <member name="F:iTextSharp.text.pdf.TSAClientBouncyCastle.tokSzEstimate">
            Estimate of the received time stamp token 
        </member>
        <member name="M:iTextSharp.text.pdf.TSAClientBouncyCastle.#ctor(System.String)">
            Creates an instance of a TSAClient that will use BouncyCastle.
            @param url String - Time Stamp Authority URL (i.e. "http://tsatest1.digistamp.com/TSA")
        </member>
        <member name="M:iTextSharp.text.pdf.TSAClientBouncyCastle.#ctor(System.String,System.String,System.String)">
            Creates an instance of a TSAClient that will use BouncyCastle.
            @param url String - Time Stamp Authority URL (i.e. "http://tsatest1.digistamp.com/TSA")
            @param username String - user(account) name
            @param password String - password
        </member>
        <member name="M:iTextSharp.text.pdf.TSAClientBouncyCastle.#ctor(System.String,System.String,System.String,System.Int32)">
            Constructor.
            Note the token size estimate is updated by each call, as the token
            size is not likely to change (as long as we call the same TSA using
            the same imprint length).
            @param url String - Time Stamp Authority URL (i.e. "http://tsatest1.digistamp.com/TSA")
            @param username String - user(account) name
            @param password String - password
            @param tokSzEstimate int - estimated size of received time stamp token (DER encoded)
        </member>
        <member name="M:iTextSharp.text.pdf.TSAClientBouncyCastle.GetTokenSizeEstimate">
            Get the token size estimate.
            Returned value reflects the result of the last succesfull call, padded
            @return an estimate of the token size
        </member>
        <member name="M:iTextSharp.text.pdf.TSAClientBouncyCastle.GetTimeStampToken(iTextSharp.text.pdf.PdfPKCS7,System.Byte[])">
            Get RFC 3161 timeStampToken.
            Method may return null indicating that timestamp should be skipped.
            @param caller PdfPKCS7 - calling PdfPKCS7 instance (in case caller needs it)
            @param imprint byte[] - data imprint to be time-stamped
            @return byte[] - encoded, TSA signed data of the timeStampToken
            @throws Exception - TSA request failed
            @see com.lowagie.text.pdf.TSAClient#getTimeStampToken(com.lowagie.text.pdf.PdfPKCS7, byte[])
        </member>
        <member name="M:iTextSharp.text.pdf.TSAClientBouncyCastle.GetTimeStampToken(System.Byte[])">
            Get timestamp token - Bouncy Castle request encoding / decoding layer
        </member>
        <member name="M:iTextSharp.text.pdf.TSAClientBouncyCastle.GetTSAResponse(System.Byte[])">
            Get timestamp token - communications layer
            @return - byte[] - TSA response, raw bytes (RFC 3161 encoded)
        </member>
        <member name="T:iTextSharp.text.pdf.PdfEFStream">
            Extends PdfStream and should be used to create Streams for Embedded Files
            (file attachments).
            @since	2.1.3
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEFStream.#ctor(System.IO.Stream,iTextSharp.text.pdf.PdfWriter)">
            Creates a Stream object using an InputStream and a PdfWriter object
            @param	in	the InputStream that will be read to get the Stream object
            @param	writer	the writer to which the stream will be added
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEFStream.#ctor(System.Byte[])">
            Creates a Stream object using a byte array
            @param	fileStore	the bytes for the stream
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEFStream.ToPdf(iTextSharp.text.pdf.PdfWriter,System.IO.Stream)">
            @see com.lowagie.text.pdf.PdfDictionary#toPdf(com.lowagie.text.pdf.PdfWriter, java.io.OutputStream)
        </member>
        <member name="T:iTextSharp.text.pdf.PdfCopyFormsImp">
            Allows you to add one (or more) existing PDF document(s)
            and add the form(s) of (an)other PDF document(s).
            @since 2.1.5
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyFormsImp.#ctor(System.IO.Stream)">
            This sets up the output document 
            @param os The Outputstream pointing to the output document
            @throws DocumentException
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyFormsImp.CopyDocumentFields(iTextSharp.text.pdf.PdfReader)">
            This method feeds in the source document
            @param reader The PDF reader containing the source document
            @throws DocumentException
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyFormsImp.MergeFields">
            This merge fields is slightly different from the mergeFields method
            of PdfCopyFields.
        </member>
        <member name="T:iTextSharp.text.pdf.PdfContents">
            <CODE>PdfContents</CODE> is a <CODE>PdfStream</CODE> containing the contents (text + graphics) of a <CODE>PdfPage</CODE>.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContents.#ctor(iTextSharp.text.pdf.PdfContentByte,iTextSharp.text.pdf.PdfContentByte,iTextSharp.text.pdf.PdfContentByte,iTextSharp.text.pdf.PdfContentByte,iTextSharp.text.Rectangle)">
             Constructs a <CODE>PdfContents</CODE>-object, containing text and general graphics.
            
             @param under the direct content that is under all others
             @param content the graphics in a page
             @param text the text in a page
             @param secondContent the direct content that is over all others
             @throws BadPdfFormatException on error
        </member>
        <member name="T:iTextSharp.text.pdf.IntHashtable">
            A Hashtable that uses ints as the keys.
        </member>
        <member name="F:iTextSharp.text.pdf.IntHashtable.table">
            The hash table data.
        </member>
        <member name="F:iTextSharp.text.pdf.IntHashtable.count">
            The total number of entries in the hash table.
        </member>
        <member name="F:iTextSharp.text.pdf.IntHashtable.threshold">
            Rehashes the table when count exceeds this threshold.
        </member>
        <member name="F:iTextSharp.text.pdf.IntHashtable.loadFactor">
            The load factor for the hashtable.
        </member>
        <member name="M:iTextSharp.text.pdf.IntHashtable.#ctor(System.Int32,System.Single)">
            Constructs a new, empty hashtable with the specified initial
        </member>
        <member name="M:iTextSharp.text.pdf.IntHashtable.#ctor(System.Int32)">
            Constructs a new, empty hashtable with the specified initial
        </member>
        <member name="M:iTextSharp.text.pdf.IntHashtable.#ctor">
            Constructs a new, empty hashtable. A default capacity and load factor
        </member>
        <member name="M:iTextSharp.text.pdf.IntHashtable.IsEmpty">
            Returns true if the hashtable contains no elements.
        </member>
        <member name="M:iTextSharp.text.pdf.IntHashtable.Contains(System.Int32)">
            Returns true if the specified object is an element of the hashtable.
        </member>
        <member name="M:iTextSharp.text.pdf.IntHashtable.ContainsKey(System.Int32)">
            Returns true if the collection contains an element for the key.
        </member>
        <member name="M:iTextSharp.text.pdf.IntHashtable.Rehash">
            Rehashes the content of the table into a bigger table.
        </member>
        <member name="M:iTextSharp.text.pdf.IntHashtable.Remove(System.Int32)">
            Removes the element corresponding to the key. Does nothing if the
        </member>
        <member name="M:iTextSharp.text.pdf.IntHashtable.Clear">
            Clears the hash table so that it has no more elements in it.
        </member>
        <member name="P:iTextSharp.text.pdf.IntHashtable.Size">
            Returns the number of elements contained in the hashtable.
        </member>
        <member name="P:iTextSharp.text.pdf.IntHashtable.Item(System.Int32)">
            Gets the object associated with the specified key in the
        </member>
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.pdf.hyphenation.HyphenationTree" -->
        <member name="T:iTextSharp.text.pdf.hyphenation.TernaryTree">
             <h2>Ternary Search Tree</h2>
            
             <p>A ternary search tree is a hibrid between a binary tree and
             a digital search tree (trie). Keys are limited to strings.
             A data value of type char is stored in each leaf node.
             It can be used as an index (or pointer) to the data.
             Branches that only contain one key are compressed to one node
             by storing a pointer to the trailer substring of the key.
             This class is intended to serve as base class or helper class
             to implement Dictionary collections or the like. Ternary trees
             have some nice properties as the following: the tree can be
             traversed in sorted order, partial matches (wildcard) can be
             implemented, retrieval of all keys within a given distance
             from the target, etc. The storage requirements are higher than
             a binary tree but a lot less than a trie. Performance is
             comparable with a hash table, sometimes it outperforms a hash
             function (most of the time can determine a miss faster than a hash).</p>
            
             <p>The main purpose of this java port is to serve as a base for
             implementing TeX's hyphenation algorithm (see The TeXBook,
             appendix H). Each language requires from 5000 to 15000 hyphenation
             patterns which will be keys in this tree. The strings patterns
             are usually small (from 2 to 5 characters), but each char in the
             tree is stored in a node. Thus memory usage is the main concern.
             We will sacrify 'elegance' to keep memory requirenments to the
             minimum. Using java's char type as pointer (yes, I know pointer
             it is a forbidden word in java) we can keep the size of the node
             to be just 8 bytes (3 pointers and the data char). This gives
             room for about 65000 nodes. In my tests the english patterns
             took 7694 nodes and the german patterns 10055 nodes,
             so I think we are safe.</p>
            
             <p>All said, this is a map with strings as keys and char as value.
             Pretty limited!. It can be extended to a general map by
             using the string representation of an object and using the
             char value as an index to an array that contains the object
             values.</p>
            
             @author cav@uniscope.co.jp
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.TernaryTree.lo">
            Pointer to low branch and to rest of the key when it is
            stored directly in this node, we don't have unions in java!
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.TernaryTree.hi">
            Pointer to high branch.
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.TernaryTree.eq">
            Pointer to equal branch and to data when this node is a string terminator.
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.TernaryTree.sc">
            <P>The character stored in this node: splitchar
            Two special values are reserved:</P>
            <ul><li>0x0000 as string terminator</li>
            <li>0xFFFF to indicate that the branch starting at
            this node is compressed</li></ul>
            <p>This shouldn't be a problem if we give the usual semantics to
            strings since 0xFFFF is garanteed not to be an Unicode character.</p>
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.TernaryTree.kv">
            This vector holds the trailing of the keys when the branch is compressed.
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.TernaryTree.Insert(System.String,System.Char)">
            Branches are initially compressed, needing
            one node per key plus the size of the string
            key. They are decompressed as needed when
            another key with same prefix
            is inserted. This saves a lot of space,
            specially for long keys.
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.TernaryTree.Insert(System.Char,System.Char[],System.Int32,System.Char)">
            The actual insertion function, recursive version.
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.TernaryTree.Strcmp(System.Char[],System.Int32,System.Char[],System.Int32)">
            Compares 2 null terminated char arrays
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.TernaryTree.Strcmp(System.String,System.Char[],System.Int32)">
            Compares a string with null terminated char array
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.TernaryTree.InsertBalanced(System.String[],System.Char[],System.Int32,System.Int32)">
            Recursively insert the median first and then the median of the
            lower and upper halves, and so on in order to get a balanced
            tree. The array of keys is assumed to be sorted in ascending
            order.
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.TernaryTree.Balance">
            Balance the tree for best search performance
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.TernaryTree.TrimToSize">
             Each node stores a character (splitchar) which is part of
             some Key(s). In a compressed branch (one that only contain
             a single string key) the trailer of the key which is not
             already in nodes is stored  externally in the kv array.
             As items are inserted, key substrings decrease.
             Some substrings may completely  disappear when the whole
             branch is totally decompressed.
             The tree is traversed to find the key substrings actually
             used. In addition, duplicate substrings are removed using
             a map (implemented with a TernaryTree!).
            
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.TernaryTree.Iterator.cur">
            current node index
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.TernaryTree.Iterator.curkey">
            current key
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.TernaryTree.Iterator.parent">
            TernaryTree parent
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.TernaryTree.Iterator.ns">
            Node stack
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.TernaryTree.Iterator.ks">
            key stack implemented with a StringBuilder
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.TernaryTree.Iterator.Up">
            traverse upwards
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.TernaryTree.Iterator.Run">
            traverse the tree to find next key
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.HyphenationTree.vspace">
            value space: stores the inteletter values
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.HyphenationTree.stoplist">
            This map stores hyphenation exceptions
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.HyphenationTree.classmap">
            This map stores the character classes
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.HyphenationTree.ivalues">
            Temporary map to store interletter values on pattern loading.
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.HyphenationTree.PackValues(System.String)">
            Packs the values by storing them in 4 bits, two values into a byte
            Values range is from 0 to 9. We use zero as terminator,
            so we'll add 1 to the value.
            @param values a string of digits from '0' to '9' representing the
            interletter values.
            @return the index into the vspace array where the packed values
            are stored.
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.HyphenationTree.Hstrcmp(System.Char[],System.Int32,System.Char[],System.Int32)">
            String compare, returns 0 if equal or
            t is a substring of s
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.hyphenation.HyphenationTree.SearchPatterns(System.Char[],System.Int32,System.Byte[])" -->
        <member name="M:iTextSharp.text.pdf.hyphenation.HyphenationTree.Hyphenate(System.String,System.Int32,System.Int32)">
            Hyphenate word and return a Hyphenation object.
            @param word the word to be hyphenated
            @param remainCharCount Minimum number of characters allowed
            before the hyphenation point.
            @param pushCharCount Minimum number of characters allowed after
            the hyphenation point.
            @return a {@link Hyphenation Hyphenation} object representing
            the hyphenated word or null if word is not hyphenated.
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.HyphenationTree.Hyphenate(System.Char[],System.Int32,System.Int32,System.Int32,System.Int32)">
            Hyphenate word and return an array of hyphenation points.
            @param w char array that contains the word
            @param offset Offset to first character in word
            @param len Length of word
            @param remainCharCount Minimum number of characters allowed
            before the hyphenation point.
            @param pushCharCount Minimum number of characters allowed after
            the hyphenation point.
            @return a {@link Hyphenation Hyphenation} object representing
            the hyphenated word or null if word is not hyphenated.
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.HyphenationTree.AddClass(System.String)">
            Add a character class to the tree. It is used by
            {@link SimplePatternParser SimplePatternParser} as callback to
            add character classes. Character classes define the
            valid word characters for hyphenation. If a word contains
            a character not defined in any of the classes, it is not hyphenated.
            It also defines a way to normalize the characters in order
            to compare them with the stored patterns. Usually pattern
            files use only lower case characters, in this case a class
            for letter 'a', for example, should be defined as "aA", the first
            character being the normalization char.
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.HyphenationTree.AddException(System.String,System.Collections.ArrayList)">
            Add an exception to the tree. It is used by
            {@link SimplePatternParser SimplePatternParser} class as callback to
            store the hyphenation exceptions.
            @param word normalized word
            @param hyphenatedword a vector of alternating strings and
            {@link Hyphen hyphen} objects.
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.HyphenationTree.AddPattern(System.String,System.String)">
            Add a pattern to the tree. Mainly, to be used by
            {@link SimplePatternParser SimplePatternParser} class as callback to
            add a pattern to the tree.
            @param pattern the hyphenation pattern
            @param ivalue interletter weight values indicating the
            desirability and priority of hyphenating at a given point
            within the pattern. It should contain only digit characters.
            (i.e. '0' to '9').
        </member>
        <member name="M:iTextSharp.text.pdf.DocumentFont.#ctor(iTextSharp.text.pdf.PRIndirectReference)">
            Creates a new instance of DocumentFont 
        </member>
        <member name="M:iTextSharp.text.pdf.DocumentFont.GetFontDescriptor(System.Int32,System.Single)">
            Gets the font parameter identified by <CODE>key</CODE>. Valid values
             for <CODE>key</CODE> are <CODE>ASCENT</CODE>, <CODE>CAPHEIGHT</CODE>, <CODE>DESCENT</CODE>,
             <CODE>ITALICANGLE</CODE>, <CODE>BBOXLLX</CODE>, <CODE>BBOXLLY</CODE>, <CODE>BBOXURX</CODE>
             and <CODE>BBOXURY</CODE>.
             @param key the parameter to be extracted
             @param fontSize the font size in points
             @return the parameter in points
            
        </member>
        <member name="M:iTextSharp.text.pdf.DocumentFont.GetKerning(System.Int32,System.Int32)">
            Gets the kerning between two Unicode chars.
             @param char1 the first char
             @param char2 the second char
             @return the kerning to be applied
            
        </member>
        <member name="M:iTextSharp.text.pdf.DocumentFont.GetRawWidth(System.Int32,System.String)">
            Gets the width from the font according to the Unicode char <CODE>c</CODE>
             or the <CODE>name</CODE>. If the <CODE>name</CODE> is null it's a symbolic font.
             @param c the unicode char
             @param name the glyph name
             @return the width of the char
            
        </member>
        <member name="M:iTextSharp.text.pdf.DocumentFont.HasKernPairs">
            Checks if the font has any kerning pairs.
             @return <CODE>true</CODE> if the font has any kerning pairs
            
        </member>
        <member name="M:iTextSharp.text.pdf.DocumentFont.WriteFont(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.pdf.PdfIndirectReference,System.Object[])">
            Outputs to the writer the font dictionaries and streams.
             @param writer the writer for this document
             @param ref the font indirect reference
             @param params several parameters that depend on the font type
             @throws IOException on error
             @throws DocumentException error in generating the object
            
        </member>
        <member name="M:iTextSharp.text.pdf.DocumentFont.GetFullFontStream">
            Always returns null.
            @return  null
            @since   2.1.3
        </member>
        <member name="M:iTextSharp.text.pdf.DocumentFont.GetWidth(System.Int32)">
            Gets the width of a <CODE>char</CODE> in normalized 1000 units.
            @param char1 the unicode <CODE>char</CODE> to get the width of
            @return the width in normalized 1000 units
        </member>
        <!-- Badly formed XML comment ignored for member "P:iTextSharp.text.pdf.DocumentFont.FamilyFontName" -->
        <!-- Badly formed XML comment ignored for member "P:iTextSharp.text.pdf.DocumentFont.FullFontName" -->
        <!-- Badly formed XML comment ignored for member "P:iTextSharp.text.pdf.DocumentFont.AllNameEntries" -->
        <member name="P:iTextSharp.text.pdf.DocumentFont.PostscriptFontName">
            Gets the postscript font name.
             @return the postscript font name
            
        </member>
        <member name="P:iTextSharp.text.pdf.DocumentFont.Uni2Byte">
            Exposes the unicode - > CID map that is constructed from the font's encoding
            @return the unicode to CID map
            @since 2.1.7
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFFaxDecoder.#ctor(System.Int32,System.Int32,System.Int32)">
            @param fillOrder   The fill order of the compressed data bytes.
            @param w
            @param h
        </member>
        <member name="T:iTextSharp.text.pdf.CMYKColor">
            
             @author  Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="T:iTextSharp.text.pdf.BidiLine">
            Does all the line bidirectional processing with PdfChunk assembly.
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="M:iTextSharp.text.pdf.BidiLine.#ctor">
            Creates new BidiLine 
        </member>
        <member name="M:iTextSharp.text.pdf.BidiLine.GetWidth(System.Int32,System.Int32)">
            Gets the width of a range of characters.
            @param startIdx the first index to calculate
            @param lastIdx the last inclusive index to calculate
            @return the sum of all widths
        </member>
        <member name="T:iTextSharp.text.html.HtmlTags">
            A class that contains all the possible tagnames and their attributes.
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.HTML">
            the root tag. 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.HEAD">
            the head tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.CONTENT">
            This is a possible HTML attribute for the HEAD tag. 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.META">
            the meta tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.SUBJECT">
            attribute of the root tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.KEYWORDS">
            attribute of the root tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.AUTHOR">
            attribute of the root tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.TITLE">
            the title tag. 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.SCRIPT">
            the script tag. 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.LANGUAGE">
            This is a possible HTML attribute for the SCRIPT tag. 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.JAVASCRIPT">
            This is a possible value for the LANGUAGE attribute. 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.BODY">
            the body tag. 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.JAVASCRIPT_ONLOAD">
            This is a possible HTML attribute for the BODY tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.JAVASCRIPT_ONUNLOAD">
            This is a possible HTML attribute for the BODY tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.TOPMARGIN">
            This is a possible HTML attribute for the BODY tag. 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.BOTTOMMARGIN">
            This is a possible HTML attribute for the BODY tag. 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.LEFTMARGIN">
            This is a possible HTML attribute for the BODY tag. 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.RIGHTMARGIN">
            This is a possible HTML attribute for the BODY tag. 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.CHUNK">
            the chunk tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.CODE">
            the phrase tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.VAR">
            the phrase tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.ANCHOR">
            the anchor tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.ORDEREDLIST">
            the list tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.UNORDEREDLIST">
            the list tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.LISTITEM">
            the listitem tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.PARAGRAPH">
            the paragraph tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.NAME">
            attribute of anchor tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.REFERENCE">
            attribute of anchor tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.FONT">
            attribute of the chunk tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.SIZE">
            attribute of the chunk tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.COLOR">
            attribute of the chunk/table/cell tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.EM">
            some phrase tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.I">
            some phrase tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.STRONG">
            some phrase tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.B">
            some phrase tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.S">
            some phrase tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.U">
            some phrase tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.SUB">
            some phrase tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.SUP">
            some phrase tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.HORIZONTALRULE">
            the possible value of a tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.TABLE">
            the table tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.ROW">
            the cell tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.CELL">
            the cell tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.HEADERCELL">
            attribute of the cell tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.COLUMNS">
            attribute of the table tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.CELLPADDING">
            attribute of the table tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.CELLSPACING">
            attribute of the table tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.COLSPAN">
            attribute of the cell tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.ROWSPAN">
            attribute of the cell tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.NOWRAP">
            attribute of the cell tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.BORDERWIDTH">
            attribute of the table/cell tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.WIDTH">
            attribute of the table/cell tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.BACKGROUNDCOLOR">
            attribute of the table/cell tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.BORDERCOLOR">
            attribute of the table/cell tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.ALIGN">
            attribute of paragraph/image/table tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.LEFT">
            attribute of chapter/section/paragraph/table/cell tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.RIGHT">
            attribute of chapter/section/paragraph/table/cell tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.HORIZONTALALIGN">
            attribute of the cell tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.VERTICALALIGN">
            attribute of the cell tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.TOP">
            attribute of the table/cell tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.BOTTOM">
            attribute of the table/cell tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.IMAGE">
            the image tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.URL">
            attribute of the image tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.ALT">
            attribute of the image tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.PLAINWIDTH">
            attribute of the image tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.PLAINHEIGHT">
            attribute of the image tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.NEWLINE">
            the newpage tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.ALIGN_LEFT">
            the possible value of an alignment attribute 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.ALIGN_CENTER">
            the possible value of an alignment attribute 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.ALIGN_RIGHT">
            the possible value of an alignment attribute 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.ALIGN_JUSTIFIED">
            the possible value of an alignment attribute 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.ALIGN_TOP">
            the possible value of an alignment attribute 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.ALIGN_MIDDLE">
            the possible value of an alignment attribute 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.ALIGN_BOTTOM">
            the possible value of an alignment attribute 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.ALIGN_BASELINE">
            the possible value of an alignment attribute 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.DEFAULT">
            the possible value of an alignment attribute 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.DIV">
            The DIV tag. 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.SPAN">
            The SPAN tag. 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.LINK">
            The LINK tag. 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.TEXT_CSS">
            This is a possible HTML attribute for the LINK tag. 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.REL">
            This is a possible HTML attribute for the LINK tag. 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.STYLE">
            This is used for inline css style information 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.TYPE">
            This is a possible HTML attribute for the LINK tag. 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.STYLESHEET">
            This is a possible HTML attribute. 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.PRE">
            This is a possible HTML attribute for auto-formated 
            @since 2.1.3
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.H">
            attribute of anchor tag 
        </member>
        <member name="T:iTextSharp.text.Anchor">
            <summary>
            An Anchor can be a reference or a destination of a reference.
            </summary>
            <remarks>
            An Anchor is a special kind of <see cref="T:iTextSharp.text.Phrase"/>.
            It is constructed in the same way.
            </remarks>
            <seealso cref="T:iTextSharp.text.Element"/>
            <seealso cref="T:iTextSharp.text.Phrase"/>
        </member>
        <member name="F:iTextSharp.text.Anchor.name">
            <summary>
            This is the name of the Anchor.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Anchor.reference">
            <summary>
            This is the reference of the Anchor.
            </summary>
        </member>
        <member name="M:iTextSharp.text.Anchor.#ctor">
            <summary>
            Constructs an Anchor without specifying a leading.
            </summary>
            <overloads>
            Has nine overloads.
            </overloads>
        </member>
        <member name="M:iTextSharp.text.Anchor.#ctor(System.Single)">
            <summary>
            Constructs an Anchor with a certain leading.
            </summary>
            <param name="leading">the leading</param>
        </member>
        <member name="M:iTextSharp.text.Anchor.#ctor(iTextSharp.text.Chunk)">
            <summary>
            Constructs an Anchor with a certain Chunk.
            </summary>
            <param name="chunk">a Chunk</param>
        </member>
        <member name="M:iTextSharp.text.Anchor.#ctor(System.String)">
            <summary>
            Constructs an Anchor with a certain string.
            </summary>
            <param name="str">a string</param>
        </member>
        <member name="M:iTextSharp.text.Anchor.#ctor(System.String,iTextSharp.text.Font)">
            <summary>
            Constructs an Anchor with a certain string
            and a certain Font.
            </summary>
            <param name="str">a string</param>
            <param name="font">a Font</param>
        </member>
        <member name="M:iTextSharp.text.Anchor.#ctor(System.Single,iTextSharp.text.Chunk)">
            <summary>
            Constructs an Anchor with a certain Chunk
            and a certain leading.
            </summary>
            <param name="leading">the leading</param>
            <param name="chunk">a Chunk</param>
        </member>
        <member name="M:iTextSharp.text.Anchor.#ctor(System.Single,System.String)">
            <summary>
            Constructs an Anchor with a certain leading
            and a certain string.
            </summary>
            <param name="leading">the leading</param>
            <param name="str">a string</param>
        </member>
        <member name="M:iTextSharp.text.Anchor.#ctor(System.Single,System.String,iTextSharp.text.Font)">
            <summary>
            Constructs an Anchor with a certain leading,
            a certain string and a certain Font.
            </summary>
            <param name="leading">the leading</param>
            <param name="str">a string</param>
            <param name="font">a Font</param>
        </member>
        <member name="M:iTextSharp.text.Anchor.#ctor(iTextSharp.text.Phrase)">
             Constructs an <CODE>Anchor</CODE> with a certain <CODE>Phrase</CODE>.
            
             @param   phrase      a <CODE>Phrase</CODE>
        </member>
        <member name="M:iTextSharp.text.Anchor.Process(iTextSharp.text.IElementListener)">
            <summary>
            Processes the element by adding it (or the different parts) to an
            <see cref="T:iTextSharp.text.IElementListener"/>
            </summary>
            <param name="listener">an IElementListener</param>
            <returns>true if the element was processed successfully</returns>
        </member>
        <member name="P:iTextSharp.text.Anchor.Chunks">
            <summary>
            Gets all the chunks in this element.
            </summary>
            <value>an ArrayList</value>
        </member>
        <member name="P:iTextSharp.text.Anchor.Type">
            <summary>
            Gets the type of the text element.
            </summary>
            <value>a type</value>
        </member>
        <member name="P:iTextSharp.text.Anchor.Name">
            <summary>
            Name of this Anchor.
            </summary>
        </member>
        <member name="P:iTextSharp.text.Anchor.Reference">
            <summary>
            reference of this Anchor.
            </summary>
        </member>
        <member name="P:iTextSharp.text.Anchor.Url">
            <summary>
            reference of this Anchor.
            </summary>
            <value>an Uri</value>
        </member>
        <member name="T:iTextSharp.text.xml.xmp.XmpBasicSchema">
            An implementation of an XmpSchema.
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpBasicSchema.DEFAULT_XPATH_ID">
            default namespace identifier
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpBasicSchema.DEFAULT_XPATH_URI">
            default namespace uri
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpBasicSchema.ADVISORY">
            An unordered array specifying properties that were edited outside the authoring application. Each item should contain a single namespace and XPath separated by one ASCII space (U+0020). 
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpBasicSchema.BASEURL">
            The base URL for relative URLs in the document content. If this document contains Internet links, and those links are relative, they are relative to this base URL. This property provides a standard way for embedded relative URLs to be interpreted by tools. Web authoring tools should set the value based on their notion of where URLs will be interpreted. 
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpBasicSchema.CREATEDATE">
            The date and time the resource was originally created. 
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpBasicSchema.CREATORTOOL">
            The name of the first known tool used to create the resource. If history is present in the metadata, this value should be equivalent to that of xmpMM:History’s softwareAgent property. 
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpBasicSchema.IDENTIFIER">
            An unordered array of text strings that unambiguously identify the resource within a given context. 
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpBasicSchema.METADATADATE">
            The date and time that any metadata for this resource was last changed. 
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpBasicSchema.MODIFYDATE">
            The date and time the resource was last modified. 
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpBasicSchema.NICKNAME">
            A short informal name for the resource. 
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpBasicSchema.THUMBNAILS">
            An alternative array of thumbnail images for a file, which can differ in characteristics such as size or image encoding. 
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpBasicSchema.#ctor">
            @param shorthand
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpBasicSchema.AddCreatorTool(System.String)">
            Adds the creatortool.
            @param creator
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpBasicSchema.AddCreateDate(System.String)">
            Adds the creation date.
            @param date
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpBasicSchema.AddModDate(System.String)">
            Adds the modification date.
            @param date
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpBasicSchema.AddMetaDataDate(System.String)">
            Adds the meta data date.
            @param date
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpBasicSchema.AddIdentifiers(System.String[])">
            Adds the identifier.
            @param id
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpBasicSchema.AddNickname(System.String)">
            Adds the nickname.
            @param name
        </member>
        <member name="T:iTextSharp.text.xml.xmp.EncodingNoPreamble">
            <summary>
            A wrapper for an Encoding to suppress the preamble.
            </summary>
        </member>
        <member name="T:iTextSharp.text.xml.XmlParser">
            <summary>
            This class can be used to parse an XML file.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.XmlParser.parser">
            <summary> This is the instance of the parser. </summary>
        </member>
        <member name="M:iTextSharp.text.xml.XmlParser.#ctor">
            <summary>
            Constructs an XmlParser.
            </summary>
        </member>
        <member name="M:iTextSharp.text.xml.XmlParser.Go(iTextSharp.text.IDocListener,System.Xml.XmlDocument)">
            <summary>
            Parses a given file.
            </summary>
            <param name="document"></param>
            <param name="file"></param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlParser.Go(iTextSharp.text.IDocListener,System.String)">
            <summary>
            Parses a given file.
            </summary>
            <param name="document"></param>
            <param name="file"></param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlParser.Go(iTextSharp.text.IDocListener,System.Xml.XmlTextReader)">
            <summary>
            Parses a given XmlTextReader.
            </summary>
            <param name="document"></param>
            <param name="reader"></param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlParser.Go(iTextSharp.text.IDocListener,System.Xml.XmlDocument,System.Xml.XmlDocument)">
            <summary>
            Parses a given file.
            </summary>
            <param name="document"></param>
            <param name="file"></param>
            <param name="tagmap"></param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlParser.Go(iTextSharp.text.IDocListener,System.Xml.XmlTextReader,System.String)">
            <summary>
            Parses a given XmlTextReader.
            </summary>
            <param name="document"></param>
            <param name="reader"></param>
            <param name="tagmap"></param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlParser.Go(iTextSharp.text.IDocListener,System.String,System.String)">
            <summary>
            Parses a given file.
            </summary>
            <param name="document"></param>
            <param name="file"></param>
            <param name="tagmap"></param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlParser.Go(iTextSharp.text.IDocListener,System.String,System.Collections.Hashtable)">
            <summary>
            Parses a given file.
            </summary>
            <param name="document"></param>
            <param name="file"></param>
            <param name="tagmap"></param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlParser.Go(iTextSharp.text.IDocListener,System.Xml.XmlTextReader,System.Collections.Hashtable)">
            <summary>
            Parses a given XmlTextReader.
            </summary>
            <param name="document"></param>
            <param name="reader"></param>
            <param name="tagmap"></param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlParser.Parse(iTextSharp.text.IDocListener,System.Xml.XmlDocument)">
            <summary>
            Parses a given file.
            </summary>
            <param name="document"></param>
            <param name="file"></param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlParser.Parse(iTextSharp.text.IDocListener,System.String)">
            <summary>
            Parses a given file.
            </summary>
            <param name="document"></param>
            <param name="file"></param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlParser.Parse(iTextSharp.text.IDocListener,System.Xml.XmlTextReader)">
            <summary>
            Parses a given XmlTextReader.
            </summary>
            <param name="document"></param>
            <param name="reader"></param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlParser.Parse(iTextSharp.text.IDocListener,System.Xml.XmlDocument,System.Xml.XmlDocument)">
            <summary>
            Parses a given file.
            </summary>
            <param name="document"></param>
            <param name="file"></param>
            <param name="tagmap"></param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlParser.Parse(iTextSharp.text.IDocListener,System.String,System.String)">
            <summary>
            Parses a given file.
            </summary>
            <param name="document"></param>
            <param name="file"></param>
            <param name="tagmap"></param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlParser.Parse(iTextSharp.text.IDocListener,System.String,System.Collections.Hashtable)">
            <summary>
            Parses a given file.
            </summary>
            <param name="document"></param>
            <param name="file"></param>
            <param name="tagmap"></param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlParser.Parse(iTextSharp.text.IDocListener,System.Xml.XmlTextReader,System.String)">
            <summary>
            Parses a given XmlTextReader.
            </summary>
            <param name="document"></param>
            <param name="reader"></param>
            <param name="tagmap"></param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlParser.Parse(iTextSharp.text.IDocListener,System.Xml.XmlTextReader,System.Collections.Hashtable)">
            <summary>
            Parses a given XmlTextReader.
            </summary>
            <param name="document"></param>
            <param name="reader"></param>
            <param name="tagmap"></param>
        </member>
        <member name="T:iTextSharp.text.Table">
            <summary>
            A Table is a Rectangle that contains Cells,
            ordered in some kind of matrix.
            </summary>
            <remarks>
            Tables that span multiple pages are cut into different parts automatically.
            If you want a table header to be repeated on every page, you may not forget to
            mark the end of the header section by using the method EndHeaders().
            <P/>
            The matrix of a table is not necessarily an m x n-matrix. It can contain holes
            or cells that are bigger than the unit. Believe me or not, but it took some serious
            thinking to make this as userfriendly as possible. I hope you wil find the result
            quite simple (I love simple solutions, especially for complex problems).
            </remarks>
            <example>
            <code>
            // Remark: You MUST know the number of columns when constructing a Table.
            //         The number of rows is not important.
            <STRONG>Table table = new Table(3);</STRONG>
            <STRONG>table.SetBorderWidth(1);</STRONG>
            <STRONG>table.SetBorderColor(new Color(0, 0, 255));</STRONG>
            <STRONG>table.SetPadding(5);</STRONG>
            <STRONG>table.SetSpacing(5);</STRONG>
            Cell cell = new Cell("header");
            cell.SetHeader(true);
            cell.SetColspan(3);
            <STRONG>table.AddCell(cell);</STRONG>
            <STRONG>table.EndHeaders();</STRONG>
            cell = new Cell("example cell with colspan 1 and rowspan 2");
            cell.SetRowspan(2);
            cell.SetBorderColor(new Color(255, 0, 0));
            <STRONG>table.AddCell(cell);</STRONG>
            <STRONG>table.AddCell("1.1");</STRONG>
            <STRONG>table.AddCell("2.1");</STRONG>
            <STRONG>table.AddCell("1.2");</STRONG>
            <STRONG>table.AddCell("2.2");</STRONG>
            <STRONG>table.AddCell("cell test1");</STRONG>
            cell = new Cell("big cell");
            cell.SetRowspan(2);
            cell.SetColspan(2);
            <STRONG>table.AddCell(cell);</STRONG>
            <STRONG>table.AddCell("cell test2");</STRONG>
            </code>
            
            The result of this code is a table:
                <TABLE ALIGN="Center" BORDER="1" BORDERCOLOR="#0000ff" CELLPADDING="5" CELLSPACING="5">
                       <TR ALIGN="Left" VALIGN="Left">
                               <TH ALIGN="Left" COLSPAN="3" VALIGN="Left">
                                       header
                               </TH>
                       </TR>
                       <TR ALIGN="Left" VALIGN="Left">
                               <TD ALIGN="Left" BORDERCOLOR="#ff0000" ROWSPAN="2" VALIGN="Left">
                                       example cell with colspan 1 and rowspan 2
                               </TD>
                               <TD ALIGN="Left" VALIGN="Left">
                                       1.1
                               </TD>
                               <TD ALIGN="Left" VALIGN="Left">
                                       2.1
                               </TD>
                       </TR>
                       <TR ALIGN="Left" VALIGN="Left">
                               <TD ALIGN="Left" VALIGN="Left">
                                       1.2
                               </TD>
                               <TD ALIGN="Left" VALIGN="Left">
                                       2.2
                               </TD>
                       </TR>
                       <TR ALIGN="Left" VALIGN="Left">
                               <TD ALIGN="Left" VALIGN="Left">
                                       cell test1
                               </TD>
                               <TD ALIGN="Left" COLSPAN="2" ROWSPAN="2" VALIGN="Left">
                                       big cell
                               </TD>
                       </TR>
                       <TR ALIGN="Left" VALIGN="Left">
                               <TD ALIGN="Left" VALIGN="Left">
                                       cell test2
                               </TD>
                       </TR>
               </TABLE>
            </example>
            <seealso cref="T:iTextSharp.text.Rectangle"/>
            <seealso cref="T:iTextSharp.text.Element"/>
            <seealso cref="T:iTextSharp.text.Row"/>
            <seealso cref="T:iTextSharp.text.Cell"/>
        </member>
        <member name="F:iTextSharp.text.Table.columns">
            <summary> This is the number of columns in the Table. </summary>
        </member>
        <member name="F:iTextSharp.text.Table.rows">
            <summary> This is the list of Rows. </summary>
        </member>
        <member name="F:iTextSharp.text.Table.defaultCell">
            <summary> This Empty Cell contains the DEFAULT layout of each Cell added with the method AddCell(string content). </summary>
        </member>
        <member name="F:iTextSharp.text.Table.lastHeaderRow">
            <summary> This is the number of the last row of the table headers. </summary>
        </member>
        <member name="F:iTextSharp.text.Table.alignment">
            <summary> This is the horizontal Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Table.cellpadding">
            <summary> This is cellpadding. </summary>
        </member>
        <member name="F:iTextSharp.text.Table.cellspacing">
            <summary> This is cellspacing. </summary>
        </member>
        <member name="F:iTextSharp.text.Table.width">
            <summary> This is the width of the table (in percent of the available space). </summary>
        </member>
        <member name="F:iTextSharp.text.Table.locked">
            Is the width a percentage (false) or an absolute width (true)? 
        </member>
        <member name="F:iTextSharp.text.Table.widths">
            <summary> This is an array containing the widths (in percentages) of every column. </summary>
        </member>
        <member name="F:iTextSharp.text.Table.mTableInserted">
            <summary> bool to track if a table was inserted (to avoid unnecessary computations afterwards) </summary>
        </member>
        <member name="F:iTextSharp.text.Table.autoFillEmptyCells">
            <summary>
            Boolean to automatically fill empty cells before a table is rendered
            (takes CPU so may be set to false in case of certainty)
            </summary>
        </member>
        <member name="F:iTextSharp.text.Table.tableFitsPage">
            <summary> If true this table may not be split over two pages. </summary>
        </member>
        <member name="F:iTextSharp.text.Table.cellsFitPage">
            <summary> If true cells may not be split over two pages. </summary>
        </member>
        <member name="F:iTextSharp.text.Table.offset">
            <summary> This is the offset of the table. </summary>
        </member>
        <member name="F:iTextSharp.text.Table.convert2pdfptable">
            if you want to generate tables the old way, set this value to false. 
        </member>
        <member name="F:iTextSharp.text.Table.notAddedYet">
            Indicates if this is the first time the section was added.
            @since   iText 2.0.8
        </member>
        <member name="F:iTextSharp.text.Table.complete">
            Indicates if the PdfPTable is complete once added to the document.
            @since   iText 2.0.8
        </member>
        <member name="M:iTextSharp.text.Table.#ctor(System.Int32)">
            <summary>
            Constructs a Table with a certain number of columns.
            </summary>
            <param name="columns">The number of columns in the table</param>
            <overloads>
            Has three overloads
            </overloads>
        </member>
        <member name="M:iTextSharp.text.Table.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a Table with a certain number of columns
            and a certain number of Rows.
            </summary>
            <param name="columns">The number of columns in the table</param>
            <param name="rows">The number of rows</param>
            <overloads>
            Has three overloads
            </overloads>
        </member>
        <member name="M:iTextSharp.text.Table.Process(iTextSharp.text.IElementListener)">
            <summary>
            Processes the element by adding it (or the different parts) to an
            IElementListener.
            </summary>
            <param name="listener">an IElementListener</param>
            <returns>true if the element was processed successfully</returns>
        </member>
        <member name="M:iTextSharp.text.Table.IsNestable">
            @see com.lowagie.text.Element#isNestable()
            @since   iText 2.0.8
        </member>
        <member name="M:iTextSharp.text.Table.AddCell(iTextSharp.text.Cell,System.Int32,System.Int32)">
            <summary>
            Adds a Cell to the Table at a certain row and column.
            </summary>
            <param name="aCell">The Cell to add</param>
            <param name="row">The row where the Cell will be added</param>
            <param name="column">The column where the Cell will be added</param>
        </member>
        <member name="M:iTextSharp.text.Table.AddCell(iTextSharp.text.Cell,System.Object)">
            <summary>
            Adds a Cell to the Table at a certain location.
            </summary>
            <param name="aCell">The Cell to add</param>
            <param name="aLocation">The location where the Cell will be added</param>
        </member>
        <member name="M:iTextSharp.text.Table.AddCell(iTextSharp.text.Cell)">
            <summary>
            Adds a Cell to the Table.
            </summary>
            <param name="cell">a Cell</param>
        </member>
        <member name="M:iTextSharp.text.Table.AddCell(iTextSharp.text.Phrase)">
            <summary>
            Adds a Cell to the Table.
            </summary>
            <remarks>
            This is a shortcut for AddCell(Cell cell).
            The Phrase will be converted to a Cell.
            </remarks>
            <param name="content">a Phrase</param>
        </member>
        <member name="M:iTextSharp.text.Table.AddCell(iTextSharp.text.Phrase,System.Drawing.Point)">
            <summary>
            Adds a Cell to the Table.
            </summary>
            <param name="content">a Phrase</param>
            <param name="location">a System.Drawing.Point</param>
        </member>
        <member name="M:iTextSharp.text.Table.AddCell(System.String)">
            <summary>
            Adds a Cell to the Table.
            </summary>
            <remarks>
            This is a shortcut for AddCell(Cell cell).
            The string will be converted to a Cell.
            </remarks>
            <param name="content">a string</param>
        </member>
        <member name="M:iTextSharp.text.Table.AddCell(System.String,System.Drawing.Point)">
            <summary>
            Adds a Cell to the Table.
            </summary>
            <remarks>
            This is a shortcut for AddCell(Cell cell, System.Drawing.Point location).
            The string will be converted to a Cell.
            </remarks>
            <param name="content">a string</param>
            <param name="location">a point</param>
        </member>
        <member name="M:iTextSharp.text.Table.InsertTable(iTextSharp.text.Table)">
            <summary>
            To put a table within the existing table at the current position
            generateTable will of course re-arrange the widths of the columns.
            </summary>
            <param name="aTable">the table you want to insert</param>
        </member>
        <member name="M:iTextSharp.text.Table.InsertTable(iTextSharp.text.Table,System.Int32,System.Int32)">
            <summary>
            To put a table within the existing table at the given position
            generateTable will of course re-arrange the widths of the columns.
            </summary>
            <param name="aTable">The Table to add</param>
            <param name="row">The row where the Cell will be added</param>
            <param name="column">The column where the Cell will be added</param>
        </member>
        <member name="M:iTextSharp.text.Table.InsertTable(iTextSharp.text.Table,System.Drawing.Point)">
            <summary>
            To put a table within the existing table at the given position
            generateTable will of course re-arrange the widths of the columns.
            </summary>
            <param name="aTable">the table you want to insert</param>
            <param name="aLocation">a System.Drawing.Point</param>
        </member>
        <member name="M:iTextSharp.text.Table.Complete">
            <summary>
            Will fill empty cells with valid blank Cells
            </summary>
        </member>
        <member name="M:iTextSharp.text.Table.AssumeTableDefaults(iTextSharp.text.Cell)">
            <summary>
            Sets the unset cell properties to be the table defaults.
            </summary>
            <param name="aCell">The cell to set to table defaults as necessary.</param>
        </member>
        <member name="M:iTextSharp.text.Table.DeleteColumn(System.Int32)">
            <summary>
            Deletes a column in this table.
            </summary>
            <param name="column">the number of the column that has to be deleted</param>
        </member>
        <member name="M:iTextSharp.text.Table.DeleteRow(System.Int32)">
            <summary>
            Deletes a row.
            </summary>
            <param name="row">the number of the row to delete</param>
            <returns>true if the row was deleted; false if not</returns>
        </member>
        <member name="M:iTextSharp.text.Table.DeleteAllRows">
            Deletes all rows in this table.
            (contributed by dperezcar@fcc.es)
        </member>
        <member name="M:iTextSharp.text.Table.DeleteLastRow">
            <summary>
            Deletes the last row in this table.
            </summary>
            <returns>true if the row was deleted; false if not</returns>
        </member>
        <member name="M:iTextSharp.text.Table.EndHeaders">
            <summary>
            Marks the last row of the table headers.
            </summary>
            <returns>the number of the last row of the table headers</returns>
        </member>
        <member name="M:iTextSharp.text.Table.SetAlignment(System.String)">
            <summary>
            Sets the alignment of this paragraph.
            </summary>
            <param name="alignment">the new alignment as a string</param>
        </member>
        <member name="M:iTextSharp.text.Table.SetWidths(System.Int32[])">
            <summary>
            Sets the widths of the different columns (percentages).
            </summary>
            <remarks>
            You can give up relative values of borderwidths.
            The sum of these values will be considered 100%.
            The values will be recalculated as percentages of this sum.
            </remarks>
            <param name="widths">an array with values</param>
        </member>
        <member name="M:iTextSharp.text.Table.GetEnumerator">
            <summary>
            Gets an Iterator of all the Rows.
            </summary>
            <returns>an IEnumerator</returns>
        </member>
        <member name="M:iTextSharp.text.Table.GetElement(System.Int32,System.Int32)">
            <summary>
            returns the element at the position row, column
                      (Cast to Cell or Table)
            </summary>
            <param name="row"></param>
            <param name="column"></param>
            <returns>an object</returns>
        </member>
        <member name="M:iTextSharp.text.Table.MergeInsertedTables">
            <summary>
            Integrates all added tables and recalculates column widths.
            </summary>
        </member>
        <member name="M:iTextSharp.text.Table.FillEmptyMatrixCells">
            <summary>
            Integrates all added tables and recalculates column widths.
            </summary>
        </member>
        <member name="M:iTextSharp.text.Table.IsValidLocation(iTextSharp.text.Cell,System.Drawing.Point)">
            <summary>
            check if Cell 'fits' the table.
            </summary>
            <remarks>
            <UL><LI/>rowspan/colspan not beyond borders
                <LI/>spanned cell don't overlap existing cells</UL>
            </remarks>
            <param name="aCell">the cell that has to be checked</param>
            <param name="aLocation">the location where the cell has to be placed</param>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.Table.PlaceCell(System.Collections.ArrayList,iTextSharp.text.Cell,System.Drawing.Point)">
            <summary>
            Inserts a Cell in a cell-array and reserves cells defined by row-/colspan.
            </summary>
            <param name="someRows">some rows</param>
            <param name="aCell">the cell that has to be inserted</param>
            <param name="aPosition">the position where the cell has to be placed</param>
        </member>
        <member name="M:iTextSharp.text.Table.AddColumns(System.Int32)">
            <summary>
            Gives you the posibility to add columns.
            </summary>
            <param name="aColumns">the number of columns to add</param>
        </member>
        <member name="M:iTextSharp.text.Table.GetWidths(System.Single,System.Single)">
            <summary>
            Gets an array with the positions of the borders between every column.
            </summary>
            <remarks>
            This method translates the widths expressed in percentages into the
            x-coordinate of the borders of the columns on a real document.
            </remarks>
            <param name="left">this is the position of the first border at the left (cellpadding not included)</param>
            <param name="totalWidth">
            this is the space between the first border at the left
            and the last border at the right (cellpadding not included)
            </param>
            <returns>an array with borderpositions</returns>
        </member>
        <member name="M:iTextSharp.text.Table.CreatePdfPTable">
            Create a PdfPTable based on this Table object.
            @return a PdfPTable object
            @throws BadElementException
        </member>
        <member name="M:iTextSharp.text.Table.FlushContent">
            @since   iText 2.0.8
            @see com.lowagie.text.LargeElement#flushContent()
        </member>
        <member name="P:iTextSharp.text.Table.DefaultLayout">
            Sets the default layout of the Table to
            the provided Cell
            @param value a cell with all the defaults
        </member>
        <member name="P:iTextSharp.text.Table.DefaultCell">
            Sets the default layout of the Table to
            the provided Cell
            @param value a cell with all the defaults
        </member>
        <member name="P:iTextSharp.text.Table.AutoFillEmptyCells">
            <summary>
            Enables/disables automatic insertion of empty cells before table is rendered. (default = false)
            </summary>
            <remarks>
            As some people may want to create a table, fill only a couple of the cells and don't bother with
            investigating which empty ones need to be added, this default behaviour may be very welcome.
            Disabling is recommended to increase speed. (empty cells should be added through extra code then)
            </remarks>
            <value>enable/disable autofill</value>
        </member>
        <member name="P:iTextSharp.text.Table.TableFitsPage">
            <summary>
            Allows you to control when a page break occurs.
            </summary>
            <remarks>
            When a table doesn't fit a page, it is split in two parts.
            If you want to avoid this, you should set the <VAR>tableFitsPage</VAR> value to true.
            </remarks>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Table.CellsFitPage">
            <summary>
            Allows you to control when a page break occurs.
            </summary>
            <remarks>
            When a cell doesn't fit a page, it is split in two parts.
            If you want to avoid this, you should set the <VAR>cellsFitPage</VAR> value to true.
            </remarks>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Table.Offset">
            <summary>
            Get/set the offset of this table.
            </summary>
            <value>the space between this table and the previous element.</value>
        </member>
        <member name="P:iTextSharp.text.Table.Type">
            <summary>
            Gets the type of the text element.
            </summary>
            <value>a type</value>
        </member>
        <member name="P:iTextSharp.text.Table.DefaultCellBorder">
            <summary>
            Changes the border in the default layout of the Cells
            added with method AddCell(string content).
            </summary>
            <value>the new border value</value>
        </member>
        <member name="P:iTextSharp.text.Table.DefaultCellBorderWidth">
            <summary>
            Changes the width of the borders in the default layout of the Cells
            added with method AddCell(string content).
            </summary>
            <value>the new width</value>
        </member>
        <member name="P:iTextSharp.text.Table.DefaultCellBorderColor">
            <summary>
            Changes the bordercolor in the default layout of the Cells
            added with method AddCell(string content).
            </summary>
        </member>
        <member name="P:iTextSharp.text.Table.DefaultCellBackgroundColor">
            <summary>
            Changes the backgroundcolor in the default layout of the Cells
            added with method AddCell(string content).
            </summary>
            <value>the new color</value>
        </member>
        <member name="P:iTextSharp.text.Table.DefaultCellGrayFill">
            <summary>
            Changes the grayfill in the default layout of the Cells
            added with method AddCell(string content).
            </summary>
            <value>the new value</value>
        </member>
        <member name="P:iTextSharp.text.Table.DefaultHorizontalAlignment">
            <summary>
            Changes the horizontalalignment in the default layout of the Cells
            added with method AddCell(string content).
            </summary>
            <value>the new alignment value</value>
        </member>
        <member name="P:iTextSharp.text.Table.DefaultVerticalAlignment">
            <summary>
            Changes the verticalAlignment in the default layout of the Cells
            added with method AddCell(string content).
            </summary>
            <value>the new alignment value</value>
        </member>
        <member name="P:iTextSharp.text.Table.DefaultRowspan">
            <summary>
            Changes the rowspan in the default layout of the Cells
            added with method AddCell(string content).
            </summary>
            <value>the new rowspan value</value>
        </member>
        <member name="P:iTextSharp.text.Table.DefaultColspan">
            <summary>
            Changes the colspan in the default layout of the Cells
            added with method AddCell(string content).
            </summary>
            <value>the new colspan value</value>
        </member>
        <member name="P:iTextSharp.text.Table.LastHeaderRow">
            <summary>
            Sets the horizontal Element.
            </summary>
            <value>the new value</value>
        </member>
        <member name="P:iTextSharp.text.Table.Padding">
            <summary>
            Sets the cellpadding.
            </summary>
            <value>the new value</value>
        </member>
        <member name="P:iTextSharp.text.Table.Spacing">
            <summary>
            Sets the cellspacing.
            </summary>
            <value>the new value</value>
        </member>
        <member name="P:iTextSharp.text.Table.Widths">
            <summary>
            Sets the widths of the different columns (percentages).
            </summary>
            <remarks>
            You can give up relative values of borderwidths.
            The sum of these values will be considered 100%.
            The values will be recalculated as percentages of this sum.
            </remarks>
            <example>
            <BLOCKQUOTE><PRE>
            float[] widths = {2, 1, 1};
            <STRONG>table.SetWidths(widths)</STRONG>
            </PRE></BLOCKQUOTE>
            
            The widths will be: a width of 50% for the first column,
            25% for the second and third column.
            </example>
            <value>an array with values</value>
        </member>
        <member name="P:iTextSharp.text.Table.Columns">
            <summary>
            Gets the number of columns.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Table.Size">
            <summary>
            Gets the number of rows in this Table.
            </summary>
            <value>the number of rows in this Table</value>
        </member>
        <member name="P:iTextSharp.text.Table.ProportionalWidths">
            <summary>
            Gets the proportional widths of the columns in this Table.
            </summary>
            <value>the proportional widths of the columns in this Table</value>
        </member>
        <member name="P:iTextSharp.text.Table.Alignment">
            <summary>
            Get/set the horizontal Element.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Table.Cellpadding">
            <summary>
            Get/set the cellpadding.
            </summary>
            <value>the cellpadding</value>
        </member>
        <member name="P:iTextSharp.text.Table.Cellspacing">
            <summary>
            Get/set the cellspacing.
            </summary>
            <value>the cellspacing</value>
        </member>
        <member name="P:iTextSharp.text.Table.Width">
            <summary>
            Get/set the table width (a percentage).
            </summary>
            <value>the table width (a percentage)</value>
        </member>
        <member name="P:iTextSharp.text.Table.Dimension">
            <summary>
            Gets the dimension of this table
            </summary>
            <value>the dimension</value>
        </member>
        <member name="P:iTextSharp.text.Table.CurrentLocationToNextValidPosition">
            <summary>
            Sets current col/row to Valid(empty) pos after addCell/Table
            </summary>
            <value>a System.Drawing.Point</value>
        </member>
        <member name="P:iTextSharp.text.Table.NextRow">
            Returns the next row 0-based index where a new cell would be added.
            (contributed by dperezcar@fcc.es)
            @return x coordinate for the next row
        </member>
        <member name="P:iTextSharp.text.Table.NextColumn">
            Returns the next column 0-based index where a new cell would be added.
            (contributed by dperezcar@fcc.es)
            @return y coordinate for the next row
        </member>
        <member name="P:iTextSharp.text.Table.Convert2pdfptable">
            If set to true, iText will try to convert the Table to a PdfPTable.
            @param convert2pdfptable true if you want iText to try to convert the Table to a PdfPTable
        </member>
        <member name="P:iTextSharp.text.Table.NotAddedYet">
            Indicates if this is the first time the section is added.
            @since   iText2.0.8
            @return  true if the section wasn't added yet
        </member>
        <member name="P:iTextSharp.text.Table.ElementComplete">
            @since   iText 2.0.8
            @see com.lowagie.text.LargeElement#isComplete()
        </member>
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.rtf.table.RtfRow" -->
        <member name="F:iTextSharp.text.rtf.table.RtfRow.ROW_BEGIN">
            Constant for the RtfRow beginning
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow.ROW_WIDTH_STYLE">
            Constant for the RtfRow width style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow.ROW_WIDTH">
            Constant for the RtfRow width
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow.ROW_KEEP_TOGETHER">
            Constant to specify that this RtfRow are not to be broken across pages
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow.ROW_HEADER_ROW">
            Constant to specify that this is a header RtfRow
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow.ROW_ALIGN_LEFT">
            Constant for left alignment of this RtfRow
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow.ROW_ALIGN_RIGHT">
            Constant for right alignment of this RtfRow
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow.ROW_ALIGN_CENTER">
            Constant for center alignment of this RtfRow
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow.ROW_ALIGN_JUSTIFIED">
            Constant for justified alignment of this RtfRow
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow.ROW_GRAPH">
            Constant for the graph style of this RtfRow
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow.ROW_CELL_SPACING_LEFT">
            Constant for the cell left spacing
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow.ROW_CELL_SPACING_TOP">
            Constant for the cell top spacing
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow.ROW_CELL_SPACING_RIGHT">
            Constant for the cell right spacing
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow.ROW_CELL_SPACING_BOTTOM">
            Constant for the cell bottom spacing
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow.ROW_CELL_SPACING_LEFT_STYLE">
            Constant for the cell left spacing style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow.ROW_CELL_SPACING_TOP_STYLE">
            Constant for the cell top spacing style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow.ROW_CELL_SPACING_RIGHT_STYLE">
            Constant for the cell right spacing style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow.ROW_CELL_SPACING_BOTTOM_STYLE">
            Constant for the cell bottom spacing style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow.ROW_CELL_PADDING_LEFT">
            Constant for the cell left padding
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow.ROW_CELL_PADDING_RIGHT">
            Constant for the cell right padding
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow.ROW_CELL_PADDING_LEFT_STYLE">
            Constant for the cell left padding style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow.ROW_CELL_PADDING_RIGHT_STYLE">
            Constant for the cell right padding style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow.ROW_END">
            Constant for the end of a row
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow.parentTable">
            The RtfTable this RtfRow belongs to
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow.cells">
            The cells of this RtfRow
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow.width">
            The width of this row
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow.rowNumber">
            The row number
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfRow.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.rtf.table.RtfTable,iTextSharp.text.Row,System.Int32)">
            Constructs a RtfRow for a Row.
            
            @param doc The RtfDocument this RtfRow belongs to
            @param rtfTable The RtfTable this RtfRow belongs to
            @param row The Row this RtfRow is based on
            @param rowNumber The number of this row
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfRow.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.rtf.table.RtfTable,iTextSharp.text.pdf.PdfPRow,System.Int32)">
            Constructs a RtfRow for a Row.
            
            @param doc The RtfDocument this RtfRow belongs to
            @param rtfTable The RtfTable this RtfRow belongs to
            @param row The Row this RtfRow is based on
            @param rowNumber The number of this row
            @since 2.1.3
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfRow.ImportRow(iTextSharp.text.Row)">
            Imports a Row and copies all settings
            
            @param row The Row to import
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfRow.ImportRow(iTextSharp.text.pdf.PdfPRow)">
            Imports a PdfPRow and copies all settings
            
            @param row The PdfPRow to import
            @since 2.1.3
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfRow.HandleCellSpanning">
            Performs a second pass over all cells to handle cell row/column spanning.
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfRow.CleanRow">
            Cleans the deleted RtfCells from the total RtfCells.
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfRow.WriteRowDefinition(System.IO.Stream)">
             Writes the row definition/settings.
            
             @param result The <code>Stream</code> to write the definitions to.
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfRow.WriteContent(System.IO.Stream)">
            Writes the content of this RtfRow
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfRow.GetParentTable">
            Gets the parent RtfTable of this RtfRow
            
            @return The parent RtfTable of this RtfRow
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfRow.GetCells">
            Gets the cells of this RtfRow
            
            @return The cells of this RtfRow
        </member>
        <member name="T:iTextSharp.text.rtf.parser.properties.RtfProperty">
            <code>RtfProperty</code> handles document, paragraph, etc. property values
            
            @author Howard Shank (hgshank@yahoo.com)
            @since 2.0.8
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.JUSTIFY_LEFT">
            Justify left 
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.JUSTIFY_RIGHT">
            Justify right 
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.JUSTIFY_CENTER">
            Justify center 
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.JUSTIFY_FULL">
            Justify full 
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.PARAGRAPH_BORDER_NIL">
            possible border settting 
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.PARAGRAPH_BORDER_BOTTOM">
            possible border settting 
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.PARAGRAPH_BORDER_TOP">
            possible border settting 
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.PARAGRAPH_BORDER_LEFT">
            possible border settting 
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.PARAGRAPH_BORDER_RIGHT">
            possible border settting 
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.PARAGRAPH_BORDER_DIAGONAL_UL_LR">
            possible border settting 
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.PARAGRAPH_BORDER_DIAGONAL_UR_LL">
            possible border settting 
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.PARAGRAPH_BORDER_TABLE_HORIZONTAL">
            possible border settting 
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.PARAGRAPH_BORDER_TABLE_VERTICAL">
            possible border settting 
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.PGN_DECIMAL">
            Decimal number format 
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.PGN_ROMAN_NUMERAL_UPPERCASE">
            Uppercase Roman Numeral 
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.PGN_ROMAN_NUMERAL_LOWERCASE">
            Lowercase Roman Numeral 
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.PGN_LETTER_UPPERCASE">
            Uppercase Letter 
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.PGN_LETTER_LOWERCASE">
            Lowercase Letter 
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.SBK_NONE">
            Section Break None 
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.SBK_COLUMN">
            Section Break Column break 
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.SBK_EVEN">
            Section Break Even page break 
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.SBK_ODD">
            Section Break Odd page break 
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.SBK_PAGE">
            Section Break Page break 
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.PAGE_PORTRAIT">
            Portrait orientation 
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.PAGE_LANDSCAPE">
            Landscape orientation 
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.properties">
            Properties for this RtfProperty object 
        </member>
        <member name="F:iTextSharp.text.rtf.parser.properties.RtfProperty.listeners">
            The <code>RtfPropertyListener</code>. 
        </member>
        <member name="M:iTextSharp.text.rtf.parser.properties.RtfProperty.SetToDefault">
            Set all property objects to default values.
            @since 2.0.8
        </member>
        <member name="M:iTextSharp.text.rtf.parser.properties.RtfProperty.SetToDefault(System.String)">
            Set individual property group to default values.
            @param propertyGroup <code>String</code> name of the property group to set to default.
            @since 2.0.8
        </member>
        <member name="M:iTextSharp.text.rtf.parser.properties.RtfProperty.ToggleProperty(iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordData)">
            Toggle the value of the property identified by the <code>RtfCtrlWordData.specialHandler</code> parameter.
            Toggle values are assumed to be integer values per the RTF spec with a value of 0=off or 1=on.
            
            @param ctrlWordData The property name to set
            @return <code>true</code> for handled or <code>false</code> if <code>propertyName</code> is <code>null</code> or <i>blank</i>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.properties.RtfProperty.SetProperty(iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordData)">
            Set the value of the property identified by the parameter.
            
            @param ctrlWordData The controlword with the name to set
            @return <code>true</code> for handled or <code>false</code> if <code>propertyName</code> or <code>propertyValue</code> is <code>null</code>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.properties.RtfProperty.SetProperty(System.String,System.Object)">
            Set the value of the property identified by the parameter.
            
            @param propertyName The property name to set
            @param propertyValueNew The object to set the property value to
            @return <code>true</code> for handled or <code>false</code> if <code>propertyName</code> or <code>propertyValue</code> is <code>null</code>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.properties.RtfProperty.SetProperty(System.String,System.Int32)">
            Set the value of the property identified by the parameter.
            
            @param propertyName The property name to set
            @param propertyValue The object to set the property value to
            @return <code>true</code> for handled or <code>false</code> if <code>propertyName</code> is <code>null</code>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.properties.RtfProperty.AddToProperty(System.String,System.Int32)">
            Add the value of the property identified by the parameter.
            
            @param propertyName The property name to set
            @param propertyValue The object to set the property value to
            @return <code>true</code> for handled or <code>false</code> if <code>propertyName</code> is <code>null</code>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.properties.RtfProperty.SetProperty(System.String,System.Int64)">
            Set the value of the property identified by the parameter.
            
            @param propertyName The property name to set
            @param propertyValue The object to set the property value to
            @return <code>true</code> for handled or <code>false</code> if <code>propertyName</code> is <code>null</code>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.properties.RtfProperty.AddToProperty(System.String,System.Int64)">
            Add the value of the property identified by the parameter.
            
            @param propertyName The property name to set
            @param propertyValue The object to set the property value to
            @return <code>true</code> for handled or <code>false</code> if <code>propertyName</code> is <code>null</code>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.properties.RtfProperty.GetProperty(System.String)">
            Get the value of the property identified by the parameter.
            
            @param propertyName String containing the property name to get
            @return Property Object requested or null if not found in map.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.properties.RtfProperty.GetProperties(System.String)">
            Get a group of properties.
            
            @param propertyGroup The group name to obtain.
            @return Properties object with requested values.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.properties.RtfProperty.IsModified">
            @return the modified
        </member>
        <member name="M:iTextSharp.text.rtf.parser.properties.RtfProperty.SetModified(System.String,System.Boolean)">
            @param propertyName the propertyName that is modified
            @param modified the modified to set
        </member>
        <member name="M:iTextSharp.text.rtf.parser.properties.RtfProperty.IsModifiedCharacter">
            @return the modifiedCharacter
        </member>
        <member name="M:iTextSharp.text.rtf.parser.properties.RtfProperty.SetModifiedCharacter(System.Boolean)">
            @param modifiedCharacter the modifiedCharacter to set
        </member>
        <member name="M:iTextSharp.text.rtf.parser.properties.RtfProperty.IsModifiedParagraph">
            @return the modifiedParagraph
        </member>
        <member name="M:iTextSharp.text.rtf.parser.properties.RtfProperty.SetModifiedParagraph(System.Boolean)">
            @param modifiedParagraph the modifiedParagraph to set
        </member>
        <member name="M:iTextSharp.text.rtf.parser.properties.RtfProperty.IsModifiedSection">
            @return the modifiedSection
        </member>
        <member name="M:iTextSharp.text.rtf.parser.properties.RtfProperty.SetModifiedSection(System.Boolean)">
            @param modifiedSection the modifiedSection to set
        </member>
        <member name="M:iTextSharp.text.rtf.parser.properties.RtfProperty.IsModifiedDocument">
            @return the modifiedDocument
        </member>
        <member name="M:iTextSharp.text.rtf.parser.properties.RtfProperty.SetModifiedDocument(System.Boolean)">
            @param modifiedDocument the modifiedDocument to set
        </member>
        <member name="M:iTextSharp.text.rtf.parser.properties.RtfProperty.AddRtfPropertyListener(iTextSharp.text.rtf.parser.properties.IRtfPropertyListener)">
             Adds a <CODE>RtfPropertyListener</CODE> to the <CODE>RtfProperty</CODE>.
            
             @param listener
                        the new RtfPropertyListener.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.properties.RtfProperty.RemoveRtfPropertyListener(iTextSharp.text.rtf.parser.properties.IRtfPropertyListener)">
             Removes a <CODE>RtfPropertyListener</CODE> from the <CODE>RtfProperty</CODE>.
            
             @param listener
                        the new RtfPropertyListener.
        </member>
        <member name="T:iTextSharp.text.rtf.parser.destinations.RtfDestinationNull">
            <code>RtfDestinationNull</code> is for discarded entries. They go nowhere.
            If a control word destination is unknown or ignored, this is the destination
            that should be set.
            
            All methods return true indicating they were handled.
            
            This is a unique destination in that it is a singleton.
            
            @author Howard Shank (hgshank@yahoo.com)
            @since 2.0.8
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationNull.#ctor">
            Constructs a new RtfDestinationNull.
            
            This constructor is hidden for internal use only.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationNull.#ctor(iTextSharp.text.rtf.parser.RtfParser)">
            Constructs a new RtfDestinationNull.
            
            This constructor is hidden for internal use only.
            
            @param parser Unused value
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationNull.GetInstance">
            Get the singleton instance of RtfDestinationNull object.
        </member>
        <member name="T:iTextSharp.text.rtf.list.RtfPictureList">
            The RtfPictureList2 manages the pictures for lists.
            
            @version $Id: RtfPictureList.java 3580 2008-08-06 15:52:00Z howard_s $
            @author Howard Shank (hgshank@yahoo.com)
            @since 2.1.3
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfPictureList.LIST_LEVEL_PICTURE">
            Constant for determining which picture bullet from the \listpicture destination that should be applied.
        </member>
        <member name="M:iTextSharp.text.rtf.document.output.RtfByteArrayBuffer.#ctor(System.Int32)">
            Creates a new buffer with the given initial size.
            
            @param bufferSize desired initial size in bytes
        </member>
        <member name="M:iTextSharp.text.rtf.document.output.RtfByteArrayBuffer.Write(System.IO.Stream)">
            Writes all bytes available in the given inputstream to this buffer. 
            
            @param in
            @return number of bytes written
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.rtf.document.output.RtfByteArrayBuffer.Append(System.Byte[])">
            Appends the given array to this buffer without copying (if possible). 
            
            @param a
        </member>
        <member name="M:iTextSharp.text.rtf.document.output.RtfByteArrayBuffer.Append(System.Byte[][])">
            Appends all arrays to this buffer without copying (if possible).
            
            @param a
        </member>
        <member name="M:iTextSharp.text.rtf.document.output.RtfByteArrayBuffer.ToArrayArray">
            Returns the internal list of byte array buffers without copying the buffer contents. 
            
            @return an byte aray of buffers
        </member>
        <member name="M:iTextSharp.text.rtf.document.output.RtfByteArrayBuffer.ToArray">
            Allocates a new array and copies all data that has been written to this buffer to the newly allocated array.
            
            @return a new byte array
        </member>
        <member name="M:iTextSharp.text.rtf.document.output.RtfByteArrayBuffer.WriteTo(System.IO.Stream)">
            Writes all data that has been written to this buffer to the given output stream.
            
            @param out
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.rtf.document.output.RtfByteArrayBuffer.Reset">
            Resets this buffer.
        </member>
        <member name="M:iTextSharp.text.rtf.document.output.RtfByteArrayBuffer.Size">
            Returns the number of bytes that have been written to this buffer so far.
            
            @return number of bytes written to this buffer
        </member>
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.pdf.PdfStamper" -->
        <member name="F:iTextSharp.text.pdf.PdfStamper.stamper">
            The writer
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.#ctor(iTextSharp.text.pdf.PdfReader,System.IO.Stream)">
            Starts the process of adding extra content to an existing PDF
            document.
            @param reader the original document. It cannot be reused
            @param os the output stream
            @throws DocumentException on error
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.#ctor(iTextSharp.text.pdf.PdfReader,System.IO.Stream,System.Char)">
            Starts the process of adding extra content to an existing PDF
            document.
            @param reader the original document. It cannot be reused
            @param os the output stream
            @param pdfVersion the new pdf version or '\0' to keep the same version as the original
            document
            @throws DocumentException on error
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.#ctor(iTextSharp.text.pdf.PdfReader,System.IO.Stream,System.Char,System.Boolean)">
            Starts the process of adding extra content to an existing PDF
            document, possibly as a new revision.
            @param reader the original document. It cannot be reused
            @param os the output stream
            @param pdfVersion the new pdf version or '\0' to keep the same version as the original
            document
            @param append if <CODE>true</CODE> appends the document changes as a new revision. This is
            only useful for multiple signatures as nothing is gained in speed or memory
            @throws DocumentException on error
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.ReplacePage(iTextSharp.text.pdf.PdfReader,System.Int32,System.Int32)">
            Replaces a page from this document with a page from other document. Only the content
            is replaced not the fields and annotations. This method must be called before 
            getOverContent() or getUndercontent() are called for the same page.
            @param r the <CODE>PdfReader</CODE> from where the new page will be imported
            @param pageImported the page number of the imported page
            @param pageReplaced the page to replace in this document
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.InsertPage(System.Int32,iTextSharp.text.Rectangle)">
            Inserts a blank page. All the pages above and including <CODE>pageNumber</CODE> will
            be shifted up. If <CODE>pageNumber</CODE> is bigger than the total number of pages
            the new page will be the last one.
            @param pageNumber the page number position where the new page will be inserted
            @param mediabox the size of the new page
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfStamper.Close" -->
        <member name="M:iTextSharp.text.pdf.PdfStamper.GetUnderContent(System.Int32)">
            Gets a <CODE>PdfContentByte</CODE> to write under the page of
            the original document.
            @param pageNum the page number where the extra content is written
            @return a <CODE>PdfContentByte</CODE> to write under the page of
            the original document
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.GetOverContent(System.Int32)">
            Gets a <CODE>PdfContentByte</CODE> to write over the page of
            the original document.
            @param pageNum the page number where the extra content is written
            @return a <CODE>PdfContentByte</CODE> to write over the page of
            the original document
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.SetEncryption(System.Byte[],System.Byte[],System.Int32,System.Boolean)">
            Sets the encryption options for this document. The userPassword and the
             ownerPassword can be null or have zero length. In this case the ownerPassword
             is replaced by a random string. The open permissions for the document can be
             AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
             AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
             The permissions can be combined by ORing them.
            @param userPassword the user password. Can be null or empty
            @param ownerPassword the owner password. Can be null or empty
            @param permissions the user permissions
            @param strength128Bits <code>true</code> for 128 bit key length, <code>false</code> for 40 bit key length
            @throws DocumentException if anything was already written to the output
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.SetEncryption(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            Sets the encryption options for this document. The userPassword and the
             ownerPassword can be null or have zero length. In this case the ownerPassword
             is replaced by a random string. The open permissions for the document can be
             AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
             AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
             The permissions can be combined by ORing them.
            @param userPassword the user password. Can be null or empty
            @param ownerPassword the owner password. Can be null or empty
            @param permissions the user permissions
            @param encryptionType the type of encryption. It can be one of STANDARD_ENCRYPTION_40, STANDARD_ENCRYPTION_128 or ENCRYPTION_AES128.
            Optionally DO_NOT_ENCRYPT_METADATA can be ored to output the metadata in cleartext
            @throws DocumentException if the document is already open
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.SetEncryption(System.Boolean,System.String,System.String,System.Int32)">
            Sets the encryption options for this document. The userPassword and the
             ownerPassword can be null or have zero length. In this case the ownerPassword
             is replaced by a random string. The open permissions for the document can be
             AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
             AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
             The permissions can be combined by ORing them.
            @param strength <code>true</code> for 128 bit key length, <code>false</code> for 40 bit key length
            @param userPassword the user password. Can be null or empty
            @param ownerPassword the owner password. Can be null or empty
            @param permissions the user permissions
            @throws DocumentException if anything was already written to the output
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.SetEncryption(System.Int32,System.String,System.String,System.Int32)">
            Sets the encryption options for this document. The userPassword and the
             ownerPassword can be null or have zero length. In this case the ownerPassword
             is replaced by a random string. The open permissions for the document can be
             AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
             AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
             The permissions can be combined by ORing them.
            @param encryptionType the type of encryption. It can be one of STANDARD_ENCRYPTION_40, STANDARD_ENCRYPTION_128 or ENCRYPTION_AES128.
            Optionally DO_NOT_ENCRYPT_METADATA can be ored to output the metadata in cleartext
            @param userPassword the user password. Can be null or empty
            @param ownerPassword the owner password. Can be null or empty
            @param permissions the user permissions
            @throws DocumentException if the document is already open
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.SetEncryption(Org.BouncyCastle.X509.X509Certificate[],System.Int32[],System.Int32)">
            Sets the certificate encryption options for this document. An array of one or more public certificates
            must be provided together with an array of the same size for the permissions for each certificate.
             The open permissions for the document can be
             AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
             AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
             The permissions can be combined by ORing them.
            Optionally DO_NOT_ENCRYPT_METADATA can be ored to output the metadata in cleartext
            @param certs the public certificates to be used for the encryption
            @param permissions the user permissions for each of the certicates
            @param encryptionType the type of encryption. It can be one of STANDARD_ENCRYPTION_40, STANDARD_ENCRYPTION_128 or ENCRYPTION_AES128.
            @throws DocumentException if the encryption was set too late
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.GetImportedPage(iTextSharp.text.pdf.PdfReader,System.Int32)">
            Gets a page from other PDF document. Note that calling this method more than
            once with the same parameters will retrieve the same object.
            @param reader the PDF document where the page is
            @param pageNumber the page number. The first page is 1
            @return the template representing the imported page
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.AddAnnotation(iTextSharp.text.pdf.PdfAnnotation,System.Int32)">
            Adds an annotation of form field in a specific page. This page number
            can be overridden with {@link PdfAnnotation#setPlaceInPage(int)}.
            @param annot the annotation
            @param page the page
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.AddSignature(System.String,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            Adds an empty signature.
            @param name   the name of the signature
            @param page   the page number
            @param llx    lower left x coordinate of the signature's position
            @param lly    lower left y coordinate of the signature's position
            @param urx    upper right x coordinate of the signature's position
            @param ury    upper right y coordinate of the signature's position
            @return   a signature form field
            @since    2.1.4
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.AddComments(iTextSharp.text.pdf.FdfReader)">
            Adds the comments present in an FDF file.
            @param fdf the FDF file
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.SetThumbnail(iTextSharp.text.Image,System.Int32)">
            Sets the thumbnail image for a page.
            @param image the image
            @param page the page
            @throws PdfException on error
            @throws DocumentException on error
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfStamper.PartialFormFlattening(System.String)" -->
        <member name="M:iTextSharp.text.pdf.PdfStamper.AddFileAttachment(System.String,System.Byte[],System.String,System.String)">
            Adds a file attachment at the document level. Existing attachments will be kept.
            @param description the file description
            @param fileStore an array with the file. If it's <CODE>null</CODE>
            the file will be read from the disk
            @param file the path to the file. It will only be used if
            <CODE>fileStore</CODE> is not <CODE>null</CODE>
            @param fileDisplay the actual file name stored in the pdf
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.AddFileAttachment(System.String,iTextSharp.text.pdf.PdfFileSpecification)">
            Adds a file attachment at the document level. Existing attachments will be kept.
            @param description the file description
            @param fs the file specification
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfStamper.MakePackage(iTextSharp.text.pdf.PdfName)" -->
        <member name="M:iTextSharp.text.pdf.PdfStamper.MakePackage(iTextSharp.text.pdf.collection.PdfCollection)">
            Adds or replaces the Collection Dictionary in the Catalog.
            @param    collection  the new collection dictionary.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.AddViewerPreference(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfObject)">
            Adds a viewer preference
            @param preferences the viewer preferences
            @see PdfViewerPreferences#addViewerPreference
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.SetFullCompression">
            Sets the document's compression to the new 1.5 mode with object streams and xref
            streams. It can be set at any time but once set it can't be unset.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.SetPageAction(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfAction,System.Int32)">
            Sets the open and close page additional action.
            @param actionType the action type. It can be <CODE>PdfWriter.PAGE_OPEN</CODE>
            or <CODE>PdfWriter.PAGE_CLOSE</CODE>
            @param action the action to perform
            @param page the page where the action will be applied. The first page is 1
            @throws PdfException if the action type is invalid
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.SetDuration(System.Int32,System.Int32)">
            Sets the display duration for the page (for presentations)
            @param seconds   the number of seconds to display the page. A negative value removes the entry
            @param page the page where the duration will be applied. The first page is 1
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.SetTransition(iTextSharp.text.pdf.PdfTransition,System.Int32)">
            Sets the transition for the page
            @param transition   the transition object. A <code>null</code> removes the transition
            @param page the page where the transition will be applied. The first page is 1
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfStamper.CreateSignature(iTextSharp.text.pdf.PdfReader,System.IO.Stream,System.Char,System.String,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfStamper.CreateSignature(iTextSharp.text.pdf.PdfReader,System.IO.Stream,System.Char)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfStamper.CreateSignature(iTextSharp.text.pdf.PdfReader,System.IO.Stream,System.Char,System.String)" -->
        <member name="M:iTextSharp.text.pdf.PdfStamper.GetPdfLayers">
            Gets the PdfLayer objects in an existing document as a Map
            with the names/titles of the layers as keys.
            @return   a Map with all the PdfLayers in the document (and the name/title of the layer as key)
            @since    2.1.2
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStamper.MoreInfo">
            Gets the optional <CODE>String</CODE> map to add or change values in
             the info dictionary.
             @return the map or <CODE>null</CODE>
            
            An optional <CODE>String</CODE> map to add or change values in
             the info dictionary. Entries with <CODE>null</CODE>
             values delete the key in the original info dictionary
             @param moreInfo additional entries to the info dictionary
            
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStamper.SignatureAppearance">
            Gets the signing instance. The appearances and other parameters can the be set.
            @return the signing instance
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStamper.RotateContents">
            Checks if the content is automatically adjusted to compensate
            the original page rotation.
            @return the auto-rotation status
            Flags the content to be automatically adjusted to compensate
            the original page rotation. The default is <CODE>true</CODE>.
            @param rotateContents <CODE>true</CODE> to set auto-rotation, <CODE>false</CODE>
            otherwise
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStamper.Writer">
            Gets the underlying PdfWriter.
            @return the underlying PdfWriter
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStamper.Reader">
            Gets the underlying PdfReader.
            @return the underlying PdfReader
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStamper.AcroFields">
            Gets the <CODE>AcroFields</CODE> object that allows to get and set field values
            and to merge FDF forms.
            @return the <CODE>AcroFields</CODE> object
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStamper.FormFlattening">
            Determines if the fields are flattened on close. The fields added with
            {@link #addAnnotation(PdfAnnotation,int)} will never be flattened.
            @param flat <CODE>true</CODE> to flatten the fields, <CODE>false</CODE>
            to keep the fields
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStamper.FreeTextFlattening">
            Determines if the FreeText annotations are flattened on close. 
            @param flat <CODE>true</CODE> to flatten the FreeText annotations, <CODE>false</CODE>
            (the default) to keep the FreeText annotations as active content.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStamper.Outlines">
            Sets the bookmarks. The list structure is defined in
            {@link SimpleBookmark}.
            @param outlines the bookmarks or <CODE>null</CODE> to remove any
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStamper.JavaScript">
            Adds a JavaScript action at the document level. When the document
            opens all this JavaScript runs. The existing JavaScript will be replaced.
            @param js the JavaScript code
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStamper.ViewerPreferences">
            Sets the viewer preferences.
            @param preferences the viewer preferences
            @see PdfViewerPreferences#setViewerPreferences(int)
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStamper.XmpMetadata">
            Sets the XMP metadata.
            @param xmp
            @see PdfWriter#setXmpMetadata(byte[])
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStamper.FullCompression">
            Gets the 1.5 compression status.
            @return <code>true</code> if the 1.5 compression is on
        </member>
        <member name="T:iTextSharp.text.pdf.PdfPRow">
            A row in a PdfPTable.
            
            @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPRow.BOTTOM_LIMIT">
            the bottom limit (bottom right y) 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPRow.RIGHT_LIMIT">
            the right limit
            @since    2.1.5
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPRow.extraHeights">
            extra heights that needs to be added to a cell because of rowspans.
            @since    2.1.6
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPRow.#ctor(iTextSharp.text.pdf.PdfPCell[])">
            Constructs a new PdfPRow with the cells in the array that was passed
            as a parameter.
            
            @param cells
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPRow.#ctor(iTextSharp.text.pdf.PdfPRow)">
            Makes a copy of an existing row.
            
            @param row
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPRow.SetWidths(System.Single[])">
            Sets the widths of the columns in the row.
            
            @param widths
            @return true if everything went right
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPRow.InitExtraHeights">
            Initializes the extra heights array.
            @since    2.1.6
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPRow.SetExtraHeight(System.Int32,System.Single)">
            Sets an extra height for a cell.
            @param    cell    the index of the cell that needs an extra height
            @param    height  the extra height
            @since    2.1.6
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPRow.CalculateHeights">
            Calculates the heights of each cell in the row.
            
            @return the maximum height of the row.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPRow.WriteBorderAndBackground(System.Single,System.Single,System.Single,iTextSharp.text.pdf.PdfPCell,iTextSharp.text.pdf.PdfContentByte[])">
            Writes the border and background of one cell in the row.
            
            @param xPos The x-coordinate where the table starts on the canvas
            @param yPos The y-coordinate where the table starts on the canvas
            @param currentMaxHeight The height of the cell to be drawn.
            @param cell
            @param canvases
            @since    2.1.6   extra parameter currentMaxHeight
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPRow.SaveAndRotateCanvases(iTextSharp.text.pdf.PdfContentByte[],System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            @since    2.1.6 private is now protected
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPRow.RestoreCanvases(iTextSharp.text.pdf.PdfContentByte[])">
            @since    2.1.6 private is now protected
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPRow.SetColumn(iTextSharp.text.pdf.ColumnText,System.Single,System.Single,System.Single,System.Single)">
            @since	3.0.0 protected is now public static
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPRow.WriteCells(System.Int32,System.Int32,System.Single,System.Single,iTextSharp.text.pdf.PdfContentByte[])">
            Writes a number of cells (not necessarily all cells).
            
            @param    colStart The first column to be written.
            Remember that the column index starts with 0.
            @param    colEnd The last column to be written.
            Remember that the column index starts with 0.
            If -1, all the columns to the end are written.
            @param    xPos The x-coordinate where the table starts on the canvas
            @param    yPos The y-coordinate where the table starts on the canvas
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPRow.IsCalculated">
            Checks if the dimensions of the columns were calculated.
            
            @return true if the dimensions of the columns were calculated
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPRow.SplitRow(iTextSharp.text.pdf.PdfPTable,System.Int32,System.Single)">
            Splits a row to newHeight.
            The returned row is the remainder. It will return null if the newHeight
            was so small that only an empty row would result.
            
            @param new_height the new height
            @return the remainder row or null if the newHeight was so small that only
            an empty row would result
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPRow.GetCells">
            Returns the array of cells in the row.
            Please be extremely careful with this method.
            Use the cells as read only objects.
            
            @return   an array of cells
            @since    2.1.1
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPRow.MaxHeights">
            Gets the maximum height of the row (i.e. of the 'highest' cell).
            @return the maximum height of the row
        </member>
        <member name="T:iTextSharp.text.pdf.PdfLayerMembership">
             Content typically belongs to a single optional content group,
             and is visible when the group is <B>ON</B> and invisible when it is <B>OFF</B>. To express more
             complex visibility policies, content should not declare itself to belong to an optional
             content group directly, but rather to an optional content membership dictionary
             represented by this class.
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.PdfLayerMembership.ALLON">
            Visible only if all of the entries are <B>ON</B>.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfLayerMembership.ANYON">
            Visible if any of the entries are <B>ON</B>.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfLayerMembership.ANYOFF">
            Visible if any of the entries are <B>OFF</B>.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfLayerMembership.ALLOFF">
            Visible only if all of the entries are <B>OFF</B>.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfLayerMembership.#ctor(iTextSharp.text.pdf.PdfWriter)">
            Creates a new, empty, membership layer.
            @param writer the writer
        </member>
        <member name="M:iTextSharp.text.pdf.PdfLayerMembership.AddMember(iTextSharp.text.pdf.PdfLayer)">
            Adds a new member to the layer.
            @param layer the new member to the layer
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLayerMembership.Ref">
            Gets the <CODE>PdfIndirectReference</CODE> that represents this membership layer.
            @return the <CODE>PdfIndirectReference</CODE> that represents this layer
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLayerMembership.Layers">
            Gets the member layers.
            @return the member layers
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLayerMembership.VisibilityPolicy">
            Sets the visibility policy for content belonging to this
            membership dictionary. Possible values are ALLON, ANYON, ANYOFF and ALLOFF.
            The default value is ANYON.
            @param type the visibility policy
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLayerMembership.PdfObject">
            Gets the dictionary representing the membership layer. It just returns <CODE>this</CODE>.
            @return the dictionary representing the layer
        </member>
        <member name="T:iTextSharp.text.pdf.PdfFormXObject">
            <CODE>PdfFormObject</CODE> is a type of XObject containing a template-object.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfFormXObject.ZERO">
            This is a PdfNumber representing 0. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfFormXObject.ONE">
            This is a PdfNumber representing 1. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfFormXObject.MATRIX">
            This is the 1 - matrix. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfFormXObject.#ctor(iTextSharp.text.pdf.PdfTemplate,System.Int32)">
             Constructs a <CODE>PdfFormXObject</CODE>-object.
            
             @param        template        the template
             @param   compressionLevel    the compression level for the stream
             @since   2.1.3 (Replacing the existing constructor with param compressionLevel)
        </member>
        <member name="T:iTextSharp.text.pdf.PdfFormField">
            Implements form fields.
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="T:iTextSharp.text.pdf.PdfAnnotation">
             A <CODE>PdfAnnotation</CODE> is a note that is associated with a page.
            
             @see     PdfDictionary
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAnnotation.MARKUP_SQUIGGLY">
            attributevalue 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAnnotation.used">
            Holds value of property used. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAnnotation.placeInPage">
            Holds value of property placeInPage. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAnnotation.#ctor(iTextSharp.text.pdf.PdfWriter,System.Single,System.Single,System.Single,System.Single,iTextSharp.text.pdf.PdfString,iTextSharp.text.pdf.PdfString)">
            Constructs a new <CODE>PdfAnnotation</CODE> of subtype text.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAnnotation.#ctor(iTextSharp.text.pdf.PdfWriter,System.Single,System.Single,System.Single,System.Single,iTextSharp.text.pdf.PdfAction)">
            Constructs a new <CODE>PdfAnnotation</CODE> of subtype link (Action).
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAnnotation.CreateScreen(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Rectangle,System.String,iTextSharp.text.pdf.PdfFileSpecification,System.String,System.Boolean)">
            Creates a screen PdfAnnotation
            @param writer
            @param rect
            @param clipTitle
            @param fs
            @param mimeType
            @param playOnDisplay
            @return a screen PdfAnnotation
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAnnotation.CreateFileAttachment(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Rectangle,System.String,System.Byte[],System.String,System.String)">
            Creates a file attachment annotation.
            @param writer the <CODE>PdfWriter</CODE>
            @param rect the dimensions in the page of the annotation
            @param contents the file description
            @param fileStore an array with the file. If it's <CODE>null</CODE>
            the file will be read from the disk
            @param file the path to the file. It will only be used if
            <CODE>fileStore</CODE> is not <CODE>null</CODE>
            @param fileDisplay the actual file name stored in the pdf
            @throws IOException on error
            @return the annotation
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAnnotation.CreateFileAttachment(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Rectangle,System.String,iTextSharp.text.pdf.PdfFileSpecification)">
            Creates a file attachment annotation
            @param writer
            @param rect
            @param contents
            @param fs
            @return the annotation
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAnnotation.SetHighlighting(iTextSharp.text.pdf.PdfName)">
            Sets the annotation's highlighting mode. The values can be
            <CODE>HIGHLIGHT_NONE</CODE>, <CODE>HIGHLIGHT_INVERT</CODE>,
            <CODE>HIGHLIGHT_OUTLINE</CODE> and <CODE>HIGHLIGHT_PUSH</CODE>;
            @param highlight the annotation's highlighting mode
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAnnotation.IsForm">
            Getter for property form.
            @return Value of property form.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAnnotation.IsAnnotation">
            Getter for property annotation.
            @return Value of property annotation.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfAnnotation.PlaceInPage">
            Getter for property placeInPage.
            @return Value of property placeInPage.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfAnnotation.Layer">
            Sets the layer this annotation belongs to.
            @param layer the layer this annotation belongs to
        </member>
        <member name="P:iTextSharp.text.pdf.PdfAnnotation.Name">
            Sets the name of the annotation.
            With this name the annotation can be identified among
            all the annotations on a page (it has to be unique).
        </member>
        <member name="T:iTextSharp.text.pdf.PdfAnnotation.PdfImportedLink">
            This class processes links from imported pages so that they may be active. The following example code reads a group
            of files and places them all on the output PDF, four pages in a single page, keeping the links active.
            <pre>
            String[] files = new String[] {&quot;input1.pdf&quot;, &quot;input2.pdf&quot;};
            String outputFile = &quot;output.pdf&quot;;
            int firstPage=1;
            Document document = new Document();
            PdfWriter writer = PdfWriter.GetInstance(document, new FileOutputStream(outputFile));
            document.SetPageSize(PageSize.A4);
            float W = PageSize.A4.GetWidth() / 2;
            float H = PageSize.A4.GetHeight() / 2;
            document.Open();
            PdfContentByte cb = writer.GetDirectContent();
            for (int i = 0; i &lt; files.length; i++) {
               PdfReader currentReader = new PdfReader(files[i]);
               currentReader.ConsolidateNamedDestinations();
               for (int page = 1; page &lt;= currentReader.GetNumberOfPages(); page++) {
                   PdfImportedPage importedPage = writer.GetImportedPage(currentReader, page);
                   float a = 0.5f;
                   float e = (page % 2 == 0) ? W : 0;
                   float f = (page % 4 == 1 || page % 4 == 2) ? H : 0;
                   ArrayList links = currentReader.GetLinks(page);
                   cb.AddTemplate(importedPage, a, 0, 0, a, e, f);
                   for (int j = 0; j &lt; links.Size(); j++) {
                       PdfAnnotation.PdfImportedLink link = (PdfAnnotation.PdfImportedLink)links.Get(j);
                       if (link.IsInternal()) {
                           int dPage = link.GetDestinationPage();
                           int newDestPage = (dPage-1)/4 + firstPage;
                           float ee = (dPage % 2 == 0) ? W : 0;
                           float ff = (dPage % 4 == 1 || dPage % 4 == 2) ? H : 0;
                           link.SetDestinationPage(newDestPage);
                           link.TransformDestination(a, 0, 0, a, ee, ff);
                       }
                       link.TransformRect(a, 0, 0, a, e, f);
                       writer.AddAnnotation(link.CreateAnnotation(writer));
                   }
                   if (page % 4 == 0)
                   document.NewPage();
               }
               if (i &lt; files.length - 1)
               document.NewPage();
               firstPage += (currentReader.GetNumberOfPages()+3)/4;
            }
            document.Close();
            </pre>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAnnotation.PdfImportedLink.ToString">
            Returns a String representation of the link.
            @return	a String representation of the imported link
            @since	2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfFormField.parent">
            Holds value of property parent. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfFormField.#ctor(iTextSharp.text.pdf.PdfWriter,System.Single,System.Single,System.Single,System.Single,iTextSharp.text.pdf.PdfAction)">
            Constructs a new <CODE>PdfAnnotation</CODE> of subtype link (Action).
        </member>
        <member name="M:iTextSharp.text.pdf.PdfFormField.#ctor(iTextSharp.text.pdf.PdfWriter)">
            Creates new PdfFormField 
        </member>
        <member name="P:iTextSharp.text.pdf.PdfFormField.Parent">
            Getter for property parent.
            @return Value of property parent.
        </member>
        <member name="T:iTextSharp.text.pdf.MultiColumnText">
            Formats content into one or more columns bounded by a
            rectangle.  The columns may be simple rectangles or
            more complicated shapes. Add all of the columns before
            adding content. Column continuation is supported. A MultiColumnText object may be added to
            a document using <CODE>Document.add</CODE>.
            @author Steve Appling
        </member>
        <member name="F:iTextSharp.text.pdf.MultiColumnText.AUTOMATIC">
            special constant for automatic calculation of height 
        </member>
        <member name="F:iTextSharp.text.pdf.MultiColumnText.desiredHeight">
            total desiredHeight of columns.  If <CODE>AUTOMATIC</CODE>, this means fill pages until done.
            This may be larger than one page
        </member>
        <member name="F:iTextSharp.text.pdf.MultiColumnText.totalHeight">
            total height of element written out so far
        </member>
        <member name="F:iTextSharp.text.pdf.MultiColumnText.overflow">
            true if all the text could not be written out due to height restriction
        </member>
        <member name="F:iTextSharp.text.pdf.MultiColumnText.top">
            Top of the columns - y position on starting page.
            If <CODE>AUTOMATIC</CODE>, it means current y position when added to document
        </member>
        <member name="F:iTextSharp.text.pdf.MultiColumnText.columnText">
            ColumnText object used to do all the real work.  This same object is used for all columns
        </member>
        <member name="F:iTextSharp.text.pdf.MultiColumnText.columnDefs">
            Array of <CODE>ColumnDef</CODE> objects used to define the columns
        </member>
        <member name="F:iTextSharp.text.pdf.MultiColumnText.simple">
            true if all columns are simple (rectangular)
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.#ctor">
            Default constructor.  Sets height to <CODE>AUTOMATIC</CODE>.
            Columns will repeat on each page as necessary to accomodate content length.
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.#ctor(System.Single)">
             Construct a MultiColumnText container of the specified height.
             If height is <CODE>AUTOMATIC</CODE>, fill complete pages until done.
             If a specific height is used, it may span one or more pages.
            
             @param height
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.#ctor(System.Single,System.Single)">
             Construct a MultiColumnText container of the specified height
             starting at the specified Y position.
            
             @param height
             @param top
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.IsOverflow">
             Indicates that all of the text did not fit in the
             specified height. Note that isOverflow will return
             false before the MultiColumnText object has been
             added to the document.  It will always be false if
             the height is AUTOMATIC.
            
             @return true if there is still space left in the column
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.UseColumnParams(iTextSharp.text.pdf.ColumnText)">
             Copy the parameters from the specified ColumnText to use
             when rendering.  Parameters like <CODE>setArabicOptions</CODE>
             must be set in this way.
            
             @param sourceColumn
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.AddColumn(System.Single[],System.Single[])">
             Add a new column.  The parameters are limits for each column
             wall in the format of a sequence of points (x1,y1,x2,y2,...).
            
             @param left  limits for left column
             @param right limits for right column
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.AddSimpleColumn(System.Single,System.Single)">
             Add a simple rectangular column with specified left
             and right x position boundaries.
            
             @param left  left boundary
             @param right right boundary
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.AddRegularColumns(System.Single,System.Single,System.Single,System.Int32)">
             Add the specified number of evenly spaced rectangular columns.
             Columns will be seperated by the specified gutterWidth.
            
             @param left        left boundary of first column
             @param right       right boundary of last column
             @param gutterWidth width of gutter spacing between columns
             @param numColumns  number of columns to add
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.AddText(iTextSharp.text.Phrase)">
            Adds a <CODE>Phrase</CODE> to the current text array.
            Will not have any effect if addElement() was called before.
            @param phrase the text
            @since	2.1.5
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.AddText(iTextSharp.text.Chunk)">
            Adds a <CODE>Chunk</CODE> to the current text array.
            Will not have any effect if addElement() was called before.
            @param chunk the text
            @since	2.1.5
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.AddElement(iTextSharp.text.IElement)">
             Add an element to be rendered in a column.
             Note that you can only add a <CODE>Phrase</CODE>
             or a <CODE>Chunk</CODE> if the columns are
             not all simple.  This is an underlying restriction in
             {@link com.lowagie.text.pdf.ColumnText}
            
             @param element element to add
             @throws DocumentException if element can't be added
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.Write(iTextSharp.text.pdf.PdfContentByte,iTextSharp.text.pdf.PdfDocument,System.Single)">
            Write out the columns.  After writing, use
            {@link #isOverflow()} to see if all text was written.
            @param canvas PdfContentByte to write with
            @param document document to write to (only used to get page limit info)
            @param documentY starting y position to begin writing at
            @return the current height (y position) after writing the columns
            @throws DocumentException on error
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.GetHeight(System.Single[],System.Single[])">
             Figure out the height of a column from the border extents
            
             @param left  left border
             @param right right border
             @return height
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.Process(iTextSharp.text.IElementListener)">
             Processes the element by adding it to an
             <CODE>ElementListener</CODE>.
            
             @param   listener    an <CODE>ElementListener</CODE>
             @return  <CODE>true</CODE> if the element was processed successfully
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.IsContent">
            @see com.lowagie.text.Element#isContent()
            @since   iText 2.0.8
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.IsNestable">
            @see com.lowagie.text.Element#isNestable()
            @since   iText 2.0.8
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.GetColumnBottom">
             Calculates the appropriate y position for the bottom
             of the columns on this page.
            
             @return the y position of the bottom of the columns
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.NextColumn">
            Moves the text insertion point to the beginning of the next column, issuing a page break if
            needed.
            @throws DocumentException on error
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.ResetCurrentColumn">
            Resets the current column.
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.ShiftCurrentColumn">
            Shifts the current column.
            @return true if the currentcolumn has changed
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.SetColumnsRightToLeft(System.Boolean)">
            Sets the direction of the columns.
            @param direction true = right2left; false = left2right
        </member>
        <member name="P:iTextSharp.text.pdf.MultiColumnText.Type">
             Gets the type of the text element.
            
             @return  a type
        </member>
        <member name="P:iTextSharp.text.pdf.MultiColumnText.Chunks">
             Returns null - not used
            
             @return  null
        </member>
        <member name="P:iTextSharp.text.pdf.MultiColumnText.CurrentColumn">
            Gets the current column.
            @return the current column
        </member>
        <member name="P:iTextSharp.text.pdf.MultiColumnText.SpaceCharRatio">
            Sets the ratio between the extra word spacing and the extra character spacing
            when the text is fully justified.
            Extra word spacing will grow <CODE>spaceCharRatio</CODE> times more than extra character spacing.
            If the ratio is <CODE>PdfWriter.NO_SPACE_CHAR_RATIO</CODE> then the extra character spacing
            will be zero.
            @param spaceCharRatio the ratio between the extra word spacing and the extra character spacing
        </member>
        <member name="P:iTextSharp.text.pdf.MultiColumnText.RunDirection">
            Sets the run direction. 
            @param runDirection the run direction
        </member>
        <member name="P:iTextSharp.text.pdf.MultiColumnText.ArabicOptions">
            Sets the arabic shaping options. The option can be AR_NOVOWEL,
            AR_COMPOSEDTASHKEEL and AR_LIG.
            @param arabicOptions the arabic shaping options
        </member>
        <member name="P:iTextSharp.text.pdf.MultiColumnText.Alignment">
            Sets the default alignment
            @param alignment the default alignment
        </member>
        <member name="T:iTextSharp.text.pdf.MultiColumnText.ColumnDef">
            Inner class used to define a column
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.ColumnDef.ResolvePositions(System.Int32)">
             Resolves the positions for the specified side of the column
             into real numbers once the top of the column is known.
            
             @param side either <CODE>Rectangle.LEFT_BORDER</CODE>
                         or <CODE>Rectangle.RIGHT_BORDER</CODE>
             @return the array of floats for the side
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.ColumnDef.IsSimple">
            Checks if column definition is a simple rectangle
            @return true if it is a simple column 
        </member>
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.pdf.hyphenation.Hyphen" -->
        <member name="T:iTextSharp.text.pdf.codec.JBIG2Image">
            Support for JBIG2 Images.
            This class assumes that we are always embedding into a pdf.
            
            @since 2.1.5
        </member>
        <member name="M:iTextSharp.text.pdf.codec.JBIG2Image.GetGlobalSegment(iTextSharp.text.pdf.RandomAccessFileOrArray)">
            Gets a byte array that can be used as a /JBIG2Globals,
            or null if not applicable to the given jbig2.
            @param   ra  an random access file or array
            @return  a byte array
        </member>
        <member name="M:iTextSharp.text.pdf.codec.JBIG2Image.GetJbig2Image(iTextSharp.text.pdf.RandomAccessFileOrArray,System.Int32)">
            returns an Image representing the given page.
            @param ra    the file or array containing the image
            @param page  the page number of the image
            @return  an Image object
        </member>
        <member name="T:iTextSharp.text.pdf.BarcodePostnet">
            Implements the Postnet and Planet barcodes. The default parameters are:
             <pre>
            n = 72f / 22f; // distance between bars
            x = 0.02f * 72f; // bar width
            barHeight = 0.125f * 72f; // height of the tall bars
            size = 0.05f * 72f; // height of the short bars
            codeType = POSTNET; // type of code
             </pre>
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePostnet.BARS">
            The bars for each character.
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodePostnet.#ctor">
            Creates new BarcodePostnet 
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodePostnet.GetBarsPostnet(System.String)">
            Creates the bars for Postnet.
            @param text the code to be created without checksum
            @return the bars
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.BarcodePostnet.PlaceBarcode(iTextSharp.text.pdf.PdfContentByte,iTextSharp.text.Color,iTextSharp.text.Color)" -->
        <member name="P:iTextSharp.text.pdf.BarcodePostnet.BarcodeSize">
            Gets the maximum area that the barcode and the text, if
            any, will occupy. The lower left corner is always (0, 0).
            @return the size the barcode occupies.
        </member>
        <member name="T:iTextSharp.text.ImgJBIG2">
            Support for JBIG2 images.
            @since 2.1.5
        </member>
        <member name="F:iTextSharp.text.ImgJBIG2.global">
            JBIG2 globals 
        </member>
        <member name="F:iTextSharp.text.ImgJBIG2.globalHash">
            A unique hash 
        </member>
        <member name="M:iTextSharp.text.ImgJBIG2.#ctor(iTextSharp.text.Image)">
            Copy contstructor.
            @param    image another Image
        </member>
        <member name="M:iTextSharp.text.ImgJBIG2.#ctor">
            Empty constructor.
        </member>
        <member name="M:iTextSharp.text.ImgJBIG2.#ctor(System.Int32,System.Int32,System.Byte[],System.Byte[])">
            Actual constructor for ImgJBIG2 images.
            @param    width   the width of the image
            @param    height  the height of the image
            @param    data    the raw image data
            @param    globals JBIG2 globals
        </member>
        <member name="P:iTextSharp.text.ImgJBIG2.GlobalBytes">
            Getter for the JBIG2 global data.
            @return   an array of bytes
        </member>
        <member name="P:iTextSharp.text.ImgJBIG2.GlobalHash">
            Getter for the unique hash.
            @return   an array of bytes
        </member>
        <member name="T:System.util.zlib.ZDeflaterOutputStream">
            <summary>
            Summary description for DeflaterOutputStream.
            </summary>
        </member>
        <member name="T:System.util.ListIterator">
            <summary>
            Summary description for ListIterator.
            </summary>
        </member>
        <member name="T:iTextSharp.text.rtf.text.RtfNewPage">
            The RtfNewPage creates a new page. INTERNAL CLASS
            
            @version $Version:$
            @author Mark Hall (Mark.Hall@mail.room3b.eu)
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfNewPage.NEW_PAGE">
            Constant for a new page
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfNewPage.#ctor(iTextSharp.text.rtf.document.RtfDocument)">
            Constructs a RtfNewPage
            
            @param doc The RtfDocument this RtfNewPage belongs to
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfNewPage.WriteContent(System.IO.Stream)">
            Writes a new page
        </member>
        <member name="T:iTextSharp.text.rtf.parser.destinations.RtfDestinationShppict">
            <code>RtfDestinationShppict</code> handles data destined for picture destinations
            
            @author Howard Shank (hgshank@yahoo.com)
            @since 2.0.8
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationShppict.PIXEL_TWIPS_FACTOR">
            Constant for converting pixels to twips
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationShppict.#ctor(iTextSharp.text.rtf.parser.RtfParser)">
            Constructs a new RtfDestinationShppict.
        </member>
        <member name="T:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable">
             <code>RtfDestinationFontTable</code> handles data destined for the font table destination
             
             @author Howard Shank (hgshank@yahoo.com)
            
             @since 2.0.8
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.SETTING_NORMAL">
            Normal   
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.SETTING_ALTERNATE">
            \falt    
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.SETTING_FONTNAME">
            \fname   
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.SETTING_PANOSE">
            \panose      
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.SETTING_FONT_EMBED">
            \fontemb    
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.SETTING_FONT_FILE">
            \ffile  
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.importHeader">
            The RtfImportHeader to add font mappings to.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.themeFont">
            The theme (Office 2007)
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.fontNr">
            The number of the font being parsed.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.fontFamily">
            The family of the font being parsed.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.charset">
            The \charset value
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.fprq">
            The \fprq
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.panose">
            The \*\panose font matching value if primary font is not available.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.fontName">
            The name of the font being parsed.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.falt">
            The \falt alternate font if primary font is not available.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.fbias">
            The \fbias value
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.cpg">
            The \cpg value
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.trueType">
            The \fnil, \fttruetype value
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.state">
            state flag to handle different parsing of a font element
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.fontMap">
            Convert font mapping to <code>FontFactory</code> font objects.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.#ctor">
            Constructor
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.#ctor(iTextSharp.text.rtf.parser.RtfParser)">
            Constructs a new RtfFontTableParser.
            
            @param importHeader The RtfImportHeader to add font mappings to.
            
            @since 2.0.8
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.Init(System.Boolean)">
            Initialize the object.
            
            @param importFonts true to import the fonts into the FontFactory, false do not load fonts
            
            @since 2.0.8
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.SetCodePage(System.String)">
            Set the code page
            @param value The code page value
            
            @since 2.0.8
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.SetTrueType(System.String)">
            Set the TrueTtype type
            @param value The type
            
            @since 2.0.8
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.SetPitch(System.String)">
            Set the font pitch
            @param value Pitch value
            
            @since 2.0.8
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.SetBias(System.String)">
            Set the font bias
            @param value Bias value
            
            @since 2.0.8
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.SetThemeFont(System.String)">
            Set the font theme
            
            @param themeFont Theme value
            
            @since 2.0.8
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.SetFontName(System.String)">
            Set the font name to the parsed value.
            
            @param fontName The font name.
            
            @since 2.0.8
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.SetFontFamily(System.String)">
            Set the font family to the parsed value.
            
            @param fontFamily The font family.
            
            @since 2.0.8
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.SetFontNumber(System.String)">
            Set the font number to the parsed value.
            This is used for mapping fonts to the new font numbers
            
            @param fontNr The font number.
            
            @since 2.0.8
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.SetFontAlternate(System.String)">
            Set the alternate font name.
            
            @param fontAlternate The falt font value
            
            @since 2.0.8
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.SetCharset(System.String)">
            Set the character-set to the parsed value.
            
            @param charset The charset value
            
            @since 2.0.8
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.ProcessFont">
            Process the font information that was parsed from the input.
            
            @since 2.0.8
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.Createfont(System.String)">
            Create a font via the <code>FontFactory</code>
            
            @param fontName The font name to create
            @return The created <code>Font</code> object
            
            @since 2.0.8
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.GetFont(System.String)">
            Get a <code>Font</code> object from the font map object
            
            @param key The font number to get
            @return The mapped <code>Font</code> object.
            
            @since 2.0.8
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationFontTable.ImportSystemFonts">
            Load system fonts into the static <code>FontFactory</code> object
            
            @since 2.0.8
        </member>
        <member name="T:iTextSharp.text.rtf.graphic.RtfShape">
            The RtfShape provides the interface for adding shapes to
            the RTF document. This will only work for Word 97+, older
            Word versions are not supported by this class.<br /><br />
            
            Only very simple shapes are directly supported by the RtfShape.
            For more complex shapes you will have to read the RTF
            specification (iText follows the 1.6 specification) and add
            the desired properties via the RtfShapeProperty.<br /><br />
            
            One thing to keep in mind is that distances are not expressed
            in the standard iText point, but in EMU where 1 inch = 914400 EMU
            or 1 cm = 360000 EMU. 
            
            @version $Revision: 1.7 $
            @author Mark Hall (Mark.Hall@mail.room3b.eu)
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_FREEFORM">
            Constant for a free form shape. The shape verticies must
            be specified with an array of Point objects in a
            RtfShapeProperty with the name PROPERTY_VERTICIES.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_RECTANGLE">
            Constant for a rectangle.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_ROUND_RECTANGLE">
            Constant for a rounded rectangle. The roundness is
            set via a RtfShapeProperty with the name PROPERTY_ADJUST_VALUE.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_ELLIPSE">
            Constant for an ellipse. Use this to create circles.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_DIAMOND">
            Constant for a diamond.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_TRIANGLE_ISOSCELES">
            Constant for a isoscelle triangle.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_TRIANGLE_RIGHT">
            Constant for a right triangle.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_PARALLELOGRAM">
            Constant for a parallelogram.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_TRAPEZOID">
            Constant for a trapezoid.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_HEXAGON">
            Constant for a hexagon.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_OCTAGON">
            Constant for an ocatagon.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_STAR">
            Constant for a star.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_ARROW">
            Constant for an arrow.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_ARROR_THICK">
            Constant for a thick arrow.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_HOME_PLATE">
            Constant for a home plate style shape.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_CUBE">
            Constant for a cube shape.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_BALLOON">
            Constant for a balloon shape.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_SEAL">
            Constant for a seal shape.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_ARC">
            Constant for an arc shape.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_LINE">
            Constant for a line shape.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_CAN">
            Constant for a can shape.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_DONUT">
            Constant for a donut shape.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_PICTURE_FRAME">
            Constant for a Picture Frame.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_WRAP_NONE">
            Text is not wrapped around the shape.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_WRAP_TOP_BOTTOM">
            Text is wrapped to the top and bottom.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_WRAP_BOTH">
            Text is wrapped on the left and right side.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_WRAP_LEFT">
            Text is wrapped on the left side.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_WRAP_RIGHT">
            Text is wrapped on the right side.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_WRAP_LARGEST">
            Text is wrapped on the largest side.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_WRAP_TIGHT_BOTH">
            Text is tightly wrapped on the left and right side.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_WRAP_TIGHT_LEFT">
            Text is tightly wrapped on the left side.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_WRAP_TIGHT_RIGHT">
            Text is tightly wrapped on the right side.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_WRAP_TIGHT_LARGEST">
            Text is tightly wrapped on the largest side.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.SHAPE_WRAP_THROUGH">
            Text is wrapped through the shape.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.shapeNr">
            The shape nr is a random unique id.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.type">
            The shape type.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.position">
            The RtfShapePosition that defines position settings for this RtfShape.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.properties">
            A Hashtable with RtfShapePropertys that define further shape properties.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.wrapping">
            The wrapping mode. Defaults to SHAPE_WRAP_NONE;
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShape.shapeText">
            Text that is contained in the shape.
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfShape.#ctor(System.Int32,iTextSharp.text.rtf.graphic.RtfShapePosition)">
            Constructs a new RtfShape of a given shape at the given RtfShapePosition.
            
            @param type The type of shape to create.
            @param position The RtfShapePosition to create this RtfShape at.
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfShape.SetProperty(iTextSharp.text.rtf.graphic.RtfShapeProperty)">
            Sets a property.
            
            @param property The property to set for this RtfShape.
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfShape.SetShapeText(System.String)">
            Sets the text to display in this RtfShape.
            
            @param shapeText The text to display.
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfShape.SetWrapping(System.Int32)">
            Set the wrapping mode.
            
            @param wrapping The wrapping mode to use for this RtfShape.
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfShape.WriteContent(System.IO.Stream)">
            Writes the RtfShape. Some settings are automatically translated into
            or require other properties and these are set first.
        </member>
        <member name="T:iTextSharp.text.pdf.TrueTypeFontUnicode">
            Represents a True Type font with Unicode encoding. All the character
            in the font can be used directly by using the encoding Identity-H or
            Identity-V. This is the only way to represent some character sets such
            as Thai.
            @author  Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="T:iTextSharp.text.pdf.TrueTypeFont">
            Reads a Truetype font
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.codePages">
            The code pages possible for a True Type font.
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.tables">
            Contains the location of the several tables. The key is the name of
            the table and the value is an <CODE>int[2]</CODE> where position 0
            is the offset from the start of the file and position 1 is the length
            of the table.
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.rf">
            The file in use.
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.fileName">
            The file name.
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.directoryOffset">
            The offset from the start of the file to the table directory.
            It is 0 for TTF and may vary for TTC depending on the chosen font.
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.ttcIndex">
            The index for the TTC font. It is an empty <CODE>string</CODE> for a
            TTF file.
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.style">
            The style modifier 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.head">
            The content of table 'head'.
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.hhea">
            The content of table 'hhea'.
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.os_2">
            The content of table 'OS/2'.
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.GlyphWidths">
            The width of the glyphs. This is essentially the content of table
            'hmtx' normalized to 1000 units.
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.cmap10">
            The map containing the code information for the table 'cmap', encoding 1.0.
            The key is the code and the value is an <CODE>int[2]</CODE> where position 0
            is the glyph number and position 1 is the glyph width normalized to 1000
            units.
        </member>
        <!-- Badly formed XML comment ignored for member "F:iTextSharp.text.pdf.TrueTypeFont.cmap31" -->
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.cmapExt">
            <summary>
            By James for unicode Ext.B
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.kerning">
            The map containing the kerning information. It represents the content of
            table 'kern'. The key is an <CODE>Integer</CODE> where the top 16 bits
            are the glyph number for the first character and the lower 16 bits are the
            glyph number for the second character. The value is the amount of kerning in
            normalized 1000 units as an <CODE>Integer</CODE>. This value is usually negative.
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.fontName">
            The font name.
            This name is usually extracted from the table 'name' with
            the 'Name ID' 6.
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.fullName">
            The full name of the font
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.allNameEntries">
            All the names auf the Names-Table
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.familyName">
            The family name of the font
        </member>
        <!-- Badly formed XML comment ignored for member "F:iTextSharp.text.pdf.TrueTypeFont.italicAngle" -->
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.isFixedPitch">
            <CODE>true</CODE> if all the glyphs have the same width.
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.#ctor">
            This constructor is present to allow extending the class.
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.#ctor(System.String,System.String,System.Boolean,System.Byte[],System.Boolean,System.Boolean)">
            Creates a new TrueType font.
            @param ttFile the location of the font on file. The file must end in '.ttf' or
            '.ttc' but can have modifiers after the name
            @param enc the encoding to be applied to this font
            @param emb true if the font is to be embedded in the PDF
            @param ttfAfm the font as a <CODE>byte</CODE> array
            @throws DocumentException the font is invalid
            @throws IOException the font file could not be read
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.GetTTCName(System.String)">
            Gets the name from a composed TTC file name.
            If I have for input "myfont.ttc,2" the return will
            be "myfont.ttc".
            @param name the full name
            @return the simple file name
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.FillTables">
            Reads the tables 'head', 'hhea', 'OS/2' and 'post' filling several variables.
            @throws DocumentException the font is invalid
            @throws IOException the font file could not be read
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.GetNames(System.Int32)">
            Extracts the names of the font in all the languages available.
            @param id the name id to retrieve
            @throws DocumentException on error
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.GetAllNames">
            Extracts all the names of the names-Table
            @param id the name id to retrieve
            @throws DocumentException on error
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.Process(System.Byte[],System.Boolean)">
            Reads the font data.
            @param ttfAfm the font as a <CODE>byte</CODE> array, possibly <CODE>null</CODE>
            @throws DocumentException the font is invalid
            @throws IOException the font file could not be read
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.ReadStandardString(System.Int32)">
            Reads a <CODE>string</CODE> from the font file as bytes using the Cp1252
             encoding.
            @param length the length of bytes to read
            @return the <CODE>string</CODE> read
            @throws IOException the font file could not be read
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.ReadUnicodeString(System.Int32)">
            Reads a Unicode <CODE>string</CODE> from the font file. Each character is
             represented by two bytes.
            @param length the length of bytes to read. The <CODE>string</CODE> will have <CODE>length</CODE>/2
            characters
            @return the <CODE>string</CODE> read
            @throws IOException the font file could not be read
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.ReadGlyphWidths">
            Reads the glyphs widths. The widths are extracted from the table 'hmtx'.
             The glyphs are normalized to 1000 units.
            @throws DocumentException the font is invalid
            @throws IOException the font file could not be read
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.GetGlyphWidth(System.Int32)">
            Gets a glyph width.
            @param glyph the glyph to get the width of
            @return the width of the glyph in normalized 1000 units
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.ReadCMaps">
            Reads the several maps from the table 'cmap'. The maps of interest are 1.0 for symbolic
             fonts and 3.1 for all others. A symbolic font is defined as having the map 3.0.
            @throws DocumentException the font is invalid
            @throws IOException the font file could not be read
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.ReadFormat0">
            The information in the maps of the table 'cmap' is coded in several formats.
             Format 0 is the Apple standard character to glyph index mapping table.
            @return a <CODE>Hashtable</CODE> representing this map
            @throws IOException the font file could not be read
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.ReadFormat4">
            The information in the maps of the table 'cmap' is coded in several formats.
             Format 4 is the Microsoft standard character to glyph index mapping table.
            @return a <CODE>Hashtable</CODE> representing this map
            @throws IOException the font file could not be read
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.ReadFormat6">
            The information in the maps of the table 'cmap' is coded in several formats.
             Format 6 is a trimmed table mapping. It is similar to format 0 but can have
             less than 256 entries.
            @return a <CODE>Hashtable</CODE> representing this map
            @throws IOException the font file could not be read
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.ReadKerning">
            Reads the kerning information from the 'kern' table.
            @throws IOException the font file could not be read
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.GetKerning(System.Int32,System.Int32)">
            Gets the kerning between two Unicode chars.
            @param char1 the first char
            @param char2 the second char
            @return the kerning to be applied
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.GetRawWidth(System.Int32,System.String)">
            Gets the width from the font according to the unicode char <CODE>c</CODE>.
            If the <CODE>name</CODE> is null it's a symbolic font.
            @param c the unicode char
            @param name the glyph name
            @return the width of the char
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.GetFontDescriptor(iTextSharp.text.pdf.PdfIndirectReference,System.String,iTextSharp.text.pdf.PdfIndirectReference)">
            Generates the font descriptor for this font.
            @return the PdfDictionary containing the font descriptor or <CODE>null</CODE>
            @param subsetPrefix the subset prefix
            @param fontStream the indirect reference to a PdfStream containing the font or <CODE>null</CODE>
            @throws DocumentException if there is an error
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.GetFontBaseType(iTextSharp.text.pdf.PdfIndirectReference,System.String,System.Int32,System.Int32,System.Byte[])">
            Generates the font dictionary for this font.
            @return the PdfDictionary containing the font dictionary
            @param subsetPrefix the subset prefx
            @param firstChar the first valid character
            @param lastChar the last valid character
            @param shortTag a 256 bytes long <CODE>byte</CODE> array where each unused byte is represented by 0
            @param fontDescriptor the indirect reference to a PdfDictionary containing the font descriptor or <CODE>null</CODE>
            @throws DocumentException if there is an error
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.WriteFont(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.pdf.PdfIndirectReference,System.Object[])">
            Outputs to the writer the font dictionaries and streams.
            @param writer the writer for this document
            @param ref the font indirect reference
            @param params several parameters that depend on the font type
            @throws IOException on error
            @throws DocumentException error in generating the object
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.ReadCffFont">
            If this font file is using the Compact Font File Format, then this method
            will return the raw bytes needed for the font stream. If this method is
            ever made public: make sure to add a test if (cff == true).
            @return  a byte array
            @since   2.1.3
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.GetFullFontStream">
            Returns a PdfStream object with the full font program.
            @return  a PdfStream with the font program
            @since   2.1.3
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.GetFontDescriptor(System.Int32,System.Single)">
            Gets the font parameter identified by <CODE>key</CODE>. Valid values
            for <CODE>key</CODE> are <CODE>ASCENT</CODE>, <CODE>CAPHEIGHT</CODE>, <CODE>DESCENT</CODE>
            and <CODE>ITALICANGLE</CODE>.
            @param key the parameter to be extracted
            @param fontSize the font size in points
            @return the parameter in points
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.GetMetricsTT(System.Int32)">
            Gets the glyph index and metrics for a character.
            @param c the character
            @return an <CODE>int</CODE> array with {glyph index, width}
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.HasKernPairs">
            Checks if the font has any kerning pairs.
            @return <CODE>true</CODE> if the font has any kerning pairs
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.SetKerning(System.Int32,System.Int32,System.Int32)">
            Sets the kerning between two Unicode chars.
            @param char1 the first char
            @param char2 the second char
            @param kern the kerning to apply in normalized 1000 units
            @return <code>true</code> if the kerning was applied, <code>false</code> otherwise
        </member>
        <member name="P:iTextSharp.text.pdf.TrueTypeFont.BaseFont">
            Gets the Postscript font name.
            @throws DocumentException the font is invalid
            @throws IOException the font file could not be read
            @return the Postscript font name
        </member>
        <member name="P:iTextSharp.text.pdf.TrueTypeFont.PostscriptFontName">
            Gets the postscript font name.
            @return the postscript font name
        </member>
        <member name="P:iTextSharp.text.pdf.TrueTypeFont.CodePagesSupported">
            Gets the code pages supported by the font.
            @return the code pages supported by the font
        </member>
        <!-- Badly formed XML comment ignored for member "P:iTextSharp.text.pdf.TrueTypeFont.FullFontName" -->
        <!-- Badly formed XML comment ignored for member "P:iTextSharp.text.pdf.TrueTypeFont.AllNameEntries" -->
        <!-- Badly formed XML comment ignored for member "P:iTextSharp.text.pdf.TrueTypeFont.FamilyFontName" -->
        <member name="T:iTextSharp.text.pdf.TrueTypeFont.FontHeader">
            The components of table 'head'.
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.FontHeader.flags">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.FontHeader.unitsPerEm">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.FontHeader.xMin">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.FontHeader.yMin">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.FontHeader.xMax">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.FontHeader.yMax">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.FontHeader.macStyle">
            A variable. 
        </member>
        <member name="T:iTextSharp.text.pdf.TrueTypeFont.HorizontalHeader">
            The components of table 'hhea'.
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.HorizontalHeader.Ascender">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.HorizontalHeader.Descender">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.HorizontalHeader.LineGap">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.HorizontalHeader.advanceWidthMax">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.HorizontalHeader.minLeftSideBearing">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.HorizontalHeader.minRightSideBearing">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.HorizontalHeader.xMaxExtent">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.HorizontalHeader.caretSlopeRise">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.HorizontalHeader.caretSlopeRun">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.HorizontalHeader.numberOfHMetrics">
            A variable. 
        </member>
        <member name="T:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics">
            The components of table 'OS/2'.
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.xAvgCharWidth">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.usWeightClass">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.usWidthClass">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.fsType">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.ySubscriptXSize">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.ySubscriptYSize">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.ySubscriptXOffset">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.ySubscriptYOffset">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.ySuperscriptXSize">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.ySuperscriptYSize">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.ySuperscriptXOffset">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.ySuperscriptYOffset">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.yStrikeoutSize">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.yStrikeoutPosition">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.sFamilyClass">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.panose">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.achVendID">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.fsSelection">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.usFirstCharIndex">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.usLastCharIndex">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.sTypoAscender">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.sTypoDescender">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.sTypoLineGap">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.usWinAscent">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.usWinDescent">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.ulCodePageRange1">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.ulCodePageRange2">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.sCapHeight">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFontUnicode.vertical">
            <CODE>true</CODE> if the encoding is vertical.
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFontUnicode.#ctor(System.String,System.String,System.Boolean,System.Byte[],System.Boolean)">
            Creates a new TrueType font addressed by Unicode characters. The font
            will always be embedded.
            @param ttFile the location of the font on file. The file must end in '.ttf'.
            The modifiers after the name are ignored.
            @param enc the encoding to be applied to this font
            @param emb true if the font is to be embedded in the PDF
            @param ttfAfm the font as a <CODE>byte</CODE> array
            @throws DocumentException the font is invalid
            @throws IOException the font file could not be read
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFontUnicode.GetWidth(System.Int32)">
            Gets the width of a <CODE>char</CODE> in normalized 1000 units.
            @param char1 the unicode <CODE>char</CODE> to get the width of
            @return the width in normalized 1000 units
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFontUnicode.GetWidth(System.String)">
            Gets the width of a <CODE>string</CODE> in normalized 1000 units.
            @param text the <CODE>string</CODE> to get the witdth of
            @return the width in normalized 1000 units
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFontUnicode.GetToUnicode(System.Object[])">
            Creates a ToUnicode CMap to allow copy and paste from Acrobat.
            @param metrics metrics[0] contains the glyph index and metrics[2]
            contains the Unicode code
            @throws DocumentException on error
            @return the stream representing this CMap or <CODE>null</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFontUnicode.ToHex(System.Int32)">
            Gets an hex string in the format "&lt;HHHH&gt;".
            @param n the number
            @return the hex string
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFontUnicode.GetCIDFontType2(iTextSharp.text.pdf.PdfIndirectReference,System.String,System.Object[])">
            Generates the CIDFontTyte2 dictionary.
            @param fontDescriptor the indirect reference to the font descriptor
            @param subsetPrefix the subset prefix
            @param metrics the horizontal width metrics
            @return a stream
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFontUnicode.GetFontBaseType(iTextSharp.text.pdf.PdfIndirectReference,System.String,iTextSharp.text.pdf.PdfIndirectReference)">
            Generates the font dictionary.
            @param descendant the descendant dictionary
            @param subsetPrefix the subset prefix
            @param toUnicode the ToUnicode stream
            @return the stream
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFontUnicode.Compare(System.Object,System.Object)">
            The method used to sort the metrics array.
            @param o1 the first element
            @param o2 the second element
            @return the comparisation
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFontUnicode.WriteFont(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.pdf.PdfIndirectReference,System.Object[])">
            Outputs to the writer the font dictionaries and streams.
            @param writer the writer for this document
            @param ref the font indirect reference
            @param parms several parameters that depend on the font type
            @throws IOException on error
            @throws DocumentException error in generating the object
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFontUnicode.GetFullFontStream">
            Returns a PdfStream object with the full font program.
            @return  a PdfStream with the font program
            @since   2.1.3
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFontUnicode.ConvertToBytes(System.String)">
            A forbidden operation. Will throw a null pointer exception.
            @param text the text
            @return always <CODE>null</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFontUnicode.GetMetricsTT(System.Int32)">
            Gets the glyph index and metrics for a character.
            @param c the character
            @return an <CODE>int</CODE> array with {glyph index, width}
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFontUnicode.CharExists(System.Int32)">
            Checks if a character exists in this font.
            @param c the character to check
            @return <CODE>true</CODE> if the character has a glyph,
            <CODE>false</CODE> otherwise
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFontUnicode.SetCharAdvance(System.Int32,System.Int32)">
            Sets the character advance.
            @param c the character
            @param advance the character advance normalized to 1000 units
            @return <CODE>true</CODE> if the advance was set,
            <CODE>false</CODE> otherwise
        </member>
        <member name="T:iTextSharp.text.pdf.PdfTransparencyGroup">
            The transparency group dictionary.
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfTransparencyGroup.#ctor">
            Constructs a transparencyGroup.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfTransparencyGroup.Isolated">
            Determining the initial backdrop against which its stack is composited.
            @param isolated
        </member>
        <member name="P:iTextSharp.text.pdf.PdfTransparencyGroup.Knockout">
            Determining whether the objects within the stack are composited with one another or only with the group's backdrop.
            @param knockout
        </member>
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.pdf.PdfRectangle" -->
        <member name="F:iTextSharp.text.pdf.PdfRectangle.llx">
            lower left x 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfRectangle.lly">
            lower left y 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfRectangle.urx">
            upper right x 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfRectangle.ury">
            upper right y 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfRectangle.#ctor(System.Single,System.Single,System.Single,System.Single,System.Int32)">
             Constructs a <CODE>PdfRectangle</CODE>-object.
            
             @param       llx         lower left x
             @param       lly         lower left y
             @param       urx         upper right x
             @param       ury         upper right y
            
             @since       rugPdf0.10
        </member>
        <member name="M:iTextSharp.text.pdf.PdfRectangle.#ctor(System.Single,System.Single,System.Int32)">
             Constructs a <CODE>PdfRectangle</CODE>-object starting from the origin (0, 0).
            
             @param       urx         upper right x
             @param       ury         upper right y
        </member>
        <member name="M:iTextSharp.text.pdf.PdfRectangle.#ctor(iTextSharp.text.Rectangle,System.Int32)">
             Constructs a <CODE>PdfRectangle</CODE>-object with a <CODE>Rectangle</CODE>-object.
            
             @param   rectangle   a <CODE>Rectangle</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfRectangle.Add(iTextSharp.text.pdf.PdfObject)">
             Overrides the <CODE>add</CODE>-method in <CODE>PdfArray</CODE> in order to prevent the adding of extra object to the array.
            
             @param       object          <CODE>PdfObject</CODE> to add (will not be added here)
             @return      <CODE>false</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfRectangle.Add(System.Single[])">
            Block changes to the underlying PdfArray
            @param values stuff we'll ignore.  Ha!
            @return false.  You can't add anything to a PdfRectangle
            @since 2.1.5
        </member>
        <member name="M:iTextSharp.text.pdf.PdfRectangle.Add(System.Int32[])">
            Block changes to the underlying PdfArray
            @param values stuff we'll ignore.  Ha!
            @return false.  You can't add anything to a PdfRectangle
            @since 2.1.5
        </member>
        <member name="M:iTextSharp.text.pdf.PdfRectangle.AddFirst(iTextSharp.text.pdf.PdfObject)">
            Block changes to the underlying PdfArray
            @param object Ignored.
            @since 2.1.5
        </member>
        <member name="M:iTextSharp.text.pdf.PdfRectangle.GetLeft(System.Int32)">
             Returns the lower left x-coordinate, considering a given margin.
            
             @param       margin      a margin
             @return      the lower left x-coordinate
        </member>
        <member name="M:iTextSharp.text.pdf.PdfRectangle.GetRight(System.Int32)">
             Returns the upper right x-coordinate, considering a given margin.
            
             @param       margin      a margin
             @return      the upper right x-coordinate
        </member>
        <member name="M:iTextSharp.text.pdf.PdfRectangle.GetTop(System.Int32)">
             Returns the upper right y-coordinate, considering a given margin.
            
             @param       margin      a margin
             @return      the upper right y-coordinate
        </member>
        <member name="M:iTextSharp.text.pdf.PdfRectangle.GetBottom(System.Int32)">
             Returns the lower left y-coordinate, considering a given margin.
            
             @param       margin      a margin
             @return      the lower left y-coordinate
        </member>
        <member name="P:iTextSharp.text.pdf.PdfRectangle.Rectangle">
            Returns the high level version of this PdfRectangle
            @return this PdfRectangle translated to class Rectangle
        </member>
        <member name="P:iTextSharp.text.pdf.PdfRectangle.Left">
             Returns the lower left x-coordinate.
            
             @return      the lower left x-coordinaat
        </member>
        <member name="P:iTextSharp.text.pdf.PdfRectangle.Right">
             Returns the upper right x-coordinate.
            
             @return      the upper right x-coordinate
        </member>
        <member name="P:iTextSharp.text.pdf.PdfRectangle.Top">
             Returns the upper right y-coordinate.
            
             @return      the upper right y-coordinate
        </member>
        <member name="P:iTextSharp.text.pdf.PdfRectangle.Bottom">
             Returns the lower left y-coordinate.
            
             @return      the lower left y-coordinate
        </member>
        <member name="P:iTextSharp.text.pdf.PdfRectangle.Width">
             Returns the width of the rectangle.
            
             @return      a width
        </member>
        <member name="P:iTextSharp.text.pdf.PdfRectangle.Height">
             Returns the height of the rectangle.
            
             @return      a height
        </member>
        <member name="P:iTextSharp.text.pdf.PdfRectangle.Rotate">
             Swaps the values of urx and ury and of lly and llx in order to rotate the rectangle.
            
             @return      a <CODE>PdfRectangle</CODE>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfPSXObject">
            Implements the PostScript XObject.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPSXObject.#ctor">
            Creates a new instance of PdfPSXObject 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPSXObject.#ctor(iTextSharp.text.pdf.PdfWriter)">
            Constructs a PSXObject
            @param wr
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPSXObject.GetFormXObject(System.Int32)">
             Gets the stream representing this object.
            
             @param   compressionLevel    the compressionLevel
             @return the stream representing this template
             @since   2.1.3   (replacing the method without param compressionLevel)
             @throws IOException
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPSXObject.Duplicate">
            Gets a duplicate of this <CODE>PdfPSXObject</CODE>. All
            the members are copied by reference but the buffer stays different.
            @return a copy of this <CODE>PdfPSXObject</CODE>
        </member>
        <member name="T:iTextSharp.text.pdf.events.PdfPCellEventForwarder">
            If you want to add more than one event to a cell,
            you have to construct a PdfPCellEventForwarder, add the
            different events to this object and add the forwarder to
            the PdfPCell.
        </member>
        <member name="F:iTextSharp.text.pdf.events.PdfPCellEventForwarder.events">
            ArrayList containing all the PageEvents that have to be executed. 
        </member>
        <member name="M:iTextSharp.text.pdf.events.PdfPCellEventForwarder.AddCellEvent(iTextSharp.text.pdf.IPdfPCellEvent)">
            Add a page event to the forwarder.
            @param event an event that has to be added to the forwarder.
        </member>
        <member name="M:iTextSharp.text.pdf.events.PdfPCellEventForwarder.CellLayout(iTextSharp.text.pdf.PdfPCell,iTextSharp.text.Rectangle,iTextSharp.text.pdf.PdfContentByte[])">
            @see com.lowagie.text.pdf.PdfPCellEvent#cellLayout(com.lowagie.text.pdf.PdfPCell, com.lowagie.text.Rectangle, com.lowagie.text.pdf.PdfContentByte[])
        </member>
        <member name="T:iTextSharp.text.ListItem">
            <summary>
            A ListItem is a Paragraph
            that can be added to a List.
            </summary>
            <example>
            <B>Example 1:</B>
            <code>
            List list = new List(true, 20);
            list.Add(<strong>new ListItem("First line")</strong>);
            list.Add(<strong>new ListItem("The second line is longer to see what happens once the end of the line is reached. Will it start on a new line?")</strong>);
            list.Add(<strong>new ListItem("Third line")</strong>);
            </code>
            
            The result of this code looks like this:
            <OL>
                   <LI>
                       First line
                   </LI>
                   <LI>
                       The second line is longer to see what happens once the end of the line is reached. Will it start on a new line?
                   </LI>
                   <LI>
                       Third line
                   </LI>
               </OL>
               
            <B>Example 2:</B>
            <code>
            List overview = new List(false, 10);
            overview.Add(<strong>new ListItem("This is an item")</strong>);
            overview.Add("This is another item");
            </code>
            
            The result of this code looks like this:
            <UL>
                   <LI>
                       This is an item
                   </LI>
                   <LI>
                       This is another item
                   </LI>
               </UL>
            </example>
            <seealso cref="T:iTextSharp.text.Element"/>
            <seealso cref="T:iTextSharp.text.List"/>
            <seealso cref="T:iTextSharp.text.Paragraph"/>
        </member>
        <member name="F:iTextSharp.text.ListItem.symbol">
            <summary> this is the symbol that wil proceed the listitem. </summary>
        </member>
        <member name="M:iTextSharp.text.ListItem.#ctor">
            <summary>
            Constructs a ListItem.
            </summary>
        </member>
        <member name="M:iTextSharp.text.ListItem.#ctor(System.Single)">
            <summary>
               Constructs a ListItem with a certain leading.
            </summary>
            <param name="leading">the leading</param>
        </member>
        <member name="M:iTextSharp.text.ListItem.#ctor(iTextSharp.text.Chunk)">
            <summary>
            Constructs a ListItem with a certain Chunk.
            </summary>
            <param name="chunk">a Chunk</param>
        </member>
        <member name="M:iTextSharp.text.ListItem.#ctor(System.String)">
            <summary>
            Constructs a ListItem with a certain string.
            </summary>
            <param name="str">a string</param>
        </member>
        <member name="M:iTextSharp.text.ListItem.#ctor(System.String,iTextSharp.text.Font)">
            <summary>
            Constructs a ListItem with a certain string
            and a certain Font.
            </summary>
            <param name="str">a string</param>
            <param name="font">a string</param>
        </member>
        <member name="M:iTextSharp.text.ListItem.#ctor(System.Single,iTextSharp.text.Chunk)">
            <summary>
            Constructs a ListItem with a certain Chunk
            and a certain leading.
            </summary>
            <param name="leading">the leading</param>
            <param name="chunk">a Chunk</param>
        </member>
        <member name="M:iTextSharp.text.ListItem.#ctor(System.Single,System.String)">
            <summary>
            Constructs a ListItem with a certain string
            and a certain leading.
            </summary>
            <param name="leading">the leading</param>
            <param name="str">a string</param>
        </member>
        <member name="M:iTextSharp.text.ListItem.#ctor(System.Single,System.String,iTextSharp.text.Font)">
             Constructs a ListItem with a certain leading, string
             and Font.
            
             @param    leading        the leading
             @param    string        a string
             @param    font        a Font
            <summary>
            Constructs a ListItem with a certain leading, string
            and Font.
            </summary>
            <param name="leading">the leading</param>
            <param name="str">a string</param>
            <param name="font">a Font</param>
        </member>
        <member name="M:iTextSharp.text.ListItem.#ctor(iTextSharp.text.Phrase)">
            <summary>
            Constructs a ListItem with a certain Phrase.
            </summary>
            <param name="phrase">a Phrase</param>
        </member>
        <member name="M:iTextSharp.text.ListItem.IsTag(System.String)">
            <summary>
            Checks if a given tag corresponds with this object.
            </summary>
            <param name="tag">the given tag</param>
            <returns>true if the tag corresponds</returns>
        </member>
        <member name="M:iTextSharp.text.ListItem.SetIndentationLeft(System.Single,System.Boolean)">
             Sets the indentation of this paragraph on the left side.
            
             @param	indentation		the new indentation
        </member>
        <member name="P:iTextSharp.text.ListItem.Type">
            <summary>
            Gets the type of the text element.
            </summary>
            <value>a type</value>
        </member>
        <member name="P:iTextSharp.text.ListItem.ListSymbol">
            <summary>
            Get/set the listsymbol.
            </summary>
            <value>a Chunk</value>
        </member>
        <member name="T:iTextSharp.text.html.ITextmyHtmlHandler">
            The <CODE>Tags</CODE>-class maps several XHTML-tags to iText-objects.
        </member>
        <member name="F:iTextSharp.text.html.ITextmyHtmlHandler.bodyAttributes">
            These are the properties of the body section. 
        </member>
        <member name="F:iTextSharp.text.html.ITextmyHtmlHandler.tableBorder">
            This is the status of the table border. 
        </member>
        <member name="M:iTextSharp.text.html.ITextmyHtmlHandler.#ctor(iTextSharp.text.IDocListener)">
             Constructs a new SAXiTextHandler that will translate all the events
             triggered by the parser to actions on the <CODE>Document</CODE>-object.
            
             @param   document    this is the document on which events must be triggered
        </member>
        <member name="M:iTextSharp.text.html.ITextmyHtmlHandler.#ctor(iTextSharp.text.IDocListener,System.Collections.Hashtable)">
             Constructs a new SAXiTextHandler that will translate all the events
             triggered by the parser to actions on the <CODE>Document</CODE>-object.
            
             @param   document    this is the document on which events must be triggered
             @param htmlTags a tagmap translating HTML tags to iText tags
        </member>
        <member name="M:iTextSharp.text.html.ITextmyHtmlHandler.StartElement(System.String,System.String,System.String,System.Collections.Hashtable)">
             This method gets called when a start tag is encountered.
            
             @param   uri         the Uniform Resource Identifier
             @param   lname       the local name (without prefix), or the empty string if Namespace processing is not being performed.
             @param   name        the name of the tag that is encountered
             @param   attrs       the list of attributes
        </member>
        <member name="M:iTextSharp.text.html.ITextmyHtmlHandler.EndElement(System.String,System.String,System.String)">
             This method gets called when an end tag is encountered.
            
             @param   uri         the Uniform Resource Identifier
             @param   lname       the local name (without prefix), or the empty string if Namespace processing is not being performed.
             @param   name        the name of the tag that ends
        </member>
        <member name="T:iTextSharp.text.ElementTags">
            <summary>
            A class that contains all the possible tagnames and their attributes.
            </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ITEXT">
            <summary> the root tag. </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.TITLE">
            <summary> attribute of the root and annotation tag (also a special tag within a chapter or section) </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.SUBJECT">
            <summary> attribute of the root tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.KEYWORDS">
            <summary> attribute of the root tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.AUTHOR">
            <summary> attribute of the root tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.CREATIONDATE">
            <summary> attribute of the root tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.PRODUCER">
            <summary> attribute of the root tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.CHAPTER">
            <summary> the chapter tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.SECTION">
            <summary> the section tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.NUMBERDEPTH">
            <summary> attribute of section/chapter tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.DEPTH">
            <summary> attribute of section/chapter tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.NUMBER">
            <summary> attribute of section/chapter tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.INDENT">
            <summary> attribute of section/chapter tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.LEFT">
            <summary> attribute of chapter/section/paragraph/table/cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.RIGHT">
            <summary> attribute of chapter/section/paragraph/table/cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.PHRASE">
            <summary> the phrase tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ANCHOR">
            <summary> the anchor tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.LIST">
            <summary> the list tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.LISTITEM">
            <summary> the listitem tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.PARAGRAPH">
            <summary> the paragraph tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.LEADING">
            <summary> attribute of phrase/paragraph/cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ALIGN">
            <summary> attribute of paragraph/image/table tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.KEEPTOGETHER">
            <summary> attribute of paragraph </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.NAME">
            <summary> attribute of anchor tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.REFERENCE">
            <summary> attribute of anchor tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.LISTSYMBOL">
            <summary> attribute of list tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.NUMBERED">
            <summary> attribute of list tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.LETTERED">
            <summary> attribute of the list tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.FIRST">
            <summary> attribute of list tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.SYMBOLINDENT">
            <summary> attribute of list tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.INDENTATIONLEFT">
            <summary> attribute of list tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.INDENTATIONRIGHT">
            <summary> attribute of list tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.IGNORE">
            <summary> the chunk tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ENTITY">
            <summary> the chunk tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ID">
            <summary> the chunk tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.CHUNK">
            <summary> the chunk tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ENCODING">
            <summary> attribute of the chunk tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.EMBEDDED">
            <summary> attribute of the chunk tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.COLOR">
            <summary> attribute of the chunk/table/cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.RED">
            <summary> attribute of the chunk/table/cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.GREEN">
            <summary> attribute of the chunk/table/cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.BLUE">
            <summary> attribute of the chunk/table/cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.TABLE">
            <summary> the table tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ROW">
            <summary> the cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.CELL">
            <summary> the cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.COLUMNS">
            <summary> attribute of the table tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.LASTHEADERROW">
            <summary> attribute of the table tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.CELLPADDING">
            <summary> attribute of the table tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.CELLSPACING">
            <summary> attribute of the table tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.OFFSET">
            <summary> attribute of the table tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.WIDTHS">
            <summary> attribute of the table tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.TABLEFITSPAGE">
            <summary> attribute of the table tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.CELLSFITPAGE">
            <summary> attribute of the table tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.CONVERT2PDFP">
            <summary> attribute of the table tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.HORIZONTALALIGN">
            <summary> attribute of the cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.VERTICALALIGN">
            <summary> attribute of the cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.COLSPAN">
            <summary> attribute of the cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ROWSPAN">
            <summary> attribute of the cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.HEADER">
            <summary> attribute of the cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.FOOTER">
            <summary> attribute of the cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.NOWRAP">
            <summary> attribute of the cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.BORDERWIDTH">
            <summary> attribute of the table/cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.TOP">
            <summary> attribute of the table/cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.BOTTOM">
            <summary> attribute of the table/cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.WIDTH">
            <summary> attribute of the table/cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.BORDERCOLOR">
            <summary> attribute of the table/cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.BACKGROUNDCOLOR">
            <summary> attribute of the table/cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.BGRED">
            <summary> attribute of the table/cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.BGGREEN">
            <summary> attribute of the table/cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.BGBLUE">
            <summary> attribute of the table/cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.GRAYFILL">
            <summary> attribute of the table/cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.IMAGE">
            <summary> the image tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.BOOKMARKOPEN">
            <summary> the image tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.URL">
            <summary> attribute of the image and annotation tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.UNDERLYING">
            <summary> attribute of the image tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.TEXTWRAP">
            <summary> attribute of the image tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ALT">
            <summary> attribute of the image tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ABSOLUTEX">
            <summary> attribute of the image tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ABSOLUTEY">
            <summary> attribute of the image tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.PLAINWIDTH">
            <summary> attribute of the image tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.PLAINHEIGHT">
            <summary> attribute of the image tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.SCALEDWIDTH">
            <summary> attribute of the image tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.SCALEDHEIGHT">
            <summary> attribute of the image tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ROTATION">
            <summary> attribute of the image tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.NEWPAGE">
            <summary> the newpage tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.NEWLINE">
            <summary> the newpage tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ANNOTATION">
            <summary> the annotation tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.FILE">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.DESTINATION">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.PAGE">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.NAMED">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.APPLICATION">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.PARAMETERS">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.OPERATION">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.DEFAULTDIR">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.LLX">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.LLY">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.URX">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.URY">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.CONTENT">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ALIGN_LEFT">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ALIGN_CENTER">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ALIGN_RIGHT">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ALIGN_JUSTIFIED">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ALIGN_JUSTIFIED_ALL">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ALIGN_TOP">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ALIGN_MIDDLE">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ALIGN_BOTTOM">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ALIGN_BASELINE">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.DEFAULT">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.UNKNOWN">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.FONT">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.SIZE">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.STYLE">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.HORIZONTALRULE">
            <summary> the possible value of a tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.PAGE_SIZE">
            the possible value of a tag 
        </member>
        <member name="F:iTextSharp.text.ElementTags.ORIENTATION">
            the possible value of a tag 
        </member>
        <member name="F:iTextSharp.text.ElementTags.ALIGN_INDENTATION_ITEMS">
            a possible list attribute 
        </member>
        <member name="F:iTextSharp.text.ElementTags.AUTO_INDENT_ITEMS">
            a possible list attribute 
        </member>
        <member name="F:iTextSharp.text.ElementTags.LOWERCASE">
            a possible list attribute 
        </member>
        <member name="F:iTextSharp.text.ElementTags.FACE">
            a possible list attribute
            @since 2.1.3
        </member>
        <member name="F:iTextSharp.text.ElementTags.SRC">
            attribute of the image or iframe tag
            @since 2.1.3
        </member>
        <member name="F:iTextSharp.text.ElementTags.SUBSUPSCRIPT">
            <summary> attribute of the chunk tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.LOCALGOTO">
            <summary> attribute of the chunk tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.REMOTEGOTO">
            <summary> attribute of the chunk tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.LOCALDESTINATION">
            <summary> attribute of the chunk tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.GENERICTAG">
            <summary> attribute of the chunk tag </summary>
        </member>
        <member name="M:iTextSharp.text.ElementTags.GetAlignment(System.Int32)">
            <summary>
            Translates the alignment value to a String value.
            </summary>
            <param name="alignment">the alignment value</param>
            <returns>the translated value</returns>
        </member>
        <member name="M:iTextSharp.text.ElementTags.AlignmentValue(System.String)">
            Translates a String value to an alignment value.
            (written by Norman Richards, integrated into iText by Bruno)
            @param	a String (one of the ALIGN_ constants of this class)
            @param	an alignment value (one of the ALIGN_ constants of the Element interface) 
        </member>
        <member name="T:iTextSharp.text.xml.xmp.XmpWriter">
            With this class you can create an Xmp Stream that can be used for adding
            Metadata to a PDF Dictionary. Remark that this class doesn't cover the
            complete XMP specification. 
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpWriter.UTF8">
            A possible charset for the XMP. 
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpWriter.UTF16">
            A possible charset for the XMP. 
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpWriter.UTF16BE">
            A possible charset for the XMP. 
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpWriter.UTF16LE">
            A possible charset for the XMP. 
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpWriter.EXTRASPACE">
            String used to fill the extra space. 
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpWriter.XPACKET_PI_BEGIN">
            Processing Instruction required at the start of an XMP stream
            @since iText 2.1.6
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpWriter.XPACKET_PI_END_W">
            Processing Instruction required at the end of an XMP stream for XMP streams that can be updated
            @since iText 2.1.6
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpWriter.XPACKET_PI_END_R">
            Processing Instruction required at the end of an XMP stream for XMP streams that are read only
            @since iText 2.1.6
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpWriter.extraSpace">
            You can add some extra space in the XMP packet; 1 unit in this variable represents 100 spaces and a newline. 
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpWriter.writer">
            The writer to which you can write bytes for the XMP stream. 
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpWriter.about">
            The about string that goes into the rdf:Description tags. 
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpWriter.end">
            The end attribute. 
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpWriter.#ctor(System.IO.Stream,System.String,System.Int32)">
            Creates an XmpWriter. 
            @param os
            @param utfEncoding
            @param extraSpace
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpWriter.#ctor(System.IO.Stream)">
            Creates an XmpWriter.
            @param os
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpWriter.SetReadOnly">
            Sets the XMP to read-only 
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpWriter.AddRdfDescription(System.String,System.String)">
            Adds an rdf:Description.
            @param xmlns
            @param content
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpWriter.AddRdfDescription(iTextSharp.text.xml.xmp.XmpSchema)">
            Adds an rdf:Description.
            @param s
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpWriter.Close">
            Flushes and closes the XmpWriter.
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpWriter.#ctor(System.IO.Stream,iTextSharp.text.pdf.PdfDictionary,System.Int32)">
            @param os
            @param info
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpWriter.#ctor(System.IO.Stream,System.Collections.Hashtable)">
            @param os
            @param info
            @throws IOException
        </member>
        <member name="P:iTextSharp.text.xml.xmp.XmpWriter.About">
            @param about The about to set.
        </member>
        <member name="T:iTextSharp.text.xml.xmp.XmpReader">
            Reads an XMP stream into an org.w3c.dom.Document objects.
            Allows you to replace the contents of a specific tag.
            @since 2.1.3
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpReader.#ctor(System.Byte[])">
            Constructs an XMP reader
            @param	bytes	the XMP content
            @throws ExceptionConverter 
            @throws IOException 
            @throws SAXException 
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpReader.Replace(System.String,System.String,System.String)">
            Replaces the content of a tag.
            @param	namespaceURI	the URI of the namespace
            @param	localName		the tag name
            @param	value			the new content for the tag
            @return	true if the content was successfully replaced
            @since	2.1.6 the return type has changed from void to boolean
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpReader.Add(System.String,System.String,System.String,System.String)">
            Adds a tag.
            @param	namespaceURI	the URI of the namespace
            @param	parent			the tag name of the parent
            @param	localName		the name of the tag to add
            @param	value			the new content for the tag
            @return	true if the content was successfully added
            @since	2.1.6
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpReader.SetNodeText(System.Xml.XmlDocument,System.Xml.XmlNode,System.String)">
            Sets the text of this node. All the child's node are deleted and a new
            child text node is created.
            @param domDocument the <CODE>Document</CODE> that contains the node
            @param n the <CODE>Node</CODE> to add the text to
            @param value the text to add
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpReader.SerializeDoc">
            Writes the document to a byte array.
        </member>
        <member name="T:iTextSharp.text.xml.xmp.DublinCoreSchema">
            An implementation of an XmpSchema.
        </member>
        <member name="F:iTextSharp.text.xml.xmp.DublinCoreSchema.DEFAULT_XPATH_ID">
            default namespace identifier
        </member>
        <member name="F:iTextSharp.text.xml.xmp.DublinCoreSchema.DEFAULT_XPATH_URI">
            default namespace uri
        </member>
        <member name="F:iTextSharp.text.xml.xmp.DublinCoreSchema.CONTRIBUTOR">
            External Contributors to the resource (other than the authors). 
        </member>
        <member name="F:iTextSharp.text.xml.xmp.DublinCoreSchema.COVERAGE">
            The extent or scope of the resource. 
        </member>
        <member name="F:iTextSharp.text.xml.xmp.DublinCoreSchema.CREATOR">
            The authors of the resource (listed in order of precedence, if significant). 
        </member>
        <member name="F:iTextSharp.text.xml.xmp.DublinCoreSchema.DATE">
            Date(s) that something interesting happened to the resource. 
        </member>
        <member name="F:iTextSharp.text.xml.xmp.DublinCoreSchema.DESCRIPTION">
            A textual description of the content of the resource. Multiple values may be present for different languages. 
        </member>
        <member name="F:iTextSharp.text.xml.xmp.DublinCoreSchema.FORMAT">
            The file format used when saving the resource. Tools and applications should set this property to the save format of the data. It may include appropriate qualifiers. 
        </member>
        <member name="F:iTextSharp.text.xml.xmp.DublinCoreSchema.IDENTIFIER">
            Unique identifier of the resource. 
        </member>
        <member name="F:iTextSharp.text.xml.xmp.DublinCoreSchema.LANGUAGE">
            An unordered array specifying the languages used in the resource. 
        </member>
        <member name="F:iTextSharp.text.xml.xmp.DublinCoreSchema.PUBLISHER">
            Publishers. 
        </member>
        <member name="F:iTextSharp.text.xml.xmp.DublinCoreSchema.RELATION">
            Relationships to other documents. 
        </member>
        <member name="F:iTextSharp.text.xml.xmp.DublinCoreSchema.RIGHTS">
            Informal rights statement, selected by language. 
        </member>
        <member name="F:iTextSharp.text.xml.xmp.DublinCoreSchema.SOURCE">
            Unique identifier of the work from which this resource was derived. 
        </member>
        <member name="F:iTextSharp.text.xml.xmp.DublinCoreSchema.SUBJECT">
            An unordered array of descriptive phrases or keywords that specify the topic of the content of the resource. 
        </member>
        <member name="F:iTextSharp.text.xml.xmp.DublinCoreSchema.TITLE">
            The title of the document, or the name given to the resource. Typically, it will be a name by which the resource is formally known. 
        </member>
        <member name="F:iTextSharp.text.xml.xmp.DublinCoreSchema.TYPE">
            A document type; for example, novel, poem, or working paper. 
        </member>
        <member name="M:iTextSharp.text.xml.xmp.DublinCoreSchema.#ctor">
            @param shorthand
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.xml.xmp.DublinCoreSchema.AddTitle(System.String)">
            Adds a title.
            @param title
        </member>
        <member name="M:iTextSharp.text.xml.xmp.DublinCoreSchema.AddDescription(System.String)">
            Adds a description.
            @param desc
        </member>
        <member name="M:iTextSharp.text.xml.xmp.DublinCoreSchema.AddSubject(System.String)">
            Adds a subject.
            @param subject
        </member>
        <member name="M:iTextSharp.text.xml.xmp.DublinCoreSchema.addSubject(System.String[])">
            Adds a subject.
            @param subject array of subjects
        </member>
        <member name="M:iTextSharp.text.xml.xmp.DublinCoreSchema.AddAuthor(System.String)">
            Adds a single author.
            @param author
        </member>
        <member name="M:iTextSharp.text.xml.xmp.DublinCoreSchema.AddAuthor(System.String[])">
            Adds an array of authors.
            @param author
        </member>
        <member name="M:iTextSharp.text.xml.xmp.DublinCoreSchema.AddPublisher(System.String)">
            Adds a single publisher.
            @param publisher
        </member>
        <member name="M:iTextSharp.text.xml.xmp.DublinCoreSchema.AddPublisher(System.String[])">
            Adds an array of publishers.
            @param publisher
        </member>
        <member name="T:iTextSharp.text.SimpleTable">
            <summary>
            Summary description for SimpleTable.
            </summary>
        </member>
        <member name="F:iTextSharp.text.SimpleTable.content">
            the content of a Table. 
        </member>
        <member name="F:iTextSharp.text.SimpleTable.width">
            the width of the Table. 
        </member>
        <member name="F:iTextSharp.text.SimpleTable.widthpercentage">
            the widthpercentage of the Table. 
        </member>
        <member name="F:iTextSharp.text.SimpleTable.cellspacing">
            the spacing of the Cells. 
        </member>
        <member name="F:iTextSharp.text.SimpleTable.cellpadding">
            the padding of the Cells. 
        </member>
        <member name="F:iTextSharp.text.SimpleTable.alignment">
            the alignment of the table. 
        </member>
        <member name="M:iTextSharp.text.SimpleTable.#ctor">
            A RectangleCell is always constructed without any dimensions.
            Dimensions are defined after creation.
        </member>
        <member name="M:iTextSharp.text.SimpleTable.AddElement(iTextSharp.text.SimpleCell)">
            Adds content to this object.
            @param element
            @throws BadElementException
        </member>
        <member name="M:iTextSharp.text.SimpleTable.CreateTable">
            Creates a Table object based on this TableAttributes object.
            @return a com.lowagie.text.Table object
            @throws BadElementException
        </member>
        <member name="M:iTextSharp.text.SimpleTable.CreatePdfPTable">
            Creates a PdfPTable object based on this TableAttributes object.
            @return a com.lowagie.text.pdf.PdfPTable object
            @throws DocumentException
        </member>
        <member name="M:iTextSharp.text.SimpleTable.TableLayout(iTextSharp.text.pdf.PdfPTable,System.Single[][],System.Single[],System.Int32,System.Int32,iTextSharp.text.pdf.PdfContentByte[])">
            @see com.lowagie.text.pdf.PdfPTableEvent#tableLayout(com.lowagie.text.pdf.PdfPTable, float[][], float[], int, int, com.lowagie.text.pdf.PdfContentByte[])
        </member>
        <member name="M:iTextSharp.text.SimpleTable.IsNestable">
            @see com.lowagie.text.Element#isNestable()
            @since   iText 2.0.8
        </member>
        <member name="M:iTextSharp.text.SimpleTable.Add(System.Object)">
            @see com.lowagie.text.TextElementArray#add(java.lang.Object)
        </member>
        <member name="P:iTextSharp.text.SimpleTable.Cellpadding">
            @return Returns the cellpadding.
        </member>
        <member name="P:iTextSharp.text.SimpleTable.Cellspacing">
            @return Returns the cellspacing.
        </member>
        <member name="P:iTextSharp.text.SimpleTable.Alignment">
            @return Returns the alignment.
        </member>
        <member name="P:iTextSharp.text.SimpleTable.Width">
            @return Returns the width.
        </member>
        <member name="P:iTextSharp.text.SimpleTable.Widthpercentage">
            @return Returns the widthpercentage.
        </member>
        <member name="P:iTextSharp.text.SimpleTable.Type">
            @see com.lowagie.text.Element#type()
        </member>
        <member name="T:iTextSharp.text.rtf.text.RtfTabGroup">
            The RtfTabGroup is a convenience class if the same tabs are to be added
            to multiple paragraphs.<br /><br />
            
            <code>RtfTabGroup tabs = new RtfTabGroup();<br />
            tabs.Add(new RtfTab(70, RtfTab.TAB_LEFT_ALIGN));<br />
            tabs.Add(new RtfTab(160, RtfTab.TAB_CENTER_ALIGN));<br />
            tabs.Add(new RtfTab(250, RtfTab.TAB_DECIMAL_ALIGN));<br />
            tabs.Add(new RtfTab(500, RtfTab.TAB_RIGHT_ALIGN));<br />
            Paragraph para = new Paragraph();<br />
            para.Add(tabs);<br />
            para.Add("\tLeft aligned\tCentre aligned\t12,45\tRight aligned");</code>
            
            @version $Revision: 1.5 $
            @author Mark Hall (Mark.Hall@mail.room3b.eu)
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfTabGroup.tabs">
            The tabs to add.
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfTabGroup.#ctor">
            Constructs an empty RtfTabGroup.
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfTabGroup.#ctor(System.Collections.ArrayList)">
            Constructs a RtfTabGroup with a set of tabs.
            
            @param tabs An ArrayList with the RtfTabs to group in this RtfTabGroup.
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfTabGroup.Add(iTextSharp.text.rtf.text.RtfTab)">
            Adds a RtfTab to the list of grouped tabs.
            
            @param tab The RtfTab to add.
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfTabGroup.WriteContent(System.IO.Stream)">
            Combines the tab output form all grouped tabs.
        </member>
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.rtf.table.RtfCell" -->
        <member name="F:iTextSharp.text.rtf.table.RtfCell.MERGE_NONE">
            This cell is not merged
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfCell.MERGE_VERT_PARENT">
            This cell is the parent cell of a vertical merge operation
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfCell.MERGE_VERT_CHILD">
            This cell is a child cell of a vertical merge operation
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfCell.parentRow">
            The parent RtfRow of this RtfCell
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfCell.content">
            The content of this RtfCell
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfCell.cellRight">
            The right margin of this RtfCell
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfCell.cellWidth">
            The width of this RtfCell
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfCell.borders">
            The borders of this RtfCell
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfCell.backgroundColor">
            The background color of this RtfCell
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfCell.cellPadding">
            The padding of this RtfCell
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfCell.mergeType">
            The merge type of this RtfCell
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfCell.document">
            The RtfDocument this RtfCell belongs to
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfCell.inHeader">
            Whether this RtfCell is in a header
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfCell.deleted">
            Whether this RtfCell is a placeholder for a removed table cell.
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfCell.cellPaddingLeft">
            Whether to use generic padding or individual 
            padding values (cellPaddingLeft, cellPaddingTop, cellPaddingBottom, cellPaddingRight)
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.#ctor">
            Constructs an empty RtfCell
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.#ctor(System.String)">
            Constructs a RtfCell based upon a String
            
            @param content The String to base the RtfCell on
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.#ctor(iTextSharp.text.IElement)">
            Constructs a RtfCell based upon an Element
            
            @param element The Element to base the RtfCell on
            @throws BadElementException If the Element is not valid
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.#ctor(System.Boolean)">
            Constructs a deleted RtfCell.
            
            @param deleted Whether this RtfCell is actually deleted.
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.rtf.table.RtfRow,iTextSharp.text.Cell)">
            Constructs a RtfCell based on a Cell.
            
            @param doc The RtfDocument this RtfCell belongs to
            @param row The RtfRow this RtfCell lies in
            @param cell The Cell to base this RtfCell on
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.rtf.table.RtfRow,iTextSharp.text.pdf.PdfPCell)">
            Constructs a RtfCell based on a Cell.
            
            @param doc The RtfDocument this RtfCell belongs to
            @param row The RtfRow this RtfCell lies in
            @param cell The PdfPCell to base this RtfCell on
            @since 2.1.3
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.ImportCell(iTextSharp.text.Cell)">
            Imports the Cell properties into the RtfCell
            
            @param cell The Cell to import
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.ImportCell(iTextSharp.text.pdf.PdfPCell)">
            Imports the Cell properties into the RtfCell
            
            @param cell The PdfPCell to import
            @since 2.1.3
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.WriteDefinition(System.IO.Stream)">
            Write the cell definition part of this RtfCell
            
            @return A byte array with the cell definition
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.WriteContent(System.IO.Stream)">
            Write the content of this RtfCell
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.SetCellRight(System.Int32)">
            Sets the right margin of this cell. Used in merge operations
            
            @param cellRight The right margin to use
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.GetCellRight">
            Gets the right margin of this RtfCell
            
            @return The right margin of this RtfCell.
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.SetCellWidth(System.Int32)">
            Sets the cell width of this RtfCell. Used in merge operations.
            
            @param cellWidth The cell width to use
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.GetCellWidth">
            Gets the cell width of this RtfCell
            
            @return The cell width of this RtfCell
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.GetCellpadding">
            Gets the cell padding of this RtfCell
            
            @return The cell padding of this RtfCell
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.GetBorders">
            Gets the borders of this RtfCell
            
            @return The borders of this RtfCell
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.SetBorders(iTextSharp.text.rtf.table.RtfBorderGroup)">
            Set the borders of this RtfCell
            
            @param borderGroup The RtfBorderGroup to use as borders
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.GetRtfBackgroundColor">
            Get the background color of this RtfCell
            
            @return The background color of this RtfCell
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.SetCellMergeChild(iTextSharp.text.rtf.table.RtfCell)">
            Merge this cell into the parent cell.
            
            @param mergeParent The RtfCell to merge with
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.SetRtfDocument(iTextSharp.text.rtf.document.RtfDocument)">
            Sets the RtfDocument this RtfCell belongs to
            
            @param doc The RtfDocument to use
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.SetInTable(System.Boolean)">
            Unused
            @param inTable
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.SetInHeader(System.Boolean)">
            Sets whether this RtfCell is in a header
            
            @param inHeader <code>True</code> if this RtfCell is in a header, <code>false</code> otherwise
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.IsInHeader">
            Gets whether this <code>RtfCell</code> is in a header
            
            @return <code>True</code> if this <code>RtfCell</code> is in a header, <code>false</code> otherwise
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.IntToByteArray(System.Int32)">
             Transforms an integer into its String representation and then returns the bytes
             of that string.
            
             @param i The integer to convert
             @return A byte array representing the integer
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.IsDeleted">
            Checks whether this RtfCell is a placeholder for
            a table cell that has been removed due to col/row spanning.
            
            @return <code>True</code> if this RtfCell is deleted, <code>false</code> otherwise.
        </member>
        <member name="T:iTextSharp.text.rtf.document.RtfInfoGroup">
            The RtfInfoGroup stores information group elements. 
            
            @version $Id: RtfInfoGroup.cs,v 1.6 2008/05/16 19:30:51 psoares33 Exp $
            @author Mark Hall (Mark.Hall@mail.room3b.eu)
            @author Thomas Bickel (tmb99@inode.at)
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfInfoGroup.INFO_GROUP">
            Information group starting tag
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfInfoGroup.INFO_PASSWORD">
            Constant for the password element
            @since 2.1.1
            @author Howard Shank (hgshank@yahoo.com)
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfInfoGroup.infoElements">
            The RtfInfoElements that belong to this RtfInfoGroup
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfInfoGroup.#ctor(iTextSharp.text.rtf.document.RtfDocument)">
            Constructs a RtfInfoGroup belonging to a RtfDocument
            
            @param doc The RtfDocument this RtfInfoGroup belongs to
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfInfoGroup.Add(iTextSharp.text.rtf.document.RtfInfoElement)">
            Adds an RtfInfoElement to the RtfInfoGroup
            
            @param infoElement The RtfInfoElement to add
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfInfoGroup.WriteContent(System.IO.Stream)">
            Writes the RTF information group and its elements.
        </member>
        <member name="T:iTextSharp.text.pdf.TextField">
            Supports text, combo and list fields generating the correct appearances.
            All the option in the Acrobat GUI are supported in an easy to use API.
            @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.TextField.defaultText">
            Holds value of property defaultText. 
        </member>
        <member name="F:iTextSharp.text.pdf.TextField.choices">
            Holds value of property choices. 
        </member>
        <member name="F:iTextSharp.text.pdf.TextField.choiceExports">
            Holds value of property choiceExports. 
        </member>
        <member name="F:iTextSharp.text.pdf.TextField.choiceSelection">
            Holds value of property choiceSelection. 
        </member>
        <member name="M:iTextSharp.text.pdf.TextField.#ctor(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Rectangle,System.String)">
            Creates a new <CODE>TextField</CODE>.
            @param writer the document <CODE>PdfWriter</CODE>
            @param box the field location and dimensions
            @param fieldName the field name. If <CODE>null</CODE> only the widget keys
            will be included in the field allowing it to be used as a kid field.
        </member>
        <member name="M:iTextSharp.text.pdf.TextField.ObfuscatePassword(System.String)">
            Obfuscates a password <code>String</code>.
            Every character is replaced by an asterisk (*).
            
            @param text 
            @return String
            @since   2.1.5
        </member>
        <member name="M:iTextSharp.text.pdf.TextField.GetAppearance">
            Get the <code>PdfAppearance</code> of a text or combo field
            @throws IOException on error
            @throws DocumentException on error
            @return A <code>PdfAppearance</code>
        </member>
        <member name="M:iTextSharp.text.pdf.TextField.GetListAppearance">
            Get the <code>PdfAppearance</code> of a list field
            @throws IOException on error
            @throws DocumentException on error
            @return A <code>PdfAppearance</code>
        </member>
        <member name="M:iTextSharp.text.pdf.TextField.GetTextField">
            Gets a new text field.
            @throws IOException on error
            @throws DocumentException on error
            @return a new text field
        </member>
        <member name="M:iTextSharp.text.pdf.TextField.GetComboField">
            Gets a new combo field.
            @throws IOException on error
            @throws DocumentException on error
            @return a new combo field
        </member>
        <member name="M:iTextSharp.text.pdf.TextField.GetListField">
            Gets a new list field.
            @throws IOException on error
            @throws DocumentException on error
            @return a new list field
        </member>
        <member name="M:iTextSharp.text.pdf.TextField.SetExtraMargin(System.Single,System.Single)">
            Sets extra margins in text fields to better mimic the Acrobat layout.
            @param extraMarginLeft the extra marging left
            @param extraMarginTop the extra margin top
        </member>
        <member name="F:iTextSharp.text.pdf.TextField.substitutionFonts">
            Holds value of property substitutionFonts.
        </member>
        <member name="F:iTextSharp.text.pdf.TextField.extensionFont">
            Holds value of property extensionFont.
        </member>
        <member name="P:iTextSharp.text.pdf.TextField.DefaultText">
            Sets the default text. It is only meaningful for text fields.
            @param defaultText the default text
        </member>
        <member name="P:iTextSharp.text.pdf.TextField.Choices">
            Sets the choices to be presented to the user in list/combo
            fields.
            @param choices the choices to be presented to the user
        </member>
        <member name="P:iTextSharp.text.pdf.TextField.ChoiceExports">
            Sets the export values in list/combo fields. If this array
            is <CODE>null</CODE> then the choice values will also be used
            as the export values.
            @param choiceExports the export values in list/combo fields
        </member>
        <member name="P:iTextSharp.text.pdf.TextField.ChoiceSelection">
            Sets the zero based index of the selected item.
            @param choiceSelection the zero based index of the selected item
        </member>
        <member name="P:iTextSharp.text.pdf.TextField.SubstitutionFonts">
            Sets a list of substitution fonts. The list is composed of <CODE>BaseFont</CODE> and can also be <CODE>null</CODE>. The fonts in this list will be used if the original
            font doesn't contain the needed glyphs.
            @param substitutionFonts the list
        </member>
        <member name="P:iTextSharp.text.pdf.TextField.ExtensionFont">
            Sets the extensionFont. This font will be searched before the
            substitution fonts. It may be <code>null</code>.
            @param extensionFont New value of property extensionFont.
        </member>
        <member name="M:iTextSharp.text.pdf.crypto.StandardDecryption.#ctor(System.Byte[],System.Int32,System.Int32,System.Int32)">
            Creates a new instance of StandardDecryption 
        </member>
        <member name="T:iTextSharp.text.pdf.RandomAccessFileOrArray">
            An implementation of a RandomAccessFile for input only
             that accepts a file or a byte array as data source.
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.RandomAccessFileOrArray.startOffset">
            Holds value of property startOffset. 
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.RandomAccessFileOrArray.ReadShortLE" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.RandomAccessFileOrArray.ReadUnsignedShortLE" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.RandomAccessFileOrArray.ReadCharLE" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.RandomAccessFileOrArray.ReadIntLE" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.RandomAccessFileOrArray.ReadUnsignedInt" -->
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.pdf.PdfResources" -->
        <member name="M:iTextSharp.text.pdf.PdfResources.#ctor">
            Constructs a PDF ResourcesDictionary.
        </member>
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.pdf.PdfOutline" -->
        <member name="F:iTextSharp.text.pdf.PdfOutline.reference">
            the <CODE>PdfIndirectReference</CODE> of this object 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfOutline.count">
            value of the <B>Count</B>-key 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfOutline.parent">
            value of the <B>Parent</B>-key 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfOutline.destination">
            value of the <B>Destination</B>-key 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfOutline.action">
            The <CODE>PdfAction</CODE> for this outline.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfOutline.tag">
            Holds value of property tag. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfOutline.open">
            Holds value of property open. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfOutline.color">
            Holds value of property color. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfOutline.style">
            Holds value of property style. 
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfOutline.#ctor(iTextSharp.text.pdf.PdfWriter)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfOutline.#ctor(iTextSharp.text.pdf.PdfOutline,iTextSharp.text.pdf.PdfAction,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfOutline.#ctor(iTextSharp.text.pdf.PdfOutline,iTextSharp.text.pdf.PdfAction,System.String,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfOutline.#ctor(iTextSharp.text.pdf.PdfOutline,iTextSharp.text.pdf.PdfDestination,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfOutline.#ctor(iTextSharp.text.pdf.PdfOutline,iTextSharp.text.pdf.PdfDestination,System.String,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfOutline.#ctor(iTextSharp.text.pdf.PdfOutline,iTextSharp.text.pdf.PdfAction,iTextSharp.text.pdf.PdfString)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfOutline.#ctor(iTextSharp.text.pdf.PdfOutline,iTextSharp.text.pdf.PdfAction,iTextSharp.text.pdf.PdfString,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfOutline.#ctor(iTextSharp.text.pdf.PdfOutline,iTextSharp.text.pdf.PdfDestination,iTextSharp.text.pdf.PdfString)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfOutline.#ctor(iTextSharp.text.pdf.PdfOutline,iTextSharp.text.pdf.PdfDestination,iTextSharp.text.pdf.PdfString,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfOutline.#ctor(iTextSharp.text.pdf.PdfOutline,iTextSharp.text.pdf.PdfAction,iTextSharp.text.Paragraph)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfOutline.#ctor(iTextSharp.text.pdf.PdfOutline,iTextSharp.text.pdf.PdfAction,iTextSharp.text.Paragraph,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfOutline.#ctor(iTextSharp.text.pdf.PdfOutline,iTextSharp.text.pdf.PdfDestination,iTextSharp.text.Paragraph)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfOutline.#ctor(iTextSharp.text.pdf.PdfOutline,iTextSharp.text.pdf.PdfDestination,iTextSharp.text.Paragraph,System.Boolean)" -->
        <member name="M:iTextSharp.text.pdf.PdfOutline.InitOutline(iTextSharp.text.pdf.PdfOutline,System.String,System.Boolean)">
            Helper for the constructors.
            @param parent the parent outline
            @param title the title for this outline
            @param open <CODE>true</CODE> if the children are visible
        </member>
        <member name="M:iTextSharp.text.pdf.PdfOutline.SetDestinationPage(iTextSharp.text.pdf.PdfIndirectReference)">
             Set the page of the <CODE>PdfDestination</CODE>-object.
            
             @param pageReference indirect reference to the page
             @return <CODE>true</CODE> if this page was set as the <CODE>PdfDestination</CODE>-page.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfOutline.ToPdf(iTextSharp.text.pdf.PdfWriter,System.IO.Stream)">
             Returns the PDF representation of this <CODE>PdfOutline</CODE>.
            
             @param writer the encryption information
             @param os
             @throws IOException
        </member>
        <member name="P:iTextSharp.text.pdf.PdfOutline.IndirectReference">
             Gets the indirect reference of this <CODE>PdfOutline</CODE>.
            
             @return      the <CODE>PdfIndirectReference</CODE> to this outline.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfOutline.Parent">
             Gets the parent of this <CODE>PdfOutline</CODE>.
            
             @return      the <CODE>PdfOutline</CODE> that is the parent of this outline.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfOutline.PdfDestination">
            Gets the destination for this outline.
            @return the destination
        </member>
        <member name="P:iTextSharp.text.pdf.PdfOutline.Level">
             returns the level of this outline.
            
             @return      a level
        </member>
        <member name="P:iTextSharp.text.pdf.PdfOutline.Tag">
            Getter for property tag.
            @return Value of property tag.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfOutline.Open">
            Setter for property open.
            @param open New value of property open.
        </member>
        <member name="T:iTextSharp.text.pdf.ICC_Profile">
            <summary>
            Summary description for ICC_Profile.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.pdf.hyphenation.ByteVector" -->
        <member name="F:iTextSharp.text.pdf.hyphenation.ByteVector.DEFAULT_BLOCK_SIZE">
            Capacity increment size
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.ByteVector.arr">
            The encapsulated array
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.ByteVector.n">
            Points to next free item
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.ByteVector.Alloc(System.Int32)">
            This is to implement memory allocation in the array. Like Malloc().
        </member>
        <member name="P:iTextSharp.text.pdf.hyphenation.ByteVector.Length">
            return number of items in array
        </member>
        <member name="P:iTextSharp.text.pdf.hyphenation.ByteVector.Capacity">
            returns current capacity of array
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeDatamatrix.DM_NO_ERROR">
            No error.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeDatamatrix.DM_ERROR_TEXT_TOO_BIG">
            The text is too big for the symbology capabilities.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeDatamatrix.DM_ERROR_INVALID_SQUARE">
            The dimensions given for the symbol are illegal.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeDatamatrix.DM_ERROR_EXTENSION">
            An error while parsing an extension.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeDatamatrix.DM_AUTO">
            The best encodation will be used.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeDatamatrix.DM_ASCII">
            ASCII encodation.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeDatamatrix.DM_C40">
            C40 encodation.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeDatamatrix.DM_TEXT">
            TEXT encodation.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeDatamatrix.DM_B256">
            Binary encodation.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeDatamatrix.DM_X21">
            X21 encodation.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeDatamatrix.DM_EDIFACT">
            EDIFACT encodation.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeDatamatrix.DM_RAW">
            No encodation needed. The bytes provided are already encoded.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeDatamatrix.DM_EXTENSION">
            Allows extensions to be embedded at the start of the text.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeDatamatrix.DM_TEST">
            Doesn't generate the image but returns all the other information.
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeDatamatrix.#ctor">
            Creates an instance of this class.
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.BarcodeDatamatrix.Generate(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.BarcodeDatamatrix.Generate(System.Byte[],System.Int32,System.Int32)" -->
        <member name="M:iTextSharp.text.pdf.BarcodeDatamatrix.CreateImage">
            Gets an <CODE>Image</CODE> with the barcode. A successful call to the method <CODE>generate()</CODE>
            before calling this method is required.
            @return the barcode <CODE>Image</CODE>
            @throws BadElementException on error
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeDatamatrix.CreateDrawingImage(System.Drawing.Color,System.Drawing.Color)">
            Creates a <CODE>java.awt.Image</CODE>. A successful call to the method <CODE>generate()</CODE>
            before calling this method is required.
            @param foreground the color of the bars
            @param background the color of the background
            @return the image
        </member>
        <member name="P:iTextSharp.text.pdf.BarcodeDatamatrix.BitImage">
            Gets the generated image. The image is represented as a stream of bytes, each byte representing
            8 pixels, 0 for white and 1 for black, with the high-order bit of each byte first. Each row
            is aligned at byte boundaries. The dimensions of the image are defined by height and width
            plus 2 * ws.
            @return the generated image
        </member>
        <!-- Badly formed XML comment ignored for member "P:iTextSharp.text.pdf.BarcodeDatamatrix.Height" -->
        <!-- Badly formed XML comment ignored for member "P:iTextSharp.text.pdf.BarcodeDatamatrix.Width" -->
        <member name="P:iTextSharp.text.pdf.BarcodeDatamatrix.Ws">
            Gets/sets the whitespace border around the barcode.
            @param ws the whitespace border around the barcode
        </member>
        <!-- Badly formed XML comment ignored for member "P:iTextSharp.text.pdf.BarcodeDatamatrix.Options" -->
        <member name="T:iTextSharp.text.html.simpleparser.IncCell">
            
             @author  psoares
        </member>
        <member name="M:iTextSharp.text.html.simpleparser.IncCell.#ctor(System.String,iTextSharp.text.html.simpleparser.ChainedProperties)">
            Creates a new instance of IncCell 
        </member>
        <member name="M:iTextSharp.text.html.simpleparser.IncCell.IsContent">
            @see com.lowagie.text.Element#isContent()
            @since   iText 2.0.8
        </member>
        <member name="M:iTextSharp.text.html.simpleparser.IncCell.IsNestable">
            @see com.lowagie.text.Element#isNestable()
            @since   iText 2.0.8
        </member>
        <member name="M:iTextSharp.text.html.simpleparser.HTMLWorker.#ctor(iTextSharp.text.IDocListener)">
            Creates a new instance of HTMLWorker 
        </member>
        <member name="M:iTextSharp.text.html.simpleparser.HTMLWorker.SetMarginMirroringTopBottom(System.Boolean)">
            @see com.lowagie.text.DocListener#setMarginMirroring(boolean)
            @since	2.1.6
        </member>
        <member name="T:iTextSharp.text.exceptions.UnsupportedPdfException">
            Typed exception used when opening an existing PDF document.
            Gets thrown when the document isn't a valid PDF document according to iText,
            but it's different from the InvalidPdfException in the sense that it may
            be an iText limitation (most of the times it isn't but you might have
            bumped into something that has been added to the PDF specs, but that isn't
            supported in iText yet).
            @since 2.1.5
        </member>
        <member name="M:iTextSharp.text.exceptions.UnsupportedPdfException.#ctor(System.String)">
            Creates an instance of an UnsupportedPdfException.
            @param	message	the reason why the document isn't a PDF document according to iText.
        </member>
        <member name="T:System.util.zlib.ZInflaterInputStream">
            <summary>
            Summary description for DeflaterOutputStream.
            </summary>
        </member>
        <member name="T:iTextSharp.text.xml.xmp.XmpArray">
            StringBuilder to construct an XMP array.
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpArray.UNORDERED">
            An array that is unordered. 
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpArray.ORDERED">
            An array that is ordered. 
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpArray.ALTERNATIVE">
            An array with alternatives. 
        </member>
        <member name="F:iTextSharp.text.xml.xmp.XmpArray.type">
            the type of array. 
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpArray.#ctor(System.String)">
            Creates an XmpArray.
            @param type the type of array: UNORDERED, ORDERED or ALTERNATIVE.
        </member>
        <member name="M:iTextSharp.text.xml.xmp.XmpArray.ToString">
            Returns the String representation of the XmpArray.
            @return a String representation
        </member>
        <member name="T:iTextSharp.text.xml.simpleparser.EntitiesToUnicode">
            This class contains entities that can be used in an entity tag.
        </member>
        <member name="F:iTextSharp.text.xml.simpleparser.EntitiesToUnicode.map">
            This is a map that contains the names of entities and their unicode value.
        </member>
        <member name="M:iTextSharp.text.xml.simpleparser.EntitiesToUnicode.DecodeEntity(System.String)">
             Translates an entity to a unicode character.
            
             @param   name    the name of the entity
             @return  the corresponding unicode character
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.xml.simpleparser.EntitiesToUnicode.DecodeString(System.String)" -->
        <member name="T:iTextSharp.text.rtf.RtfWriter2">
             The RtfWriter allows the creation of rtf documents via the iText system
            
             Version: $Id: RtfWriter2.cs,v 1.11 2008/05/23 17:24:11 psoares33 Exp $
             @author Mark Hall (Mark.Hall@mail.room3b.eu)
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter2.rtfDoc">
            The RtfDocument this RtfWriter is creating
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter2.#ctor(iTextSharp.text.Document,System.IO.Stream)">
            Constructs a new RtfWriter that listens to the specified Document and
            writes its output to the Stream.
            
            @param doc The Document that this RtfWriter listens to
            @param os The Stream to write to
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter2.GetInstance(iTextSharp.text.Document,System.IO.Stream)">
            Static method to generate RtfWriters
            
            @param doc The Document that this RtfWriter listens to
            @param os The Stream to write to
            @return The new RtfWriter
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter2.ResetHeader">
            Resets the header
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter2.ResetFooter">
            Resets the footer
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter2.ResetPageCount">
            This method is not supported in the RtfWriter
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter2.Open">
            Opens the RtfDocument
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter2.Close">
            Closes the RtfDocument. This causes the document to be written
            to the specified Stream
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter2.Add(iTextSharp.text.IElement)">
             Adds an Element to the Document
            
             @param element The element to be added
             @return <code>false</code>
             @throws DocumentException
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter2.NewPage">
             Adds a page break
            
             @return <code>false</code>
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter2.SetMargins(System.Single,System.Single,System.Single,System.Single)">
             Sets the page margins
            
             @param left The left margin
             @param right The right margin
             @param top The top margin
             @param bottom The bottom margin
             @return <code>false</code>
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter2.SetPageSize(iTextSharp.text.Rectangle)">
             Sets the size of the page
            
             @param rect A Rectangle representing the page
             @return <code>false</code>
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter2.SetAutogenerateTOCEntries(System.Boolean)">
            Whether to automagically generate table of contents entries when
            adding Chapters or Sections.
            
            @param autogenerate Whether to automatically generate TOC entries
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter2.GetDocumentSettings">
            Gets the RtfDocumentSettings that specify how the rtf document is generated.
            
            @return The current RtfDocumentSettings.
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter2.ImportRtfDocument(System.IO.Stream)">
            Adds the complete RTF document to the current RTF document being generated.
            It will parse the font and color tables and correct the font and color references
            so that the imported RTF document retains its formattings.
            
            @param documentSource The Stream to read the RTF document from.
            @throws IOException On errors reading the RTF document.
            @throws DocumentException On errors adding to this RTF document.
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter2.ImportRtfDocument(System.IO.Stream,iTextSharp.text.rtf.IEventListener[])">
            Adds the complete RTF document to the current RTF document being generated.
            It will parse the font and color tables and correct the font and color references
            so that the imported RTF document retains its formattings.
            Uses new RtfParser object.
            
            @param documentSource The Stream to read the RTF document from.
            @param eventListeners The array of event listeners. May be null
            @throws IOException
            @throws DocumentException
            
            @see com.lowagie.text.rtf.parser.RtfParser
            @see com.lowagie.text.rtf.parser.RtfParser#importRtfDocument(Reader, RtfDocument)
            @since 2.0.8
            @author Howard Shank
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter2.ImportRtfFragment(System.IO.Stream,iTextSharp.text.rtf.parser.RtfImportMappings)">
            Adds a fragment of an RTF document to the current RTF document being generated.
            Since this fragment doesn't contain font or color tables, all fonts and colors
            are mapped to the default font and color. If the font and color mappings are
            known, they can be specified via the mappings parameter.
            
            @param documentSource The Stream to read the RTF fragment from.
            @param mappings The RtfImportMappings that contain font and color mappings to apply to the fragment.
            @throws IOException On errors reading the RTF fragment.
            @throws DocumentException On errors adding to this RTF fragment.
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter2.ImportRtfFragment(System.IO.Stream,iTextSharp.text.rtf.parser.RtfImportMappings,iTextSharp.text.rtf.IEventListener[])">
            Adds a fragment of an RTF document to the current RTF document being generated.
            Since this fragment doesn't contain font or color tables, all fonts and colors
            are mapped to the default font and color. If the font and color mappings are
            known, they can be specified via the mappings parameter.
            Uses new RtfParser object.
            
            @param documentSource The Stream to read the RTF fragment from.
            @param mappings The RtfImportMappings that contain font and color mappings to apply to the fragment.
            @param eventListeners The array of event listeners. May be null
            @throws IOException On errors reading the RTF fragment.
            @throws DocumentException On errors adding to this RTF fragment.
            
            @see com.lowagie.text.rtf.parser.RtfImportMappings
            @see com.lowagie.text.rtf.parser.RtfParser
            @see com.lowagie.text.rtf.parser.RtfParser#importRtfFragment(Reader, RtfDocument, com.lowagie.text.rtf.parser.RtfImportMappings)
            @since 2.0.8
            @author Howard Shank
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter2.ImportRtfDocumentIntoElement(iTextSharp.text.IElement,System.IO.FileStream)">
            Adds the complete RTF document to the current RTF element being generated.
            It will parse the font and color tables and correct the font and color references
            so that the imported RTF document retains its formattings.
            
            @param elem The Element the RTF document is to be imported into.
            @param documentSource The Reader to read the RTF document from.
            @throws IOException On errors reading the RTF document.
            @throws DocumentException On errors adding to this RTF document.
            @since 2.1.4
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter2.ImportRtfDocumentIntoElement(iTextSharp.text.IElement,System.IO.FileStream,iTextSharp.text.rtf.IEventListener[])">
            Adds the complete RTF document to the current RTF element being generated.
            It will parse the font and color tables and correct the font and color references
            so that the imported RTF document retains its formattings.
            
            @param elem The Element the RTF document is to be imported into.
            @param documentSource The Reader to read the RTF document from.
            @param events The event array for listeners.
            @throws IOException On errors reading the RTF document.
            @throws DocumentException On errors adding to this RTF document.
            @since 2.1.4
        </member>
        <member name="P:iTextSharp.text.rtf.RtfWriter2.Header">
            Sets the header to use
            
            @param hf The HeaderFooter to use
        </member>
        <member name="P:iTextSharp.text.rtf.RtfWriter2.Footer">
            Sets the footer to use
            
            @param hf The HeaderFooter to use
        </member>
        <member name="P:iTextSharp.text.rtf.RtfWriter2.PageCount">
            This method is not supported in the RtfWriter
            @param i Unused
        </member>
        <member name="T:iTextSharp.text.rtf.parser.enumerations.RtfColorThemes">
            Specifies the color theme values for use in Color Tables.
            
            @author Howard Shank (hgshank@yahoo.com)
            @since 2.0.8
        </member>
        <member name="T:iTextSharp.text.rtf.parser.destinations.RtfDestinationListTable">
             <code>RtfDestinationListTable</code> handles data destined for the List Table destination
             
             @author Howard Shank (hgshank@yahoo.com)
            
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationListTable.importHeader">
            The RtfImportHeader to add List mappings to.
        </member>
        <member name="T:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordType">
             <code>RtfCtrlWordType</code> indicates the type of control word.
             
             RTF control words are divided up into:
              Destination, Flag, Value, Toggle, Symbol.
            
             Destination: The current destination for values and text to be sent.
             Flag: 0/1 value types. Represents true/false, on/off value types.
             Toggle: Flips a Flag value on/off.
             Value: an Integer value data type. (Exception: Some control words this is a long data value type)
             Symbol: Special RTF characters such as \{, \} and others.
             
             @author Howard Shank (hgshank@yahoo.com)
             @since 2.0.8
        </member>
        <member name="F:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordType.UNIDENTIFIED">
            Control word is unidentified.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordType.DESTINATION">
            Control word is a destination.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordType.DESTINATION_EX">
            Control word is a newer destination.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordType.FLAG">
            Control word is a flag.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordType.VALUE">
            Control word is a value.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordType.TOGGLE">
            Control word is a flag toggle.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordType.SYMBOL">
            Control word is a special symbol.
        </member>
        <member name="T:iTextSharp.text.rtf.graphic.RtfShapePosition">
            The RtfShapePosition stores position and ordering
            information for one RtfShape.
            
            @version $Revision: 1.6 $
            @author Mark Hall (Mark.Hall@mail.room3b.eu)
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapePosition.POSITION_X_RELATIVE_PAGE">
            Constant for horizontal positioning relative to the page.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapePosition.POSITION_X_RELATIVE_MARGIN">
            Constant for horizontal positioning relative to the margin.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapePosition.POSITION_X_RELATIVE_COLUMN">
            Constant for horizontal positioning relative to the column.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapePosition.POSITION_Y_RELATIVE_PAGE">
            Constant for vertical positioning relative to the page.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapePosition.POSITION_Y_RELATIVE_MARGIN">
            Constant for vertical positioning relative to the margin.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapePosition.POSITION_Y_RELATIVE_PARAGRAPH">
            Constant for vertical positioning relative to the paragraph.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapePosition.top">
            The top coordinate of this RtfShapePosition.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapePosition.left">
            The left coordinate of this RtfShapePosition.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapePosition.right">
            The right coordinate of this RtfShapePosition.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapePosition.bottom">
            The bottom coordinate of this RtfShapePosition.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapePosition.zOrder">
            The z order of this RtfShapePosition.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapePosition.xRelativePos">
            The horizontal relative position.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapePosition.yRelativePos">
            The vertical relative position.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapePosition.ignoreXRelative">
            Whether to ignore the horizontal relative position.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapePosition.ignoreYRelative">
            Whether to ignore the vertical relative position.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfShapePosition.shapeBelowText">
            Whether the shape is below the text.
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfShapePosition.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            Constructs a new RtfShapePosition with the four bounding coordinates.
            
            @param top The top coordinate.
            @param left The left coordinate.
            @param right The right coordinate.
            @param bottom The bottom coordinate.
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfShapePosition.IsShapeBelowText">
            Gets whether the shape is below the text.
            
            @return <code>True</code> if the shape is below, <code>false</code> if the text is below.
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfShapePosition.SetShapeBelowText(System.Boolean)">
            Sets whether the shape is below the text.
            
            @param shapeBelowText <code>True</code> if the shape is below, <code>false</code> if the text is below.
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfShapePosition.SetXRelativePos(System.Int32)">
            Sets the relative horizontal position. Use one of the constants
            provided in this class.
            
            @param relativePos The relative horizontal position to use.
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfShapePosition.SetYRelativePos(System.Int32)">
            Sets the relative vertical position. Use one of the constants
            provides in this class.
            
            @param relativePos The relative vertical position to use.
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfShapePosition.SetZOrder(System.Int32)">
            Sets the z order to use.
            
            @param order The z order to use.
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfShapePosition.SetIgnoreXRelative(System.Boolean)">
            Set whether to ignore the horizontal relative position.
            
            @param ignoreXRelative <code>True</code> to ignore the horizontal relative position, <code>false</code> otherwise.
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfShapePosition.SetIgnoreYRelative(System.Boolean)">
            Set whether to ignore the vertical relative position.
            
            @param ignoreYRelative <code>True</code> to ignore the vertical relative position, <code>false</code> otherwise.
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfShapePosition.WriteContent(System.IO.Stream)">
            Write this RtfShapePosition.
        </member>
        <member name="T:iTextSharp.text.rtf.graphic.RtfImage">
            The RtfImage contains one image. Supported image types are jpeg, png, wmf, bmp.
            
            @version $Version:$
            @author Mark Hall (Mark.Hall@mail.room3b.eu)
            @author Paulo Soares
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage.PIXEL_TWIPS_FACTOR">
            Constant for converting pixels to twips
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage.PICTURE_GROUP">
            Constant for the shape/picture group
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage.PICTURE">
            Constant for a picture
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage.PICTURE_JPEG">
            Constant for a jpeg image
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage.PICTURE_PNG">
            Constant for a png image
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage.PICTURE_WMF">
            Constant for a wmf image
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage.PICTURE_WIDTH">
            Constant for the picture width
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage.PICTURE_HEIGHT">
            Constant for the picture height
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage.PICTURE_SCALED_WIDTH">
            Constant for the picture width scale
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage.PICTURE_SCALED_HEIGHT">
            Constant for the picture height scale
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage.PICTURE_SCALE_X">
            Constant for horizontal picture scaling
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage.PICTURE_SCALE_Y">
            Constant for vertical picture scaling
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage.PICTURE_BINARY_DATA">
            "\bin" constant
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage.imageType">
            The type of image this is.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage.imageData">
            Binary image data.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage.alignment">
            The alignment of this picture
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage.width">
            The width of this picture
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage.height">
            The height of this picutre
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage.plainWidth">
            The intended display width of this picture
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage.plainHeight">
            The intended display height of this picture
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage.topLevelElement">
            Whether this RtfImage is a top level element and should
            be an extra paragraph.
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfImage.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.Image)">
            Constructs a RtfImage for an Image.
            
            @param doc The RtfDocument this RtfImage belongs to
            @param image The Image that this RtfImage wraps
            @throws DocumentException If an error occured accessing the image content
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfImage.GetImageData(iTextSharp.text.Image)">
            Extracts the image data from the Image.
            
            @param image The image for which to extract the content
            @return The raw image data, not formated
            @throws DocumentException If an error occurs accessing the image content
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage.byte2charLUT">
            lookup table used for converting bytes to hex chars.
            TODO Should probably be refactored into a helper class
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfImage.WriteImageDataHexEncoded(System.IO.Stream)">
            Writes the image data to the given buffer as hex encoded text.
            
            @param binary
            @param bab
            @
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfImage.ImageDataSize">
            Returns the image raw data size in bytes.
            
            @return
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfImage.WriteContent(System.IO.Stream)">
            Writes the RtfImage content
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfImage.SetAlignment(System.Int32)">
            Sets the alignment of this RtfImage. Uses the alignments from com.lowagie.text.Element.
            
            @param alignment The alignment to use.
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfImage.SetTopLevelElement(System.Boolean)">
            Set whether this RtfImage should behave like a top level element
            and enclose itself in a paragraph.
            
            @param topLevelElement Whether to behave like a top level element.
        </member>
        <member name="T:iTextSharp.text.rtf.field.RtfTableOfContents">
            The RtfTableOfContents together with multiple RtfTOCEntry objects generates a table 
            of contents. The table of contents will display no entries in the viewing program
            and the user will have to update it first. A text to inform the user of this is
            displayed instead.
            
            @version $Version:$
            @author Mark Hall (Mark.Hall@mail.room3b.eu)
            @author <a href="mailto:Steffen.Stundzig@smb-tec.com">Steffen.Stundzig@smb-tec.com</a> 
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfTableOfContents.FIELD_INST">
            field inst content
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfTableOfContents.defaultText">
            The default text to display
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfTableOfContents.#ctor(System.String)">
            Constructs a RtfTableOfContents. The default text is the text that is displayed
            before the user updates the table of contents
            
            @param defaultText The default text to display
            @param font The Font to use
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfTableOfContents.WriteFieldInstContent(System.IO.Stream)">
            Writes the field instruction content
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfTableOfContents.WriteFieldResultContent(System.IO.Stream)">
            Writes the field result content
        </member>
        <member name="T:iTextSharp.text.rtf.document.RtfInfoElement">
            Stores one information group element. Valid elements are
            author, title, subject, keywords, producer and creationdate.
            
            @version $Id: RtfInfoElement.cs,v 1.6 2008/05/16 19:30:51 psoares33 Exp $
            @author Mark Hall (Mark.Hall@mail.room3b.eu)
            @author Thomas Bickel (tmb99@inode.at)
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfInfoElement.INFO_AUTHOR">
            Constant for the author element
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfInfoElement.INFO_SUBJECT">
            Constant for the subject element
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfInfoElement.INFO_KEYWORDS">
            Constant for the keywords element
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfInfoElement.INFO_TITLE">
            Constant for the title element
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfInfoElement.INFO_PRODUCER">
            Constant for the producer element
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfInfoElement.INFO_CREATION_DATE">
            Constant for the creationdate element
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfInfoElement.infoType">
            The type of this RtfInfoElement. The values from Element.INFO_ELEMENT_NAME are used.
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfInfoElement.content">
            The content of this RtfInfoElement
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfInfoElement.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.Meta)">
            Constructs a RtfInfoElement based on the given Meta object
            
            @param doc The RtfDocument this RtfInfoElement belongs to
            @param meta The Meta object this RtfInfoElement is based on
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfInfoElement.WriteContent(System.IO.Stream)">
            Writes the content of one RTF information element.
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.rtf.document.RtfInfoElement.ConvertDate(System.String)" -->
        <member name="T:iTextSharp.text.rtf.document.RtfCodePage">
             The RtfCodePage class allows different code pages to be used in the rtf document.
             Currently always ansi / ansicpg1252
            
             Version: $Id: RtfCodePage.cs,v 1.5 2008/05/16 19:30:50 psoares33 Exp $
             @author Mark Hall (Mark.Hall@mail.room3b.eu)
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfCodePage.ANSI">
            Constant for ansi encoded rtf documents
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfCodePage.ANSI_CODEPAGE">
            Constant for the ansi codepage
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfCodePage.#ctor(iTextSharp.text.rtf.document.RtfDocument)">
            Construct an RtfCodePage
            
            @param doc The RtfDocument this RtfCodePage belongs to
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfCodePage.WriteContent(System.IO.Stream)">
            unused
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfCodePage.WriteDefinition(System.IO.Stream)">
            Writes the selected codepage
        </member>
        <member name="T:iTextSharp.text.pdf.XfdfReader">
            Reads a XFDF.
            @author Leonard Rosenthol (leonardr@pdfsages.com)
        </member>
        <member name="F:iTextSharp.text.pdf.XfdfReader.listFields">
            Storage for field values if there's more than one value for a field.
            @since    2.1.4
        </member>
        <member name="M:iTextSharp.text.pdf.XfdfReader.#ctor(System.String)">
            Reads an XFDF form.
            @param filename the file name of the form
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.XfdfReader.#ctor(System.Byte[])">
            Reads an XFDF form.
            @param xfdfIn the byte array with the form
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.XfdfReader.GetField(System.String)">
            Gets the field value.
            @param name the fully qualified field name
            @return the field's value
        </member>
        <member name="M:iTextSharp.text.pdf.XfdfReader.GetFieldValue(System.String)">
            Gets the field value or <CODE>null</CODE> if the field does not
            exist or has no value defined.
            @param name the fully qualified field name
            @return the field value or <CODE>null</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.XfdfReader.GetListValues(System.String)">
            Gets the field values for a list or <CODE>null</CODE> if the field does not
            exist or has no value defined.
            @param name the fully qualified field name
            @return the field values or <CODE>null</CODE>
            @since   2.1.4
        </member>
        <member name="M:iTextSharp.text.pdf.XfdfReader.StartElement(System.String,System.Collections.Hashtable)">
            Called when a start tag is found.
            @param tag the tag name
            @param h the tag's attributes
        </member>
        <member name="M:iTextSharp.text.pdf.XfdfReader.EndElement(System.String)">
            Called when an end tag is found.
            @param tag the tag name
        </member>
        <member name="M:iTextSharp.text.pdf.XfdfReader.StartDocument">
            Called when the document starts to be parsed.
        </member>
        <member name="M:iTextSharp.text.pdf.XfdfReader.EndDocument">
            Called after the document is parsed.
        </member>
        <member name="M:iTextSharp.text.pdf.XfdfReader.Text(System.String)">
            Called when a text element is found.
            @param str the text element, probably a fragment.
        </member>
        <member name="P:iTextSharp.text.pdf.XfdfReader.Fields">
            Gets all the fields. The map is keyed by the fully qualified
            field name and the value is a merged <CODE>PdfDictionary</CODE>
            with the field content.
            @return all the fields
        </member>
        <member name="P:iTextSharp.text.pdf.XfdfReader.FileSpec">
            Gets the PDF file specification contained in the FDF.
            @return the PDF file specification contained in the FDF
        </member>
        <member name="M:iTextSharp.text.pdf.PRStream.#ctor(iTextSharp.text.pdf.PdfReader,System.Byte[],System.Int32)">
            Creates a new PDF stream object that will replace a stream
            in a existing PDF file.
            @param   reader  the reader that holds the existing PDF
            @param   conts   the new content
            @param   compressionLevel    the compression level for the content
            @since   2.1.3 (replacing the existing constructor without param compressionLevel)
        </member>
        <member name="M:iTextSharp.text.pdf.PRStream.SetData(System.Byte[],System.Boolean)">
            Sets the data associated with the stream, either compressed or
            uncompressed. Note that the data will never be compressed if
            Document.compress is set to false.
            
            @param data raw data, decrypted and uncompressed.
            @param compress true if you want the stream to be compresssed.
            @since   iText 2.1.1
        </member>
        <member name="M:iTextSharp.text.pdf.PRStream.SetData(System.Byte[],System.Boolean,System.Int32)">
            Sets the data associated with the stream, either compressed or
            uncompressed. Note that the data will never be compressed if
            Document.compress is set to false.
            
            @param data raw data, decrypted and uncompressed.
            @param compress true if you want the stream to be compresssed.
            @param compressionLevel  a value between -1 and 9 (ignored if compress == false)
            @since   iText 2.1.3
        </member>
        <member name="M:iTextSharp.text.pdf.PRStream.SetData(System.Byte[])">
            Sets the data associated with the stream
            @param data raw data, decrypted and uncompressed.
        </member>
        <member name="T:iTextSharp.text.pdf.PRAcroForm">
            This class captures an AcroForm on input. Basically, it extends Dictionary
            by indexing the fields of an AcroForm
            @author Mark Thompson
        </member>
        <member name="M:iTextSharp.text.pdf.PRAcroForm.#ctor(iTextSharp.text.pdf.PdfReader)">
            Constructor
            @param reader reader of the input file
        </member>
        <member name="M:iTextSharp.text.pdf.PRAcroForm.GetRefByName(System.String)">
            Given the title (/T) of a reference, return the associated reference
            @param name a string containing the path
            @return a reference to the field, or null
        </member>
        <member name="M:iTextSharp.text.pdf.PRAcroForm.ReadAcroForm(iTextSharp.text.pdf.PdfDictionary)">
            Read, and comprehend the acroform
            @param root the docment root
        </member>
        <member name="M:iTextSharp.text.pdf.PRAcroForm.IterateFields(iTextSharp.text.pdf.PdfArray,iTextSharp.text.pdf.PRIndirectReference,System.String)">
            After reading, we index all of the fields. Recursive.
            @param fieldlist An array of fields
            @param fieldDict the last field dictionary we encountered (recursively)
            @param title the pathname of the field, up to this point or null
        </member>
        <member name="M:iTextSharp.text.pdf.PRAcroForm.MergeAttrib(iTextSharp.text.pdf.PdfDictionary,iTextSharp.text.pdf.PdfDictionary)">
            merge field attributes from two dictionaries
            @param parent one dictionary
            @param child the other dictionary
            @return a merged dictionary
        </member>
        <member name="M:iTextSharp.text.pdf.PRAcroForm.PushAttrib(iTextSharp.text.pdf.PdfDictionary)">
            stack a level of dictionary. Merge in a dictionary from this level
        </member>
        <member name="P:iTextSharp.text.pdf.PRAcroForm.Size">
            Number of fields found
            @return size
        </member>
        <member name="T:iTextSharp.text.pdf.PRAcroForm.FieldInformation">
            This class holds the information for a single field
        </member>
        <member name="T:iTextSharp.text.pdf.PdfSpotColor">
             A <CODE>PdfSpotColor</CODE> defines a ColorSpace
            
             @see     PdfDictionary
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSpotColor.#ctor(System.String,System.Single,iTextSharp.text.Color)">
             Constructs a new <CODE>PdfSpotColor</CODE>.
            
             @param       name        a string value
             @param       tint        a tint value between 0 and 1
             @param       altcs       a altnative colorspace value
        </member>
        <member name="T:iTextSharp.text.pdf.PdfRendition">
            A Rendition dictionary (pdf spec 1.5)
        </member>
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.pdf.PdfNull" -->
        <member name="F:iTextSharp.text.pdf.PdfNull.PDFNULL">
            This is an instance of the <CODE>PdfNull</CODE>-object. 
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfNull.#ctor" -->
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.pdf.PdfIndirectObject" -->
        <member name="F:iTextSharp.text.pdf.PdfIndirectObject.number">
            The object number 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfIndirectObject.generation">
            the generation number 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfIndirectObject.#ctor(System.Int32,iTextSharp.text.pdf.PdfObject,iTextSharp.text.pdf.PdfWriter)">
             Constructs a <CODE>PdfIndirectObject</CODE>.
            
             @param        number            the objecti number
             @param        objecti            the direct objecti
        </member>
        <member name="M:iTextSharp.text.pdf.PdfIndirectObject.#ctor(System.Int32,System.Int32,iTextSharp.text.pdf.PdfObject,iTextSharp.text.pdf.PdfWriter)">
             Constructs a <CODE>PdfIndirectObject</CODE>.
            
             @param        number            the objecti number
             @param        generation        the generation number
             @param        objecti            the direct objecti
        </member>
        <member name="M:iTextSharp.text.pdf.PdfIndirectObject.WriteTo(System.IO.Stream)">
             Writes eficiently to a stream
            
             @param os the stream to write to
             @throws IOException on write error
        </member>
        <member name="P:iTextSharp.text.pdf.PdfIndirectObject.IndirectReference">
             Returns a <CODE>PdfIndirectReference</CODE> to this <CODE>PdfIndirectObject</CODE>.
            
             @return        a <CODE>PdfIndirectReference</CODE>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfEncryptor">
            This class takes any PDF and returns exactly the same but
            encrypted. All the content, links, outlines, etc, are kept.
            It is also possible to change the info dictionary.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncryptor.Encrypt(iTextSharp.text.pdf.PdfReader,System.IO.Stream,System.Byte[],System.Byte[],System.Int32,System.Boolean)">
            Entry point to encrypt a PDF document. The encryption parameters are the same as in
            <code>PdfWriter</code>. The userPassword and the
             ownerPassword can be null or have zero length. In this case the ownerPassword
             is replaced by a random string. The open permissions for the document can be
             AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
             AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
             The permissions can be combined by ORing them.
            @param reader the read PDF
            @param os the output destination
            @param userPassword the user password. Can be null or empty
            @param ownerPassword the owner password. Can be null or empty
            @param permissions the user permissions
            @param strength128Bits <code>true</code> for 128 bit key length, <code>false</code> for 40 bit key length
            @throws DocumentException on error
            @throws IOException on error 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncryptor.Encrypt(iTextSharp.text.pdf.PdfReader,System.IO.Stream,System.Byte[],System.Byte[],System.Int32,System.Boolean,System.Collections.Hashtable)">
            Entry point to encrypt a PDF document. The encryption parameters are the same as in
            <code>PdfWriter</code>. The userPassword and the
             ownerPassword can be null or have zero length. In this case the ownerPassword
             is replaced by a random string. The open permissions for the document can be
             AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
             AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
             The permissions can be combined by ORing them.
            @param reader the read PDF
            @param os the output destination
            @param userPassword the user password. Can be null or empty
            @param ownerPassword the owner password. Can be null or empty
            @param permissions the user permissions
            @param strength128Bits <code>true</code> for 128 bit key length, <code>false</code> for 40 bit key length
            @param newInfo an optional <CODE>String</CODE> map to add or change
            the info dictionary. Entries with <CODE>null</CODE>
            values delete the key in the original info dictionary
            @throws DocumentException on error
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncryptor.Encrypt(iTextSharp.text.pdf.PdfReader,System.IO.Stream,System.Boolean,System.String,System.String,System.Int32)">
            Entry point to encrypt a PDF document. The encryption parameters are the same as in
            <code>PdfWriter</code>. The userPassword and the
             ownerPassword can be null or have zero length. In this case the ownerPassword
             is replaced by a random string. The open permissions for the document can be
             AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
             AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
             The permissions can be combined by ORing them.
            @param reader the read PDF
            @param os the output destination
            @param strength <code>true</code> for 128 bit key length, <code>false</code> for 40 bit key length
            @param userPassword the user password. Can be null or empty
            @param ownerPassword the owner password. Can be null or empty
            @param permissions the user permissions
            @throws DocumentException on error
            @throws IOException on error 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncryptor.Encrypt(iTextSharp.text.pdf.PdfReader,System.IO.Stream,System.Boolean,System.String,System.String,System.Int32,System.Collections.Hashtable)">
            Entry point to encrypt a PDF document. The encryption parameters are the same as in
            <code>PdfWriter</code>. The userPassword and the
             ownerPassword can be null or have zero length. In this case the ownerPassword
             is replaced by a random string. The open permissions for the document can be
             AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
             AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
             The permissions can be combined by ORing them.
            @param reader the read PDF
            @param os the output destination
            @param strength <code>true</code> for 128 bit key length, <code>false</code> for 40 bit key length
            @param userPassword the user password. Can be null or empty
            @param ownerPassword the owner password. Can be null or empty
            @param permissions the user permissions
            @param newInfo an optional <CODE>String</CODE> map to add or change
            the info dictionary. Entries with <CODE>null</CODE>
            values delete the key in the original info dictionary
            @throws DocumentException on error
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncryptor.Encrypt(iTextSharp.text.pdf.PdfReader,System.IO.Stream,System.Int32,System.String,System.String,System.Int32,System.Collections.Hashtable)">
            Entry point to encrypt a PDF document. The encryption parameters are the same as in
            <code>PdfWriter</code>. The userPassword and the
             ownerPassword can be null or have zero length. In this case the ownerPassword
             is replaced by a random string. The open permissions for the document can be
             AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
             AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
             The permissions can be combined by ORing them.
            @param reader the read PDF
            @param os the output destination
            @param type the type of encryption. It can be one of STANDARD_ENCRYPTION_40, STANDARD_ENCRYPTION_128 or ENCRYPTION_AES128.
            Optionally DO_NOT_ENCRYPT_METADATA can be ored to output the metadata in cleartext
            @param userPassword the user password. Can be null or empty
            @param ownerPassword the owner password. Can be null or empty
            @param permissions the user permissions
            @param newInfo an optional <CODE>String</CODE> map to add or change
            the info dictionary. Entries with <CODE>null</CODE>
            values delete the key in the original info dictionary
            @throws DocumentException on error
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncryptor.Encrypt(iTextSharp.text.pdf.PdfReader,System.IO.Stream,System.Int32,System.String,System.String,System.Int32)">
            Entry point to encrypt a PDF document. The encryption parameters are the same as in
            <code>PdfWriter</code>. The userPassword and the
             ownerPassword can be null or have zero length. In this case the ownerPassword
             is replaced by a random string. The open permissions for the document can be
             AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
             AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
             The permissions can be combined by ORing them.
            @param reader the read PDF
            @param os the output destination
            @param type the type of encryption. It can be one of STANDARD_ENCRYPTION_40, STANDARD_ENCRYPTION_128 or ENCRYPTION_AES128.
            Optionally DO_NOT_ENCRYPT_METADATA can be ored to output the metadata in cleartext
            @param userPassword the user password. Can be null or empty
            @param ownerPassword the owner password. Can be null or empty
            @param permissions the user permissions
            values delete the key in the original info dictionary
            @throws DocumentException on error
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncryptor.GetPermissionsVerbose(System.Int32)">
            Give you a verbose analysis of the permissions.
            @param permissions the permissions value of a PDF file
            @return a String that explains the meaning of the permissions value
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncryptor.IsPrintingAllowed(System.Int32)">
             Tells you if printing is allowed.
             @param permissions the permissions value of a PDF file
             @return  true if printing is allowed
            
             @since 2.0.7
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncryptor.IsModifyContentsAllowed(System.Int32)">
             Tells you if modifying content is allowed.
             @param permissions the permissions value of a PDF file
             @return  true if modifying content is allowed
            
             @since 2.0.7
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncryptor.IsCopyAllowed(System.Int32)">
             Tells you if copying is allowed.
             @param permissions the permissions value of a PDF file
             @return  true if copying is allowed
            
             @since 2.0.7
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncryptor.IsModifyAnnotationsAllowed(System.Int32)">
             Tells you if modifying annotations is allowed.
             @param permissions the permissions value of a PDF file
             @return  true if modifying annotations is allowed
            
             @since 2.0.7
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncryptor.IsFillInAllowed(System.Int32)">
             Tells you if filling in fields is allowed.
             @param permissions the permissions value of a PDF file
             @return  true if filling in fields is allowed
            
             @since 2.0.7
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncryptor.IsScreenReadersAllowed(System.Int32)">
             Tells you if repurposing for screenreaders is allowed.
             @param permissions the permissions value of a PDF file
             @return  true if repurposing for screenreaders is allowed
            
             @since 2.0.7
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncryptor.IsAssemblyAllowed(System.Int32)">
             Tells you if document assembly is allowed.
             @param permissions the permissions value of a PDF file
             @return  true if document assembly is allowed
            
             @since 2.0.7
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncryptor.IsDegradedPrintingAllowed(System.Int32)">
             Tells you if degraded printing is allowed.
             @param permissions the permissions value of a PDF file
             @return  true if degraded printing is allowed
            
             @since 2.0.7
        </member>
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.pdf.PdfChunk" -->
        <member name="F:iTextSharp.text.pdf.PdfChunk.keysAttributes">
            The allowed attributes in variable <CODE>attributes</CODE>. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfChunk.keysNoStroke">
            The allowed attributes in variable <CODE>noStroke</CODE>. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfChunk.value">
            The value of this object. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfChunk.encoding">
            The encoding. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfChunk.font">
            The font for this <CODE>PdfChunk</CODE>. 
        </member>
        <!-- Badly formed XML comment ignored for member "F:iTextSharp.text.pdf.PdfChunk.attributes" -->
        <!-- Badly formed XML comment ignored for member "F:iTextSharp.text.pdf.PdfChunk.noStroke" -->
        <member name="F:iTextSharp.text.pdf.PdfChunk.newlineSplit">
            <CODE>true</CODE> if the chunk split was cause by a newline. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfChunk.image">
            The image in this <CODE>PdfChunk</CODE>, if it has one 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfChunk.offsetX">
            The offset in the x direction for the image 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfChunk.offsetY">
            The offset in the y direction for the image 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfChunk.changeLeading">
            Indicates if the height and offset of the Image has to be taken into account 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfChunk.#ctor(System.String,iTextSharp.text.pdf.PdfChunk)">
             Constructs a <CODE>PdfChunk</CODE>-object.
            
             @param string the content of the <CODE>PdfChunk</CODE>-object
             @param font the <CODE>PdfFont</CODE>
             @param attributes the metrics attributes
             @param noStroke the non metric attributes
        </member>
        <member name="M:iTextSharp.text.pdf.PdfChunk.#ctor(iTextSharp.text.Chunk,iTextSharp.text.pdf.PdfAction)">
             Constructs a <CODE>PdfChunk</CODE>-object.
            
             @param chunk the original <CODE>Chunk</CODE>-object
             @param action the <CODE>PdfAction</CODE> if the <CODE>Chunk</CODE> comes from an <CODE>Anchor</CODE>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfChunk.GetUnicodeEquivalent(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfChunk.Split(System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfChunk.Truncate(System.Single)" -->
        <member name="M:iTextSharp.text.pdf.PdfChunk.IsNewlineSplit">
            Checks if the <CODE>PdfChunk</CODE> split was caused by a newline.
            @return <CODE>true</CODE> if the <CODE>PdfChunk</CODE> split was caused by a newline.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfChunk.GetWidthCorrected(System.Single,System.Single)">
            Gets the width of the <CODE>PdfChunk</CODE> taking into account the
            extra character and word spacing.
            @param charSpacing the extra character spacing
            @param wordSpacing the extra word spacing
            @return the calculated width
        </member>
        <member name="M:iTextSharp.text.pdf.PdfChunk.TrimLastSpace">
            Trims the last space.
            @return the width of the space trimmed, otherwise 0
        </member>
        <member name="M:iTextSharp.text.pdf.PdfChunk.GetAttribute(System.String)">
            Gets an attribute. The search is made in <CODE>attributes</CODE>
            and <CODE>noStroke</CODE>.
            @param name the attribute key
            @return the attribute value or null if not found
        </member>
        <member name="M:iTextSharp.text.pdf.PdfChunk.IsAttribute(System.String)">
            Checks if the attribute exists.
             @param name the attribute key
             @return <CODE>true</CODE> if the attribute exists
        </member>
        <member name="M:iTextSharp.text.pdf.PdfChunk.IsStroked">
            Checks if this <CODE>PdfChunk</CODE> needs some special metrics handling.
            @return <CODE>true</CODE> if this <CODE>PdfChunk</CODE> needs some special metrics handling.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfChunk.IsSeparator">
            Checks if this <CODE>PdfChunk</CODE> is a Separator Chunk.
            @return  true if this chunk is a separator.
            @since   2.1.2
        </member>
        <member name="M:iTextSharp.text.pdf.PdfChunk.IsHorizontalSeparator">
            Checks if this <CODE>PdfChunk</CODE> is a horizontal Separator Chunk.
            @return  true if this chunk is a horizontal separator.
            @since   2.1.2
        </member>
        <member name="M:iTextSharp.text.pdf.PdfChunk.IsTab">
            Checks if this <CODE>PdfChunk</CODE> is a tab Chunk.
            @return  true if this chunk is a separator.
            @since   2.1.2
        </member>
        <member name="M:iTextSharp.text.pdf.PdfChunk.AdjustLeft(System.Single)">
            Correction for the tab position based on the left starting position.
            @param   newValue    the new value for the left X.
            @since   2.1.2
        </member>
        <member name="M:iTextSharp.text.pdf.PdfChunk.IsImage">
            Checks if there is an image in the <CODE>PdfChunk</CODE>.
            @return <CODE>true</CODE> if an image is present
        </member>
        <member name="M:iTextSharp.text.pdf.PdfChunk.IsSpecialEncoding">
            Tells you if this string is in Chinese, Japanese, Korean or Identity-H.
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfChunk.Trim(System.String)" -->
        <member name="P:iTextSharp.text.pdf.PdfChunk.Font">
             Returns the font of this <CODE>Chunk</CODE>.
            
             @return  a <CODE>PdfFont</CODE>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfChunk.Color">
             Returns the color of this <CODE>Chunk</CODE>.
            
             @return  a <CODE>Color</CODE>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfChunk.Width">
             Returns the width of this <CODE>PdfChunk</CODE>.
            
             @return  a width
        </member>
        <member name="P:iTextSharp.text.pdf.PdfChunk.TextRise">
            Gets the text displacement relatiev to the baseline.
            @return a displacement in points
        </member>
        <member name="P:iTextSharp.text.pdf.PdfChunk.Image">
            Gets the image in the <CODE>PdfChunk</CODE>.
            @return the image or <CODE>null</CODE>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfChunk.ImageOffsetX">
            Gets the image offset in the x direction
            @return the image offset in the x direction
        </member>
        <member name="P:iTextSharp.text.pdf.PdfChunk.ImageOffsetY">
            Gets the image offset in the y direction
            @return Gets the image offset in the y direction
        </member>
        <member name="P:iTextSharp.text.pdf.PdfChunk.Value">
            sets the value.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfChunk.Encoding">
             Gets the encoding of this string.
            
             @return      a <CODE>string</CODE>
        </member>
        <member name="T:iTextSharp.text.pdf.HyphenationAuto">
            Hyphenates words automatically accordingly to the language and country.
             The hyphenator engine was taken from FOP and uses the TEX patterns. If a language
             is not provided and a TEX pattern for it exists, it can be easily adapted.
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.HyphenationAuto.hyphenator">
            The hyphenator engine.
        </member>
        <member name="F:iTextSharp.text.pdf.HyphenationAuto.post">
            The second part of the hyphenated word.
        </member>
        <member name="M:iTextSharp.text.pdf.HyphenationAuto.#ctor(System.String,System.String,System.Int32,System.Int32)">
            Creates a new hyphenation instance usable in <CODE>Chunk</CODE>.
            @param lang the language ("en" for english, for example)
            @param country the country ("GB" for Great-Britain or "none" for no country, for example)
            @param leftMin the minimun number of letters before the hyphen
            @param rightMin the minimun number of letters after the hyphen
        </member>
        <member name="M:iTextSharp.text.pdf.HyphenationAuto.GetHyphenatedWordPre(System.String,iTextSharp.text.pdf.BaseFont,System.Single,System.Single)">
            Hyphenates a word and returns the first part of it. To get
            the second part of the hyphenated word call <CODE>getHyphenatedWordPost()</CODE>.
            @param word the word to hyphenate
            @param font the font used by this word
            @param fontSize the font size used by this word
            @param remainingWidth the width available to fit this word in
            @return the first part of the hyphenated word including
            the hyphen symbol, if any
        </member>
        <member name="P:iTextSharp.text.pdf.HyphenationAuto.HyphenSymbol">
            Gets the hyphen symbol.
            @return the hyphen symbol
        </member>
        <member name="P:iTextSharp.text.pdf.HyphenationAuto.HyphenatedWordPost">
            Gets the second part of the hyphenated word. Must be called
            after <CODE>getHyphenatedWordPre()</CODE>.
            @return the second part of the hyphenated word
        </member>
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.pdf.FontSelector" -->
        <member name="M:iTextSharp.text.pdf.FontSelector.AddFont(iTextSharp.text.Font)">
            Adds a <CODE>Font</CODE> to be searched for valid characters.
            @param font the <CODE>Font</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.FontSelector.Process(System.String)">
            Process the text so that it will render with a combination of fonts
            if needed.
            @param text the text
            @return a <CODE>Phrase</CODE> with one or more chunks
        </member>
        <member name="T:iTextSharp.text.pdf.FontDetails">
            Each font in the document will have an instance of this class
             where the characters used will be represented.
            
             @author  Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.FontDetails.indirectReference">
            The indirect reference to this font
        </member>
        <member name="F:iTextSharp.text.pdf.FontDetails.fontName">
            The font name that appears in the document body stream
        </member>
        <member name="F:iTextSharp.text.pdf.FontDetails.baseFont">
            The font
        </member>
        <member name="F:iTextSharp.text.pdf.FontDetails.ttu">
            The font if its an instance of <CODE>TrueTypeFontUnicode</CODE>
        </member>
        <member name="F:iTextSharp.text.pdf.FontDetails.shortTag">
            The array used with single byte encodings
        </member>
        <member name="F:iTextSharp.text.pdf.FontDetails.longTag">
            The map used with double byte encodings. The key is Int(glyph) and the
            value is int[]{glyph, width, Unicode code}
        </member>
        <member name="F:iTextSharp.text.pdf.FontDetails.fontType">
            The font type
        </member>
        <member name="F:iTextSharp.text.pdf.FontDetails.symbolic">
            <CODE>true</CODE> if the font is symbolic
        </member>
        <member name="F:iTextSharp.text.pdf.FontDetails.subset">
            Indicates if all the glyphs and widths for that particular
            encoding should be included in the document.
        </member>
        <member name="M:iTextSharp.text.pdf.FontDetails.#ctor(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfIndirectReference,iTextSharp.text.pdf.BaseFont)">
            Each font used in a document has an instance of this class.
            This class stores the characters used in the document and other
            specifics unique to the current working document.
            @param fontName the font name
            @param indirectReference the indirect reference to the font
            @param baseFont the <CODE>BaseFont</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.FontDetails.ConvertToBytes(System.String)">
            Converts the text into bytes to be placed in the document.
            The conversion is done according to the font and the encoding and the characters
            used are stored.
            @param text the text to convert
            @return the conversion
        </member>
        <member name="M:iTextSharp.text.pdf.FontDetails.WriteFont(iTextSharp.text.pdf.PdfWriter)">
            Writes the font definition to the document.
            @param writer the <CODE>PdfWriter</CODE> of this document
        </member>
        <member name="P:iTextSharp.text.pdf.FontDetails.IndirectReference">
            Gets the indirect reference to this font.
            @return the indirect reference to this font
        </member>
        <member name="P:iTextSharp.text.pdf.FontDetails.FontName">
            Gets the font name as it appears in the document body.
            @return the font name
        </member>
        <member name="P:iTextSharp.text.pdf.FontDetails.BaseFont">
            Gets the <CODE>BaseFont</CODE> of this font.
            @return the <CODE>BaseFont</CODE> of this font
        </member>
        <member name="P:iTextSharp.text.pdf.FontDetails.Subset">
            Indicates if all the glyphs and widths for that particular
            encoding should be included in the document. Set to <CODE>false</CODE>
            to include all.
            @param subset new value of property subset
        </member>
        <member name="T:iTextSharp.text.pdf.DefaultSplitCharacter">
            The default class that is used to determine whether or not a character
            is a split character. You can subclass this class to define your own
            split characters.
            @since	2.1.2
        </member>
        <member name="F:iTextSharp.text.pdf.DefaultSplitCharacter.DEFAULT">
            An instance of the default SplitCharacter.
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.DefaultSplitCharacter.IsSplitCharacter(System.Int32,System.Int32,System.Int32,System.Char[],iTextSharp.text.pdf.PdfChunk[])" -->
        <member name="M:iTextSharp.text.pdf.DefaultSplitCharacter.GetCurrentCharacter(System.Int32,System.Char[],iTextSharp.text.pdf.PdfChunk[])">
            Returns the current character
            @param current current position in the array
            @param	cc		the character array that has to be checked
            @param ck chunk array
            @return	the current character
        </member>
        <member name="T:iTextSharp.text.pdf.crypto.AESCipher">
            Creates an AES Cipher with CBC and padding PKCS5/7.
            @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="M:iTextSharp.text.pdf.crypto.AESCipher.#ctor(System.Boolean,System.Byte[],System.Byte[])">
            Creates a new instance of AESCipher 
        </member>
        <member name="T:iTextSharp.text.pdf.codec.JBIG2SegmentReader">
            Class to read a JBIG2 file at a basic level: understand all the segments, 
            understand what segments belong to which pages, how many pages there are,
            what the width and height of each page is, and global segments if there
            are any.  Or: the minimum required to be able to take a normal sequential
            or random-access organized file, and be able to embed JBIG2 pages as images 
            in a PDF.
            
            TODO: the indeterminate-segment-size value of dataLength, else?
            
            @since 2.1.5
        </member>
        <member name="T:iTextSharp.text.pdf.codec.JBIG2SegmentReader.JBIG2Segment">
            Inner class that holds information about a JBIG2 segment.
            @since   2.1.5
        </member>
        <member name="T:iTextSharp.text.pdf.codec.JBIG2SegmentReader.JBIG2Page">
            Inner class that holds information about a JBIG2 page.
            @since   2.1.5
        </member>
        <member name="M:iTextSharp.text.pdf.codec.JBIG2SegmentReader.JBIG2Page.GetData(System.Boolean)">
            return as a single byte array the header-data for each segment in segment number
            order, EMBEDDED organization, but i am putting the needed segments in SEQUENTIAL organization.
            if for_embedding, skip the segment types that are known to be not for acrobat. 
            @param for_embedding
            @return  a byte array
            @throws IOException
        </member>
        <member name="T:iTextSharp.text.pdf.codec.CCITTG4Encoder">
            Encodes data in the CCITT G4 FAX format.
        </member>
        <member name="M:iTextSharp.text.pdf.codec.CCITTG4Encoder.#ctor(System.Int32)">
            Creates a new encoder.
            @param width the line width
        </member>
        <member name="M:iTextSharp.text.pdf.codec.CCITTG4Encoder.Fax4Encode(System.Byte[],System.Int32,System.Int32)">
            Encodes a number of lines.
            @param data the data to be encoded
            @param offset the offset into the data
            @param size the size of the data to be encoded
        </member>
        <member name="M:iTextSharp.text.pdf.codec.CCITTG4Encoder.Compress(System.Byte[],System.Int32,System.Int32)">
            Encodes a full image.
            @param data the data to encode
            @param width the image width
            @param height the image height
            @return the encoded image
        </member>
        <member name="M:iTextSharp.text.pdf.codec.CCITTG4Encoder.Fax4Encode(System.Byte[],System.Int32)">
            Encodes a number of lines.
            @param data the data to be encoded
            @param height the number of lines to encode
        </member>
        <member name="M:iTextSharp.text.pdf.codec.CCITTG4Encoder.Close">
            Closes the encoder and returns the encoded data.
            @return the encoded data
        </member>
        <member name="T:iTextSharp.text.pdf.BarcodePDF417">
            Generates the 2D barcode PDF417. Supports dimensioning auto-sizing, fixed
            and variable sizes, automatic and manual error levels, raw codeword input,
            codeword size optimization and bitmap inversion. The output can
            be a CCITT G4 <CODE>Image</CODE> or a raw bitmap.
            @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePDF417.PDF417_USE_ASPECT_RATIO">
            Auto-size is made based on <CODE>aspectRatio</CODE> and <CODE>yHeight</CODE>. 
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePDF417.PDF417_FIXED_RECTANGLE">
            The size of the barcode will be at least <CODE>codeColumns*codeRows</CODE>. 
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePDF417.PDF417_FIXED_COLUMNS">
            The size will be at least <CODE>codeColumns</CODE>
            with a variable number of <CODE>codeRows</CODE>.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePDF417.PDF417_FIXED_ROWS">
            The size will be at least <CODE>codeRows</CODE>
            with a variable number of <CODE>codeColumns</CODE>.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePDF417.PDF417_AUTO_ERROR_LEVEL">
            The error level correction is set automatically according
            to ISO 15438 recomendations.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePDF417.PDF417_USE_ERROR_LEVEL">
            The error level correction is set by the user. It can be 0 to 8. 
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePDF417.PDF417_FORCE_BINARY">
            One single binary segment is used
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePDF417.PDF417_USE_RAW_CODEWORDS">
            No <CODE>text</CODE> interpretation is done and the content of <CODE>codewords</CODE>
            is used directly.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePDF417.PDF417_INVERT_BITMAP">
            Inverts the output bits of the raw bitmap that is normally
            bit one for black. It has only effect for the raw bitmap.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePDF417.PDF417_USE_MACRO">
            Use Macro PDF417 Encoding
            @see #setMacroFileId(String)
            @see #setMacroSegmentId(int)
            @see #setMacroSegmentCount(int)
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodePDF417.#ctor">
            Creates a new <CODE>BarcodePDF417</CODE> with the default settings. 
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodePDF417.SetDefaultParameters">
            Set the default settings that correspond to <CODE>PDF417_USE_ASPECT_RATIO</CODE>
            and <CODE>PDF417_AUTO_ERROR_LEVEL</CODE>.
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodePDF417.PaintCode">
            Paints the barcode. If no exception was thrown a valid barcode is available. 
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodePDF417.GetImage">
            Gets an <CODE>Image</CODE> with the barcode. The image will have to be
            scaled in the Y direction by <CODE>yHeight</CODE>for the barcode
            to have the right printing aspect.
            @return the barcode <CODE>Image</CODE>
            @throws BadElementException on error
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodePDF417.SetText(System.String)">
            Sets the text that will form the barcode. This text is converted
            to bytes using the encoding Cp437.
            @param s the text that will form the barcode
            @throws UnsupportedEncodingException if the encoding Cp437 is not supported
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePDF417.outBits">
            Holds value of property outBits. 
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePDF417.bitColumns">
            Holds value of property bitColumns. 
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePDF417.codeRows">
            Holds value of property codeRows. 
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePDF417.codeColumns">
            Holds value of property codeColumns. 
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePDF417.codewords">
            Holds value of property codewords. 
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePDF417.lenCodewords">
            Holds value of property lenCodewords. 
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePDF417.errorLevel">
            Holds value of property errorLevel. 
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePDF417.text">
            Holds value of property text. 
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePDF417.options">
            Holds value of property options. 
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePDF417.aspectRatio">
            Holds value of property aspectRatio. 
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePDF417.yHeight">
            Holds value of property yHeight. 
        </member>
        <member name="P:iTextSharp.text.pdf.BarcodePDF417.MacroSegmentId">
            Sets the segment id for macro PDF417 encoding
            @param id the id (starting at 0)
            @see #setMacroSegmentCount(int)
        </member>
        <member name="P:iTextSharp.text.pdf.BarcodePDF417.MacroSegmentCount">
            Sets the segment count for macro PDF417 encoding
            @param cnt the number of macro segments
            @see #setMacroSegmentId(int)
        </member>
        <member name="P:iTextSharp.text.pdf.BarcodePDF417.MacroFileId">
            Sets the File ID for macro PDF417 encoding 
            @param id the file id
        </member>
        <member name="P:iTextSharp.text.pdf.BarcodePDF417.OutBits">
            Gets the raw image bits of the barcode. The image will have to
            be scaled in the Y direction by <CODE>yHeight</CODE>.
            @return The raw barcode image
        </member>
        <member name="P:iTextSharp.text.pdf.BarcodePDF417.BitColumns">
            Gets the number of X pixels of <CODE>outBits</CODE>.
            @return the number of X pixels of <CODE>outBits</CODE>
        </member>
        <member name="P:iTextSharp.text.pdf.BarcodePDF417.CodeRows">
            Gets the number of Y pixels of <CODE>outBits</CODE>.
            It is also the number of rows in the barcode.
            @return the number of Y pixels of <CODE>outBits</CODE>
            Sets the number of barcode rows. This number may be changed
            to keep the barcode valid.
            @param codeRows the number of barcode rows
        </member>
        <member name="P:iTextSharp.text.pdf.BarcodePDF417.CodeColumns">
            Sets the number of barcode data columns.
            This number may be changed to keep the barcode valid.
            @param codeColumns the number of barcode data columns
        </member>
        <member name="P:iTextSharp.text.pdf.BarcodePDF417.Codewords">
            Gets the codeword array. This array is always 928 elements long.
            It can be writen to if the option <CODE>PDF417_USE_RAW_CODEWORDS</CODE>
            is set.
            @return the codeword array
        </member>
        <member name="P:iTextSharp.text.pdf.BarcodePDF417.LenCodewords">
            Sets the length of the codewords.
            @param lenCodewords the length of the codewords
        </member>
        <member name="P:iTextSharp.text.pdf.BarcodePDF417.ErrorLevel">
            Gets the error level correction used for the barcode. It may different
            from the previously set value.
            @return the error level correction used for the barcode
            Sets the error level correction for the barcode.
            @param errorLevel the error level correction for the barcode
        </member>
        <member name="P:iTextSharp.text.pdf.BarcodePDF417.Text">
            Sets the bytes that form the barcode. This bytes should
            be interpreted in the codepage Cp437.
            @param text the bytes that form the barcode
        </member>
        <member name="P:iTextSharp.text.pdf.BarcodePDF417.Options">
            Sets the options to generate the barcode. This can be all
            the <CODE>PDF417_*</CODE> constants.
            @param options the options to generate the barcode
        </member>
        <member name="P:iTextSharp.text.pdf.BarcodePDF417.AspectRatio">
            Sets the barcode aspect ratio. A ratio or 0.5 will make the
            barcode width twice as large as the height.
            @param aspectRatio the barcode aspect ratio
        </member>
        <member name="P:iTextSharp.text.pdf.BarcodePDF417.YHeight">
            Sets the Y pixel height relative to X. It is usually 3.
            @param yHeight the Y pixel height relative to X
        </member>
        <member name="T:iTextSharp.text.pdf.Barcode39">
            Implements the code 39 and code 39 extended. The default parameters are:
             <pre>
            x = 0.8f;
            n = 2;
            font = BaseFont.CreateFont("Helvetica", "winansi", false);
            size = 8;
            baseline = size;
            barHeight = size * 3;
            textint= Element.ALIGN_CENTER;
            generateChecksum = false;
            checksumText = false;
            startStopText = true;
            extended = false;
             </pre>
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode39.CHARS">
            The index chars to <CODE>BARS</CODE>.
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode39.EXTENDED">
            The character combinations to make the code 39 extended.
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode39.BARS">
            The bars to generate the code.
        </member>
        <member name="M:iTextSharp.text.pdf.Barcode39.#ctor">
            Creates a new Barcode39.
        </member>
        <member name="M:iTextSharp.text.pdf.Barcode39.GetBarsCode39(System.String)">
            Creates the bars.
            @param text the text to create the bars. This text does not include the start and
            stop characters
            @return the bars
        </member>
        <member name="M:iTextSharp.text.pdf.Barcode39.GetCode39Ex(System.String)">
            Converts the extended text into a normal, escaped text,
            ready to generate bars.
            @param text the extended text
            @return the escaped text
        </member>
        <member name="M:iTextSharp.text.pdf.Barcode39.GetChecksum(System.String)">
            Calculates the checksum.
            @param text the text
            @return the checksum
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.Barcode39.PlaceBarcode(iTextSharp.text.pdf.PdfContentByte,iTextSharp.text.Color,iTextSharp.text.Color)" -->
        <member name="P:iTextSharp.text.pdf.Barcode39.BarcodeSize">
            Gets the maximum area that the barcode and the text, if
            any, will occupy. The lower left corner is always (0, 0).
            @return the size the barcode occupies.
        </member>
        <member name="T:iTextSharp.text.pdf.AcroFields">
            Query and change fields in existing documents either by method
            calls or by FDF merging.
            @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.AcroFields.FIELD_TYPE_NONE">
            A field type invalid or not found.
        </member>
        <member name="F:iTextSharp.text.pdf.AcroFields.FIELD_TYPE_PUSHBUTTON">
            A field type.
        </member>
        <member name="F:iTextSharp.text.pdf.AcroFields.FIELD_TYPE_CHECKBOX">
            A field type.
        </member>
        <member name="F:iTextSharp.text.pdf.AcroFields.FIELD_TYPE_RADIOBUTTON">
            A field type.
        </member>
        <member name="F:iTextSharp.text.pdf.AcroFields.FIELD_TYPE_TEXT">
            A field type.
        </member>
        <member name="F:iTextSharp.text.pdf.AcroFields.FIELD_TYPE_LIST">
            A field type.
        </member>
        <member name="F:iTextSharp.text.pdf.AcroFields.FIELD_TYPE_COMBO">
            A field type.
        </member>
        <member name="F:iTextSharp.text.pdf.AcroFields.FIELD_TYPE_SIGNATURE">
            A field type.
        </member>
        <member name="F:iTextSharp.text.pdf.AcroFields.generateAppearances">
            Holds value of property generateAppearances. 
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.GetAppearanceStates(System.String)">
            Gets the list of appearance names. Use it to get the names allowed
            with radio and checkbox fields. If the /Opt key exists the values will
            also be included. The name 'Off' may also be valid
            even if not returned in the list.
            @param fieldName the fully qualified field name
            @return the list of names or <CODE>null</CODE> if the field does not exist
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.GetListOptionExport(System.String)">
            Gets the list of export option values from fields of type list or combo.
            If the field doesn't exist or the field type is not list or combo it will return
            <CODE>null</CODE>.
            @param fieldName the field name
            @return the list of export option values from fields of type list or combo
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.GetListOptionDisplay(System.String)">
            Gets the list of display option values from fields of type list or combo.
            If the field doesn't exist or the field type is not list or combo it will return
            <CODE>null</CODE>.
            @param fieldName the field name
            @return the list of export option values from fields of type list or combo
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.AcroFields.SetListOption(System.String,System.String[],System.String[])" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.AcroFields.GetFieldType(System.String)" -->
        <member name="M:iTextSharp.text.pdf.AcroFields.ExportAsFdf(iTextSharp.text.pdf.FdfWriter)">
            Export the fields as a FDF.
            @param writer the FDF writer
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.RenameField(System.String,System.String)">
            Renames a field. Only the last part of the name can be renamed. For example,
            if the original field is "ab.cd.ef" only the "ef" part can be renamed.
            @param oldName the old field name
            @param newName the new field name
            @return <CODE>true</CODE> if the renaming was successful, <CODE>false</CODE>
            otherwise
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.GetField(System.String)">
            Gets the field value.
            @param name the fully qualified field name
            @return the field value
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.GetListSelection(System.String)">
            Gets the field values of a Choice field.
            @param name the fully qualified field name
            @return the field value
            @since 2.1.3
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.AcroFields.SetFieldProperty(System.String,System.String,System.Object,System.Int32[])" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.AcroFields.SetFieldProperty(System.String,System.String,System.Int32,System.Int32[])" -->
        <member name="M:iTextSharp.text.pdf.AcroFields.MergeXfaData(System.Xml.XmlNode)">
            Merges an XML data structure into this form.
            @param n the top node of the data structure
            @throws java.io.IOException on error
            @throws com.lowagie.text.DocumentException o error
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.SetFields(iTextSharp.text.pdf.FdfReader)">
            Sets the fields by FDF merging.
            @param fdf the FDF form
            @throws IOException on error
            @throws DocumentException on error
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.SetFields(iTextSharp.text.pdf.XfdfReader)">
            Sets the fields by XFDF merging.
            @param xfdf the XFDF form
            @throws IOException on error
            @throws DocumentException on error
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.RegenerateField(System.String)">
            Regenerates the field appearance.
            This is usefull when you change a field property, but not its value,
            for instance form.SetFieldProperty("f", "bgcolor", Color.BLUE, null);
            This won't have any effect, unless you use RegenerateField("f") after changing
            the property.
            
            @param name the fully qualified field name or the partial name in the case of XFA forms
            @throws IOException on error
            @throws DocumentException on error
            @return <CODE>true</CODE> if the field was found and changed,
            <CODE>false</CODE> otherwise
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.SetField(System.String,System.String)">
            Sets the field value.
            @param name the fully qualified field name or the partial name in the case of XFA forms
            @param value the field value
            @throws IOException on error
            @throws DocumentException on error
            @return <CODE>true</CODE> if the field was found and changed,
            <CODE>false</CODE> otherwise
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.SetField(System.String,System.String,System.String)">
            Sets the field value and the display string. The display string
            is used to build the appearance in the cases where the value
            is modified by Acrobat with JavaScript and the algorithm is
            known.
            @param name the fully qualified field name or the partial name in the case of XFA forms
            @param value the field value
            @param display the string that is used for the appearance. If <CODE>null</CODE>
            the <CODE>value</CODE> parameter will be used
            @return <CODE>true</CODE> if the field was found and changed,
            <CODE>false</CODE> otherwise
            @throws IOException on error
            @throws DocumentException on error
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.SetListSelection(System.String,System.String[])">
            Sets different values in a list selection.
            No appearance is generated yet; nor does the code check if multiple select is allowed.
            
            @param    name    the name of the field
            @param    value   an array with values that need to be selected
            @return   true only if the field value was changed
            @since 2.1.4
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.GetFieldItem(System.String)">
            Gets the field structure.
            @param name the name of the field
            @return the field structure or <CODE>null</CODE> if the field
            does not exist
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.GetTranslatedFieldName(System.String)">
            Gets the long XFA translated name.
            @param name the name of the field
            @return the long field name
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.GetFieldPositions(System.String)">
            Gets the field box positions in the document. The return is an array of <CODE>float</CODE>
            multiple of 5. For each of this groups the values are: [page, llx, lly, urx,
            ury]. The coordinates have the page rotation in consideration.
            @param name the field name
            @return the positions or <CODE>null</CODE> if field does not exist
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.RemoveFieldsFromPage(System.Int32)">
            Removes all the fields from <CODE>page</CODE>.
            @param page the page to remove the fields from
            @return <CODE>true</CODE> if any field was removed, <CODE>false otherwise</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.RemoveField(System.String,System.Int32)">
            Removes a field from the document. If page equals -1 all the fields with this
            <CODE>name</CODE> are removed from the document otherwise only the fields in
            that particular page are removed.
            @param name the field name
            @param page the page to remove the field from or -1 to remove it from all the pages
            @return <CODE>true</CODE> if the field exists, <CODE>false otherwise</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.RemoveField(System.String)">
            Removes a field from the document.
            @param name the field name
            @return <CODE>true</CODE> if the field exists, <CODE>false otherwise</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.GetSignatureNames">
            Gets the field names that have signatures and are signed.
            @return the field names that have signatures and are signed
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.GetBlankSignatureNames">
            Gets the field names that have blank signatures.
            @return the field names that have blank signatures
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.GetSignatureDictionary(System.String)">
            Gets the signature dictionary, the one keyed by /V.
            @param name the field name
            @return the signature dictionary keyed by /V or <CODE>null</CODE> if the field is not
            a signature
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.SignatureCoversWholeDocument(System.String)">
            Checks is the signature covers the entire document or just part of it.
            @param name the signature field name
            @return <CODE>true</CODE> if the signature covers the entire document,
            <CODE>false</CODE> otherwise
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.AcroFields.VerifySignature(System.String)" -->
        <member name="M:iTextSharp.text.pdf.AcroFields.GetRevision(System.String)">
            Gets this <CODE>field</CODE> revision.
            @param field the signature field name
            @return the revision or zero if it's not a signature field
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.ExtractRevision(System.String)">
            Extracts a revision from the document.
            @param field the signature field name
            @return an <CODE>Stream</CODE> covering the revision. Returns <CODE>null</CODE> if
            it's not a signature field
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.SetExtraMargin(System.Single,System.Single)">
            Sets extra margins in text fields to better mimic the Acrobat layout.
            @param extraMarginLeft the extra marging left
            @param extraMarginTop the extra margin top
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.AddSubstitutionFont(iTextSharp.text.pdf.BaseFont)">
            Adds a substitution font to the list. The fonts in this list will be used if the original
            font doesn't contain the needed glyphs.
            @param font the font
        </member>
        <member name="F:iTextSharp.text.pdf.AcroFields.fieldCache">
            Holds value of property fieldCache.
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.GetNewPushbuttonFromField(System.String)">
            Creates a new pushbutton from an existing field. If there are several pushbuttons with the same name
            only the first one is used. This pushbutton can be changed and be used to replace 
            an existing one, with the same name or other name, as long is it is in the same document. To replace an existing pushbutton
            call {@link #replacePushbuttonField(String,PdfFormField)}.
            @param field the field name that should be a pushbutton
            @return a new pushbutton or <CODE>null</CODE> if the field is not a pushbutton
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.GetNewPushbuttonFromField(System.String,System.Int32)">
            Creates a new pushbutton from an existing field. This pushbutton can be changed and be used to replace 
            an existing one, with the same name or other name, as long is it is in the same document. To replace an existing pushbutton
            call {@link #replacePushbuttonField(String,PdfFormField,int)}.
            @param field the field name that should be a pushbutton
            @param order the field order in fields with same name
            @return a new pushbutton or <CODE>null</CODE> if the field is not a pushbutton
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.ReplacePushbuttonField(System.String,iTextSharp.text.pdf.PdfFormField)">
            Replaces the first field with a new pushbutton. The pushbutton can be created with
            {@link #getNewPushbuttonFromField(String)} from the same document or it can be a
            generic PdfFormField of the type pushbutton.
            @param field the field name
            @param button the <CODE>PdfFormField</CODE> representing the pushbutton
            @return <CODE>true</CODE> if the field was replaced, <CODE>false</CODE> if the field
            was not a pushbutton
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.ReplacePushbuttonField(System.String,iTextSharp.text.pdf.PdfFormField,System.Int32)">
            Replaces the designated field with a new pushbutton. The pushbutton can be created with
            {@link #getNewPushbuttonFromField(String,int)} from the same document or it can be a
            generic PdfFormField of the type pushbutton.
            @param field the field name
            @param button the <CODE>PdfFormField</CODE> representing the pushbutton
            @param order the field order in fields with same name
            @return <CODE>true</CODE> if the field was replaced, <CODE>false</CODE> if the field
            was not a pushbutton
        </member>
        <member name="P:iTextSharp.text.pdf.AcroFields.Fields">
            Gets all the fields. The fields are keyed by the fully qualified field name and
            the value is an instance of <CODE>AcroFields.Item</CODE>.
            @return all the fields
        </member>
        <member name="P:iTextSharp.text.pdf.AcroFields.GenerateAppearances">
            Sets the option to generate appearances. Not generating apperances
            will speed-up form filling but the results can be
            unexpected in Acrobat. Don't use it unless your environment is well
            controlled. The default is <CODE>true</CODE>.
            @param generateAppearances the option to generate appearances
        </member>
        <member name="P:iTextSharp.text.pdf.AcroFields.TotalRevisions">
            Gets the total number of revisions this document has.
            @return the total number of revisions
        </member>
        <!-- Badly formed XML comment ignored for member "P:iTextSharp.text.pdf.AcroFields.FieldCache" -->
        <member name="P:iTextSharp.text.pdf.AcroFields.SubstitutionFonts">
            Sets a list of substitution fonts. The list is composed of <CODE>BaseFont</CODE> and can also be <CODE>null</CODE>. The fonts in this list will be used if the original
            font doesn't contain the needed glyphs.
            @param substitutionFonts the list
        </member>
        <member name="P:iTextSharp.text.pdf.AcroFields.Xfa">
            Gets the XFA form processor.
            @return the XFA form processor
        </member>
        <member name="T:iTextSharp.text.pdf.AcroFields.Item">
            The field representations for retrieval and modification. 
        </member>
        <member name="F:iTextSharp.text.pdf.AcroFields.Item.WRITE_MERGED">
            <CODE>writeToAll</CODE> constant.
            
             @since 2.1.5
        </member>
        <member name="F:iTextSharp.text.pdf.AcroFields.Item.WRITE_WIDGET">
            <CODE>writeToAll</CODE> and <CODE>markUsed</CODE> constant.
            
             @since 2.1.5
        </member>
        <member name="F:iTextSharp.text.pdf.AcroFields.Item.WRITE_VALUE">
            <CODE>writeToAll</CODE> and <CODE>markUsed</CODE> constant.
            
             @since 2.1.5
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.Item.WriteToAll(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfObject,System.Int32)">
             This function writes the given key/value pair to all the instances
             of merged, widget, and/or value, depending on the <code>writeFlags</code> setting
            
             @since 2.1.5
            
             @param key        you'll never guess what this is for.
             @param value      if value is null, the key will be removed
             @param writeFlags ORed together WRITE_* flags
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.Item.MarkUsed(iTextSharp.text.pdf.AcroFields,System.Int32)">
            Mark all the item dictionaries used matching the given flags
            
            @since 2.1.5
            @param writeFlags WRITE_MERGED is ignored
        </member>
        <member name="F:iTextSharp.text.pdf.AcroFields.Item.values">
            An array of <CODE>PdfDictionary</CODE> where the value tag /V
            is present.
            
            @deprecated (will remove 'public' in the future)
        </member>
        <member name="F:iTextSharp.text.pdf.AcroFields.Item.widgets">
            An array of <CODE>PdfDictionary</CODE> with the widgets.
            
            @deprecated (will remove 'public' in the future)
        </member>
        <member name="F:iTextSharp.text.pdf.AcroFields.Item.widget_refs">
            An array of <CODE>PdfDictionary</CODE> with the widget references.
            
            @deprecated (will remove 'public' in the future)
        </member>
        <member name="F:iTextSharp.text.pdf.AcroFields.Item.merged">
            An array of <CODE>PdfDictionary</CODE> with all the field
            and widget tags merged.
            
            @deprecated (will remove 'public' in the future)
        </member>
        <member name="F:iTextSharp.text.pdf.AcroFields.Item.page">
            An array of <CODE>Integer</CODE> with the page numbers where
            the widgets are displayed.
            
            @deprecated (will remove 'public' in the future)
        </member>
        <member name="F:iTextSharp.text.pdf.AcroFields.Item.tabOrder">
            An array of <CODE>Integer</CODE> with the tab order of the field in the page.
            
            @deprecated (will remove 'public' in the future)
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.Item.Remove(System.Int32)">
            Remove the given instance from this item.  It is possible to
            remove all instances using this function.
            
            @since 2.1.5
            @param killIdx
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.Item.GetValue(System.Int32)">
            Retrieve the value dictionary of the given instance
            
            @since 2.1.5
            @param idx instance index
            @return dictionary storing this instance's value.  It may be shared across instances.
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.Item.AddValue(iTextSharp.text.pdf.PdfDictionary)">
            Add a value dict to this Item
            
            @since 2.1.5
            @param value new value dictionary
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.Item.GetWidget(System.Int32)">
            Retrieve the widget dictionary of the given instance
            
            @since 2.1.5
            @param idx instance index
            @return The dictionary found in the appropriate page's Annot array.
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.Item.AddWidget(iTextSharp.text.pdf.PdfDictionary)">
            Add a widget dict to this Item
            
            @since 2.1.5
            @param widget
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.Item.GetWidgetRef(System.Int32)">
            Retrieve the reference to the given instance
            
            @since 2.1.5
            @param idx instance index
            @return reference to the given field instance
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.Item.AddWidgetRef(iTextSharp.text.pdf.PdfIndirectReference)">
            Add a widget ref to this Item
            
            @since 2.1.5
            @param widgRef
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.Item.GetMerged(System.Int32)">
            Retrieve the merged dictionary for the given instance.  The merged
            dictionary contains all the keys present in parent fields, though they
            may have been overwritten (or modified?) by children.
            Example: a merged radio field dict will contain /V
            
            @since 2.1.5
            @param idx  instance index
            @return the merged dictionary for the given instance
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.Item.AddMerged(iTextSharp.text.pdf.PdfDictionary)">
            Adds a merged dictionary to this Item.
            
            @since 2.1.5
            @param mergeDict
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.Item.GetPage(System.Int32)">
            Retrieve the page number of the given instance
            
            @since 2.1.5
            @param idx
            @return remember, pages are "1-indexed", not "0-indexed" like field instances.
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.Item.AddPage(System.Int32)">
            Adds a page to the current Item.
            
            @since 2.1.5
            @param pg
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.Item.ForcePage(System.Int32,System.Int32)">
            forces a page value into the Item.
            
            @since 2.1.5
            @param idx
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.Item.GetTabOrder(System.Int32)">
            Gets the tabOrder.
            
            @since 2.1.5
            @param idx
            @return tab index of the given field instance
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.Item.AddTabOrder(System.Int32)">
            Adds a tab order value to this Item.
            
            @since 2.1.5
            @param order
        </member>
        <member name="P:iTextSharp.text.pdf.AcroFields.Item.Size">
            Preferred method of determining the number of instances
            of a given field.
            
            @since 2.1.5
            @return number of instances
        </member>
        <member name="T:iTextSharp.text.Jpeg2000">
             An <CODE>Jpeg2000</CODE> is the representation of a graphic element (JPEG)
             that has to be inserted into the document
            
             @see		Element
             @see		Image
        </member>
        <member name="M:iTextSharp.text.Jpeg2000.#ctor(System.Uri)">
             Constructs a <CODE>Jpeg2000</CODE>-object, using an <VAR>url</VAR>.
            
             @param		url			the <CODE>URL</CODE> where the image can be found
             @throws BadElementException
             @throws IOException
        </member>
        <member name="M:iTextSharp.text.Jpeg2000.#ctor(System.Byte[])">
             Constructs a <CODE>Jpeg2000</CODE>-object from memory.
            
             @param		img		the memory image
             @throws BadElementException
             @throws IOException
        </member>
        <member name="M:iTextSharp.text.Jpeg2000.#ctor(System.Byte[],System.Single,System.Single)">
             Constructs a <CODE>Jpeg2000</CODE>-object from memory.
            
             @param		img			the memory image.
             @param		width		the width you want the image to have
             @param		height		the height you want the image to have
             @throws BadElementException
             @throws IOException
        </member>
        <member name="M:iTextSharp.text.Jpeg2000.ProcessParameters">
            This method checks if the image is a valid JPEG and processes some parameters.
            @throws BadElementException
            @throws IOException
        </member>
        <member name="T:iTextSharp.text.exceptions.IllegalPdfSyntaxException">
            Typed exception used when creating PDF syntax that isn't valid.
            @since 2.1.6
        </member>
        <member name="M:iTextSharp.text.exceptions.IllegalPdfSyntaxException.#ctor(System.String)">
            Creates an exception saying the PDF syntax isn't correct.
            @param	message	some extra info about the exception
        </member>
        <member name="T:iTextSharp.text.BadElementException">
            <summary>
            Signals an attempt to create an Element that hasn't got the right form.
            </summary>
            <seealso cref="T:iTextSharp.text.Cell"/>
            <seealso cref="T:iTextSharp.text.Table"/>
        </member>
        <member name="T:iTextSharp.text.ZapfDingbatsList">
            
            A special-version of <CODE>LIST</CODE> whitch use zapfdingbats-letters.
            
            @see com.lowagie.text.List
            @author Michael Niedermair and Bruno Lowagie
        </member>
        <member name="F:iTextSharp.text.ZapfDingbatsList.zn">
            char-number in zapfdingbats
        </member>
        <member name="M:iTextSharp.text.ZapfDingbatsList.#ctor(System.Int32)">
            Creates a ZapfDingbatsList
            
            @param zn a char-number
        </member>
        <member name="M:iTextSharp.text.ZapfDingbatsList.#ctor(System.Int32,System.Int32)">
            Creates a ZapfDingbatsList
            
            @param zn a char-number
            @param symbolIndent    indent
        </member>
        <member name="M:iTextSharp.text.ZapfDingbatsList.Add(System.Object)">
             Adds an <CODE>Object</CODE> to the <CODE>List</CODE>.
            
             @param    o    the object to add.
             @return true if adding the object succeeded
        </member>
        <member name="P:iTextSharp.text.ZapfDingbatsList.CharNumber">
            set the char-number 
            @param zn a char-number
        </member>
        <member name="T:iTextSharp.text.xml.simpleparser.ISimpleXMLDocHandlerComment">
            The handler for the events fired by <CODE>SimpleXMLParser</CODE>.
            @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="M:iTextSharp.text.xml.simpleparser.ISimpleXMLDocHandlerComment.Comment(System.String)">
            Called when a comment is found.
            @param text the comment text
        </member>
        <member name="T:iTextSharp.text.SimpleCell">
            <summary>
            Summary description for SimpleCell.
            </summary>
        </member>
        <member name="F:iTextSharp.text.SimpleCell.ROW">
            the CellAttributes object represents a row. 
        </member>
        <member name="F:iTextSharp.text.SimpleCell.CELL">
            the CellAttributes object represents a cell. 
        </member>
        <member name="F:iTextSharp.text.SimpleCell.content">
            the content of the Cell. 
        </member>
        <member name="F:iTextSharp.text.SimpleCell.width">
            the width of the Cell. 
        </member>
        <member name="F:iTextSharp.text.SimpleCell.widthpercentage">
            the widthpercentage of the Cell. 
        </member>
        <member name="F:iTextSharp.text.SimpleCell.spacing_left">
            an extra spacing variable 
        </member>
        <member name="F:iTextSharp.text.SimpleCell.spacing_right">
            an extra spacing variable 
        </member>
        <member name="F:iTextSharp.text.SimpleCell.spacing_top">
            an extra spacing variable 
        </member>
        <member name="F:iTextSharp.text.SimpleCell.spacing_bottom">
            an extra spacing variable 
        </member>
        <member name="F:iTextSharp.text.SimpleCell.padding_left">
            an extra padding variable 
        </member>
        <member name="F:iTextSharp.text.SimpleCell.padding_right">
            an extra padding variable 
        </member>
        <member name="F:iTextSharp.text.SimpleCell.padding_top">
            an extra padding variable 
        </member>
        <member name="F:iTextSharp.text.SimpleCell.padding_bottom">
            an extra padding variable 
        </member>
        <member name="F:iTextSharp.text.SimpleCell.colspan">
            the colspan of a Cell 
        </member>
        <member name="F:iTextSharp.text.SimpleCell.horizontalAlignment">
            horizontal alignment inside the Cell. 
        </member>
        <member name="F:iTextSharp.text.SimpleCell.verticalAlignment">
            vertical alignment inside the Cell. 
        </member>
        <member name="F:iTextSharp.text.SimpleCell.cellgroup">
            indicates if these are the attributes of a single Cell (false) or a group of Cells (true). 
        </member>
        <member name="F:iTextSharp.text.SimpleCell.useAscender">
            Indicates that the largest ascender height should be used to determine the
            height of the first line.  Note that this only has an effect when rendered
            to PDF.  Setting this to true can help with vertical alignment problems. 
        </member>
        <member name="F:iTextSharp.text.SimpleCell.useDescender">
            Indicates that the largest descender height should be added to the height of
            the last line (so characters like y don't dip into the border).   Note that
            this only has an effect when rendered to PDF. 
        </member>
        <member name="F:iTextSharp.text.SimpleCell.useBorderPadding">
            Adjusts the cell contents to compensate for border widths.  Note that
            this only has an effect when rendered to PDF.
        </member>
        <member name="M:iTextSharp.text.SimpleCell.#ctor(System.Boolean)">
            A CellAttributes object is always constructed without any dimensions.
            Dimensions are defined after creation.
            @param row only true if the CellAttributes object represents a row.
        </member>
        <member name="M:iTextSharp.text.SimpleCell.AddElement(iTextSharp.text.IElement)">
            Adds content to this object.
            @param element
            @throws BadElementException
        </member>
        <member name="M:iTextSharp.text.SimpleCell.CreateCell(iTextSharp.text.SimpleCell)">
            Creates a Cell with these attributes.
            @param rowAttributes
            @return a cell based on these attributes.
            @throws BadElementException
        </member>
        <member name="M:iTextSharp.text.SimpleCell.CreatePdfPCell(iTextSharp.text.SimpleCell)">
            Creates a PdfPCell with these attributes.
            @param rowAttributes
            @return a PdfPCell based on these attributes.
        </member>
        <member name="M:iTextSharp.text.SimpleCell.CellLayout(iTextSharp.text.pdf.PdfPCell,iTextSharp.text.Rectangle,iTextSharp.text.pdf.PdfContentByte[])">
            @see com.lowagie.text.pdf.PdfPCellEvent#cellLayout(com.lowagie.text.pdf.PdfPCell, com.lowagie.text.Rectangle, com.lowagie.text.pdf.PdfContentByte[])
        </member>
        <member name="M:iTextSharp.text.SimpleCell.Add(System.Object)">
            @see com.lowagie.text.TextElementArray#add(java.lang.Object)
        </member>
        <member name="P:iTextSharp.text.SimpleCell.Padding">
            Sets the padding parameters if they are undefined. 
            @param padding
        </member>
        <member name="P:iTextSharp.text.SimpleCell.Colspan">
            @return Returns the colspan.
        </member>
        <member name="P:iTextSharp.text.SimpleCell.Padding_bottom">
            @param padding_bottom The padding_bottom to set.
        </member>
        <member name="P:iTextSharp.text.SimpleCell.Spacing">
            @return Returns the spacing.
        </member>
        <member name="P:iTextSharp.text.SimpleCell.Cellgroup">
            @return Returns the cellgroup.
        </member>
        <member name="P:iTextSharp.text.SimpleCell.HorizontalAlignment">
            @return Returns the horizontal alignment.
        </member>
        <member name="P:iTextSharp.text.SimpleCell.Width">
            @return Returns the width.
        </member>
        <member name="P:iTextSharp.text.SimpleCell.Widthpercentage">
            @return Returns the widthpercentage.
        </member>
        <member name="P:iTextSharp.text.SimpleCell.UseAscender">
            @return Returns the useAscender.
        </member>
        <member name="P:iTextSharp.text.SimpleCell.UseBorderPadding">
            @return Returns the useBorderPadding.
        </member>
        <member name="P:iTextSharp.text.SimpleCell.Content">
            @return Returns the content.
        </member>
        <member name="T:iTextSharp.text.rtf.parser.RtfParser">
            The RtfParser allows the importing of RTF documents or
            RTF document fragments. The RTF document or fragment is tokenised,
            font and color definitions corrected and then added to
            the document being written.
            
            @author Mark Hall (Mark.Hall@mail.room3b.eu)
            @author Howard Shank (hgshank@yahoo.com)
            @since 2.0.8
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_IN_HEADER">
            Currently the RTF document header is being parsed.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_IN_CHARSET">
            Currently the RTF charset is being parsed.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_IN_DEFFONT">
            Currently the RTF deffont is being parsed.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_IN_FONT_TABLE">
            Currently the RTF font table is being parsed.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_IN_FONT_TABLE_INFO">
            Currently a RTF font table info element is being parsed.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_IN_FILE_TABLE">
            Currently the RTF filetbl is being parsed.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_IN_COLOR_TABLE">
            Currently the RTF color table is being parsed.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_IN_STYLESHEET">
            Currently the RTF  stylesheet is being parsed.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_IN_LIST_TABLE">
            Currently the RTF listtables is being parsed.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_IN_LISTOVERRIDE_TABLE">
            Currently the RTF listtable override is being parsed.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_IN_REV_TABLE">
            Currently the RTF revtbl is being parsed.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_IN_RSID_TABLE">
            Currently the RTF rsidtable is being parsed.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_IN_GENERATOR">
            Currently the RTF generator is being parsed.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_IN_PARAGRAPH_TABLE">
            Currently the RTF Paragraph group properties Table (word 2002)
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_IN_OLDCPROPS">
            Currently the RTF Old Properties.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_IN_OLDPPROPS">
            Currently the RTF Old Properties.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_IN_OLDTPROPS">
            Currently the RTF Old Properties.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_IN_OLDSPROPS">
            Currently the RTF Old Properties.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_IN_PROT_USER_TABLE">
            Currently the RTF User Protection Information.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_IN_LATENTSTYLES">
            Currently the Latent Style and Formatting usage restrictions
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_IN_DOCUMENT">
            Currently the RTF document content is being parsed.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_IN_INFO_GROUP">
            Currently the RTF info group is being parsed.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_IN_SHPPICT">
            Currently a shppict control word is being parsed.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_IN_PICT">
            Currently a pict control word is being parsed.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_IN_PICPROP">
            Currently a picprop control word is being parsed.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_IN_BLIPUID">
            Currently a blipuid control word is being parsed.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_STARTSTOP">
            The parser is at the beginning or the end of the file.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_ERROR">
            Currently the parser is in an error state.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_ERROR_EOF">
            The parser reached the end of the file.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.PARSER_IN_UNKNOWN">
            Currently the parser is in an unknown state.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.TYPE_UNIDENTIFIED">
            Conversion type is unknown
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.TYPE_IMPORT_FULL">
            Conversion type is an import. Uses direct content to add everything.
            This is what the original import does.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.TYPE_IMPORT_FRAGMENT">
            Conversion type is an import of a partial file/fragment. Uses direct content to add everything.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.TYPE_CONVERT">
            Conversion type is a conversion. This uses the document (not rtfDoc) to add
            all the elements making it a different supported documents depending on the writer used.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.TYPE_IMPORT_INTO_ELEMENT">
            Conversion type to import a document into an element. i.e. Chapter, Section, Table Cell, etc.
            @since 2.1.4
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.DESTINATION_NORMAL">
            Destination is normal. Text is processed.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.DESTINATION_SKIP">
            Destination is skipping. Text is ignored.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.TOKENISER_NORMAL">
            The RtfTokeniser is in its ground state. Any token may follow.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.TOKENISER_SKIP_BYTES">
            The last token parsed was a slash.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.TOKENISER_SKIP_GROUP">
            The RtfTokeniser is currently tokenising a control word.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.TOKENISER_BINARY">
            The RtfTokeniser is currently reading binary stream.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.TOKENISER_HEX">
            The RtfTokeniser is currently reading hex data.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.TOKENISER_IGNORE_RESULT">
            The RtfTokeniser ignore result
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.TOKENISER_STATE_IN_ERROR">
            The RtfTokeniser is currently in error state
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.TOKENISER_STATE_IN_UNKOWN">
            The RtfTokeniser is currently in an unkown state
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.debugParser">
            Debugging flag.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.elem">
            The iText element to add the RTF document to.
            @since 2.1.3
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.document">
            The iText document to add the RTF document to.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.rtfDoc">
            The RtfDocument to add the RTF document or fragment to.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.rtfKeywordMgr">
            The RtfKeywords that creates and handles keywords that are implemented.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.importMgr">
            The RtfImportHeader to store imported font and color mappings in.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.destinationMgr">
            The RtfDestinationMgr object to manage destinations.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.stackState">
            Stack for saving states for groups
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.currentState">
            The current parser state.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.pbReader">
            The pushback reader to read the input stream.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.conversionType">
            Conversion type. Identifies if we are doing in import or a convert.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.groupLevel">
            The current group nesting level.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.docGroupLevel">
            The current document group nesting level. Used for fragments.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.binByteCount">
            When the tokeniser is Binary.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.binSkipByteCount">
            When the tokeniser is set to skip bytes, binSkipByteCount is the number of bytes to skip.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.skipGroupLevel">
            When the tokeniser is set to skip to next group, this is the group indentifier to return to.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.byteCount">
            Total bytes read.
        </member>
        <!-- Badly formed XML comment ignored for member "F:iTextSharp.text.rtf.parser.RtfParser.ctrlWordCount" -->
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.openGroupCount">
            Total { encountered as an open group token.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.closeGroupCount">
            Total } encountered as a close group token.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.characterCount">
            Total clear text characters processed.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.ctrlWordHandledCount">
            Total control words recognized.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.ctrlWordNotHandledCount">
            Total control words not handled.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.ctrlWordSkippedCount">
            Total control words skipped.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.groupSkippedCount">
            Total groups skipped. Includes { and } as a group.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.startTime">
            Start time as a long.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.endTime">
            Stop time as a long.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.startDate">
            Start date as a date.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.endDate">
            End date as a date.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.lastCtrlWordParam">
            Last control word and parameter processed.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfParser.listeners">
            The <code>RtfCtrlWordListener</code>. 
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.#ctor(iTextSharp.text.Document)">
            Constructor 
            @param doc
            @since 2.1.3
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.ImportRtfDocument(System.IO.Stream,iTextSharp.text.rtf.document.RtfDocument)">
            Imports a complete RTF document.
            
            @param readerIn 
                  The Reader to read the RTF document from.
            @param rtfDoc 
                  The RtfDocument to add the imported document to.
            @throws IOException On I/O errors.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.ImportRtfDocumentIntoElement(iTextSharp.text.IElement,System.IO.Stream,iTextSharp.text.rtf.document.RtfDocument)">
            Imports a complete RTF document into an Element, i.e. Chapter, section, Table Cell, etc.
            
            @param elem The Element the document is to be imported into.
            @param readerIn 
                  The Reader to read the RTF document from.
            @param rtfDoc 
                  The RtfDocument to add the imported document to.
            @throws IOException On I/O errors.
            @since 2.1.4
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.ConvertRtfDocument(System.IO.Stream,iTextSharp.text.Document)">
            Converts an RTF document to an iText document.
            
            Usage: Create a parser object and call this method with the input stream and the iText Document object
            
            @param readerIn 
                  The Reader to read the RTF file from.
            @param doc 
                  The iText document that the RTF file is to be added to.
            @throws IOException 
                  On I/O errors.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.ImportRtfFragment(System.IO.Stream,iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.rtf.parser.RtfImportMappings)">
            Imports an RTF fragment.
            
            @param readerIn 
                  The Reader to read the RTF fragment from.
            @param rtfDoc 
                  The RTF document to add the RTF fragment to.
            @param importMappings 
                  The RtfImportMappings defining font and color mappings for the fragment.
            @throws IOException 
                  On I/O errors.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.AddListener(iTextSharp.text.rtf.IEventListener)">
             Adds a <CODE>EventListener</CODE> to the <CODE>RtfCtrlWordMgr</CODE>.
            
             @param listener
                        the new EventListener.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.RemoveListener(iTextSharp.text.rtf.IEventListener)">
             Removes a <CODE>EventListener</CODE> from the <CODE>RtfCtrlWordMgr</CODE>.
            
             @param listener
                        the EventListener that has to be removed.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.Init(System.Int32,iTextSharp.text.rtf.document.RtfDocument,System.IO.Stream,iTextSharp.text.Document,iTextSharp.text.IElement)">
            Initialize the parser object values. 
            
            @param type Type of conversion or import
            @param rtfDoc The <code>RtfDocument</code>
            @param readerIn The input stream
            @param doc The iText <code>Document</code>
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.Init_stats">
            Initialize the statistics values.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.Init_Reader(System.IO.Stream)">
            Casts the input reader to a PushbackReader or 
            creates a new PushbackReader from the Reader passed in.
            The reader is also transformed into a BufferedReader if necessary.
            
            @param readerIn
                  The Reader object for the input file.
            @return
                  PushbackReader object
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.HandleImportMappings(iTextSharp.text.rtf.parser.RtfImportMappings)">
            Imports the mappings defined in the RtfImportMappings into the
            RtfImportHeader of this RtfParser2.
            
            @param importMappings 
                  The RtfImportMappings to import.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.HandleOpenGroup">
            Handles open group tokens. ({)
            
            @return errOK if ok, other if an error occurred.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.HandleCloseGroup">
            Handles close group tokens. (})
            
            @return errOK if ok, other if an error occurred. 
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.HandleCtrlWord(iTextSharp.text.rtf.parser.ctrlwords.RtfCtrlWordData)">
            Handles control word tokens. Depending on the current
            state a control word can lead to a state change. When
            parsing the actual document contents, certain tabled
            values are remapped. i.e. colors, fonts, styles, etc.
            
            @param ctrlWordData The control word to handle.
            @return errOK if ok, other if an error occurred.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.HandleCharacter(System.Int32)">
            Handles text tokens. These are either handed on to the
            appropriate destination handler.
            
            @param nextChar
                  The text token to handle.
            @return errOK if ok, other if an error occurred. 
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.GetState">
             Get the state of the parser.
            
             @return
                   The current RtfParserState state object.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.GetParserState">
            Get the current state of the parser.
            
            @return 
                  The current state of the parser.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.SetParserState(System.Int32)">
             Set the state value of the parser.
            
             @param newState
                   The new state for the parser
             @return
                   The state of the parser.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.GetConversionType">
            Get the conversion type.
            
            @return
                  The type of the conversion. Import or Convert.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.GetRtfDocument">
            Get the RTF Document object.
            @return
                  Returns the object rtfDoc.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.GetDocument">
            Get the Document object.
            @return
                  Returns the object rtfDoc.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.GetImportManager">
            Get the RtfImportHeader object.
            @return
                  Returns the object importHeader.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.SetCurrentDestination(System.String)">
            Set the current destination object for the current state.
            @param dest The destination value to set.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.GetCurrentDestination">
            Get the current destination object.
            
            @return The current state destination
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.GetDestination(System.String)">
            Get a destination from the map
            
            @para destination The string destination.
            @return The destination object from the map
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.IsNewGroup">
            Helper method to determine if this is a new group.
            
            @return true if this is a new group, otherwise it returns false.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.SetNewGroup(System.Boolean)">
            Helper method to set the new group flag
            @param value The bool value to set the flag
            @return The value of newGroup
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.Tokenise">
            Read through the input file and parse the data stream into tokens.
            
            @throws IOException on IO error.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.ParseChar(System.Int32)">
            Process the character and send it to the current destination.
            @param nextChar
                  The character to process
            @return
                  Returns an error code or errOK if no error.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.ParseCtrlWord(iTextSharp.text.rtf.parser.PushbackStream)">
            Parses a keyword and it's parameter if one exists
            @param reader
                  This is a pushback reader for file input.
            @return
                  Returns an error code or errOK if no error.
            @throws IOException
                  Catch any file read problem.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.SetTokeniserState(System.Int32)">
            Set the current state of the tokeniser.
            @param value The new state of the tokeniser.
            @return The state of the tokeniser.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.GetTokeniserState">
            Get the current state of the tokeniser.
            @return The current state of the tokeniser.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.GetLevel">
            Gets the current group level
            
            @return
                  The current group level value.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.SetTokeniserStateNormal">
            Set the tokeniser state to skip to the end of the group.
            Sets the state to TOKENISER_SKIP_GROUP and skipGroupLevel to the current group level.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.SetTokeniserStateSkipGroup">
            Set the tokeniser state to skip to the end of the group.
            Sets the state to TOKENISER_SKIP_GROUP and skipGroupLevel to the current group level.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.SetTokeniserSkipBytes(System.Int64)">
            Sets the number of bytes to skip and the state of the tokeniser.
            
            @param numberOfBytesToSkip
                      The numbere of bytes to skip in the file.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.SetTokeniserStateBinary(System.Int32)">
            Sets the number of binary bytes.
            
            @param binaryCount
                      The number of binary bytes.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.SetTokeniserStateBinary(System.Int64)">
            Sets the number of binary bytes.
            
            @param binaryCount
                      The number of binary bytes.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.IsConvert">
            Helper method to determin if conversion is TYPE_CONVERT
            @return true if TYPE_CONVERT, otherwise false
            @see com.lowagie.text.rtf.direct.RtfParser#TYPE_CONVERT
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.IsImport">
            Helper method to determin if conversion is TYPE_IMPORT_FULL or TYPE_IMPORT_FRAGMENT
            @return true if TYPE_CONVERT, otherwise false
            @see com.lowagie.text.rtf.direct.RtfParser#TYPE_IMPORT_FULL
            @see com.lowagie.text.rtf.direct.RtfParser#TYPE_IMPORT_FRAGMENT
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.IsImportFull">
            Helper method to determin if conversion is TYPE_IMPORT_FULL
            @return true if TYPE_CONVERT, otherwise false
            @see com.lowagie.text.rtf.direct.RtfParser#TYPE_IMPORT_FULL
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.IsImportFragment">
            Helper method to determin if conversion is TYPE_IMPORT_FRAGMENT
            @return true if TYPE_CONVERT, otherwise false
            @see com.lowagie.text.rtf.direct.RtfParser#TYPE_IMPORT_FRAGMENT
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.GetExtendedDestination">
            Helper method to indicate if this control word was a \* control word.
            @return true if it was a \* control word, otherwise false
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.SetExtendedDestination(System.Boolean)">
            Helper method to set the extended control word flag.
            @param value Boolean to set the value to.
            @return isExtendedDestination.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.GetLogFile">
            Get the logfile name.
            
            @return the logFile
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.SetLogFile(System.String)">
            Set the logFile name
            
            @param logFile the logFile to set
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.SetLogFile(System.String,System.Boolean)">
            Set the logFile name
            
            @param logFile the logFile to set
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.IsLogging">
            Get flag indicating if logging is on or off.
            
            @return the logging
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.SetLogging(System.Boolean)">
            Set flag indicating if logging is on or off
            @param logging <code>true</code> to turn on logging, <code>false</code> to turn off logging.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.IsLogAppend">
            @return the logAppend
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfParser.SetLogAppend(System.Boolean)">
            @param logAppend the logAppend to set
        </member>
        <member name="T:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable">
             <code>RtfDestinationStylesheetTable</code> handles data destined for the 
             Stylesheet Table destination
             
             @author Howard Shank (hgshank@yahoo.com)
            
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.elementName">
            <code>RtfParagraphStyle</code> object for setting styleshee values
            as they are parsed from the input.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.styleNr">
            RTF Style number from stylesheet table.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.styleType">
            What kind of style is this, Paragraph or Character or Table
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.alignment">
            Alignment - page 85
             \qc, \qj, \ql, \qr, \qd, \qkN, \qt 
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.justificationPercentage">
            Percentage of line occupied by Kashida justification (0 � low, 10 � medium, 20 � high).
            \qkN
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.firstLineIndent">
            First line indentation.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.leftIndent">
            Left indentation
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.rightIndent">
            Right indentation
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.adustRightIndent">
            Automatically adjust right indentation when docunent grid is defined 
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.mirrorIndent">
            Mirror indents? 
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.overrideWidowControl">
            Override orphan/widow control.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.AutoSpaceBetweenDBCEnglish">
            auto spacing betwee DBC and English
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.AutoSpaceBetweenDBCNumbers">
            auto spacing betwee DBC and numbers
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.noCharacterWrapping">
            No Character wrapping
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.noWordWrapping">
            No Word wrapping
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.noOverflowPeriodComma">
            No overflow period and comma
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.importHeader">
            The RtfImportHeader to add color mappings to.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.SetJustificationPercentage(System.Int32)">
            Set the justification percentage from parsed value.
            @param percent The justification percentage
            @return The justification percentage
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.GetJustificationPercentage">
            Get the justification percentage.
            @return The justification percentage value.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.SetAlignment(System.Int32)">
            Set the alignment value from the parsed value.
            @param alignment The alignment value.
            @return The alignment value.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.GetAlignment">
            Get the alignment value.
            @return The alignment value.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.GetFirstLineIndent">
            Get the first line indent value.
            
            @return the firstLineIndent
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.SetFirstLineIndent(System.Int32)">
            Set the first line indent value.
            @param firstLineIndent the firstLineIndent to set
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.GetIndent">
            Get the left indent value
            @return the left indent
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.SetIndent(System.Int32)">
            Set the left indent value from the value parsed.
            @param indent the left indent value.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.GetAdustRightIndent">
            Get the right indent adjustment value
            @return the adustRightIndent value
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.SetAdustRightIndent(System.Int32)">
            Set the right indent adjustment value
            @param adustRightIndent the adustRightIndent to set
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.GetLeftIndent">
            Get the left indent value
            @return the leftIndent
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.SetLeftIndent(System.Int32)">
            Set the left indent value
            @param leftIndent the leftIndent to set
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.GetMirrorIndent">
            Get the value indicating if document has mirrored indents.
            
            @return the mirrorIndent
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.SetMirrorIndent(System.Int32)">
            Set the mirrored indent value from the parsed value.
            
            @param mirrorIndent the mirrorIndent to set
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.GetRightIndent">
            Get the right indent value.
            
            @return the rightIndent
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.SetRightIndent(System.Int32)">
            Set the right indent value.
            
            @param rightIndent the rightIndent to set
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.GetOverrideWidowControl">
            Get the ovirride widow control value.
            
            @return the overrideWidowControl
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.SetOverrideWidowControl(System.Int32)">
            Set the override widow control.
            
            @param overrideWidowControl the overrideWidowControl to set
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.GetAutoSpaceBetweenDBCEnglish">
            Get the auto space between DBC and English indicator.
            
            @return the autoSpaceBetweenDBCEnglish
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.SetAutoSpaceBetweenDBCEnglish(System.Int32)">
            Set the auto space between DBC and English indicator.
            
            @param autoSpaceBetweenDBCEnglish the autoSpaceBetweenDBCEnglish to set
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.GetAutoSpaceBetweenDBCNumbers">
            Get the auto space between DBC and Numbers indicator.
            @return the autoSpaceBetweenDBCNumbers
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.SetAutoSpaceBetweenDBCNumbers(System.Int32)">
            Set the auto space between DBC and Numbers indicator.
            @param autoSpaceBetweenDBCNumbers the autoSpaceBetweenDBCNumbers to set
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.GetNoCharacterWrapping">
            Get no character wrapping indicator.
            
            @return the noCharacterWrapping
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.SetNoCharacterWrapping(System.Int32)">
            Set the no character wrapping indicator from parsed value
            
            @param noCharacterWrapping the noCharacterWrapping to set
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.GetNoOverflowPeriodComma">
            Get the no overflow period comma indicator.
            
            @return the noOverflowPeriodComma
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.SetNoOverflowPeriodComma(System.Int32)">
            Set the no overflow period comma indicator from the parsed value.
            
            @param noOverflowPeriodComma the noOverflowPeriodComma to set
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.GetNoWordWrapping">
            Get the no word wrapping indicator.
            
            @return the noWordWrapping
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.SetNoWordWrapping(System.Int32)">
            Set the no word wrapping indicator from the parsed value.
            
            @param noWordWrapping the noWordWrapping to set
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.GetStyleNr">
            Get this style number.
            
            @return the styleNr
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.SetStyleNr(System.Int32)">
            Set this style number from the parsed value.
            
            @param styleNr the styleNr to set
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.GetStyleType">
            Get this style type.
            For example Style, Character Style, etc.
            
            @return the styleType
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationStylesheetTable.SetStyleType(System.Int32)">
            Set the style type.
            
            @param styleType the styleType to set
        </member>
        <member name="T:iTextSharp.text.rtf.parser.destinations.RtfDestinationDocument">
             <code>RtfDestinationDocument</code> handles data destined for the document destination
             
             @author Howard Shank (hgshank@yahoo.com)
            
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationDocument.rtfDoc">
            The RtfDocument object.
            
            @see com.lowagie.text.rtf.document.RtfDocument
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationDocument.doc">
            The iText Document object.
            
            @see com.lowagie.text.Document
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationDocument.conversionType">
            Indicates the parser action. Import or Conversion.
            
            @see com.lowagie.text.rtf.direct.RtfParser#TYPE_UNIDENTIFIED
            @see com.lowagie.text.rtf.direct.RtfParser#TYPE_CONVERT
            @see com.lowagie.text.rtf.direct.RtfParser#TYPE_IMPORT_FRAGMENT
            @see com.lowagie.text.rtf.direct.RtfParser#TYPE_IMPORT_FULL
        </member>
        <member name="F:iTextSharp.text.rtf.parser.destinations.RtfDestinationDocument.tableLevel">
            Indicates the current table level being processed
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationDocument.#ctor(iTextSharp.text.rtf.parser.RtfParser)">
            Constructs a new <code>RtfDestinationDocument</code> using
            the parameters to initialize the object.
            @param rtfDoc The <code>RtfDocument</code> this works with.
            @param doc The iText <code>Document</code> this works with.
            @param type The type of conversion being done.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationDocument.WriteBuffer">
            Write the accumulated buffer to the destination.
            Used for direct content
        </member>
        <member name="M:iTextSharp.text.rtf.parser.destinations.RtfDestinationDocument.WriteText(System.String)">
            Write the string value to the destiation.
            Used for direct content
            @param value
        </member>
        <member name="T:iTextSharp.text.rtf.list.RtfListTable">
            The RtfListTable manages all RtfLists in one RtfDocument. It also generates
            the list and list override tables in the document header.
            
            @version $Version:$
            @author Mark Hall (Mark.Hall@mail.room3b.eu)
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListTable.LIST_TABLE">
            Constant for the list table
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListTable.LIST_OVERRIDE_TABLE">
            Constant for the list override table
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListTable.LIST_OVERRIDE">
            Constant for the list override
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListTable.LIST_OVERRIDE_COUNT">
            Constant for the list override count
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListTable.lists">
            The RtfLists managed by this RtfListTable
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListTable.picturelists">
            The RtfPictureList lists managed by this RtfListTable
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListTable.#ctor(iTextSharp.text.rtf.document.RtfDocument)">
            Constructs a RtfListTable for a RtfDocument
            
            @param doc The RtfDocument this RtfListTable belongs to
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListTable.WriteContent(System.IO.Stream)">
            unused
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListTable.WriteDefinition(System.IO.Stream)">
            Writes the list and list override tables.
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListTable.GetListNumber(iTextSharp.text.rtf.list.RtfList)">
            Gets the id of the specified RtfList. If the RtfList is not yet in the
            list of RtfLists, then it is added.
            
            @param list The RtfList for which to get the id.
            @return The id of the RtfList.
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListTable.FreeListNumber(iTextSharp.text.rtf.list.RtfList)">
            Remove a RtfList from the list of RtfLists
            
            @param list The RtfList to remove.
        </member>
        <member name="T:iTextSharp.text.RomanList">
            
            A special-version of <CODE>LIST</CODE> which use roman-letters.
            
            @see com.lowagie.text.List
            @version 2003-06-22
            @author Michael Niedermair
        </member>
        <member name="M:iTextSharp.text.RomanList.#ctor">
            Initialization
        </member>
        <member name="M:iTextSharp.text.RomanList.#ctor(System.Int32)">
            Initialization
            
            @param symbolIndent    indent
        </member>
        <member name="M:iTextSharp.text.RomanList.#ctor(System.Boolean,System.Int32)">
            Initialization 
            @param    romanlower        roman-char in lowercase   
            @param     symbolIndent    indent
        </member>
        <member name="M:iTextSharp.text.RomanList.Add(System.Object)">
             Adds an <CODE>Object</CODE> to the <CODE>List</CODE>.
            
             @param    o    the object to add.
             @return true if adding the object succeeded
        </member>
        <member name="T:iTextSharp.text.pdf.PdfEncryption">
            
             @author  Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.PdfEncryption.key">
            The encryption key for a particular object/generation 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfEncryption.keySize">
            The encryption key length for a particular object/generation 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfEncryption.mkey">
            The global encryption key 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfEncryption.extra">
            Work area to prepare the object/generation bytes 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfEncryption.md5">
            The message digest algorithm MD5 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfEncryption.ownerKey">
            The encryption key for the owner 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfEncryption.userKey">
            The encryption key for the user 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfEncryption.publicKeyHandler">
            The public key security handler for certificate encryption 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfEncryption.keyLength">
            The generic key length. It may be 40 or 128. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfEncryption.embeddedFilesOnly">
            Indicates if the encryption is only necessary for embedded files.
            @since 2.1.3
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncryption.IsEmbeddedFilesOnly">
            Indicates if only the embedded files have to be encrypted.
            @return  if true only the embedded files will be encrypted
            @since   2.1.3
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncryption.ComputeOwnerKey(System.Byte[],System.Byte[])">
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncryption.SetupGlobalEncryptionKey(System.Byte[],System.Byte[],System.Byte[],System.Int32)">
            
             ownerKey, documentID must be setuped
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncryption.SetupUserKey">
            
             mkey must be setuped
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncryption.SetupByUserPad(System.Byte[],System.Byte[],System.Byte[],System.Int32)">
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncryption.SetupByOwnerPassword(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Int32)">
        </member>
        <member name="T:iTextSharp.text.pdf.PdfDeveloperExtension">
            Beginning with BaseVersion 1.7, the extensions dictionary lets developers
            designate that a given document contains extensions to PDF. The presence
            of the extension dictionary in a document indicates that it may contain
            developer-specific PDF properties that extend a particular base version
            of the PDF specification.
            The extensions dictionary enables developers to identify their own extensions
            relative to a base version of PDF. Additionally, the convention identifies
            extension levels relative to that base version. The intent of this dictionary
            is to enable developers of PDF-producing applications to identify company-specific
            specifications (such as this one) that PDF-consuming applications use to
            interpret the extensions.
            @since   2.1.6
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDeveloperExtension.ADOBE_1_7_EXTENSIONLEVEL3">
            An instance of this class for Adobe 1.7 Extension level 3. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDeveloperExtension.prefix">
            The prefix used in the Extensions dictionary added to the Catalog. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDeveloperExtension.baseversion">
            The base version. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDeveloperExtension.extensionLevel">
            The extension level within the baseversion. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDeveloperExtension.#ctor(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfName,System.Int32)">
            Creates a PdfDeveloperExtension object.
            @param prefix    the prefix referring to the developer
            @param baseversion   the number of the base version
            @param extensionLevel    the extension level within the baseverion.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDeveloperExtension.GetDeveloperExtensions">
            Generations the developer extension dictionary corresponding
            with the prefix.
            @return  a PdfDictionary
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDeveloperExtension.Prefix">
            Gets the prefix name.
            @return  a PdfName
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDeveloperExtension.Baseversion">
            Gets the baseversion name.
            @return  a PdfName
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDeveloperExtension.ExtensionLevel">
            Gets the extension level within the baseversion.
            @return  an integer
        </member>
        <member name="T:iTextSharp.text.pdf.PdfDestination">
             A <CODE>PdfColor</CODE> defines a Color (it's a <CODE>PdfArray</CODE> containing 3 values).
            
             @see        PdfDictionary
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDestination.XYZ">
            This is a possible destination type 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDestination.FIT">
            This is a possible destination type 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDestination.FITH">
            This is a possible destination type 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDestination.FITV">
            This is a possible destination type 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDestination.FITR">
            This is a possible destination type 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDestination.FITB">
            This is a possible destination type 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDestination.FITBH">
            This is a possible destination type 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDestination.FITBV">
            This is a possible destination type 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDestination.status">
            Is the indirect reference to a page already added? 
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfDestination.#ctor(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfDestination.#ctor(System.Int32,System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfDestination.#ctor(System.Int32,System.Single,System.Single,System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfDestination.#ctor(System.Int32,System.Single,System.Single,System.Single,System.Single)" -->
        <member name="M:iTextSharp.text.pdf.PdfDestination.HasPage">
             Checks if an indirect reference to a page has been added.
            
             @return    <CODE>true</CODE> or <CODE>false</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDestination.AddPage(iTextSharp.text.pdf.PdfIndirectReference)">
            Adds the indirect reference of the destination page.
            
             @param page    an indirect reference
             @return true if the page reference was added
        </member>
        <member name="T:iTextSharp.text.pdf.EnumerateTTC">
            Enumerates all the fonts inside a True Type Collection.
            
             @author  Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.collection.PdfCollectionItem.schema">
            The PdfCollectionSchema with the names and types of the items. 
        </member>
        <member name="M:iTextSharp.text.pdf.collection.PdfCollectionItem.#ctor(iTextSharp.text.pdf.collection.PdfCollectionSchema)">
            Constructs a Collection Item that can be added to a PdfFileSpecification.
        </member>
        <member name="M:iTextSharp.text.pdf.collection.PdfCollectionItem.AddItem(System.String,System.String)">
            Sets the value of the collection item.
            @param value
        </member>
        <member name="M:iTextSharp.text.pdf.collection.PdfCollectionItem.AddItem(System.String,iTextSharp.text.pdf.PdfString)">
            Sets the value of the collection item.
            @param value
        </member>
        <member name="M:iTextSharp.text.pdf.collection.PdfCollectionItem.AddItem(System.String,iTextSharp.text.pdf.PdfDate)">
            Sets the value of the collection item.
            @param value
        </member>
        <member name="M:iTextSharp.text.pdf.collection.PdfCollectionItem.AddItem(System.String,iTextSharp.text.pdf.PdfNumber)">
            Sets the value of the collection item.
            @param value
        </member>
        <member name="M:iTextSharp.text.pdf.collection.PdfCollectionItem.AddItem(System.String,System.DateTime)">
            Sets the value of the collection item.
            @param value
        </member>
        <member name="M:iTextSharp.text.pdf.collection.PdfCollectionItem.AddItem(System.String,System.Int32)">
            Sets the value of the collection item.
            @param value
        </member>
        <member name="M:iTextSharp.text.pdf.collection.PdfCollectionItem.AddItem(System.String,System.Single)">
            Sets the value of the collection item.
            @param value
        </member>
        <member name="M:iTextSharp.text.pdf.collection.PdfCollectionItem.AddItem(System.String,System.Double)">
            Sets the value of the collection item.
            @param value
        </member>
        <member name="M:iTextSharp.text.pdf.collection.PdfCollectionItem.SetPrefix(System.String,System.String)">
            Adds a prefix for the Collection item.
            You can only use this method after you have set the value of the item.
            @param prefix    a prefix
        </member>
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.pdf.codec.PngImage" -->
        <member name="F:iTextSharp.text.pdf.codec.PngImage.IHDR">
            A PNG marker. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.PngImage.PLTE">
            A PNG marker. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.PngImage.IDAT">
            A PNG marker. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.PngImage.IEND">
            A PNG marker. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.PngImage.tRNS">
            A PNG marker. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.PngImage.pHYs">
            A PNG marker. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.PngImage.gAMA">
            A PNG marker. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.PngImage.cHRM">
            A PNG marker. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.PngImage.sRGB">
            A PNG marker. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.PngImage.iCCP">
            A PNG marker. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.PngImage.PNGID">
            Some PNG specific values. 
        </member>
        <member name="M:iTextSharp.text.pdf.codec.PngImage.#ctor(System.IO.Stream)">
            Creates a new instance of PngImage 
        </member>
        <member name="M:iTextSharp.text.pdf.codec.PngImage.GetImage(System.Uri)">
            Reads a PNG from an url.
            @param url the url
            @throws IOException on error
            @return the image
        </member>
        <member name="M:iTextSharp.text.pdf.codec.PngImage.GetImage(System.IO.Stream)">
            Reads a PNG from a stream.
            @param is the stream
            @throws IOException on error
            @return the image
        </member>
        <member name="M:iTextSharp.text.pdf.codec.PngImage.GetImage(System.String)">
            Reads a PNG from a file.
            @param file the file
            @throws IOException on error
            @return the image
        </member>
        <member name="M:iTextSharp.text.pdf.codec.PngImage.GetImage(System.Byte[])">
            Reads a PNG from a byte array.
            @param data the byte array
            @throws IOException on error
            @return the image
        </member>
        <member name="M:iTextSharp.text.pdf.codec.PngImage.GetInt(System.IO.Stream)">
             Gets an <CODE>int</CODE> from an <CODE>Stream</CODE>.
            
             @param		is      an <CODE>Stream</CODE>
             @return		the value of an <CODE>int</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.PngImage.GetWord(System.IO.Stream)">
             Gets a <CODE>word</CODE> from an <CODE>Stream</CODE>.
            
             @param		is      an <CODE>Stream</CODE>
             @return		the value of an <CODE>int</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.PngImage.GetString(System.IO.Stream)">
             Gets a <CODE>String</CODE> from an <CODE>Stream</CODE>.
            
             @param		is      an <CODE>Stream</CODE>
             @return		the value of an <CODE>int</CODE>
        </member>
        <member name="T:iTextSharp.text.pdf.ArabicLigaturizer">
             Shape arabic characters. This code was inspired by an LGPL'ed C library:
             Pango ( see http://www.pango.com/ ). Note that the code of this is the
             original work of Paulo Soares. Hence it is perfectly justifiable to distribute
             it under the MPL.
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.ArabicLigaturizer.DIGITS_EN2AN">
            Digit shaping option: Replace European digits (U+0030...U+0039) by Arabic-Indic digits.
        </member>
        <member name="F:iTextSharp.text.pdf.ArabicLigaturizer.DIGITS_AN2EN">
            Digit shaping option: Replace Arabic-Indic digits by European digits (U+0030...U+0039).
        </member>
        <member name="F:iTextSharp.text.pdf.ArabicLigaturizer.DIGITS_EN2AN_INIT_LR">
            Digit shaping option:
            Replace European digits (U+0030...U+0039) by Arabic-Indic digits
            if the most recent strongly directional character
            is an Arabic letter (its Bidi direction value is RIGHT_TO_LEFT_ARABIC).
            The initial state at the start of the text is assumed to be not an Arabic,
            letter, so European digits at the start of the text will not change.
            Compare to DIGITS_ALEN2AN_INIT_AL.
        </member>
        <member name="F:iTextSharp.text.pdf.ArabicLigaturizer.DIGITS_EN2AN_INIT_AL">
            Digit shaping option:
            Replace European digits (U+0030...U+0039) by Arabic-Indic digits
            if the most recent strongly directional character
            is an Arabic letter (its Bidi direction value is RIGHT_TO_LEFT_ARABIC).
            The initial state at the start of the text is assumed to be an Arabic,
            letter, so European digits at the start of the text will change.
            Compare to DIGITS_ALEN2AN_INT_LR.
        </member>
        <member name="F:iTextSharp.text.pdf.ArabicLigaturizer.DIGITS_RESERVED">
            Not a valid option value. 
        </member>
        <member name="F:iTextSharp.text.pdf.ArabicLigaturizer.DIGITS_MASK">
            Bit mask for digit shaping options.
        </member>
        <member name="F:iTextSharp.text.pdf.ArabicLigaturizer.DIGIT_TYPE_AN">
            Digit type option: Use Arabic-Indic digits (U+0660...U+0669).
        </member>
        <member name="F:iTextSharp.text.pdf.ArabicLigaturizer.DIGIT_TYPE_AN_EXTENDED">
            Digit type option: Use Eastern (Extended) Arabic-Indic digits (U+06f0...U+06f9).
        </member>
        <member name="F:iTextSharp.text.pdf.ArabicLigaturizer.DIGIT_TYPE_MASK">
            Bit mask for digit type options.
        </member>
        <member name="T:iTextSharp.text.PageSize">
            <summary>
            The PageSize-object contains a number of read only rectangles representing the most common paper sizes.
            </summary>
            <seealso cref="T:iTextSharp.text.RectangleReadOnly"/>
        </member>
        <member name="F:iTextSharp.text.PageSize.LETTER">
            This is the letter format 
        </member>
        <member name="F:iTextSharp.text.PageSize.NOTE">
            This is the note format 
        </member>
        <member name="F:iTextSharp.text.PageSize.LEGAL">
            This is the legal format 
        </member>
        <member name="F:iTextSharp.text.PageSize.TABLOID">
            This is the tabloid format 
        </member>
        <member name="F:iTextSharp.text.PageSize.EXECUTIVE">
            This is the executive format 
        </member>
        <member name="F:iTextSharp.text.PageSize.POSTCARD">
            This is the postcard format 
        </member>
        <member name="F:iTextSharp.text.PageSize.A0">
            This is the a0 format 
        </member>
        <member name="F:iTextSharp.text.PageSize.A1">
            This is the a1 format 
        </member>
        <member name="F:iTextSharp.text.PageSize.A2">
            This is the a2 format 
        </member>
        <member name="F:iTextSharp.text.PageSize.A3">
            This is the a3 format 
        </member>
        <member name="F:iTextSharp.text.PageSize.A4">
            This is the a4 format 
        </member>
        <member name="F:iTextSharp.text.PageSize.A5">
            This is the a5 format 
        </member>
        <member name="F:iTextSharp.text.PageSize.A6">
            This is the a6 format 
        </member>
        <member name="F:iTextSharp.text.PageSize.A7">
            This is the a7 format 
        </member>
        <member name="F:iTextSharp.text.PageSize.A8">
            This is the a8 format 
        </member>
        <member name="F:iTextSharp.text.PageSize.A9">
            This is the a9 format 
        </member>
        <member name="F:iTextSharp.text.PageSize.A10">
            This is the a10 format 
        </member>
        <member name="F:iTextSharp.text.PageSize.B0">
            This is the b0 format 
        </member>
        <member name="F:iTextSharp.text.PageSize.B1">
            This is the b1 format 
        </member>
        <member name="F:iTextSharp.text.PageSize.B2">
            This is the b2 format 
        </member>
        <member name="F:iTextSharp.text.PageSize.B3">
            This is the b3 format 
        </member>
        <member name="F:iTextSharp.text.PageSize.B4">
            This is the b4 format 
        </member>
        <member name="F:iTextSharp.text.PageSize.B5">
            This is the b5 format 
        </member>
        <member name="F:iTextSharp.text.PageSize.B6">
            This is the b6 format 
        </member>
        <member name="F:iTextSharp.text.PageSize.B7">
            This is the b7 format 
        </member>
        <member name="F:iTextSharp.text.PageSize.B8">
            This is the b8 format 
        </member>
        <member name="F:iTextSharp.text.PageSize.B9">
            This is the b9 format 
        </member>
        <member name="F:iTextSharp.text.PageSize.B10">
            This is the b10 format 
        </member>
        <member name="F:iTextSharp.text.PageSize.ARCH_E">
            This is the archE format 
        </member>
        <member name="F:iTextSharp.text.PageSize.ARCH_D">
            This is the archD format 
        </member>
        <member name="F:iTextSharp.text.PageSize.ARCH_C">
            This is the archC format 
        </member>
        <member name="F:iTextSharp.text.PageSize.ARCH_B">
            This is the archB format 
        </member>
        <member name="F:iTextSharp.text.PageSize.ARCH_A">
            This is the archA format 
        </member>
        <member name="F:iTextSharp.text.PageSize.FLSA">
            This is the American Foolscap format 
        </member>
        <member name="F:iTextSharp.text.PageSize.FLSE">
            This is the European Foolscap format 
        </member>
        <member name="F:iTextSharp.text.PageSize.HALFLETTER">
            This is the halfletter format 
        </member>
        <member name="F:iTextSharp.text.PageSize._11X17">
            This is the 11x17 format 
        </member>
        <member name="F:iTextSharp.text.PageSize.ID_1">
            This is the ISO 7810 ID-1 format (85.60 x 53.98 mm or 3.370 x 2.125 inch) 
        </member>
        <member name="F:iTextSharp.text.PageSize.ID_2">
            This is the ISO 7810 ID-2 format (A7 rotated) 
        </member>
        <member name="F:iTextSharp.text.PageSize.ID_3">
            This is the ISO 7810 ID-3 format (B7 rotated) 
        </member>
        <member name="F:iTextSharp.text.PageSize.LEDGER">
            This is the ledger format 
        </member>
        <member name="F:iTextSharp.text.PageSize.CROWN_QUARTO">
            This is the Crown Quarto format 
        </member>
        <member name="F:iTextSharp.text.PageSize.LARGE_CROWN_QUARTO">
            This is the Large Crown Quarto format 
        </member>
        <member name="F:iTextSharp.text.PageSize.DEMY_QUARTO">
            This is the Demy Quarto format. 
        </member>
        <member name="F:iTextSharp.text.PageSize.ROYAL_QUARTO">
            This is the Royal Quarto format. 
        </member>
        <member name="F:iTextSharp.text.PageSize.CROWN_OCTAVO">
            This is the Crown Octavo format 
        </member>
        <member name="F:iTextSharp.text.PageSize.LARGE_CROWN_OCTAVO">
            This is the Large Crown Octavo format 
        </member>
        <member name="F:iTextSharp.text.PageSize.DEMY_OCTAVO">
            This is the Demy Octavo format 
        </member>
        <member name="F:iTextSharp.text.PageSize.ROYAL_OCTAVO">
            This is the Royal Octavo format. 
        </member>
        <member name="F:iTextSharp.text.PageSize.SMALL_PAPERBACK">
            This is the small paperback format. 
        </member>
        <member name="F:iTextSharp.text.PageSize.PENGUIN_SMALL_PAPERBACK">
            This is the Pengiun small paperback format. 
        </member>
        <member name="F:iTextSharp.text.PageSize.PENGUIN_LARGE_PAPERBACK">
            This is the Penguin large paparback format. 
        </member>
        <member name="M:iTextSharp.text.PageSize.GetRectangle(System.String)">
            This method returns a Rectangle based on a String.
            Possible values are the the names of a constant in this class
            (for instance "A4", "LETTER",...) or a value like "595 842"
        </member>
        <member name="T:iTextSharp.text.html.HtmlTagMap">
            The <CODE>Tags</CODE>-class maps several XHTML-tags to iText-objects.
        </member>
        <member name="M:iTextSharp.text.html.HtmlTagMap.#ctor">
            Constructs an HtmlTagMap.
        </member>
        <member name="M:iTextSharp.text.html.HtmlTagMap.IsHtml(System.String)">
            Checks if this is the root tag.
            @param tag a tagvalue
            @return true if tag is HTML or html
        </member>
        <member name="M:iTextSharp.text.html.HtmlTagMap.IsHead(System.String)">
            Checks if this is the head tag.
            @param tag a tagvalue
            @return true if tag is HEAD or head
        </member>
        <member name="M:iTextSharp.text.html.HtmlTagMap.IsMeta(System.String)">
            Checks if this is the meta tag.
            @param tag a tagvalue
            @return true if tag is META or meta
        </member>
        <member name="M:iTextSharp.text.html.HtmlTagMap.IsLink(System.String)">
            Checks if this is the linl tag.
            @param tag a tagvalue
            @return true if tag is LINK or link
        </member>
        <member name="M:iTextSharp.text.html.HtmlTagMap.IsTitle(System.String)">
            Checks if this is the title tag.
            @param tag a tagvalue
            @return true if tag is TITLE or title
        </member>
        <member name="M:iTextSharp.text.html.HtmlTagMap.IsBody(System.String)">
            Checks if this is the root tag.
            @param tag a tagvalue
            @return true if tag is BODY or body
        </member>
        <member name="M:iTextSharp.text.html.HtmlTagMap.IsSpecialTag(System.String)">
            Checks if this is a special tag.
            @param tag a tagvalue
            @return true if tag is a HTML, HEAD, META, LINK or BODY tag (case insensitive)
        </member>
        <member name="T:iTextSharp.text.html.HtmlParser">
            <summary>
            This class can be used to parse an XML file.
            </summary>
        </member>
        <member name="M:iTextSharp.text.html.HtmlParser.#ctor">
            <summary>
            Constructs an XmlParser.
            </summary>
        </member>
        <member name="M:iTextSharp.text.html.HtmlParser.Go(iTextSharp.text.IDocListener,System.Xml.XmlDocument)">
            <summary>
            Parses a given file.
            </summary>
            <param name="document"></param>
            <param name="file"></param>
        </member>
        <member name="M:iTextSharp.text.html.HtmlParser.Go(iTextSharp.text.IDocListener,System.String)">
            <summary>
            Parses a given file.
            </summary>
            <param name="document"></param>
            <param name="file"></param>
        </member>
        <member name="M:iTextSharp.text.html.HtmlParser.Go(iTextSharp.text.IDocListener,System.Xml.XmlTextReader)">
            <summary>
            Parses a given XmlTextReader.
            </summary>
            <param name="document"></param>
            <param name="reader"></param>
        </member>
        <member name="M:iTextSharp.text.html.HtmlParser.Go(iTextSharp.text.IDocListener,System.Xml.XmlDocument,System.Xml.XmlDocument)">
            <summary>
            Parses a given file.
            </summary>
            <param name="document"></param>
            <param name="file"></param>
            <param name="tagmap"></param>
        </member>
        <member name="M:iTextSharp.text.html.HtmlParser.Go(iTextSharp.text.IDocListener,System.Xml.XmlTextReader,System.String)">
            <summary>
            Parses a given XmlTextReader.
            </summary>
            <param name="document"></param>
            <param name="reader"></param>
            <param name="tagmap"></param>
        </member>
        <member name="M:iTextSharp.text.html.HtmlParser.Go(iTextSharp.text.IDocListener,System.String,System.String)">
            <summary>
            Parses a given file.
            </summary>
            <param name="document"></param>
            <param name="file"></param>
            <param name="tagmap"></param>
        </member>
        <member name="M:iTextSharp.text.html.HtmlParser.Go(iTextSharp.text.IDocListener,System.String,System.Collections.Hashtable)">
            <summary>
            Parses a given file.
            </summary>
            <param name="document"></param>
            <param name="file"></param>
            <param name="tagmap"></param>
        </member>
        <member name="M:iTextSharp.text.html.HtmlParser.Go(iTextSharp.text.IDocListener,System.Xml.XmlTextReader,System.Collections.Hashtable)">
            <summary>
            Parses a given XmlTextReader.
            </summary>
            <param name="document"></param>
            <param name="reader"></param>
            <param name="tagmap"></param>
        </member>
        <member name="M:iTextSharp.text.html.HtmlParser.Parse(iTextSharp.text.IDocListener,System.Xml.XmlDocument)">
            <summary>
            Parses a given file.
            </summary>
            <param name="document"></param>
            <param name="file"></param>
        </member>
        <member name="M:iTextSharp.text.html.HtmlParser.Parse(iTextSharp.text.IDocListener,System.String)">
            <summary>
            Parses a given file.
            </summary>
            <param name="document"></param>
            <param name="file"></param>
        </member>
        <member name="M:iTextSharp.text.html.HtmlParser.Parse(iTextSharp.text.IDocListener,System.Xml.XmlTextReader)">
            <summary>
            Parses a given XmlTextReader.
            </summary>
            <param name="document"></param>
            <param name="reader"></param>
        </member>
        <member name="M:iTextSharp.text.html.HtmlParser.Parse(iTextSharp.text.IDocListener,System.Xml.XmlDocument,System.Xml.XmlDocument)">
            <summary>
            Parses a given file.
            </summary>
            <param name="document"></param>
            <param name="file"></param>
            <param name="tagmap"></param>
        </member>
        <member name="M:iTextSharp.text.html.HtmlParser.Parse(iTextSharp.text.IDocListener,System.String,System.String)">
            <summary>
            Parses a given file.
            </summary>
            <param name="document"></param>
            <param name="file"></param>
            <param name="tagmap"></param>
        </member>
        <member name="M:iTextSharp.text.html.HtmlParser.Parse(iTextSharp.text.IDocListener,System.String,System.Collections.Hashtable)">
            <summary>
            Parses a given file.
            </summary>
            <param name="document"></param>
            <param name="file"></param>
            <param name="tagmap"></param>
        </member>
        <member name="M:iTextSharp.text.html.HtmlParser.Parse(iTextSharp.text.IDocListener,System.Xml.XmlTextReader,System.String)">
            <summary>
            Parses a given XmlTextReader.
            </summary>
            <param name="document"></param>
            <param name="reader"></param>
            <param name="tagmap"></param>
        </member>
        <member name="M:iTextSharp.text.html.HtmlParser.Parse(iTextSharp.text.IDocListener,System.Xml.XmlTextReader,System.Collections.Hashtable)">
            <summary>
            Parses a given XmlTextReader.
            </summary>
            <param name="document"></param>
            <param name="reader"></param>
            <param name="tagmap"></param>
        </member>
        <member name="F:iTextSharp.text.xml.xmp.LangAlt.DEFAULT">
            Key for the default language. 
        </member>
        <member name="M:iTextSharp.text.xml.xmp.LangAlt.#ctor(System.String)">
            Creates a Properties object that stores languages for use in an XmpSchema 
        </member>
        <member name="M:iTextSharp.text.xml.xmp.LangAlt.#ctor">
            Creates a Properties object that stores languages for use in an XmpSchema 
        </member>
        <member name="M:iTextSharp.text.xml.xmp.LangAlt.AddLanguage(System.String,System.String)">
            Add a language.
        </member>
        <member name="M:iTextSharp.text.xml.xmp.LangAlt.Process(System.Text.StringBuilder,System.String)">
            Process a property.
        </member>
        <member name="M:iTextSharp.text.xml.xmp.LangAlt.ToString">
            Creates a String that can be used in an XmpSchema.
        </member>
        <member name="T:iTextSharp.text.xml.TagMap">
            <summary>
            The <CODE>TagMap</CODE>-class maps several XHTML-tags to iText-objects.
            </summary>
        </member>
        <member name="M:iTextSharp.text.xml.TagMap.#ctor(System.String)">
            <summary>
            Constructs a Tagmap object
            </summary>
            <param name="tagfile">the file of tags to parse</param>
        </member>
        <member name="M:iTextSharp.text.xml.TagMap.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructs a Tagmap object
            </summary>
            <param name="tagfile">the file of tags to parse</param>
        </member>
        <member name="M:iTextSharp.text.xml.TagMap.Init(System.Xml.XmlDocument)">
            <summary>
            Parses the xml document
            </summary>
            <param name="tagfile"></param>
        </member>
        <member name="M:iTextSharp.text.xml.TagMap.Init(System.String)">
            <summary>
            Parses the xml document
            </summary>
            <param name="tagfile"></param>
        </member>
        <member name="F:iTextSharp.text.xml.TagMap.AttributeHandler.TAG">
            <summary> This is a tag </summary>
        </member>
        <member name="F:iTextSharp.text.xml.TagMap.AttributeHandler.ATTRIBUTE">
            <summary> This is a tag </summary>
        </member>
        <member name="F:iTextSharp.text.xml.TagMap.AttributeHandler.NAME">
            <summary> This is an attribute </summary>
        </member>
        <member name="F:iTextSharp.text.xml.TagMap.AttributeHandler.ALIAS">
            <summary> This is an attribute </summary>
        </member>
        <member name="F:iTextSharp.text.xml.TagMap.AttributeHandler.VALUE">
            <summary> This is an attribute </summary>
        </member>
        <member name="F:iTextSharp.text.xml.TagMap.AttributeHandler.CONTENT">
            <summary> This is an attribute </summary>
        </member>
        <member name="F:iTextSharp.text.xml.TagMap.AttributeHandler.tagMap">
            <summary> This is the tagmap using the AttributeHandler </summary>
        </member>
        <member name="F:iTextSharp.text.xml.TagMap.AttributeHandler.currentPeer">
            <summary> This is the current peer. </summary>
        </member>
        <member name="M:iTextSharp.text.xml.TagMap.AttributeHandler.#ctor(System.Collections.Hashtable)">
            <summary>
            Constructs a new SAXiTextHandler that will translate all the events
            triggered by the parser to actions on the <CODE>Document</CODE>-object.
            </summary>
            <param name="tagMap">A Hashtable containing XmlPeer-objects</param>
        </member>
        <member name="M:iTextSharp.text.xml.TagMap.AttributeHandler.StartElement(System.String,System.String,System.String,System.Collections.Hashtable)">
            <summary>
            This method gets called when a start tag is encountered.
            </summary>
            <param name="tag">the name of the tag that is encountered</param>
            <param name="lname"></param>
            <param name="n"></param>
            <param name="attrs">the list of attributes</param>
        </member>
        <member name="M:iTextSharp.text.xml.TagMap.AttributeHandler.IgnorableWhitespace(System.Char[],System.Int32,System.Int32)">
            <summary>
            This method gets called when ignorable white space encountered.
            </summary>
            <param name="ch">an array of characters</param>
            <param name="start">the start position in the array</param>
            <param name="length">the number of characters to read from the array</param>
        </member>
        <member name="M:iTextSharp.text.xml.TagMap.AttributeHandler.Characters(System.String,System.Int32,System.Int32)">
            <summary>
            This method gets called when characters are encountered.
            </summary>
            <param name="content">an array of characters</param>
            <param name="start">the start position in the array</param>
            <param name="length">the number of characters to read from the array</param>
        </member>
        <member name="M:iTextSharp.text.xml.TagMap.AttributeHandler.EndElement(System.String,System.String,System.String)">
            <summary>
            This method gets called when an end tag is encountered.
            </summary>
            <param name="tag">the name of the tag that ends</param>
            <param name="lname"></param>
            <param name="name"></param>
        </member>
        <member name="T:iTextSharp.text.rtf.parser.RtfImportMgr">
            The RtfImportHeader stores the docment header information from
            an RTF document that is being imported. Currently font and
            color settings are stored. The RtfImportHeader maintains a mapping
            from font and color numbers from the imported RTF document to
            the RTF document that is the target of the import. This guarantees
            that the merged document has the correct font and color settings.
            It also handles other list based items that need mapping, for example
            stylesheets and lists.
            
            @author Mark Hall (Mark.Hall@mail.room3b.eu)
            @author Howard Shank (hgshank@yahoo.com)
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfImportMgr.importFontMapping">
            The Hashtable storing the font number mappings.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfImportMgr.importColorMapping">
            The Hashtable storing the color number mapings.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfImportMgr.importStylesheetListMapping">
            The Hashtable storing the Stylesheet List number mapings.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfImportMgr.importListMapping">
            The Hashtable storing the List number mapings.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfImportMgr.rtfDoc">
            The RtfDocument to get font and color numbers from.
        </member>
        <member name="F:iTextSharp.text.rtf.parser.RtfImportMgr.doc">
            The Document.
            Used for conversions, but not imports.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfImportMgr.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.Document)">
            Constructs a new RtfImportHeader.
            
            @param rtfDoc The RtfDocument to get font and color numbers from.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfImportMgr.ImportFont(System.String,System.String)">
            Imports a font. The font name is looked up in the RtfDocumentHeader and
            then the mapping from original font number to actual font number is added.
            
            @param fontNr The original font number.
            @param fontName The font name to look up.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfImportMgr.ImportFont(System.String,System.String,System.Int32)">
            Imports a font. The font name is looked up in the RtfDocumentHeader and
            then the mapping from original font number to actual font number is added.
            
            @param fontNr The original font number.
            @param fontName The font name to look up.
            @param charset The characterset to use for the font.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfImportMgr.ImportFont(System.String,System.String,System.String,System.Int32)">
            Imports a font. The font name is looked up in the RtfDocumentHeader and
            then the mapping from original font number to actual font number is added.
            
            @param fontNr The original font number.
            @param fontName The font name to look up.
            @param charset The characterset to use for the font.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfImportMgr.MapFontNr(System.String)">
            Performs the mapping from the original font number to the actual
            font number in the resulting RTF document. If the font number was not
            seen during import (thus no mapping) then 0 is returned, guaranteeing
            that the font number is always valid.
            
            @param fontNr The font number to map.
            @return The mapped font number.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfImportMgr.ImportColor(System.String,iTextSharp.text.Color)">
            Imports a color value. The color number for the color defined
            by its red, green and blue values is determined and then the
            resulting mapping is added.
            
            @param colorNr The original color number.
            @param color The color to import.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfImportMgr.MapColorNr(System.String)">
            Performs the mapping from the original font number to the actual font
            number used in the RTF document. If the color number was not
            seen during import (thus no mapping) then 0 is returned, guaranteeing
            that the color number is always valid.
            
            @param colorNr The color number to map.
            @return The mapped color number
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfImportMgr.ImportList(System.String,System.String)">
            Imports a List value. The List number for the List defined
            is determined and then the resulting mapping is added.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfImportMgr.MapListNr(System.String)">
            Performs the mapping from the original list number to the actual
            list number in the resulting RTF document. If the list number was not
            seen during import (thus no mapping) then 0 is returned, guaranteeing
            that the list number is always valid.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfImportMgr.ImportStylesheetList(System.String,iTextSharp.text.List)">
            Imports a stylesheet list value. The stylesheet number for the stylesheet defined
            is determined and then the resulting mapping is added.
        </member>
        <member name="M:iTextSharp.text.rtf.parser.RtfImportMgr.MapStylesheetListNr(System.String)">
            Performs the mapping from the original stylesheet number to the actual
            stylesheet number in the resulting RTF document. If the stylesheet number was not
            seen during import (thus no mapping) then 0 is returned, guaranteeing
            that the stylesheet number is always valid.
        </member>
        <member name="T:iTextSharp.text.rtf.document.RtfGenerator">
            The RtfGenerator creates the (\*\generator ...} element. 
            
            @version $Id: RtfGenerator.cs,v 1.3 2008/05/13 11:25:44 psoares33 Exp $
            @author Howard Shank (hgshank@yahoo.com)
            @since 2.0.8 
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfGenerator.GENERATOR">
            Generator group starting tag
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfGenerator.#ctor(iTextSharp.text.rtf.document.RtfDocument)">
            Constructs a <code>RtfGenerator</code> belonging to a RtfDocument
            
            @param doc The <code>RtfDocument</code> this <code>RtfGenerator</code> belongs to
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfGenerator.WriteContent(System.IO.Stream)">
            Writes the RTF generator group.
        </member>
        <member name="T:iTextSharp.text.rtf.document.RtfDocumentHeader">
            The RtfDocumentHeader contains all classes required for the generation of
            the document header area.
            
            @version $Id: RtfDocumentHeader.cs,v 1.11 2008/05/16 19:30:51 psoares33 Exp $
            @author Mark Hall (Mark.Hall@mail.room3b.eu)
            @author Thomas Bickel (tmb99@inode.at)
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentHeader.TITLE_PAGE">
            Constant for the title page
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentHeader.FACING_PAGES">
            Constant for facing pages
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentHeader.codePage">
            The code page to use
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentHeader.colorList">
            Stores all the colors used in the document
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentHeader.fontList">
            Stores all the fonts used in the document
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentHeader.listTable">
            Manages List tables
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentHeader.stylesheetList">
            Stores all paragraph styles used in the document.
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentHeader.generator">
            Generator string in document
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentHeader.infoGroup">
            The information group with author/subject/keywords/title/producer/creationdate data
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentHeader.protectionSetting">
            The protection settings
            @since 2.1.1
            @author Howard Shank (hgshank@yahoo.com)
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentHeader.pageSetting">
            The page settings
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentHeader.header">
            The current RtfHeaderFooterGroup for the header
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentHeader.footer">
            The current RtfHeaderFooterGroup for the footer
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentHeader.#ctor(iTextSharp.text.rtf.document.RtfDocument)">
            Constructs a RtfDocumentHeader for a RtfDocument
            
            @param doc The RtfDocument this RtfDocumentHeader belongs to
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentHeader.Init">
            Initialises the RtfDocumentHeader.
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentHeader.WriteContent(System.IO.Stream)">
            Write the contents of the document header area.
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentHeader.WriteSectionDefinition(System.IO.Stream)">
            Writes the section definition data
            @param result
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentHeader.GetFontNumber(iTextSharp.text.rtf.style.RtfFont)">
             Gets the number of the specified RtfFont
            
             @param font The RtfFont for which to get the number
             @return The number of the font
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentHeader.GetColorNumber(iTextSharp.text.rtf.style.RtfColor)">
            Gets the number of the specified RtfColor
            
            @param color The RtfColor for which to get the number
            @return The number of the color
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentHeader.GetListNumber(iTextSharp.text.rtf.list.RtfList)">
            Gets the number of the specified RtfList
            
            @param list The RtfList for which to get the number
            @return The number of the list
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentHeader.GetRtfParagraphStyle(System.String)">
            Gets the RtfParagraphStyle with the given style name.
            
            @param styleName The style name of the RtfParagraphStyle to get. 
            @return The RtfParagraphStyle with the given style name or null.
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentHeader.FreeListNumber(iTextSharp.text.rtf.list.RtfList)">
            Removes a RtfList from the list table
            
            @param list The RtfList to remove
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentHeader.GetPageSetting">
            Gets the RtfPageSetting object of this RtfDocument
            
            @return The RtfPageSetting object
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentHeader.AddInfoElement(iTextSharp.text.rtf.document.RtfInfoElement)">
            Adds an RtfInfoElement to the list of RtfInfoElements
            
            @param rtfInfoElement The RtfInfoElement to add
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentHeader.SetHeader(iTextSharp.text.HeaderFooter)">
            Sets the current header to use
            
            @param header The HeaderFooter to use as header
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentHeader.SetFooter(iTextSharp.text.HeaderFooter)">
            Sets the current footer to use
            
            @param footer The HeaderFooter to use as footer
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentHeader.RegisterParagraphStyle(iTextSharp.text.rtf.style.RtfParagraphStyle)">
            Registers the RtfParagraphStyle for further use in the document.
            
            @param rtfParagraphStyle The RtfParagraphStyle to register.
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentHeader.ConvertHeaderFooter(iTextSharp.text.HeaderFooter,System.Int32)">
            Converts a HeaderFooter into a RtfHeaderFooterGroup. Depending on which class
            the HeaderFooter is, the correct RtfHeaderFooterGroup is created.
            
            @param hf The HeaderFooter to convert.
            @param type Whether the conversion is being done on a footer or header
            @return The converted RtfHeaderFooterGroup.
            @see com.lowagie.text.rtf.headerfooter.RtfHeaderFooter
            @see com.lowagie.text.rtf.headerfooter.RtfHeaderFooterGroup
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentHeader.GetListTable">
            Get the <code>RtfListTable</code> object.
            
            @return the ListTable object.
            @since 2.1.3
        </member>
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.pdf.SimpleBookmark" -->
        <member name="M:iTextSharp.text.pdf.SimpleBookmark.#ctor">
            Creates a new instance of SimpleBookmark 
        </member>
        <member name="M:iTextSharp.text.pdf.SimpleBookmark.GetNumber(iTextSharp.text.pdf.PdfIndirectReference)">
            Gets number of indirect. If type of directed indirect is PAGES, it refers PAGE object through KIDS.
            (Contributed by Kazuya Ujihara)
            @param indirect 
            2004-06-13
        </member>
        <member name="M:iTextSharp.text.pdf.SimpleBookmark.GetBookmark(iTextSharp.text.pdf.PdfReader)">
            Gets a <CODE>List</CODE> with the bookmarks. It returns <CODE>null</CODE> if
            the document doesn't have any bookmarks.
            @param reader the document
            @return a <CODE>List</CODE> with the bookmarks or <CODE>null</CODE> if the
            document doesn't have any
        </member>
        <member name="M:iTextSharp.text.pdf.SimpleBookmark.EliminatePages(System.Collections.ArrayList,System.Int32[])">
            Removes the bookmark entries for a number of page ranges. The page ranges
            consists of a number of pairs with the start/end page range. The page numbers
            are inclusive.
            @param list the bookmarks
            @param pageRange the page ranges, always in pairs.
        </member>
        <member name="M:iTextSharp.text.pdf.SimpleBookmark.ShiftPageNumbers(System.Collections.ArrayList,System.Int32,System.Int32[])">
            For the pages in range add the <CODE>pageShift</CODE> to the page number.
            The page ranges
            consists of a number of pairs with the start/end page range. The page numbers
            are inclusive.
            @param list the bookmarks
            @param pageShift the number to add to the pages in range
            @param pageRange the page ranges, always in pairs. It can be <CODE>null</CODE>
            to include all the pages
        </member>
        <member name="M:iTextSharp.text.pdf.SimpleBookmark.ExportToXMLNode(System.Collections.ArrayList,System.IO.TextWriter,System.Int32,System.Boolean)">
            Exports the bookmarks to XML. Only of use if the generation is to be include in
            some other XML document.
            @param list the bookmarks
            @param out the export destination. The writer is not closed
            @param indent the indentation level. Pretty printing significant only
            @param onlyASCII codes above 127 will always be escaped with &amp;#nn; if <CODE>true</CODE>,
            whatever the encoding
            @throws IOException on error
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.SimpleBookmark.ExportToXML(System.Collections.ArrayList,System.IO.Stream,System.String,System.Boolean)" -->
        <member name="M:iTextSharp.text.pdf.SimpleBookmark.ExportToXML(System.Collections.ArrayList,System.IO.TextWriter,System.String,System.Boolean)">
            Exports the bookmarks to XML.
            @param list the bookmarks
            @param wrt the export destination. The writer is not closed
            @param encoding the encoding according to IANA conventions
            @param onlyASCII codes above 127 will always be escaped with &amp;#nn; if <CODE>true</CODE>,
            whatever the encoding
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.SimpleBookmark.ImportFromXML(System.IO.Stream)">
            Import the bookmarks from XML.
            @param in the XML source. The stream is not closed
            @throws IOException on error
            @return the bookmarks
        </member>
        <member name="M:iTextSharp.text.pdf.SimpleBookmark.ImportFromXML(System.IO.TextReader)">
            Import the bookmarks from XML.
            @param in the XML source. The reader is not closed
            @throws IOException on error
            @return the bookmarks
        </member>
        <member name="T:iTextSharp.text.pdf.PRTokeniser">
            
             @author  Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="T:iTextSharp.text.pdf.PdfTable">
             <CODE>PdfTable</CODE> is an object that contains the graphics and text of a table.
            
             @see     iTextSharp.text.Table
             @see     iTextSharp.text.Row
             @see     iTextSharp.text.Cell
             @see     PdfCell
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTable.columns">
            this is the number of columns in the table. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTable.headercells">
            this is the ArrayList with all the cell of the table header. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTable.cells">
            this is the ArrayList with all the cells in the table. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTable.table">
            Original table used to build this object
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTable.positions">
            Cached column widths. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfTable.#ctor(iTextSharp.text.Table,System.Single,System.Single,System.Single)">
             Constructs a <CODE>PdfTable</CODE>-object.
            
             @param   table   a <CODE>Table</CODE>
             @param   left    the left border on the page
             @param   right   the right border on the page
             @param   top     the start position of the top of the table
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfTable.UpdateRowAdditions" -->
        <member name="M:iTextSharp.text.pdf.PdfTable.UpdateRowAdditionsInternal">
            Updates the table row additions in the underlying table object
        </member>
        <member name="M:iTextSharp.text.pdf.PdfTable.HasHeader">
             Checks if there is a table header.
            
             @return  an <CODE>ArrayList</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfTable.HasToFitPageTable">
             Checks if this <CODE>Table</CODE> has to fit a page.
            
             @return  true if the table may not be split
        </member>
        <member name="M:iTextSharp.text.pdf.PdfTable.HasToFitPageCells">
             Checks if the cells of this <CODE>Table</CODE> have to fit a page.
            
             @return  true if the cells may not be split
        </member>
        <member name="P:iTextSharp.text.pdf.PdfTable.Rows">
            Get the number of rows
        </member>
        <member name="P:iTextSharp.text.pdf.PdfTable.Type">
            @see com.lowagie.text.Element#type() 
        </member>
        <member name="P:iTextSharp.text.pdf.PdfTable.HeaderCells">
             Returns the arraylist with the cells of the table header.
            
             @return  an <CODE>ArrayList</CODE>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfTable.Cells">
             Returns the arraylist with the cells of the table.
            
             @return  an <CODE>ArrayList</CODE>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfTable.Columns">
             Returns the number of columns of the table.
            
             @return  the number of columns
        </member>
        <member name="P:iTextSharp.text.pdf.PdfTable.Cellpadding">
             Returns the cellpadding of the table.
            
             @return  the cellpadding
        </member>
        <member name="P:iTextSharp.text.pdf.PdfTable.Cellspacing">
             Returns the cellspacing of the table.
            
             @return  the cellspacing
        </member>
        <member name="P:iTextSharp.text.pdf.PdfTable.Offset">
             Gets the offset of this table.
            
             @return  the space between this table and the previous element.
        </member>
        <member name="T:iTextSharp.text.pdf.PdfFileSpecification">
            Specifies a file or an URL. The file can be extern or embedded.
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfFileSpecification.#ctor">
            Creates a new instance of PdfFileSpecification. The static methods are preferred. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfFileSpecification.Url(iTextSharp.text.pdf.PdfWriter,System.String)">
            Creates a file specification of type URL.
            @param writer the <CODE>PdfWriter</CODE>
            @param url the URL
            @return the file specification
        </member>
        <member name="M:iTextSharp.text.pdf.PdfFileSpecification.FileEmbedded(iTextSharp.text.pdf.PdfWriter,System.String,System.String,System.Byte[])">
            Creates a file specification with the file embedded. The file may
            come from the file system or from a byte array. The data is flate compressed.
            @param writer the <CODE>PdfWriter</CODE>
            @param filePath the file path
            @param fileDisplay the file information that is presented to the user
            @param fileStore the byte array with the file. If it is not <CODE>null</CODE>
            it takes precedence over <CODE>filePath</CODE>
            @throws IOException on error
            @return the file specification
        </member>
        <member name="M:iTextSharp.text.pdf.PdfFileSpecification.FileEmbedded(iTextSharp.text.pdf.PdfWriter,System.String,System.String,System.Byte[],System.Int32)">
            Creates a file specification with the file embedded. The file may
            come from the file system or from a byte array. The data is flate compressed.
            @param writer the <CODE>PdfWriter</CODE>
            @param filePath the file path
            @param fileDisplay the file information that is presented to the user
            @param fileStore the byte array with the file. If it is not <CODE>null</CODE>
            it takes precedence over <CODE>filePath</CODE>
            @param compressionLevel   the compression level to be used for compressing the file
            it takes precedence over <CODE>filePath</CODE>
            @throws IOException on error
            @return the file specification
            @since    2.1.3
        </member>
        <member name="M:iTextSharp.text.pdf.PdfFileSpecification.FileEmbedded(iTextSharp.text.pdf.PdfWriter,System.String,System.String,System.Byte[],System.Boolean)">
            Creates a file specification with the file embedded. The file may
            come from the file system or from a byte array.
            @param writer the <CODE>PdfWriter</CODE>
            @param filePath the file path
            @param fileDisplay the file information that is presented to the user
            @param fileStore the byte array with the file. If it is not <CODE>null</CODE>
            it takes precedence over <CODE>filePath</CODE>
            @param compress sets the compression on the data. Multimedia content will benefit little
            from compression
            @throws IOException on error
            @return the file specification
        </member>
        <member name="M:iTextSharp.text.pdf.PdfFileSpecification.FileEmbedded(iTextSharp.text.pdf.PdfWriter,System.String,System.String,System.Byte[],System.Boolean,System.String,iTextSharp.text.pdf.PdfDictionary)">
            Creates a file specification with the file embedded. The file may
            come from the file system or from a byte array.
            @param writer the <CODE>PdfWriter</CODE>
            @param filePath the file path
            @param fileDisplay the file information that is presented to the user
            @param fileStore the byte array with the file. If it is not <CODE>null</CODE>
            it takes precedence over <CODE>filePath</CODE>
            @param compress sets the compression on the data. Multimedia content will benefit little
            from compression
            @param mimeType the optional mimeType
            @param fileParameter the optional extra file parameters such as the creation or modification date
            @throws IOException on error
            @return the file specification
        </member>
        <member name="M:iTextSharp.text.pdf.PdfFileSpecification.FileEmbedded(iTextSharp.text.pdf.PdfWriter,System.String,System.String,System.Byte[],System.String,iTextSharp.text.pdf.PdfDictionary,System.Int32)">
            Creates a file specification with the file embedded. The file may
            come from the file system or from a byte array.
            @param writer the <CODE>PdfWriter</CODE>
            @param filePath the file path
            @param fileDisplay the file information that is presented to the user
            @param fileStore the byte array with the file. If it is not <CODE>null</CODE>
            it takes precedence over <CODE>filePath</CODE>
            @param mimeType the optional mimeType
            @param fileParameter the optional extra file parameters such as the creation or modification date
            @param compressionLevel the level of compression
            @throws IOException on error
            @return the file specification
            @since   2.1.3
        </member>
        <member name="M:iTextSharp.text.pdf.PdfFileSpecification.FileExtern(iTextSharp.text.pdf.PdfWriter,System.String)">
            Creates a file specification for an external file.
            @param writer the <CODE>PdfWriter</CODE>
            @param filePath the file path
            @return the file specification
        </member>
        <member name="M:iTextSharp.text.pdf.PdfFileSpecification.SetUnicodeFileName(System.String,System.Boolean)">
            Adds the unicode file name (the key /UF). This entry was introduced
            in PDF 1.7. The filename must have the slash and backslash escaped
            according to the file specification rules.
            @param filename  the filename
            @param unicode   if true, the filename is UTF-16BE encoded; otherwise PDFDocEncoding is used;
        </member>
        <member name="M:iTextSharp.text.pdf.PdfFileSpecification.AddDescription(System.String,System.Boolean)">
            Adds a description for the file that is specified here.
            @param description   some text
            @param unicode       if true, the text is added as a unicode string
        </member>
        <member name="M:iTextSharp.text.pdf.PdfFileSpecification.AddCollectionItem(iTextSharp.text.pdf.collection.PdfCollectionItem)">
            Adds the Collection item dictionary.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfFileSpecification.Reference">
            Gets the indirect reference to this file specification.
            Multiple invocations will retrieve the same value.
            @throws IOException on error
            @return the indirect reference
        </member>
        <member name="P:iTextSharp.text.pdf.PdfFileSpecification.MultiByteFileName">
            Sets the file name (the key /F) string as an hex representation
            to support multi byte file names. The name must have the slash and
            backslash escaped according to the file specification rules
            @param fileName the file name as a byte array
        </member>
        <member name="P:iTextSharp.text.pdf.PdfFileSpecification.Volatile">
            Sets a flag that indicates whether an external file referenced by the file
            specification is volatile. If the value is true, applications should never
            cache a copy of the file.
            @param volatile_file if true, the external file should not be cached
        </member>
        <member name="T:iTextSharp.text.pdf.PdfCopyFields">
            Concatenates PDF documents including form fields. The rules for the form field
            concatenation are the same as in Acrobat. All the documents are kept in memory unlike
            PdfCopy.
            @author  Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyFields.#ctor(System.IO.Stream)">
            Creates a new instance.
            @param os the output stream
            @throws DocumentException on error
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyFields.#ctor(System.IO.Stream,System.Char)">
            Creates a new instance.
            @param os the output stream
            @param pdfVersion the pdf version the output will have
            @throws DocumentException on error
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyFields.AddDocument(iTextSharp.text.pdf.PdfReader)">
            Concatenates a PDF document.
            @param reader the PDF document
            @throws DocumentException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyFields.AddDocument(iTextSharp.text.pdf.PdfReader,System.Collections.ArrayList)">
            Concatenates a PDF document selecting the pages to keep. The pages are described as a
            <CODE>List</CODE> of <CODE>Integer</CODE>. The page ordering can be changed but
            no page repetitions are allowed.
            @param reader the PDF document
            @param pagesToKeep the pages to keep
            @throws DocumentException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyFields.AddDocument(iTextSharp.text.pdf.PdfReader,System.String)">
            Concatenates a PDF document selecting the pages to keep. The pages are described as
            ranges. The page ordering can be changed but
            no page repetitions are allowed.
            @param reader the PDF document
            @param ranges the comma separated ranges as described in {@link SequenceList}
            @throws DocumentException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyFields.SetEncryption(System.Byte[],System.Byte[],System.Int32,System.Boolean)">
            Sets the encryption options for this document. The userPassword and the
             ownerPassword can be null or have zero length. In this case the ownerPassword
             is replaced by a random string. The open permissions for the document can be
             AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
             AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
             The permissions can be combined by ORing them.
            @param userPassword the user password. Can be null or empty
            @param ownerPassword the owner password. Can be null or empty
            @param permissions the user permissions
            @param strength128Bits <code>true</code> for 128 bit key length, <code>false</code> for 40 bit key length
            @throws DocumentException if the document is already open
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyFields.SetEncryption(System.Boolean,System.String,System.String,System.Int32)">
            Sets the encryption options for this document. The userPassword and the
             ownerPassword can be null or have zero length. In this case the ownerPassword
             is replaced by a random string. The open permissions for the document can be
             AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
             AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
             The permissions can be combined by ORing them.
            @param strength true for 128 bit key length. false for 40 bit key length
            @param userPassword the user password. Can be null or empty
            @param ownerPassword the owner password. Can be null or empty
            @param permissions the user permissions
            @throws DocumentException if the document is already open
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyFields.Close">
            Closes the output document.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyFields.Open">
            Opens the document. This is usually not needed as AddDocument() will do it
            automatically.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyFields.AddJavaScript(System.String)">
            Adds JavaScript to the global document
            @param js the JavaScript
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.PdfCopyFields.SetFullCompression" -->
        <member name="M:iTextSharp.text.pdf.PdfCopyFields.SetEncryption(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            @see com.lowagie.text.pdf.interfaces.PdfEncryptionSettings#setEncryption(byte[], byte[], int, int)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyFields.AddViewerPreference(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfObject)">
            @see com.lowagie.text.pdf.interfaces.PdfViewerPreferences#addViewerPreference(com.lowagie.text.pdf.PdfName, com.lowagie.text.pdf.PdfObject)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyFields.SetEncryption(Org.BouncyCastle.X509.X509Certificate[],System.Int32[],System.Int32)">
            @see com.lowagie.text.pdf.interfaces.PdfEncryptionSettings#setEncryption(java.security.cert.Certificate[], int[], int)
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCopyFields.Outlines">
            Sets the bookmarks. The list structure is defined in
            {@link SimpleBookmark}.
            @param outlines the bookmarks or <CODE>null</CODE> to remove any
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCopyFields.Writer">
            Gets the underlying PdfWriter.
            @return the underlying PdfWriter
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCopyFields.FullCompression">
            Gets the 1.5 compression status.
            @return <code>true</code> if the 1.5 compression is on
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCopyFields.ViewerPreferences">
            @see com.lowagie.text.pdf.interfaces.PdfViewerPreferences#setViewerPreferences(int)
        </member>
        <member name="T:iTextSharp.text.pdf.PdfContentParser">
            Parses the page or template content.
            @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentParser.COMMAND_TYPE">
            Commands have this type.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentParser.tokeniser">
            Holds value of property tokeniser.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentParser.#ctor(iTextSharp.text.pdf.PRTokeniser)">
            Creates a new instance of PdfContentParser
            @param tokeniser the tokeniser with the content
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentParser.Parse(System.Collections.ArrayList)">
            Parses a single command from the content. Each command is output as an array of arguments
            having the command itself as the last element. The returned array will be empty if the
            end of content was reached.
            @param ls an <CODE>ArrayList</CODE> to use. It will be cleared before using. If it's
            <CODE>null</CODE> will create a new <CODE>ArrayList</CODE>
            @return the same <CODE>ArrayList</CODE> given as argument or a new one
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentParser.GetTokeniser">
            Gets the tokeniser.
            @return the tokeniser.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentParser.ReadDictionary">
            Reads a dictionary. The tokeniser must be positioned past the "&lt;&lt;" token.
            @return the dictionary
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentParser.ReadArray">
            Reads an array. The tokeniser must be positioned past the "[" token.
            @return an array
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentParser.ReadPRObject">
            Reads a pdf object.
            @return the pdf object
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentParser.NextValidToken">
            Reads the next token skipping over the comments.
            @return <CODE>true</CODE> if a token was read, <CODE>false</CODE> if the end of content was reached
            @throws IOException on error
        </member>
        <member name="P:iTextSharp.text.pdf.PdfContentParser.Tokeniser">
            Sets the tokeniser.
            @param tokeniser the tokeniser
        </member>
        <member name="M:iTextSharp.text.pdf.crypto.ARCFOUREncryption.#ctor">
            Creates a new instance of ARCFOUREncryption 
        </member>
        <member name="M:iTextSharp.text.pdf.collection.PdfCollectionSort.#ctor(System.String)">
            Constructs a PDF Collection Sort Dictionary.
            @param key   the key of the field that will be used to sort entries
        </member>
        <member name="M:iTextSharp.text.pdf.collection.PdfCollectionSort.#ctor(System.String[])">
            Constructs a PDF Collection Sort Dictionary.
            @param keys  the keys of the fields that will be used to sort entries
        </member>
        <member name="M:iTextSharp.text.pdf.collection.PdfCollectionSort.SetSortOrder(System.Boolean)">
            Defines the sort order of the field (ascending or descending).
            @param ascending true is the default, use false for descending order
        </member>
        <member name="M:iTextSharp.text.pdf.collection.PdfCollectionSort.SetSortOrder(System.Boolean[])">
            Defines the sort order of the field (ascending or descending).
            @param ascending an array with every element corresponding with a name of a field.
        </member>
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.pdf.codec.TIFFDirectory" -->
        <member name="F:iTextSharp.text.pdf.codec.TIFFDirectory.isBigEndian">
            A bool storing the endianness of the stream. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TIFFDirectory.numEntries">
            The number of entries in the IFD. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TIFFDirectory.fields">
            An array of TIFFFields. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TIFFDirectory.fieldIndex">
            A Hashtable indexing the fields by tag number. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TIFFDirectory.IFDOffset">
            The offset of this IFD. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TIFFDirectory.nextIFDOffset">
            The offset of the next IFD. 
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFDirectory.#ctor">
            The default constructor. 
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFDirectory.#ctor(iTextSharp.text.pdf.RandomAccessFileOrArray,System.Int32)">
             Constructs a TIFFDirectory from a SeekableStream.
             The directory parameter specifies which directory to read from
             the linked list present in the stream; directory 0 is normally
             read but it is possible to store multiple images in a single
             TIFF file by maintaing multiple directories.
            
             @param stream a SeekableStream to read from.
             @param directory the index of the directory to read.
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFDirectory.#ctor(iTextSharp.text.pdf.RandomAccessFileOrArray,System.Int64,System.Int32)">
             Constructs a TIFFDirectory by reading a SeekableStream.
             The ifd_offset parameter specifies the stream offset from which
             to begin reading; this mechanism is sometimes used to store
             private IFDs within a TIFF file that are not part of the normal
             sequence of IFDs.
            
             @param stream a SeekableStream to read from.
             @param ifd_offset the long byte offset of the directory.
             @param directory the index of the directory to read beyond the
                    one at the current stream offset; zero indicates the IFD
                    at the current offset.
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFDirectory.GetNumEntries">
            Returns the number of directory entries. 
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFDirectory.GetField(System.Int32)">
            Returns the value of a given tag as a TIFFField,
            or null if the tag is not present.
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFDirectory.IsTagPresent(System.Int32)">
            Returns true if a tag appears in the directory.
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFDirectory.GetTags">
            Returns an ordered array of ints indicating the tag
            values.
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFDirectory.GetFields">
            Returns an array of TIFFFields containing all the fields
            in this directory.
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFDirectory.GetFieldAsByte(System.Int32,System.Int32)">
            Returns the value of a particular index of a given tag as a
            byte.  The caller is responsible for ensuring that the tag is
            present and has type TIFFField.TIFF_SBYTE, TIFF_BYTE, or
            TIFF_UNDEFINED.
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFDirectory.GetFieldAsByte(System.Int32)">
            Returns the value of index 0 of a given tag as a
            byte.  The caller is responsible for ensuring that the tag is
            present and has  type TIFFField.TIFF_SBYTE, TIFF_BYTE, or
            TIFF_UNDEFINED.
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFDirectory.GetFieldAsLong(System.Int32,System.Int32)">
            Returns the value of a particular index of a given tag as a
            long.  The caller is responsible for ensuring that the tag is
            present and has type TIFF_BYTE, TIFF_SBYTE, TIFF_UNDEFINED,
            TIFF_SHORT, TIFF_SSHORT, TIFF_SLONG or TIFF_LONG.
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFDirectory.GetFieldAsLong(System.Int32)">
            Returns the value of index 0 of a given tag as a
            long.  The caller is responsible for ensuring that the tag is
            present and has type TIFF_BYTE, TIFF_SBYTE, TIFF_UNDEFINED,
            TIFF_SHORT, TIFF_SSHORT, TIFF_SLONG or TIFF_LONG.
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFDirectory.GetFieldAsFloat(System.Int32,System.Int32)">
            Returns the value of a particular index of a given tag as a
            float.  The caller is responsible for ensuring that the tag is
            present and has numeric type (all but TIFF_UNDEFINED and
            TIFF_ASCII).
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFDirectory.GetFieldAsFloat(System.Int32)">
            Returns the value of index 0 of a given tag as a float.  The
            caller is responsible for ensuring that the tag is present and
            has numeric type (all but TIFF_UNDEFINED and TIFF_ASCII).
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFDirectory.GetFieldAsDouble(System.Int32,System.Int32)">
            Returns the value of a particular index of a given tag as a
            double.  The caller is responsible for ensuring that the tag is
            present and has numeric type (all but TIFF_UNDEFINED and
            TIFF_ASCII).
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFDirectory.GetFieldAsDouble(System.Int32)">
            Returns the value of index 0 of a given tag as a double.  The
            caller is responsible for ensuring that the tag is present and
            has numeric type (all but TIFF_UNDEFINED and TIFF_ASCII).
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFDirectory.GetNumDirectories(iTextSharp.text.pdf.RandomAccessFileOrArray)">
            Returns the number of image directories (subimages) stored in a
            given TIFF file, represented by a <code>SeekableStream</code>.
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFDirectory.IsBigEndian">
            Returns a bool indicating whether the byte order used in the
            the TIFF file is big-endian (i.e. whether the byte order is from
            the most significant to the least significant)
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFDirectory.GetIFDOffset">
            Returns the offset of the IFD corresponding to this
            <code>TIFFDirectory</code>.
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFDirectory.GetNextIFDOffset">
            Returns the offset of the next IFD after the IFD corresponding to this
            <code>TIFFDirectory</code>.
        </member>
        <!-- Badly formed XML comment ignored for member "T:iTextSharp.text.pdf.BarcodeEANSUPP" -->
        <member name="F:iTextSharp.text.pdf.BarcodeEANSUPP.ean">
            The barcode with the EAN/UPC.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEANSUPP.supp">
            The barcode with the supplemental.
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeEANSUPP.#ctor(iTextSharp.text.pdf.Barcode,iTextSharp.text.pdf.Barcode)">
            Creates new combined barcode.
            @param ean the EAN/UPC barcode
            @param supp the supplemental barcode
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.BarcodeEANSUPP.PlaceBarcode(iTextSharp.text.pdf.PdfContentByte,iTextSharp.text.Color,iTextSharp.text.Color)" -->
        <member name="P:iTextSharp.text.pdf.BarcodeEANSUPP.BarcodeSize">
            Gets the maximum area that the barcode and the text, if
            any, will occupy. The lower left corner is always (0, 0).
            @return the size the barcode occupies.
        </member>
        <member name="T:iTextSharp.text.pdf.BarcodeEAN">
            Generates barcodes in several formats: EAN13, EAN8, UPCA, UPCE,
             supplemental 2 and 5. The default parameters are:
             <pre>
            x = 0.8f;
            font = BaseFont.CreateFont("Helvetica", "winansi", false);
            size = 8;
            baseline = size;
            barHeight = size * 3;
            guardBars = true;
            codeType = EAN13;
            code = "";
             </pre>
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEAN.TOTALBARS_EAN13">
            The total number of bars for EAN13.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEAN.TOTALBARS_EAN8">
            The total number of bars for EAN8.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEAN.TOTALBARS_UPCE">
            The total number of bars for UPCE.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEAN.TOTALBARS_SUPP2">
            The total number of bars for supplemental 2.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEAN.TOTALBARS_SUPP5">
            The total number of bars for supplemental 5.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEAN.ODD">
            Marker for odd parity.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEAN.EVEN">
            Marker for even parity.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEAN.GUARD_EMPTY">
            The bar positions that are guard bars.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEAN.GUARD_UPCA">
            The bar positions that are guard bars.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEAN.GUARD_EAN13">
            The bar positions that are guard bars.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEAN.GUARD_EAN8">
            The bar positions that are guard bars.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEAN.GUARD_UPCE">
            The bar positions that are guard bars.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEAN.TEXTPOS_EAN13">
            The x coordinates to place the text.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEAN.TEXTPOS_EAN8">
            The x coordinates to place the text.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEAN.BARS">
            The basic bar widths.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEAN.PARITY13">
            Sequence of parities to be used with EAN13.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEAN.PARITY2">
            Sequence of parities to be used with supplemental 2.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEAN.PARITY5">
            Sequence of parities to be used with supplemental 2.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEAN.PARITYE">
            Sequence of parities to be used with UPCE.
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeEAN.#ctor">
            Creates new BarcodeEAN 
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeEAN.CalculateEANParity(System.String)">
            Calculates the EAN parity character.
            @param code the code
            @return the parity character
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeEAN.ConvertUPCAtoUPCE(System.String)">
            Converts an UPCA code into an UPCE code. If the code can not
            be converted a <CODE>null</CODE> is returned.
            @param text the code to convert. It must have 12 numeric characters
            @return the 8 converted digits or <CODE>null</CODE> if the
            code could not be converted
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeEAN.GetBarsEAN13(System.String)">
            Creates the bars for the barcode EAN13 and UPCA.
            @param _code the text with 13 digits
            @return the barcode
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeEAN.GetBarsEAN8(System.String)">
            Creates the bars for the barcode EAN8.
            @param _code the text with 8 digits
            @return the barcode
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeEAN.GetBarsUPCE(System.String)">
            Creates the bars for the barcode UPCE.
            @param _code the text with 8 digits
            @return the barcode
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeEAN.GetBarsSupplemental2(System.String)">
            Creates the bars for the barcode supplemental 2.
            @param _code the text with 2 digits
            @return the barcode
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeEAN.GetBarsSupplemental5(System.String)">
            Creates the bars for the barcode supplemental 5.
            @param _code the text with 5 digits
            @return the barcode
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTextSharp.text.pdf.BarcodeEAN.PlaceBarcode(iTextSharp.text.pdf.PdfContentByte,iTextSharp.text.Color,iTextSharp.text.Color)" -->
        <member name="P:iTextSharp.text.pdf.BarcodeEAN.BarcodeSize">
            Gets the maximum area that the barcode and the text, if
            any, will occupy. The lower left corner is always (0, 0).
            @return the size the barcode occupies.
        </member>
        <member name="T:iTextSharp.text.Jpeg">
            <summary>
            An Jpeg is the representation of a graphic element (JPEG)
            that has to be inserted into the document
            </summary>
            <seealso cref="T:iTextSharp.text.Element"/>
            <seealso cref="T:iTextSharp.text.Image"/>
            <seealso cref="T:iTextSharp.text.Gif"/>
            <seealso cref="T:iTextSharp.text.Png"/>
        </member>
        <member name="F:iTextSharp.text.Jpeg.NOT_A_MARKER">
            <summary> This is a type of marker. </summary>
        </member>
        <member name="F:iTextSharp.text.Jpeg.VALID_MARKER">
            <summary> This is a type of marker. </summary>
        </member>
        <member name="F:iTextSharp.text.Jpeg.UNSUPPORTED_MARKER">
            <summary> This is a type of marker. </summary>
        </member>
        <member name="F:iTextSharp.text.Jpeg.NOPARAM_MARKER">
            <summary> This is a type of marker. </summary>
        </member>
        <member name="F:iTextSharp.text.Jpeg.VALID_MARKERS">
            <summary> Acceptable Jpeg markers. </summary>
        </member>
        <member name="F:iTextSharp.text.Jpeg.UNSUPPORTED_MARKERS">
            <summary> Unsupported Jpeg markers. </summary>
        </member>
        <member name="F:iTextSharp.text.Jpeg.NOPARAM_MARKERS">
            <summary> Jpeg markers without additional parameters. </summary>
        </member>
        <member name="M:iTextSharp.text.Jpeg.#ctor(iTextSharp.text.Image)">
            <summary>
            Construct a Jpeg-object, using a Image
            </summary>
            <param name="image">a Image</param>
        </member>
        <member name="M:iTextSharp.text.Jpeg.#ctor(System.Uri)">
            <summary>
            Constructs a Jpeg-object, using an Uri.
            </summary>
            <remarks>
            Deprecated, use Image.GetInstance(...) to create an Image
            </remarks>
            <param name="Uri">the Uri where the image can be found</param>
        </member>
        <member name="M:iTextSharp.text.Jpeg.#ctor(System.Byte[])">
            <summary>
            Constructs a Jpeg-object from memory.
            </summary>
            <param name="img">the memory image</param>
        </member>
        <member name="M:iTextSharp.text.Jpeg.#ctor(System.Byte[],System.Single,System.Single)">
            <summary>
            Constructs a Jpeg-object from memory.
            </summary>
            <param name="img">the memory image.</param>
            <param name="width">the width you want the image to have</param>
            <param name="height">the height you want the image to have</param>
        </member>
        <member name="M:iTextSharp.text.Jpeg.GetShort(System.IO.Stream)">
            <summary>
            Reads a short from the Stream.
            </summary>
            <param name="istr">the Stream</param>
            <returns>an int</returns>
        </member>
        <member name="M:iTextSharp.text.Jpeg.GetShortInverted(System.IO.Stream)">
            <summary>
            Reads an inverted short from the Stream.
            </summary>
            <param name="istr">the Stream</param>
            <returns>an int</returns>
        </member>
        <member name="M:iTextSharp.text.Jpeg.MarkerType(System.Int32)">
            <summary>
            Returns a type of marker.
            </summary>
            <param name="marker">an int</param>
            <returns>a type: VALID_MARKER, UNSUPPORTED_MARKER or NOPARAM_MARKER</returns>
        </member>
        <member name="M:iTextSharp.text.Jpeg.ProcessParameters">
            <summary>
            This method checks if the image is a valid JPEG and processes some parameters.
            </summary>
        </member>
    </members>
</doc>
